// AUTOGENERATED - DO NOT EDIT
// ---------------------------
// This file has been generated by
// AOSP://external/perfetto/tools/gen_merged_protos
// merging the perfetto config protos.
// This fused proto is intended to be copied in:
//  - Android tree, for statsd.
//  - Google internal repos.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.0
// source: protos/perfetto/trace/perfetto_trace.proto

package perfetto_protos

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BuiltinClock int32

const (
	BuiltinClock_BUILTIN_CLOCK_UNKNOWN          BuiltinClock = 0
	BuiltinClock_BUILTIN_CLOCK_REALTIME         BuiltinClock = 1
	BuiltinClock_BUILTIN_CLOCK_REALTIME_COARSE  BuiltinClock = 2
	BuiltinClock_BUILTIN_CLOCK_MONOTONIC        BuiltinClock = 3
	BuiltinClock_BUILTIN_CLOCK_MONOTONIC_COARSE BuiltinClock = 4
	BuiltinClock_BUILTIN_CLOCK_MONOTONIC_RAW    BuiltinClock = 5
	BuiltinClock_BUILTIN_CLOCK_BOOTTIME         BuiltinClock = 6
	BuiltinClock_BUILTIN_CLOCK_MAX_ID           BuiltinClock = 63
)

// Enum value maps for BuiltinClock.
var (
	BuiltinClock_name = map[int32]string{
		0:  "BUILTIN_CLOCK_UNKNOWN",
		1:  "BUILTIN_CLOCK_REALTIME",
		2:  "BUILTIN_CLOCK_REALTIME_COARSE",
		3:  "BUILTIN_CLOCK_MONOTONIC",
		4:  "BUILTIN_CLOCK_MONOTONIC_COARSE",
		5:  "BUILTIN_CLOCK_MONOTONIC_RAW",
		6:  "BUILTIN_CLOCK_BOOTTIME",
		63: "BUILTIN_CLOCK_MAX_ID",
	}
	BuiltinClock_value = map[string]int32{
		"BUILTIN_CLOCK_UNKNOWN":          0,
		"BUILTIN_CLOCK_REALTIME":         1,
		"BUILTIN_CLOCK_REALTIME_COARSE":  2,
		"BUILTIN_CLOCK_MONOTONIC":        3,
		"BUILTIN_CLOCK_MONOTONIC_COARSE": 4,
		"BUILTIN_CLOCK_MONOTONIC_RAW":    5,
		"BUILTIN_CLOCK_BOOTTIME":         6,
		"BUILTIN_CLOCK_MAX_ID":           63,
	}
)

func (x BuiltinClock) Enum() *BuiltinClock {
	p := new(BuiltinClock)
	*p = x
	return p
}

func (x BuiltinClock) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinClock) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[0].Descriptor()
}

func (BuiltinClock) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[0]
}

func (x BuiltinClock) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BuiltinClock) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BuiltinClock(num)
	return nil
}

// Deprecated: Use BuiltinClock.Descriptor instead.
func (BuiltinClock) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{0}
}

// Values from NDK's android/log.h.
type AndroidLogId int32

const (
	// MAIN.
	AndroidLogId_LID_DEFAULT  AndroidLogId = 0
	AndroidLogId_LID_RADIO    AndroidLogId = 1
	AndroidLogId_LID_EVENTS   AndroidLogId = 2
	AndroidLogId_LID_SYSTEM   AndroidLogId = 3
	AndroidLogId_LID_CRASH    AndroidLogId = 4
	AndroidLogId_LID_STATS    AndroidLogId = 5
	AndroidLogId_LID_SECURITY AndroidLogId = 6
	AndroidLogId_LID_KERNEL   AndroidLogId = 7
)

// Enum value maps for AndroidLogId.
var (
	AndroidLogId_name = map[int32]string{
		0: "LID_DEFAULT",
		1: "LID_RADIO",
		2: "LID_EVENTS",
		3: "LID_SYSTEM",
		4: "LID_CRASH",
		5: "LID_STATS",
		6: "LID_SECURITY",
		7: "LID_KERNEL",
	}
	AndroidLogId_value = map[string]int32{
		"LID_DEFAULT":  0,
		"LID_RADIO":    1,
		"LID_EVENTS":   2,
		"LID_SYSTEM":   3,
		"LID_CRASH":    4,
		"LID_STATS":    5,
		"LID_SECURITY": 6,
		"LID_KERNEL":   7,
	}
)

func (x AndroidLogId) Enum() *AndroidLogId {
	p := new(AndroidLogId)
	*p = x
	return p
}

func (x AndroidLogId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AndroidLogId) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[1].Descriptor()
}

func (AndroidLogId) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[1]
}

func (x AndroidLogId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AndroidLogId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AndroidLogId(num)
	return nil
}

// Deprecated: Use AndroidLogId.Descriptor instead.
func (AndroidLogId) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{1}
}

type AndroidLogPriority int32

const (
	AndroidLogPriority_PRIO_UNSPECIFIED AndroidLogPriority = 0
	// _DEFAULT, but should never be seen in logs.
	AndroidLogPriority_PRIO_UNUSED  AndroidLogPriority = 1
	AndroidLogPriority_PRIO_VERBOSE AndroidLogPriority = 2
	AndroidLogPriority_PRIO_DEBUG   AndroidLogPriority = 3
	AndroidLogPriority_PRIO_INFO    AndroidLogPriority = 4
	AndroidLogPriority_PRIO_WARN    AndroidLogPriority = 5
	AndroidLogPriority_PRIO_ERROR   AndroidLogPriority = 6
	AndroidLogPriority_PRIO_FATAL   AndroidLogPriority = 7
)

// Enum value maps for AndroidLogPriority.
var (
	AndroidLogPriority_name = map[int32]string{
		0: "PRIO_UNSPECIFIED",
		1: "PRIO_UNUSED",
		2: "PRIO_VERBOSE",
		3: "PRIO_DEBUG",
		4: "PRIO_INFO",
		5: "PRIO_WARN",
		6: "PRIO_ERROR",
		7: "PRIO_FATAL",
	}
	AndroidLogPriority_value = map[string]int32{
		"PRIO_UNSPECIFIED": 0,
		"PRIO_UNUSED":      1,
		"PRIO_VERBOSE":     2,
		"PRIO_DEBUG":       3,
		"PRIO_INFO":        4,
		"PRIO_WARN":        5,
		"PRIO_ERROR":       6,
		"PRIO_FATAL":       7,
	}
)

func (x AndroidLogPriority) Enum() *AndroidLogPriority {
	p := new(AndroidLogPriority)
	*p = x
	return p
}

func (x AndroidLogPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AndroidLogPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[2].Descriptor()
}

func (AndroidLogPriority) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[2]
}

func (x AndroidLogPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AndroidLogPriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AndroidLogPriority(num)
	return nil
}

// Deprecated: Use AndroidLogPriority.Descriptor instead.
func (AndroidLogPriority) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{2}
}

// Counter definitions for Linux's /proc/meminfo.
type MeminfoCounters int32

const (
	MeminfoCounters_MEMINFO_UNSPECIFIED        MeminfoCounters = 0
	MeminfoCounters_MEMINFO_MEM_TOTAL          MeminfoCounters = 1
	MeminfoCounters_MEMINFO_MEM_FREE           MeminfoCounters = 2
	MeminfoCounters_MEMINFO_MEM_AVAILABLE      MeminfoCounters = 3
	MeminfoCounters_MEMINFO_BUFFERS            MeminfoCounters = 4
	MeminfoCounters_MEMINFO_CACHED             MeminfoCounters = 5
	MeminfoCounters_MEMINFO_SWAP_CACHED        MeminfoCounters = 6
	MeminfoCounters_MEMINFO_ACTIVE             MeminfoCounters = 7
	MeminfoCounters_MEMINFO_INACTIVE           MeminfoCounters = 8
	MeminfoCounters_MEMINFO_ACTIVE_ANON        MeminfoCounters = 9
	MeminfoCounters_MEMINFO_INACTIVE_ANON      MeminfoCounters = 10
	MeminfoCounters_MEMINFO_ACTIVE_FILE        MeminfoCounters = 11
	MeminfoCounters_MEMINFO_INACTIVE_FILE      MeminfoCounters = 12
	MeminfoCounters_MEMINFO_UNEVICTABLE        MeminfoCounters = 13
	MeminfoCounters_MEMINFO_MLOCKED            MeminfoCounters = 14
	MeminfoCounters_MEMINFO_SWAP_TOTAL         MeminfoCounters = 15
	MeminfoCounters_MEMINFO_SWAP_FREE          MeminfoCounters = 16
	MeminfoCounters_MEMINFO_DIRTY              MeminfoCounters = 17
	MeminfoCounters_MEMINFO_WRITEBACK          MeminfoCounters = 18
	MeminfoCounters_MEMINFO_ANON_PAGES         MeminfoCounters = 19
	MeminfoCounters_MEMINFO_MAPPED             MeminfoCounters = 20
	MeminfoCounters_MEMINFO_SHMEM              MeminfoCounters = 21
	MeminfoCounters_MEMINFO_SLAB               MeminfoCounters = 22
	MeminfoCounters_MEMINFO_SLAB_RECLAIMABLE   MeminfoCounters = 23
	MeminfoCounters_MEMINFO_SLAB_UNRECLAIMABLE MeminfoCounters = 24
	MeminfoCounters_MEMINFO_KERNEL_STACK       MeminfoCounters = 25
	MeminfoCounters_MEMINFO_PAGE_TABLES        MeminfoCounters = 26
	MeminfoCounters_MEMINFO_COMMIT_LIMIT       MeminfoCounters = 27
	MeminfoCounters_MEMINFO_COMMITED_AS        MeminfoCounters = 28
	MeminfoCounters_MEMINFO_VMALLOC_TOTAL      MeminfoCounters = 29
	MeminfoCounters_MEMINFO_VMALLOC_USED       MeminfoCounters = 30
	MeminfoCounters_MEMINFO_VMALLOC_CHUNK      MeminfoCounters = 31
	MeminfoCounters_MEMINFO_CMA_TOTAL          MeminfoCounters = 32
	MeminfoCounters_MEMINFO_CMA_FREE           MeminfoCounters = 33
)

// Enum value maps for MeminfoCounters.
var (
	MeminfoCounters_name = map[int32]string{
		0:  "MEMINFO_UNSPECIFIED",
		1:  "MEMINFO_MEM_TOTAL",
		2:  "MEMINFO_MEM_FREE",
		3:  "MEMINFO_MEM_AVAILABLE",
		4:  "MEMINFO_BUFFERS",
		5:  "MEMINFO_CACHED",
		6:  "MEMINFO_SWAP_CACHED",
		7:  "MEMINFO_ACTIVE",
		8:  "MEMINFO_INACTIVE",
		9:  "MEMINFO_ACTIVE_ANON",
		10: "MEMINFO_INACTIVE_ANON",
		11: "MEMINFO_ACTIVE_FILE",
		12: "MEMINFO_INACTIVE_FILE",
		13: "MEMINFO_UNEVICTABLE",
		14: "MEMINFO_MLOCKED",
		15: "MEMINFO_SWAP_TOTAL",
		16: "MEMINFO_SWAP_FREE",
		17: "MEMINFO_DIRTY",
		18: "MEMINFO_WRITEBACK",
		19: "MEMINFO_ANON_PAGES",
		20: "MEMINFO_MAPPED",
		21: "MEMINFO_SHMEM",
		22: "MEMINFO_SLAB",
		23: "MEMINFO_SLAB_RECLAIMABLE",
		24: "MEMINFO_SLAB_UNRECLAIMABLE",
		25: "MEMINFO_KERNEL_STACK",
		26: "MEMINFO_PAGE_TABLES",
		27: "MEMINFO_COMMIT_LIMIT",
		28: "MEMINFO_COMMITED_AS",
		29: "MEMINFO_VMALLOC_TOTAL",
		30: "MEMINFO_VMALLOC_USED",
		31: "MEMINFO_VMALLOC_CHUNK",
		32: "MEMINFO_CMA_TOTAL",
		33: "MEMINFO_CMA_FREE",
	}
	MeminfoCounters_value = map[string]int32{
		"MEMINFO_UNSPECIFIED":        0,
		"MEMINFO_MEM_TOTAL":          1,
		"MEMINFO_MEM_FREE":           2,
		"MEMINFO_MEM_AVAILABLE":      3,
		"MEMINFO_BUFFERS":            4,
		"MEMINFO_CACHED":             5,
		"MEMINFO_SWAP_CACHED":        6,
		"MEMINFO_ACTIVE":             7,
		"MEMINFO_INACTIVE":           8,
		"MEMINFO_ACTIVE_ANON":        9,
		"MEMINFO_INACTIVE_ANON":      10,
		"MEMINFO_ACTIVE_FILE":        11,
		"MEMINFO_INACTIVE_FILE":      12,
		"MEMINFO_UNEVICTABLE":        13,
		"MEMINFO_MLOCKED":            14,
		"MEMINFO_SWAP_TOTAL":         15,
		"MEMINFO_SWAP_FREE":          16,
		"MEMINFO_DIRTY":              17,
		"MEMINFO_WRITEBACK":          18,
		"MEMINFO_ANON_PAGES":         19,
		"MEMINFO_MAPPED":             20,
		"MEMINFO_SHMEM":              21,
		"MEMINFO_SLAB":               22,
		"MEMINFO_SLAB_RECLAIMABLE":   23,
		"MEMINFO_SLAB_UNRECLAIMABLE": 24,
		"MEMINFO_KERNEL_STACK":       25,
		"MEMINFO_PAGE_TABLES":        26,
		"MEMINFO_COMMIT_LIMIT":       27,
		"MEMINFO_COMMITED_AS":        28,
		"MEMINFO_VMALLOC_TOTAL":      29,
		"MEMINFO_VMALLOC_USED":       30,
		"MEMINFO_VMALLOC_CHUNK":      31,
		"MEMINFO_CMA_TOTAL":          32,
		"MEMINFO_CMA_FREE":           33,
	}
)

func (x MeminfoCounters) Enum() *MeminfoCounters {
	p := new(MeminfoCounters)
	*p = x
	return p
}

func (x MeminfoCounters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeminfoCounters) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[3].Descriptor()
}

func (MeminfoCounters) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[3]
}

func (x MeminfoCounters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MeminfoCounters) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MeminfoCounters(num)
	return nil
}

// Deprecated: Use MeminfoCounters.Descriptor instead.
func (MeminfoCounters) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{3}
}

// Counter definitions for Linux's /proc/vmstat.
type VmstatCounters int32

const (
	VmstatCounters_VMSTAT_UNSPECIFIED                    VmstatCounters = 0
	VmstatCounters_VMSTAT_NR_FREE_PAGES                  VmstatCounters = 1
	VmstatCounters_VMSTAT_NR_ALLOC_BATCH                 VmstatCounters = 2
	VmstatCounters_VMSTAT_NR_INACTIVE_ANON               VmstatCounters = 3
	VmstatCounters_VMSTAT_NR_ACTIVE_ANON                 VmstatCounters = 4
	VmstatCounters_VMSTAT_NR_INACTIVE_FILE               VmstatCounters = 5
	VmstatCounters_VMSTAT_NR_ACTIVE_FILE                 VmstatCounters = 6
	VmstatCounters_VMSTAT_NR_UNEVICTABLE                 VmstatCounters = 7
	VmstatCounters_VMSTAT_NR_MLOCK                       VmstatCounters = 8
	VmstatCounters_VMSTAT_NR_ANON_PAGES                  VmstatCounters = 9
	VmstatCounters_VMSTAT_NR_MAPPED                      VmstatCounters = 10
	VmstatCounters_VMSTAT_NR_FILE_PAGES                  VmstatCounters = 11
	VmstatCounters_VMSTAT_NR_DIRTY                       VmstatCounters = 12
	VmstatCounters_VMSTAT_NR_WRITEBACK                   VmstatCounters = 13
	VmstatCounters_VMSTAT_NR_SLAB_RECLAIMABLE            VmstatCounters = 14
	VmstatCounters_VMSTAT_NR_SLAB_UNRECLAIMABLE          VmstatCounters = 15
	VmstatCounters_VMSTAT_NR_PAGE_TABLE_PAGES            VmstatCounters = 16
	VmstatCounters_VMSTAT_NR_KERNEL_STACK                VmstatCounters = 17
	VmstatCounters_VMSTAT_NR_OVERHEAD                    VmstatCounters = 18
	VmstatCounters_VMSTAT_NR_UNSTABLE                    VmstatCounters = 19
	VmstatCounters_VMSTAT_NR_BOUNCE                      VmstatCounters = 20
	VmstatCounters_VMSTAT_NR_VMSCAN_WRITE                VmstatCounters = 21
	VmstatCounters_VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM    VmstatCounters = 22
	VmstatCounters_VMSTAT_NR_WRITEBACK_TEMP              VmstatCounters = 23
	VmstatCounters_VMSTAT_NR_ISOLATED_ANON               VmstatCounters = 24
	VmstatCounters_VMSTAT_NR_ISOLATED_FILE               VmstatCounters = 25
	VmstatCounters_VMSTAT_NR_SHMEM                       VmstatCounters = 26
	VmstatCounters_VMSTAT_NR_DIRTIED                     VmstatCounters = 27
	VmstatCounters_VMSTAT_NR_WRITTEN                     VmstatCounters = 28
	VmstatCounters_VMSTAT_NR_PAGES_SCANNED               VmstatCounters = 29
	VmstatCounters_VMSTAT_WORKINGSET_REFAULT             VmstatCounters = 30
	VmstatCounters_VMSTAT_WORKINGSET_ACTIVATE            VmstatCounters = 31
	VmstatCounters_VMSTAT_WORKINGSET_NODERECLAIM         VmstatCounters = 32
	VmstatCounters_VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES  VmstatCounters = 33
	VmstatCounters_VMSTAT_NR_FREE_CMA                    VmstatCounters = 34
	VmstatCounters_VMSTAT_NR_SWAPCACHE                   VmstatCounters = 35
	VmstatCounters_VMSTAT_NR_DIRTY_THRESHOLD             VmstatCounters = 36
	VmstatCounters_VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD  VmstatCounters = 37
	VmstatCounters_VMSTAT_PGPGIN                         VmstatCounters = 38
	VmstatCounters_VMSTAT_PGPGOUT                        VmstatCounters = 39
	VmstatCounters_VMSTAT_PGPGOUTCLEAN                   VmstatCounters = 40
	VmstatCounters_VMSTAT_PSWPIN                         VmstatCounters = 41
	VmstatCounters_VMSTAT_PSWPOUT                        VmstatCounters = 42
	VmstatCounters_VMSTAT_PGALLOC_DMA                    VmstatCounters = 43
	VmstatCounters_VMSTAT_PGALLOC_NORMAL                 VmstatCounters = 44
	VmstatCounters_VMSTAT_PGALLOC_MOVABLE                VmstatCounters = 45
	VmstatCounters_VMSTAT_PGFREE                         VmstatCounters = 46
	VmstatCounters_VMSTAT_PGACTIVATE                     VmstatCounters = 47
	VmstatCounters_VMSTAT_PGDEACTIVATE                   VmstatCounters = 48
	VmstatCounters_VMSTAT_PGFAULT                        VmstatCounters = 49
	VmstatCounters_VMSTAT_PGMAJFAULT                     VmstatCounters = 50
	VmstatCounters_VMSTAT_PGREFILL_DMA                   VmstatCounters = 51
	VmstatCounters_VMSTAT_PGREFILL_NORMAL                VmstatCounters = 52
	VmstatCounters_VMSTAT_PGREFILL_MOVABLE               VmstatCounters = 53
	VmstatCounters_VMSTAT_PGSTEAL_KSWAPD_DMA             VmstatCounters = 54
	VmstatCounters_VMSTAT_PGSTEAL_KSWAPD_NORMAL          VmstatCounters = 55
	VmstatCounters_VMSTAT_PGSTEAL_KSWAPD_MOVABLE         VmstatCounters = 56
	VmstatCounters_VMSTAT_PGSTEAL_DIRECT_DMA             VmstatCounters = 57
	VmstatCounters_VMSTAT_PGSTEAL_DIRECT_NORMAL          VmstatCounters = 58
	VmstatCounters_VMSTAT_PGSTEAL_DIRECT_MOVABLE         VmstatCounters = 59
	VmstatCounters_VMSTAT_PGSCAN_KSWAPD_DMA              VmstatCounters = 60
	VmstatCounters_VMSTAT_PGSCAN_KSWAPD_NORMAL           VmstatCounters = 61
	VmstatCounters_VMSTAT_PGSCAN_KSWAPD_MOVABLE          VmstatCounters = 62
	VmstatCounters_VMSTAT_PGSCAN_DIRECT_DMA              VmstatCounters = 63
	VmstatCounters_VMSTAT_PGSCAN_DIRECT_NORMAL           VmstatCounters = 64
	VmstatCounters_VMSTAT_PGSCAN_DIRECT_MOVABLE          VmstatCounters = 65
	VmstatCounters_VMSTAT_PGSCAN_DIRECT_THROTTLE         VmstatCounters = 66
	VmstatCounters_VMSTAT_PGINODESTEAL                   VmstatCounters = 67
	VmstatCounters_VMSTAT_SLABS_SCANNED                  VmstatCounters = 68
	VmstatCounters_VMSTAT_KSWAPD_INODESTEAL              VmstatCounters = 69
	VmstatCounters_VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY   VmstatCounters = 70
	VmstatCounters_VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY  VmstatCounters = 71
	VmstatCounters_VMSTAT_PAGEOUTRUN                     VmstatCounters = 72
	VmstatCounters_VMSTAT_ALLOCSTALL                     VmstatCounters = 73
	VmstatCounters_VMSTAT_PGROTATED                      VmstatCounters = 74
	VmstatCounters_VMSTAT_DROP_PAGECACHE                 VmstatCounters = 75
	VmstatCounters_VMSTAT_DROP_SLAB                      VmstatCounters = 76
	VmstatCounters_VMSTAT_PGMIGRATE_SUCCESS              VmstatCounters = 77
	VmstatCounters_VMSTAT_PGMIGRATE_FAIL                 VmstatCounters = 78
	VmstatCounters_VMSTAT_COMPACT_MIGRATE_SCANNED        VmstatCounters = 79
	VmstatCounters_VMSTAT_COMPACT_FREE_SCANNED           VmstatCounters = 80
	VmstatCounters_VMSTAT_COMPACT_ISOLATED               VmstatCounters = 81
	VmstatCounters_VMSTAT_COMPACT_STALL                  VmstatCounters = 82
	VmstatCounters_VMSTAT_COMPACT_FAIL                   VmstatCounters = 83
	VmstatCounters_VMSTAT_COMPACT_SUCCESS                VmstatCounters = 84
	VmstatCounters_VMSTAT_COMPACT_DAEMON_WAKE            VmstatCounters = 85
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_CULLED         VmstatCounters = 86
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_SCANNED        VmstatCounters = 87
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_RESCUED        VmstatCounters = 88
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_MLOCKED        VmstatCounters = 89
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_MUNLOCKED      VmstatCounters = 90
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_CLEARED        VmstatCounters = 91
	VmstatCounters_VMSTAT_UNEVICTABLE_PGS_STRANDED       VmstatCounters = 92
	VmstatCounters_VMSTAT_NR_ZSPAGES                     VmstatCounters = 93
	VmstatCounters_VMSTAT_NR_ION_HEAP                    VmstatCounters = 94
	VmstatCounters_VMSTAT_NR_GPU_HEAP                    VmstatCounters = 95
	VmstatCounters_VMSTAT_ALLOCSTALL_DMA                 VmstatCounters = 96
	VmstatCounters_VMSTAT_ALLOCSTALL_MOVABLE             VmstatCounters = 97
	VmstatCounters_VMSTAT_ALLOCSTALL_NORMAL              VmstatCounters = 98
	VmstatCounters_VMSTAT_COMPACT_DAEMON_FREE_SCANNED    VmstatCounters = 99
	VmstatCounters_VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED VmstatCounters = 100
	VmstatCounters_VMSTAT_NR_FASTRPC                     VmstatCounters = 101
	VmstatCounters_VMSTAT_NR_INDIRECTLY_RECLAIMABLE      VmstatCounters = 102
	VmstatCounters_VMSTAT_NR_ION_HEAP_POOL               VmstatCounters = 103
	VmstatCounters_VMSTAT_NR_KERNEL_MISC_RECLAIMABLE     VmstatCounters = 104
	VmstatCounters_VMSTAT_NR_SHADOW_CALL_STACK_BYTES     VmstatCounters = 105
	VmstatCounters_VMSTAT_NR_SHMEM_HUGEPAGES             VmstatCounters = 106
	VmstatCounters_VMSTAT_NR_SHMEM_PMDMAPPED             VmstatCounters = 107
	VmstatCounters_VMSTAT_NR_UNRECLAIMABLE_PAGES         VmstatCounters = 108
	VmstatCounters_VMSTAT_NR_ZONE_ACTIVE_ANON            VmstatCounters = 109
	VmstatCounters_VMSTAT_NR_ZONE_ACTIVE_FILE            VmstatCounters = 110
	VmstatCounters_VMSTAT_NR_ZONE_INACTIVE_ANON          VmstatCounters = 111
	VmstatCounters_VMSTAT_NR_ZONE_INACTIVE_FILE          VmstatCounters = 112
	VmstatCounters_VMSTAT_NR_ZONE_UNEVICTABLE            VmstatCounters = 113
	VmstatCounters_VMSTAT_NR_ZONE_WRITE_PENDING          VmstatCounters = 114
	VmstatCounters_VMSTAT_OOM_KILL                       VmstatCounters = 115
	VmstatCounters_VMSTAT_PGLAZYFREE                     VmstatCounters = 116
	VmstatCounters_VMSTAT_PGLAZYFREED                    VmstatCounters = 117
	VmstatCounters_VMSTAT_PGREFILL                       VmstatCounters = 118
	VmstatCounters_VMSTAT_PGSCAN_DIRECT                  VmstatCounters = 119
	VmstatCounters_VMSTAT_PGSCAN_KSWAPD                  VmstatCounters = 120
	VmstatCounters_VMSTAT_PGSKIP_DMA                     VmstatCounters = 121
	VmstatCounters_VMSTAT_PGSKIP_MOVABLE                 VmstatCounters = 122
	VmstatCounters_VMSTAT_PGSKIP_NORMAL                  VmstatCounters = 123
	VmstatCounters_VMSTAT_PGSTEAL_DIRECT                 VmstatCounters = 124
	VmstatCounters_VMSTAT_PGSTEAL_KSWAPD                 VmstatCounters = 125
	VmstatCounters_VMSTAT_SWAP_RA                        VmstatCounters = 126
	VmstatCounters_VMSTAT_SWAP_RA_HIT                    VmstatCounters = 127
	VmstatCounters_VMSTAT_WORKINGSET_RESTORE             VmstatCounters = 128
)

// Enum value maps for VmstatCounters.
var (
	VmstatCounters_name = map[int32]string{
		0:   "VMSTAT_UNSPECIFIED",
		1:   "VMSTAT_NR_FREE_PAGES",
		2:   "VMSTAT_NR_ALLOC_BATCH",
		3:   "VMSTAT_NR_INACTIVE_ANON",
		4:   "VMSTAT_NR_ACTIVE_ANON",
		5:   "VMSTAT_NR_INACTIVE_FILE",
		6:   "VMSTAT_NR_ACTIVE_FILE",
		7:   "VMSTAT_NR_UNEVICTABLE",
		8:   "VMSTAT_NR_MLOCK",
		9:   "VMSTAT_NR_ANON_PAGES",
		10:  "VMSTAT_NR_MAPPED",
		11:  "VMSTAT_NR_FILE_PAGES",
		12:  "VMSTAT_NR_DIRTY",
		13:  "VMSTAT_NR_WRITEBACK",
		14:  "VMSTAT_NR_SLAB_RECLAIMABLE",
		15:  "VMSTAT_NR_SLAB_UNRECLAIMABLE",
		16:  "VMSTAT_NR_PAGE_TABLE_PAGES",
		17:  "VMSTAT_NR_KERNEL_STACK",
		18:  "VMSTAT_NR_OVERHEAD",
		19:  "VMSTAT_NR_UNSTABLE",
		20:  "VMSTAT_NR_BOUNCE",
		21:  "VMSTAT_NR_VMSCAN_WRITE",
		22:  "VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM",
		23:  "VMSTAT_NR_WRITEBACK_TEMP",
		24:  "VMSTAT_NR_ISOLATED_ANON",
		25:  "VMSTAT_NR_ISOLATED_FILE",
		26:  "VMSTAT_NR_SHMEM",
		27:  "VMSTAT_NR_DIRTIED",
		28:  "VMSTAT_NR_WRITTEN",
		29:  "VMSTAT_NR_PAGES_SCANNED",
		30:  "VMSTAT_WORKINGSET_REFAULT",
		31:  "VMSTAT_WORKINGSET_ACTIVATE",
		32:  "VMSTAT_WORKINGSET_NODERECLAIM",
		33:  "VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES",
		34:  "VMSTAT_NR_FREE_CMA",
		35:  "VMSTAT_NR_SWAPCACHE",
		36:  "VMSTAT_NR_DIRTY_THRESHOLD",
		37:  "VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD",
		38:  "VMSTAT_PGPGIN",
		39:  "VMSTAT_PGPGOUT",
		40:  "VMSTAT_PGPGOUTCLEAN",
		41:  "VMSTAT_PSWPIN",
		42:  "VMSTAT_PSWPOUT",
		43:  "VMSTAT_PGALLOC_DMA",
		44:  "VMSTAT_PGALLOC_NORMAL",
		45:  "VMSTAT_PGALLOC_MOVABLE",
		46:  "VMSTAT_PGFREE",
		47:  "VMSTAT_PGACTIVATE",
		48:  "VMSTAT_PGDEACTIVATE",
		49:  "VMSTAT_PGFAULT",
		50:  "VMSTAT_PGMAJFAULT",
		51:  "VMSTAT_PGREFILL_DMA",
		52:  "VMSTAT_PGREFILL_NORMAL",
		53:  "VMSTAT_PGREFILL_MOVABLE",
		54:  "VMSTAT_PGSTEAL_KSWAPD_DMA",
		55:  "VMSTAT_PGSTEAL_KSWAPD_NORMAL",
		56:  "VMSTAT_PGSTEAL_KSWAPD_MOVABLE",
		57:  "VMSTAT_PGSTEAL_DIRECT_DMA",
		58:  "VMSTAT_PGSTEAL_DIRECT_NORMAL",
		59:  "VMSTAT_PGSTEAL_DIRECT_MOVABLE",
		60:  "VMSTAT_PGSCAN_KSWAPD_DMA",
		61:  "VMSTAT_PGSCAN_KSWAPD_NORMAL",
		62:  "VMSTAT_PGSCAN_KSWAPD_MOVABLE",
		63:  "VMSTAT_PGSCAN_DIRECT_DMA",
		64:  "VMSTAT_PGSCAN_DIRECT_NORMAL",
		65:  "VMSTAT_PGSCAN_DIRECT_MOVABLE",
		66:  "VMSTAT_PGSCAN_DIRECT_THROTTLE",
		67:  "VMSTAT_PGINODESTEAL",
		68:  "VMSTAT_SLABS_SCANNED",
		69:  "VMSTAT_KSWAPD_INODESTEAL",
		70:  "VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY",
		71:  "VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY",
		72:  "VMSTAT_PAGEOUTRUN",
		73:  "VMSTAT_ALLOCSTALL",
		74:  "VMSTAT_PGROTATED",
		75:  "VMSTAT_DROP_PAGECACHE",
		76:  "VMSTAT_DROP_SLAB",
		77:  "VMSTAT_PGMIGRATE_SUCCESS",
		78:  "VMSTAT_PGMIGRATE_FAIL",
		79:  "VMSTAT_COMPACT_MIGRATE_SCANNED",
		80:  "VMSTAT_COMPACT_FREE_SCANNED",
		81:  "VMSTAT_COMPACT_ISOLATED",
		82:  "VMSTAT_COMPACT_STALL",
		83:  "VMSTAT_COMPACT_FAIL",
		84:  "VMSTAT_COMPACT_SUCCESS",
		85:  "VMSTAT_COMPACT_DAEMON_WAKE",
		86:  "VMSTAT_UNEVICTABLE_PGS_CULLED",
		87:  "VMSTAT_UNEVICTABLE_PGS_SCANNED",
		88:  "VMSTAT_UNEVICTABLE_PGS_RESCUED",
		89:  "VMSTAT_UNEVICTABLE_PGS_MLOCKED",
		90:  "VMSTAT_UNEVICTABLE_PGS_MUNLOCKED",
		91:  "VMSTAT_UNEVICTABLE_PGS_CLEARED",
		92:  "VMSTAT_UNEVICTABLE_PGS_STRANDED",
		93:  "VMSTAT_NR_ZSPAGES",
		94:  "VMSTAT_NR_ION_HEAP",
		95:  "VMSTAT_NR_GPU_HEAP",
		96:  "VMSTAT_ALLOCSTALL_DMA",
		97:  "VMSTAT_ALLOCSTALL_MOVABLE",
		98:  "VMSTAT_ALLOCSTALL_NORMAL",
		99:  "VMSTAT_COMPACT_DAEMON_FREE_SCANNED",
		100: "VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED",
		101: "VMSTAT_NR_FASTRPC",
		102: "VMSTAT_NR_INDIRECTLY_RECLAIMABLE",
		103: "VMSTAT_NR_ION_HEAP_POOL",
		104: "VMSTAT_NR_KERNEL_MISC_RECLAIMABLE",
		105: "VMSTAT_NR_SHADOW_CALL_STACK_BYTES",
		106: "VMSTAT_NR_SHMEM_HUGEPAGES",
		107: "VMSTAT_NR_SHMEM_PMDMAPPED",
		108: "VMSTAT_NR_UNRECLAIMABLE_PAGES",
		109: "VMSTAT_NR_ZONE_ACTIVE_ANON",
		110: "VMSTAT_NR_ZONE_ACTIVE_FILE",
		111: "VMSTAT_NR_ZONE_INACTIVE_ANON",
		112: "VMSTAT_NR_ZONE_INACTIVE_FILE",
		113: "VMSTAT_NR_ZONE_UNEVICTABLE",
		114: "VMSTAT_NR_ZONE_WRITE_PENDING",
		115: "VMSTAT_OOM_KILL",
		116: "VMSTAT_PGLAZYFREE",
		117: "VMSTAT_PGLAZYFREED",
		118: "VMSTAT_PGREFILL",
		119: "VMSTAT_PGSCAN_DIRECT",
		120: "VMSTAT_PGSCAN_KSWAPD",
		121: "VMSTAT_PGSKIP_DMA",
		122: "VMSTAT_PGSKIP_MOVABLE",
		123: "VMSTAT_PGSKIP_NORMAL",
		124: "VMSTAT_PGSTEAL_DIRECT",
		125: "VMSTAT_PGSTEAL_KSWAPD",
		126: "VMSTAT_SWAP_RA",
		127: "VMSTAT_SWAP_RA_HIT",
		128: "VMSTAT_WORKINGSET_RESTORE",
	}
	VmstatCounters_value = map[string]int32{
		"VMSTAT_UNSPECIFIED":                    0,
		"VMSTAT_NR_FREE_PAGES":                  1,
		"VMSTAT_NR_ALLOC_BATCH":                 2,
		"VMSTAT_NR_INACTIVE_ANON":               3,
		"VMSTAT_NR_ACTIVE_ANON":                 4,
		"VMSTAT_NR_INACTIVE_FILE":               5,
		"VMSTAT_NR_ACTIVE_FILE":                 6,
		"VMSTAT_NR_UNEVICTABLE":                 7,
		"VMSTAT_NR_MLOCK":                       8,
		"VMSTAT_NR_ANON_PAGES":                  9,
		"VMSTAT_NR_MAPPED":                      10,
		"VMSTAT_NR_FILE_PAGES":                  11,
		"VMSTAT_NR_DIRTY":                       12,
		"VMSTAT_NR_WRITEBACK":                   13,
		"VMSTAT_NR_SLAB_RECLAIMABLE":            14,
		"VMSTAT_NR_SLAB_UNRECLAIMABLE":          15,
		"VMSTAT_NR_PAGE_TABLE_PAGES":            16,
		"VMSTAT_NR_KERNEL_STACK":                17,
		"VMSTAT_NR_OVERHEAD":                    18,
		"VMSTAT_NR_UNSTABLE":                    19,
		"VMSTAT_NR_BOUNCE":                      20,
		"VMSTAT_NR_VMSCAN_WRITE":                21,
		"VMSTAT_NR_VMSCAN_IMMEDIATE_RECLAIM":    22,
		"VMSTAT_NR_WRITEBACK_TEMP":              23,
		"VMSTAT_NR_ISOLATED_ANON":               24,
		"VMSTAT_NR_ISOLATED_FILE":               25,
		"VMSTAT_NR_SHMEM":                       26,
		"VMSTAT_NR_DIRTIED":                     27,
		"VMSTAT_NR_WRITTEN":                     28,
		"VMSTAT_NR_PAGES_SCANNED":               29,
		"VMSTAT_WORKINGSET_REFAULT":             30,
		"VMSTAT_WORKINGSET_ACTIVATE":            31,
		"VMSTAT_WORKINGSET_NODERECLAIM":         32,
		"VMSTAT_NR_ANON_TRANSPARENT_HUGEPAGES":  33,
		"VMSTAT_NR_FREE_CMA":                    34,
		"VMSTAT_NR_SWAPCACHE":                   35,
		"VMSTAT_NR_DIRTY_THRESHOLD":             36,
		"VMSTAT_NR_DIRTY_BACKGROUND_THRESHOLD":  37,
		"VMSTAT_PGPGIN":                         38,
		"VMSTAT_PGPGOUT":                        39,
		"VMSTAT_PGPGOUTCLEAN":                   40,
		"VMSTAT_PSWPIN":                         41,
		"VMSTAT_PSWPOUT":                        42,
		"VMSTAT_PGALLOC_DMA":                    43,
		"VMSTAT_PGALLOC_NORMAL":                 44,
		"VMSTAT_PGALLOC_MOVABLE":                45,
		"VMSTAT_PGFREE":                         46,
		"VMSTAT_PGACTIVATE":                     47,
		"VMSTAT_PGDEACTIVATE":                   48,
		"VMSTAT_PGFAULT":                        49,
		"VMSTAT_PGMAJFAULT":                     50,
		"VMSTAT_PGREFILL_DMA":                   51,
		"VMSTAT_PGREFILL_NORMAL":                52,
		"VMSTAT_PGREFILL_MOVABLE":               53,
		"VMSTAT_PGSTEAL_KSWAPD_DMA":             54,
		"VMSTAT_PGSTEAL_KSWAPD_NORMAL":          55,
		"VMSTAT_PGSTEAL_KSWAPD_MOVABLE":         56,
		"VMSTAT_PGSTEAL_DIRECT_DMA":             57,
		"VMSTAT_PGSTEAL_DIRECT_NORMAL":          58,
		"VMSTAT_PGSTEAL_DIRECT_MOVABLE":         59,
		"VMSTAT_PGSCAN_KSWAPD_DMA":              60,
		"VMSTAT_PGSCAN_KSWAPD_NORMAL":           61,
		"VMSTAT_PGSCAN_KSWAPD_MOVABLE":          62,
		"VMSTAT_PGSCAN_DIRECT_DMA":              63,
		"VMSTAT_PGSCAN_DIRECT_NORMAL":           64,
		"VMSTAT_PGSCAN_DIRECT_MOVABLE":          65,
		"VMSTAT_PGSCAN_DIRECT_THROTTLE":         66,
		"VMSTAT_PGINODESTEAL":                   67,
		"VMSTAT_SLABS_SCANNED":                  68,
		"VMSTAT_KSWAPD_INODESTEAL":              69,
		"VMSTAT_KSWAPD_LOW_WMARK_HIT_QUICKLY":   70,
		"VMSTAT_KSWAPD_HIGH_WMARK_HIT_QUICKLY":  71,
		"VMSTAT_PAGEOUTRUN":                     72,
		"VMSTAT_ALLOCSTALL":                     73,
		"VMSTAT_PGROTATED":                      74,
		"VMSTAT_DROP_PAGECACHE":                 75,
		"VMSTAT_DROP_SLAB":                      76,
		"VMSTAT_PGMIGRATE_SUCCESS":              77,
		"VMSTAT_PGMIGRATE_FAIL":                 78,
		"VMSTAT_COMPACT_MIGRATE_SCANNED":        79,
		"VMSTAT_COMPACT_FREE_SCANNED":           80,
		"VMSTAT_COMPACT_ISOLATED":               81,
		"VMSTAT_COMPACT_STALL":                  82,
		"VMSTAT_COMPACT_FAIL":                   83,
		"VMSTAT_COMPACT_SUCCESS":                84,
		"VMSTAT_COMPACT_DAEMON_WAKE":            85,
		"VMSTAT_UNEVICTABLE_PGS_CULLED":         86,
		"VMSTAT_UNEVICTABLE_PGS_SCANNED":        87,
		"VMSTAT_UNEVICTABLE_PGS_RESCUED":        88,
		"VMSTAT_UNEVICTABLE_PGS_MLOCKED":        89,
		"VMSTAT_UNEVICTABLE_PGS_MUNLOCKED":      90,
		"VMSTAT_UNEVICTABLE_PGS_CLEARED":        91,
		"VMSTAT_UNEVICTABLE_PGS_STRANDED":       92,
		"VMSTAT_NR_ZSPAGES":                     93,
		"VMSTAT_NR_ION_HEAP":                    94,
		"VMSTAT_NR_GPU_HEAP":                    95,
		"VMSTAT_ALLOCSTALL_DMA":                 96,
		"VMSTAT_ALLOCSTALL_MOVABLE":             97,
		"VMSTAT_ALLOCSTALL_NORMAL":              98,
		"VMSTAT_COMPACT_DAEMON_FREE_SCANNED":    99,
		"VMSTAT_COMPACT_DAEMON_MIGRATE_SCANNED": 100,
		"VMSTAT_NR_FASTRPC":                     101,
		"VMSTAT_NR_INDIRECTLY_RECLAIMABLE":      102,
		"VMSTAT_NR_ION_HEAP_POOL":               103,
		"VMSTAT_NR_KERNEL_MISC_RECLAIMABLE":     104,
		"VMSTAT_NR_SHADOW_CALL_STACK_BYTES":     105,
		"VMSTAT_NR_SHMEM_HUGEPAGES":             106,
		"VMSTAT_NR_SHMEM_PMDMAPPED":             107,
		"VMSTAT_NR_UNRECLAIMABLE_PAGES":         108,
		"VMSTAT_NR_ZONE_ACTIVE_ANON":            109,
		"VMSTAT_NR_ZONE_ACTIVE_FILE":            110,
		"VMSTAT_NR_ZONE_INACTIVE_ANON":          111,
		"VMSTAT_NR_ZONE_INACTIVE_FILE":          112,
		"VMSTAT_NR_ZONE_UNEVICTABLE":            113,
		"VMSTAT_NR_ZONE_WRITE_PENDING":          114,
		"VMSTAT_OOM_KILL":                       115,
		"VMSTAT_PGLAZYFREE":                     116,
		"VMSTAT_PGLAZYFREED":                    117,
		"VMSTAT_PGREFILL":                       118,
		"VMSTAT_PGSCAN_DIRECT":                  119,
		"VMSTAT_PGSCAN_KSWAPD":                  120,
		"VMSTAT_PGSKIP_DMA":                     121,
		"VMSTAT_PGSKIP_MOVABLE":                 122,
		"VMSTAT_PGSKIP_NORMAL":                  123,
		"VMSTAT_PGSTEAL_DIRECT":                 124,
		"VMSTAT_PGSTEAL_KSWAPD":                 125,
		"VMSTAT_SWAP_RA":                        126,
		"VMSTAT_SWAP_RA_HIT":                    127,
		"VMSTAT_WORKINGSET_RESTORE":             128,
	}
)

func (x VmstatCounters) Enum() *VmstatCounters {
	p := new(VmstatCounters)
	*p = x
	return p
}

func (x VmstatCounters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VmstatCounters) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[4].Descriptor()
}

func (VmstatCounters) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[4]
}

func (x VmstatCounters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VmstatCounters) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VmstatCounters(num)
	return nil
}

// Deprecated: Use VmstatCounters.Descriptor instead.
func (VmstatCounters) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{4}
}

type ChromeCompositorSchedulerAction int32

const (
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_UNSPECIFIED                                ChromeCompositorSchedulerAction = 0
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NONE                                       ChromeCompositorSchedulerAction = 1
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME                      ChromeCompositorSchedulerAction = 2
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_COMMIT                                     ChromeCompositorSchedulerAction = 3
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE                         ChromeCompositorSchedulerAction = 4
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE                           ChromeCompositorSchedulerAction = 5
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_DRAW_FORCED                                ChromeCompositorSchedulerAction = 6
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_DRAW_ABORT                                 ChromeCompositorSchedulerAction = 7
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION       ChromeCompositorSchedulerAction = 8
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_PREPARE_TILES                              ChromeCompositorSchedulerAction = 9
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK           ChromeCompositorSchedulerAction = 10
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION             ChromeCompositorSchedulerAction = 11
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL ChromeCompositorSchedulerAction = 12
	ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON  ChromeCompositorSchedulerAction = 13
)

// Enum value maps for ChromeCompositorSchedulerAction.
var (
	ChromeCompositorSchedulerAction_name = map[int32]string{
		0:  "CC_SCHEDULER_ACTION_UNSPECIFIED",
		1:  "CC_SCHEDULER_ACTION_NONE",
		2:  "CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME",
		3:  "CC_SCHEDULER_ACTION_COMMIT",
		4:  "CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE",
		5:  "CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE",
		6:  "CC_SCHEDULER_ACTION_DRAW_FORCED",
		7:  "CC_SCHEDULER_ACTION_DRAW_ABORT",
		8:  "CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION",
		9:  "CC_SCHEDULER_ACTION_PREPARE_TILES",
		10: "CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK",
		11: "CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION",
		12: "CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL",
		13: "CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON",
	}
	ChromeCompositorSchedulerAction_value = map[string]int32{
		"CC_SCHEDULER_ACTION_UNSPECIFIED":                                0,
		"CC_SCHEDULER_ACTION_NONE":                                       1,
		"CC_SCHEDULER_ACTION_SEND_BEGIN_MAIN_FRAME":                      2,
		"CC_SCHEDULER_ACTION_COMMIT":                                     3,
		"CC_SCHEDULER_ACTION_ACTIVATE_SYNC_TREE":                         4,
		"CC_SCHEDULER_ACTION_DRAW_IF_POSSIBLE":                           5,
		"CC_SCHEDULER_ACTION_DRAW_FORCED":                                6,
		"CC_SCHEDULER_ACTION_DRAW_ABORT":                                 7,
		"CC_SCHEDULER_ACTION_BEGIN_LAYER_TREE_FRAME_SINK_CREATION":       8,
		"CC_SCHEDULER_ACTION_PREPARE_TILES":                              9,
		"CC_SCHEDULER_ACTION_INVALIDATE_LAYER_TREE_FRAME_SINK":           10,
		"CC_SCHEDULER_ACTION_PERFORM_IMPL_SIDE_INVALIDATION":             11,
		"CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_UNTIL": 12,
		"CC_SCHEDULER_ACTION_NOTIFY_BEGIN_MAIN_FRAME_NOT_EXPECTED_SOON":  13,
	}
)

func (x ChromeCompositorSchedulerAction) Enum() *ChromeCompositorSchedulerAction {
	p := new(ChromeCompositorSchedulerAction)
	*p = x
	return p
}

func (x ChromeCompositorSchedulerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorSchedulerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[5].Descriptor()
}

func (ChromeCompositorSchedulerAction) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[5]
}

func (x ChromeCompositorSchedulerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorSchedulerAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorSchedulerAction(num)
	return nil
}

// Deprecated: Use ChromeCompositorSchedulerAction.Descriptor instead.
func (ChromeCompositorSchedulerAction) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{5}
}

// RAIL Mode is an indication of the kind of work that a Renderer is currently
// performing which is in turn used to prioritise work accordingly.
// A fuller description of these modes can be found https://web.dev/rail/
type ChromeRAILMode int32

const (
	ChromeRAILMode_RAIL_MODE_NONE      ChromeRAILMode = 0
	ChromeRAILMode_RAIL_MODE_RESPONSE  ChromeRAILMode = 1
	ChromeRAILMode_RAIL_MODE_ANIMATION ChromeRAILMode = 2
	ChromeRAILMode_RAIL_MODE_IDLE      ChromeRAILMode = 3
	ChromeRAILMode_RAIL_MODE_LOAD      ChromeRAILMode = 4
)

// Enum value maps for ChromeRAILMode.
var (
	ChromeRAILMode_name = map[int32]string{
		0: "RAIL_MODE_NONE",
		1: "RAIL_MODE_RESPONSE",
		2: "RAIL_MODE_ANIMATION",
		3: "RAIL_MODE_IDLE",
		4: "RAIL_MODE_LOAD",
	}
	ChromeRAILMode_value = map[string]int32{
		"RAIL_MODE_NONE":      0,
		"RAIL_MODE_RESPONSE":  1,
		"RAIL_MODE_ANIMATION": 2,
		"RAIL_MODE_IDLE":      3,
		"RAIL_MODE_LOAD":      4,
	}
)

func (x ChromeRAILMode) Enum() *ChromeRAILMode {
	p := new(ChromeRAILMode)
	*p = x
	return p
}

func (x ChromeRAILMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeRAILMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[6].Descriptor()
}

func (ChromeRAILMode) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[6]
}

func (x ChromeRAILMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeRAILMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeRAILMode(num)
	return nil
}

// Deprecated: Use ChromeRAILMode.Descriptor instead.
func (ChromeRAILMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{6}
}

// Logical groups for a counter.  This is used in the UI to present the
// related counters together.
type GpuCounterDescriptor_GpuCounterGroup int32

const (
	GpuCounterDescriptor_UNCLASSIFIED GpuCounterDescriptor_GpuCounterGroup = 0
	GpuCounterDescriptor_SYSTEM       GpuCounterDescriptor_GpuCounterGroup = 1
	GpuCounterDescriptor_VERTICES     GpuCounterDescriptor_GpuCounterGroup = 2
	GpuCounterDescriptor_FRAGMENTS    GpuCounterDescriptor_GpuCounterGroup = 3
	GpuCounterDescriptor_PRIMITIVES   GpuCounterDescriptor_GpuCounterGroup = 4
	// Includes counters relating to caching and bandwidth.
	GpuCounterDescriptor_MEMORY  GpuCounterDescriptor_GpuCounterGroup = 5
	GpuCounterDescriptor_COMPUTE GpuCounterDescriptor_GpuCounterGroup = 6
)

// Enum value maps for GpuCounterDescriptor_GpuCounterGroup.
var (
	GpuCounterDescriptor_GpuCounterGroup_name = map[int32]string{
		0: "UNCLASSIFIED",
		1: "SYSTEM",
		2: "VERTICES",
		3: "FRAGMENTS",
		4: "PRIMITIVES",
		5: "MEMORY",
		6: "COMPUTE",
	}
	GpuCounterDescriptor_GpuCounterGroup_value = map[string]int32{
		"UNCLASSIFIED": 0,
		"SYSTEM":       1,
		"VERTICES":     2,
		"FRAGMENTS":    3,
		"PRIMITIVES":   4,
		"MEMORY":       5,
		"COMPUTE":      6,
	}
)

func (x GpuCounterDescriptor_GpuCounterGroup) Enum() *GpuCounterDescriptor_GpuCounterGroup {
	p := new(GpuCounterDescriptor_GpuCounterGroup)
	*p = x
	return p
}

func (x GpuCounterDescriptor_GpuCounterGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpuCounterDescriptor_GpuCounterGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[7].Descriptor()
}

func (GpuCounterDescriptor_GpuCounterGroup) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[7]
}

func (x GpuCounterDescriptor_GpuCounterGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GpuCounterDescriptor_GpuCounterGroup) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GpuCounterDescriptor_GpuCounterGroup(num)
	return nil
}

// Deprecated: Use GpuCounterDescriptor_GpuCounterGroup.Descriptor instead.
func (GpuCounterDescriptor_GpuCounterGroup) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{0, 0}
}

// next id: 41
type GpuCounterDescriptor_MeasureUnit int32

const (
	GpuCounterDescriptor_NONE        GpuCounterDescriptor_MeasureUnit = 0
	GpuCounterDescriptor_BIT         GpuCounterDescriptor_MeasureUnit = 1
	GpuCounterDescriptor_KILOBIT     GpuCounterDescriptor_MeasureUnit = 2
	GpuCounterDescriptor_MEGABIT     GpuCounterDescriptor_MeasureUnit = 3
	GpuCounterDescriptor_GIGABIT     GpuCounterDescriptor_MeasureUnit = 4
	GpuCounterDescriptor_TERABIT     GpuCounterDescriptor_MeasureUnit = 5
	GpuCounterDescriptor_PETABIT     GpuCounterDescriptor_MeasureUnit = 6
	GpuCounterDescriptor_BYTE        GpuCounterDescriptor_MeasureUnit = 7
	GpuCounterDescriptor_KILOBYTE    GpuCounterDescriptor_MeasureUnit = 8
	GpuCounterDescriptor_MEGABYTE    GpuCounterDescriptor_MeasureUnit = 9
	GpuCounterDescriptor_GIGABYTE    GpuCounterDescriptor_MeasureUnit = 10
	GpuCounterDescriptor_TERABYTE    GpuCounterDescriptor_MeasureUnit = 11
	GpuCounterDescriptor_PETABYTE    GpuCounterDescriptor_MeasureUnit = 12
	GpuCounterDescriptor_HERTZ       GpuCounterDescriptor_MeasureUnit = 13
	GpuCounterDescriptor_KILOHERTZ   GpuCounterDescriptor_MeasureUnit = 14
	GpuCounterDescriptor_MEGAHERTZ   GpuCounterDescriptor_MeasureUnit = 15
	GpuCounterDescriptor_GIGAHERTZ   GpuCounterDescriptor_MeasureUnit = 16
	GpuCounterDescriptor_TERAHERTZ   GpuCounterDescriptor_MeasureUnit = 17
	GpuCounterDescriptor_PETAHERTZ   GpuCounterDescriptor_MeasureUnit = 18
	GpuCounterDescriptor_NANOSECOND  GpuCounterDescriptor_MeasureUnit = 19
	GpuCounterDescriptor_MICROSECOND GpuCounterDescriptor_MeasureUnit = 20
	GpuCounterDescriptor_MILLISECOND GpuCounterDescriptor_MeasureUnit = 21
	GpuCounterDescriptor_SECOND      GpuCounterDescriptor_MeasureUnit = 22
	GpuCounterDescriptor_MINUTE      GpuCounterDescriptor_MeasureUnit = 23
	GpuCounterDescriptor_HOUR        GpuCounterDescriptor_MeasureUnit = 24
	GpuCounterDescriptor_VERTEX      GpuCounterDescriptor_MeasureUnit = 25
	GpuCounterDescriptor_PIXEL       GpuCounterDescriptor_MeasureUnit = 26
	GpuCounterDescriptor_TRIANGLE    GpuCounterDescriptor_MeasureUnit = 27
	GpuCounterDescriptor_PRIMITIVE   GpuCounterDescriptor_MeasureUnit = 38
	GpuCounterDescriptor_FRAGMENT    GpuCounterDescriptor_MeasureUnit = 39
	GpuCounterDescriptor_MILLIWATT   GpuCounterDescriptor_MeasureUnit = 28
	GpuCounterDescriptor_WATT        GpuCounterDescriptor_MeasureUnit = 29
	GpuCounterDescriptor_KILOWATT    GpuCounterDescriptor_MeasureUnit = 30
	GpuCounterDescriptor_JOULE       GpuCounterDescriptor_MeasureUnit = 31
	GpuCounterDescriptor_VOLT        GpuCounterDescriptor_MeasureUnit = 32
	GpuCounterDescriptor_AMPERE      GpuCounterDescriptor_MeasureUnit = 33
	GpuCounterDescriptor_CELSIUS     GpuCounterDescriptor_MeasureUnit = 34
	GpuCounterDescriptor_FAHRENHEIT  GpuCounterDescriptor_MeasureUnit = 35
	GpuCounterDescriptor_KELVIN      GpuCounterDescriptor_MeasureUnit = 36
	// Values should be out of 100.
	GpuCounterDescriptor_PERCENT     GpuCounterDescriptor_MeasureUnit = 37
	GpuCounterDescriptor_INSTRUCTION GpuCounterDescriptor_MeasureUnit = 40
)

// Enum value maps for GpuCounterDescriptor_MeasureUnit.
var (
	GpuCounterDescriptor_MeasureUnit_name = map[int32]string{
		0:  "NONE",
		1:  "BIT",
		2:  "KILOBIT",
		3:  "MEGABIT",
		4:  "GIGABIT",
		5:  "TERABIT",
		6:  "PETABIT",
		7:  "BYTE",
		8:  "KILOBYTE",
		9:  "MEGABYTE",
		10: "GIGABYTE",
		11: "TERABYTE",
		12: "PETABYTE",
		13: "HERTZ",
		14: "KILOHERTZ",
		15: "MEGAHERTZ",
		16: "GIGAHERTZ",
		17: "TERAHERTZ",
		18: "PETAHERTZ",
		19: "NANOSECOND",
		20: "MICROSECOND",
		21: "MILLISECOND",
		22: "SECOND",
		23: "MINUTE",
		24: "HOUR",
		25: "VERTEX",
		26: "PIXEL",
		27: "TRIANGLE",
		38: "PRIMITIVE",
		39: "FRAGMENT",
		28: "MILLIWATT",
		29: "WATT",
		30: "KILOWATT",
		31: "JOULE",
		32: "VOLT",
		33: "AMPERE",
		34: "CELSIUS",
		35: "FAHRENHEIT",
		36: "KELVIN",
		37: "PERCENT",
		40: "INSTRUCTION",
	}
	GpuCounterDescriptor_MeasureUnit_value = map[string]int32{
		"NONE":        0,
		"BIT":         1,
		"KILOBIT":     2,
		"MEGABIT":     3,
		"GIGABIT":     4,
		"TERABIT":     5,
		"PETABIT":     6,
		"BYTE":        7,
		"KILOBYTE":    8,
		"MEGABYTE":    9,
		"GIGABYTE":    10,
		"TERABYTE":    11,
		"PETABYTE":    12,
		"HERTZ":       13,
		"KILOHERTZ":   14,
		"MEGAHERTZ":   15,
		"GIGAHERTZ":   16,
		"TERAHERTZ":   17,
		"PETAHERTZ":   18,
		"NANOSECOND":  19,
		"MICROSECOND": 20,
		"MILLISECOND": 21,
		"SECOND":      22,
		"MINUTE":      23,
		"HOUR":        24,
		"VERTEX":      25,
		"PIXEL":       26,
		"TRIANGLE":    27,
		"PRIMITIVE":   38,
		"FRAGMENT":    39,
		"MILLIWATT":   28,
		"WATT":        29,
		"KILOWATT":    30,
		"JOULE":       31,
		"VOLT":        32,
		"AMPERE":      33,
		"CELSIUS":     34,
		"FAHRENHEIT":  35,
		"KELVIN":      36,
		"PERCENT":     37,
		"INSTRUCTION": 40,
	}
)

func (x GpuCounterDescriptor_MeasureUnit) Enum() *GpuCounterDescriptor_MeasureUnit {
	p := new(GpuCounterDescriptor_MeasureUnit)
	*p = x
	return p
}

func (x GpuCounterDescriptor_MeasureUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpuCounterDescriptor_MeasureUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[8].Descriptor()
}

func (GpuCounterDescriptor_MeasureUnit) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[8]
}

func (x GpuCounterDescriptor_MeasureUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GpuCounterDescriptor_MeasureUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GpuCounterDescriptor_MeasureUnit(num)
	return nil
}

// Deprecated: Use GpuCounterDescriptor_MeasureUnit.Descriptor instead.
func (GpuCounterDescriptor_MeasureUnit) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{0, 1}
}

// Priority of the tracing session client. A higher priority session may
// preempt a lower priority one in configurations where concurrent sessions
// aren't supported.
type ChromeConfig_ClientPriority int32

const (
	ChromeConfig_UNKNOWN        ChromeConfig_ClientPriority = 0
	ChromeConfig_BACKGROUND     ChromeConfig_ClientPriority = 1
	ChromeConfig_USER_INITIATED ChromeConfig_ClientPriority = 2
)

// Enum value maps for ChromeConfig_ClientPriority.
var (
	ChromeConfig_ClientPriority_name = map[int32]string{
		0: "UNKNOWN",
		1: "BACKGROUND",
		2: "USER_INITIATED",
	}
	ChromeConfig_ClientPriority_value = map[string]int32{
		"UNKNOWN":        0,
		"BACKGROUND":     1,
		"USER_INITIATED": 2,
	}
)

func (x ChromeConfig_ClientPriority) Enum() *ChromeConfig_ClientPriority {
	p := new(ChromeConfig_ClientPriority)
	*p = x
	return p
}

func (x ChromeConfig_ClientPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeConfig_ClientPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[9].Descriptor()
}

func (ChromeConfig_ClientPriority) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[9]
}

func (x ChromeConfig_ClientPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeConfig_ClientPriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeConfig_ClientPriority(num)
	return nil
}

// Deprecated: Use ChromeConfig_ClientPriority.Descriptor instead.
func (ChromeConfig_ClientPriority) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{8, 0}
}

type AndroidPowerConfig_BatteryCounters int32

const (
	AndroidPowerConfig_BATTERY_COUNTER_UNSPECIFIED AndroidPowerConfig_BatteryCounters = 0
	// Coulomb counter.
	AndroidPowerConfig_BATTERY_COUNTER_CHARGE AndroidPowerConfig_BatteryCounters = 1
	// Charge (%).
	AndroidPowerConfig_BATTERY_COUNTER_CAPACITY_PERCENT AndroidPowerConfig_BatteryCounters = 2
	// Instantaneous current.
	AndroidPowerConfig_BATTERY_COUNTER_CURRENT AndroidPowerConfig_BatteryCounters = 3
	// Avg current.
	AndroidPowerConfig_BATTERY_COUNTER_CURRENT_AVG AndroidPowerConfig_BatteryCounters = 4
)

// Enum value maps for AndroidPowerConfig_BatteryCounters.
var (
	AndroidPowerConfig_BatteryCounters_name = map[int32]string{
		0: "BATTERY_COUNTER_UNSPECIFIED",
		1: "BATTERY_COUNTER_CHARGE",
		2: "BATTERY_COUNTER_CAPACITY_PERCENT",
		3: "BATTERY_COUNTER_CURRENT",
		4: "BATTERY_COUNTER_CURRENT_AVG",
	}
	AndroidPowerConfig_BatteryCounters_value = map[string]int32{
		"BATTERY_COUNTER_UNSPECIFIED":      0,
		"BATTERY_COUNTER_CHARGE":           1,
		"BATTERY_COUNTER_CAPACITY_PERCENT": 2,
		"BATTERY_COUNTER_CURRENT":          3,
		"BATTERY_COUNTER_CURRENT_AVG":      4,
	}
)

func (x AndroidPowerConfig_BatteryCounters) Enum() *AndroidPowerConfig_BatteryCounters {
	p := new(AndroidPowerConfig_BatteryCounters)
	*p = x
	return p
}

func (x AndroidPowerConfig_BatteryCounters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AndroidPowerConfig_BatteryCounters) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[10].Descriptor()
}

func (AndroidPowerConfig_BatteryCounters) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[10]
}

func (x AndroidPowerConfig_BatteryCounters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AndroidPowerConfig_BatteryCounters) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AndroidPowerConfig_BatteryCounters(num)
	return nil
}

// Deprecated: Use AndroidPowerConfig_BatteryCounters.Descriptor instead.
func (AndroidPowerConfig_BatteryCounters) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{14, 0}
}

type ProcessStatsConfig_Quirks int32

const (
	ProcessStatsConfig_QUIRKS_UNSPECIFIED ProcessStatsConfig_Quirks = 0
	// This has been deprecated and ignored as per 2018-05-01. Full scan at
	// startup is now disabled by default and can be re-enabled using the
	// |scan_all_processes_on_start| arg.
	//
	// Deprecated: Do not use.
	ProcessStatsConfig_DISABLE_INITIAL_DUMP ProcessStatsConfig_Quirks = 1
	ProcessStatsConfig_DISABLE_ON_DEMAND    ProcessStatsConfig_Quirks = 2
)

// Enum value maps for ProcessStatsConfig_Quirks.
var (
	ProcessStatsConfig_Quirks_name = map[int32]string{
		0: "QUIRKS_UNSPECIFIED",
		1: "DISABLE_INITIAL_DUMP",
		2: "DISABLE_ON_DEMAND",
	}
	ProcessStatsConfig_Quirks_value = map[string]int32{
		"QUIRKS_UNSPECIFIED":   0,
		"DISABLE_INITIAL_DUMP": 1,
		"DISABLE_ON_DEMAND":    2,
	}
)

func (x ProcessStatsConfig_Quirks) Enum() *ProcessStatsConfig_Quirks {
	p := new(ProcessStatsConfig_Quirks)
	*p = x
	return p
}

func (x ProcessStatsConfig_Quirks) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStatsConfig_Quirks) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[11].Descriptor()
}

func (ProcessStatsConfig_Quirks) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[11]
}

func (x ProcessStatsConfig_Quirks) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcessStatsConfig_Quirks) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcessStatsConfig_Quirks(num)
	return nil
}

// Deprecated: Use ProcessStatsConfig_Quirks.Descriptor instead.
func (ProcessStatsConfig_Quirks) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{15, 0}
}

type SysStatsConfig_StatCounters int32

const (
	SysStatsConfig_STAT_UNSPECIFIED    SysStatsConfig_StatCounters = 0
	SysStatsConfig_STAT_CPU_TIMES      SysStatsConfig_StatCounters = 1
	SysStatsConfig_STAT_IRQ_COUNTS     SysStatsConfig_StatCounters = 2
	SysStatsConfig_STAT_SOFTIRQ_COUNTS SysStatsConfig_StatCounters = 3
	SysStatsConfig_STAT_FORK_COUNT     SysStatsConfig_StatCounters = 4
)

// Enum value maps for SysStatsConfig_StatCounters.
var (
	SysStatsConfig_StatCounters_name = map[int32]string{
		0: "STAT_UNSPECIFIED",
		1: "STAT_CPU_TIMES",
		2: "STAT_IRQ_COUNTS",
		3: "STAT_SOFTIRQ_COUNTS",
		4: "STAT_FORK_COUNT",
	}
	SysStatsConfig_StatCounters_value = map[string]int32{
		"STAT_UNSPECIFIED":    0,
		"STAT_CPU_TIMES":      1,
		"STAT_IRQ_COUNTS":     2,
		"STAT_SOFTIRQ_COUNTS": 3,
		"STAT_FORK_COUNT":     4,
	}
)

func (x SysStatsConfig_StatCounters) Enum() *SysStatsConfig_StatCounters {
	p := new(SysStatsConfig_StatCounters)
	*p = x
	return p
}

func (x SysStatsConfig_StatCounters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysStatsConfig_StatCounters) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[12].Descriptor()
}

func (SysStatsConfig_StatCounters) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[12]
}

func (x SysStatsConfig_StatCounters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysStatsConfig_StatCounters) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysStatsConfig_StatCounters(num)
	return nil
}

// Deprecated: Use SysStatsConfig_StatCounters.Descriptor instead.
func (SysStatsConfig_StatCounters) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{19, 0}
}

type TraceConfig_LockdownModeOperation int32

const (
	TraceConfig_LOCKDOWN_UNCHANGED TraceConfig_LockdownModeOperation = 0
	TraceConfig_LOCKDOWN_CLEAR     TraceConfig_LockdownModeOperation = 1
	TraceConfig_LOCKDOWN_SET       TraceConfig_LockdownModeOperation = 2
)

// Enum value maps for TraceConfig_LockdownModeOperation.
var (
	TraceConfig_LockdownModeOperation_name = map[int32]string{
		0: "LOCKDOWN_UNCHANGED",
		1: "LOCKDOWN_CLEAR",
		2: "LOCKDOWN_SET",
	}
	TraceConfig_LockdownModeOperation_value = map[string]int32{
		"LOCKDOWN_UNCHANGED": 0,
		"LOCKDOWN_CLEAR":     1,
		"LOCKDOWN_SET":       2,
	}
)

func (x TraceConfig_LockdownModeOperation) Enum() *TraceConfig_LockdownModeOperation {
	p := new(TraceConfig_LockdownModeOperation)
	*p = x
	return p
}

func (x TraceConfig_LockdownModeOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceConfig_LockdownModeOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[13].Descriptor()
}

func (TraceConfig_LockdownModeOperation) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[13]
}

func (x TraceConfig_LockdownModeOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceConfig_LockdownModeOperation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceConfig_LockdownModeOperation(num)
	return nil
}

// Deprecated: Use TraceConfig_LockdownModeOperation.Descriptor instead.
func (TraceConfig_LockdownModeOperation) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 0}
}

// Compress trace with the given method. Best effort.
type TraceConfig_CompressionType int32

const (
	TraceConfig_COMPRESSION_TYPE_UNSPECIFIED TraceConfig_CompressionType = 0
	TraceConfig_COMPRESSION_TYPE_DEFLATE     TraceConfig_CompressionType = 1
)

// Enum value maps for TraceConfig_CompressionType.
var (
	TraceConfig_CompressionType_name = map[int32]string{
		0: "COMPRESSION_TYPE_UNSPECIFIED",
		1: "COMPRESSION_TYPE_DEFLATE",
	}
	TraceConfig_CompressionType_value = map[string]int32{
		"COMPRESSION_TYPE_UNSPECIFIED": 0,
		"COMPRESSION_TYPE_DEFLATE":     1,
	}
)

func (x TraceConfig_CompressionType) Enum() *TraceConfig_CompressionType {
	p := new(TraceConfig_CompressionType)
	*p = x
	return p
}

func (x TraceConfig_CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceConfig_CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[14].Descriptor()
}

func (TraceConfig_CompressionType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[14]
}

func (x TraceConfig_CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceConfig_CompressionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceConfig_CompressionType(num)
	return nil
}

// Deprecated: Use TraceConfig_CompressionType.Descriptor instead.
func (TraceConfig_CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 1}
}

type TraceConfig_BufferConfig_FillPolicy int32

const (
	TraceConfig_BufferConfig_UNSPECIFIED TraceConfig_BufferConfig_FillPolicy = 0
	// Default behavior. The buffer operates as a conventional ring buffer.
	// If the writer is faster than the reader (or if the reader reads only
	// after tracing is stopped) newly written packets will overwrite old
	// packets.
	TraceConfig_BufferConfig_RING_BUFFER TraceConfig_BufferConfig_FillPolicy = 1
	// Behaves like RING_BUFFER as long as there is space in the buffer or
	// the reader catches up with the writer. As soon as the writer hits
	// an unread chunk, it stops accepting new data in the buffer.
	TraceConfig_BufferConfig_DISCARD TraceConfig_BufferConfig_FillPolicy = 2
)

// Enum value maps for TraceConfig_BufferConfig_FillPolicy.
var (
	TraceConfig_BufferConfig_FillPolicy_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "RING_BUFFER",
		2: "DISCARD",
	}
	TraceConfig_BufferConfig_FillPolicy_value = map[string]int32{
		"UNSPECIFIED": 0,
		"RING_BUFFER": 1,
		"DISCARD":     2,
	}
)

func (x TraceConfig_BufferConfig_FillPolicy) Enum() *TraceConfig_BufferConfig_FillPolicy {
	p := new(TraceConfig_BufferConfig_FillPolicy)
	*p = x
	return p
}

func (x TraceConfig_BufferConfig_FillPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceConfig_BufferConfig_FillPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[15].Descriptor()
}

func (TraceConfig_BufferConfig_FillPolicy) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[15]
}

func (x TraceConfig_BufferConfig_FillPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceConfig_BufferConfig_FillPolicy) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceConfig_BufferConfig_FillPolicy(num)
	return nil
}

// Deprecated: Use TraceConfig_BufferConfig_FillPolicy.Descriptor instead.
func (TraceConfig_BufferConfig_FillPolicy) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 0, 0}
}

type TraceConfig_TriggerConfig_TriggerMode int32

const (
	TraceConfig_TriggerConfig_UNSPECIFIED TraceConfig_TriggerConfig_TriggerMode = 0
	// When this mode is chosen, data sources are not started until one of the
	// |triggers| are received. This supports early initialization and fast
	// starting of the tracing system. On triggering, the session will then
	// record for |stop_delay_ms|. However if no trigger is seen
	// after |trigger_timeout_ms| the session will be stopped and no data will
	// be returned.
	TraceConfig_TriggerConfig_START_TRACING TraceConfig_TriggerConfig_TriggerMode = 1
	// When this mode is chosen, the session will be started via the normal
	// EnableTracing() & StartTracing(). If no trigger is ever seen
	// the session will be stopped after |trigger_timeout_ms| and no data will
	// be returned. However if triggered the trace will stop after
	// |stop_delay_ms| and any data in the buffer will be returned to the
	// consumer.
	TraceConfig_TriggerConfig_STOP_TRACING TraceConfig_TriggerConfig_TriggerMode = 2
)

// Enum value maps for TraceConfig_TriggerConfig_TriggerMode.
var (
	TraceConfig_TriggerConfig_TriggerMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "START_TRACING",
		2: "STOP_TRACING",
	}
	TraceConfig_TriggerConfig_TriggerMode_value = map[string]int32{
		"UNSPECIFIED":   0,
		"START_TRACING": 1,
		"STOP_TRACING":  2,
	}
)

func (x TraceConfig_TriggerConfig_TriggerMode) Enum() *TraceConfig_TriggerConfig_TriggerMode {
	p := new(TraceConfig_TriggerConfig_TriggerMode)
	*p = x
	return p
}

func (x TraceConfig_TriggerConfig_TriggerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceConfig_TriggerConfig_TriggerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[16].Descriptor()
}

func (TraceConfig_TriggerConfig_TriggerMode) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[16]
}

func (x TraceConfig_TriggerConfig_TriggerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TraceConfig_TriggerConfig_TriggerMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TraceConfig_TriggerConfig_TriggerMode(num)
	return nil
}

// Deprecated: Use TraceConfig_TriggerConfig_TriggerMode.Descriptor instead.
func (TraceConfig_TriggerConfig_TriggerMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 6, 0}
}

// Specifies which component was the main source for the jank.
type FrameTimelineEvent_JankType int32

const (
	FrameTimelineEvent_JANK_UNSPECIFIED         FrameTimelineEvent_JankType = 0
	FrameTimelineEvent_JANK_NONE                FrameTimelineEvent_JankType = 1
	FrameTimelineEvent_JANK_SF_SCHEDULING       FrameTimelineEvent_JankType = 2
	FrameTimelineEvent_JANK_PREDICTION_ERROR    FrameTimelineEvent_JankType = 3
	FrameTimelineEvent_JANK_DISPLAY_HAL         FrameTimelineEvent_JankType = 4
	FrameTimelineEvent_JANK_SF_DEADLINE_MISSED  FrameTimelineEvent_JankType = 5
	FrameTimelineEvent_JANK_APP_DEADLINE_MISSED FrameTimelineEvent_JankType = 6
	FrameTimelineEvent_JANK_BUFFER_STUFFING     FrameTimelineEvent_JankType = 7
	FrameTimelineEvent_JANK_UNKNOWN             FrameTimelineEvent_JankType = 8
)

// Enum value maps for FrameTimelineEvent_JankType.
var (
	FrameTimelineEvent_JankType_name = map[int32]string{
		0: "JANK_UNSPECIFIED",
		1: "JANK_NONE",
		2: "JANK_SF_SCHEDULING",
		3: "JANK_PREDICTION_ERROR",
		4: "JANK_DISPLAY_HAL",
		5: "JANK_SF_DEADLINE_MISSED",
		6: "JANK_APP_DEADLINE_MISSED",
		7: "JANK_BUFFER_STUFFING",
		8: "JANK_UNKNOWN",
	}
	FrameTimelineEvent_JankType_value = map[string]int32{
		"JANK_UNSPECIFIED":         0,
		"JANK_NONE":                1,
		"JANK_SF_SCHEDULING":       2,
		"JANK_PREDICTION_ERROR":    3,
		"JANK_DISPLAY_HAL":         4,
		"JANK_SF_DEADLINE_MISSED":  5,
		"JANK_APP_DEADLINE_MISSED": 6,
		"JANK_BUFFER_STUFFING":     7,
		"JANK_UNKNOWN":             8,
	}
)

func (x FrameTimelineEvent_JankType) Enum() *FrameTimelineEvent_JankType {
	p := new(FrameTimelineEvent_JankType)
	*p = x
	return p
}

func (x FrameTimelineEvent_JankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameTimelineEvent_JankType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[17].Descriptor()
}

func (FrameTimelineEvent_JankType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[17]
}

func (x FrameTimelineEvent_JankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FrameTimelineEvent_JankType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FrameTimelineEvent_JankType(num)
	return nil
}

// Deprecated: Use FrameTimelineEvent_JankType.Descriptor instead.
func (FrameTimelineEvent_JankType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{26, 0}
}

// Specifies how a frame was presented on screen w.r.t. timing.
// Can be different for SurfaceFrame and DisplayFrame.
type FrameTimelineEvent_PresentType int32

const (
	FrameTimelineEvent_PRESENT_UNSPECIFIED FrameTimelineEvent_PresentType = 0
	FrameTimelineEvent_PRESENT_ON_TIME     FrameTimelineEvent_PresentType = 1
	FrameTimelineEvent_PRESENT_LATE        FrameTimelineEvent_PresentType = 2
	FrameTimelineEvent_PRESENT_EARLY       FrameTimelineEvent_PresentType = 3
	FrameTimelineEvent_PRESENT_DROPPED     FrameTimelineEvent_PresentType = 4
)

// Enum value maps for FrameTimelineEvent_PresentType.
var (
	FrameTimelineEvent_PresentType_name = map[int32]string{
		0: "PRESENT_UNSPECIFIED",
		1: "PRESENT_ON_TIME",
		2: "PRESENT_LATE",
		3: "PRESENT_EARLY",
		4: "PRESENT_DROPPED",
	}
	FrameTimelineEvent_PresentType_value = map[string]int32{
		"PRESENT_UNSPECIFIED": 0,
		"PRESENT_ON_TIME":     1,
		"PRESENT_LATE":        2,
		"PRESENT_EARLY":       3,
		"PRESENT_DROPPED":     4,
	}
)

func (x FrameTimelineEvent_PresentType) Enum() *FrameTimelineEvent_PresentType {
	p := new(FrameTimelineEvent_PresentType)
	*p = x
	return p
}

func (x FrameTimelineEvent_PresentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameTimelineEvent_PresentType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[18].Descriptor()
}

func (FrameTimelineEvent_PresentType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[18]
}

func (x FrameTimelineEvent_PresentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FrameTimelineEvent_PresentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FrameTimelineEvent_PresentType(num)
	return nil
}

// Deprecated: Use FrameTimelineEvent_PresentType.Descriptor instead.
func (FrameTimelineEvent_PresentType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{26, 1}
}

type GraphicsFrameEvent_BufferEventType int32

const (
	GraphicsFrameEvent_UNSPECIFIED   GraphicsFrameEvent_BufferEventType = 0
	GraphicsFrameEvent_DEQUEUE       GraphicsFrameEvent_BufferEventType = 1
	GraphicsFrameEvent_QUEUE         GraphicsFrameEvent_BufferEventType = 2
	GraphicsFrameEvent_POST          GraphicsFrameEvent_BufferEventType = 3
	GraphicsFrameEvent_ACQUIRE_FENCE GraphicsFrameEvent_BufferEventType = 4
	GraphicsFrameEvent_LATCH         GraphicsFrameEvent_BufferEventType = 5
	// HWC will compose this buffer
	GraphicsFrameEvent_HWC_COMPOSITION_QUEUED GraphicsFrameEvent_BufferEventType = 6
	// renderEngine composition
	GraphicsFrameEvent_FALLBACK_COMPOSITION GraphicsFrameEvent_BufferEventType = 7
	GraphicsFrameEvent_PRESENT_FENCE        GraphicsFrameEvent_BufferEventType = 8
	GraphicsFrameEvent_RELEASE_FENCE        GraphicsFrameEvent_BufferEventType = 9
	GraphicsFrameEvent_MODIFY               GraphicsFrameEvent_BufferEventType = 10
	GraphicsFrameEvent_DETACH               GraphicsFrameEvent_BufferEventType = 11
	GraphicsFrameEvent_ATTACH               GraphicsFrameEvent_BufferEventType = 12
	GraphicsFrameEvent_CANCEL               GraphicsFrameEvent_BufferEventType = 13
)

// Enum value maps for GraphicsFrameEvent_BufferEventType.
var (
	GraphicsFrameEvent_BufferEventType_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "DEQUEUE",
		2:  "QUEUE",
		3:  "POST",
		4:  "ACQUIRE_FENCE",
		5:  "LATCH",
		6:  "HWC_COMPOSITION_QUEUED",
		7:  "FALLBACK_COMPOSITION",
		8:  "PRESENT_FENCE",
		9:  "RELEASE_FENCE",
		10: "MODIFY",
		11: "DETACH",
		12: "ATTACH",
		13: "CANCEL",
	}
	GraphicsFrameEvent_BufferEventType_value = map[string]int32{
		"UNSPECIFIED":            0,
		"DEQUEUE":                1,
		"QUEUE":                  2,
		"POST":                   3,
		"ACQUIRE_FENCE":          4,
		"LATCH":                  5,
		"HWC_COMPOSITION_QUEUED": 6,
		"FALLBACK_COMPOSITION":   7,
		"PRESENT_FENCE":          8,
		"RELEASE_FENCE":          9,
		"MODIFY":                 10,
		"DETACH":                 11,
		"ATTACH":                 12,
		"CANCEL":                 13,
	}
)

func (x GraphicsFrameEvent_BufferEventType) Enum() *GraphicsFrameEvent_BufferEventType {
	p := new(GraphicsFrameEvent_BufferEventType)
	*p = x
	return p
}

func (x GraphicsFrameEvent_BufferEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphicsFrameEvent_BufferEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[19].Descriptor()
}

func (GraphicsFrameEvent_BufferEventType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[19]
}

func (x GraphicsFrameEvent_BufferEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GraphicsFrameEvent_BufferEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GraphicsFrameEvent_BufferEventType(num)
	return nil
}

// Deprecated: Use GraphicsFrameEvent_BufferEventType.Descriptor instead.
func (GraphicsFrameEvent_BufferEventType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{28, 0}
}

type BackgroundTracingMetadata_TriggerRule_TriggerType int32

const (
	BackgroundTracingMetadata_TriggerRule_TRIGGER_UNSPECIFIED BackgroundTracingMetadata_TriggerRule_TriggerType = 0
	// Traces are triggered by specific range of values of an UMA histogram.
	BackgroundTracingMetadata_TriggerRule_MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE BackgroundTracingMetadata_TriggerRule_TriggerType = 1
	// Traces are triggered by specific named events in chromium codebase,
	// like "second-update-failure".
	BackgroundTracingMetadata_TriggerRule_MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED BackgroundTracingMetadata_TriggerRule_TriggerType = 2
)

// Enum value maps for BackgroundTracingMetadata_TriggerRule_TriggerType.
var (
	BackgroundTracingMetadata_TriggerRule_TriggerType_name = map[int32]string{
		0: "TRIGGER_UNSPECIFIED",
		1: "MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE",
		2: "MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED",
	}
	BackgroundTracingMetadata_TriggerRule_TriggerType_value = map[string]int32{
		"TRIGGER_UNSPECIFIED":                                0,
		"MONITOR_AND_DUMP_WHEN_SPECIFIC_HISTOGRAM_AND_VALUE": 1,
		"MONITOR_AND_DUMP_WHEN_TRIGGER_NAMED":                2,
	}
)

func (x BackgroundTracingMetadata_TriggerRule_TriggerType) Enum() *BackgroundTracingMetadata_TriggerRule_TriggerType {
	p := new(BackgroundTracingMetadata_TriggerRule_TriggerType)
	*p = x
	return p
}

func (x BackgroundTracingMetadata_TriggerRule_TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundTracingMetadata_TriggerRule_TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[20].Descriptor()
}

func (BackgroundTracingMetadata_TriggerRule_TriggerType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[20]
}

func (x BackgroundTracingMetadata_TriggerRule_TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackgroundTracingMetadata_TriggerRule_TriggerType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackgroundTracingMetadata_TriggerRule_TriggerType(num)
	return nil
}

// Deprecated: Use BackgroundTracingMetadata_TriggerRule_TriggerType.Descriptor instead.
func (BackgroundTracingMetadata_TriggerRule_TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{33, 0, 0}
}

type BackgroundTracingMetadata_TriggerRule_NamedRule_EventType int32

const (
	BackgroundTracingMetadata_TriggerRule_NamedRule_UNSPECIFIED     BackgroundTracingMetadata_TriggerRule_NamedRule_EventType = 0
	BackgroundTracingMetadata_TriggerRule_NamedRule_SESSION_RESTORE BackgroundTracingMetadata_TriggerRule_NamedRule_EventType = 1
	BackgroundTracingMetadata_TriggerRule_NamedRule_NAVIGATION      BackgroundTracingMetadata_TriggerRule_NamedRule_EventType = 2
	BackgroundTracingMetadata_TriggerRule_NamedRule_STARTUP         BackgroundTracingMetadata_TriggerRule_NamedRule_EventType = 3
	BackgroundTracingMetadata_TriggerRule_NamedRule_REACHED_CODE    BackgroundTracingMetadata_TriggerRule_NamedRule_EventType = 4
	BackgroundTracingMetadata_TriggerRule_NamedRule_TEST_RULE       BackgroundTracingMetadata_TriggerRule_NamedRule_EventType = 1000
)

// Enum value maps for BackgroundTracingMetadata_TriggerRule_NamedRule_EventType.
var (
	BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_name = map[int32]string{
		0:    "UNSPECIFIED",
		1:    "SESSION_RESTORE",
		2:    "NAVIGATION",
		3:    "STARTUP",
		4:    "REACHED_CODE",
		1000: "TEST_RULE",
	}
	BackgroundTracingMetadata_TriggerRule_NamedRule_EventType_value = map[string]int32{
		"UNSPECIFIED":     0,
		"SESSION_RESTORE": 1,
		"NAVIGATION":      2,
		"STARTUP":         3,
		"REACHED_CODE":    4,
		"TEST_RULE":       1000,
	}
)

func (x BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) Enum() *BackgroundTracingMetadata_TriggerRule_NamedRule_EventType {
	p := new(BackgroundTracingMetadata_TriggerRule_NamedRule_EventType)
	*p = x
	return p
}

func (x BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[21].Descriptor()
}

func (BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[21]
}

func (x BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackgroundTracingMetadata_TriggerRule_NamedRule_EventType(num)
	return nil
}

// Deprecated: Use BackgroundTracingMetadata_TriggerRule_NamedRule_EventType.Descriptor instead.
func (BackgroundTracingMetadata_TriggerRule_NamedRule_EventType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{33, 0, 1, 0}
}

type ChromeTracedValue_NestedType int32

const (
	ChromeTracedValue_DICT  ChromeTracedValue_NestedType = 0
	ChromeTracedValue_ARRAY ChromeTracedValue_NestedType = 1
)

// Enum value maps for ChromeTracedValue_NestedType.
var (
	ChromeTracedValue_NestedType_name = map[int32]string{
		0: "DICT",
		1: "ARRAY",
	}
	ChromeTracedValue_NestedType_value = map[string]int32{
		"DICT":  0,
		"ARRAY": 1,
	}
)

func (x ChromeTracedValue_NestedType) Enum() *ChromeTracedValue_NestedType {
	p := new(ChromeTracedValue_NestedType)
	*p = x
	return p
}

func (x ChromeTracedValue_NestedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeTracedValue_NestedType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[22].Descriptor()
}

func (ChromeTracedValue_NestedType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[22]
}

func (x ChromeTracedValue_NestedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeTracedValue_NestedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeTracedValue_NestedType(num)
	return nil
}

// Deprecated: Use ChromeTracedValue_NestedType.Descriptor instead.
func (ChromeTracedValue_NestedType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{34, 0}
}

type ChromeLegacyJsonTrace_TraceType int32

const (
	ChromeLegacyJsonTrace_USER_TRACE ChromeLegacyJsonTrace_TraceType = 0
	// Deprecated.
	ChromeLegacyJsonTrace_SYSTEM_TRACE ChromeLegacyJsonTrace_TraceType = 1
)

// Enum value maps for ChromeLegacyJsonTrace_TraceType.
var (
	ChromeLegacyJsonTrace_TraceType_name = map[int32]string{
		0: "USER_TRACE",
		1: "SYSTEM_TRACE",
	}
	ChromeLegacyJsonTrace_TraceType_value = map[string]int32{
		"USER_TRACE":   0,
		"SYSTEM_TRACE": 1,
	}
)

func (x ChromeLegacyJsonTrace_TraceType) Enum() *ChromeLegacyJsonTrace_TraceType {
	p := new(ChromeLegacyJsonTrace_TraceType)
	*p = x
	return p
}

func (x ChromeLegacyJsonTrace_TraceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeLegacyJsonTrace_TraceType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[23].Descriptor()
}

func (ChromeLegacyJsonTrace_TraceType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[23]
}

func (x ChromeLegacyJsonTrace_TraceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeLegacyJsonTrace_TraceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeLegacyJsonTrace_TraceType(num)
	return nil
}

// Deprecated: Use ChromeLegacyJsonTrace_TraceType.Descriptor instead.
func (ChromeLegacyJsonTrace_TraceType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{38, 0}
}

// DEPRECATED. This enum has moved to ../common/builtin_clock.proto.
type ClockSnapshot_Clock_BuiltinClocks int32

const (
	ClockSnapshot_Clock_UNKNOWN              ClockSnapshot_Clock_BuiltinClocks = 0
	ClockSnapshot_Clock_REALTIME             ClockSnapshot_Clock_BuiltinClocks = 1
	ClockSnapshot_Clock_REALTIME_COARSE      ClockSnapshot_Clock_BuiltinClocks = 2
	ClockSnapshot_Clock_MONOTONIC            ClockSnapshot_Clock_BuiltinClocks = 3
	ClockSnapshot_Clock_MONOTONIC_COARSE     ClockSnapshot_Clock_BuiltinClocks = 4
	ClockSnapshot_Clock_MONOTONIC_RAW        ClockSnapshot_Clock_BuiltinClocks = 5
	ClockSnapshot_Clock_BOOTTIME             ClockSnapshot_Clock_BuiltinClocks = 6
	ClockSnapshot_Clock_BUILTIN_CLOCK_MAX_ID ClockSnapshot_Clock_BuiltinClocks = 63
)

// Enum value maps for ClockSnapshot_Clock_BuiltinClocks.
var (
	ClockSnapshot_Clock_BuiltinClocks_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "REALTIME",
		2:  "REALTIME_COARSE",
		3:  "MONOTONIC",
		4:  "MONOTONIC_COARSE",
		5:  "MONOTONIC_RAW",
		6:  "BOOTTIME",
		63: "BUILTIN_CLOCK_MAX_ID",
	}
	ClockSnapshot_Clock_BuiltinClocks_value = map[string]int32{
		"UNKNOWN":              0,
		"REALTIME":             1,
		"REALTIME_COARSE":      2,
		"MONOTONIC":            3,
		"MONOTONIC_COARSE":     4,
		"MONOTONIC_RAW":        5,
		"BOOTTIME":             6,
		"BUILTIN_CLOCK_MAX_ID": 63,
	}
)

func (x ClockSnapshot_Clock_BuiltinClocks) Enum() *ClockSnapshot_Clock_BuiltinClocks {
	p := new(ClockSnapshot_Clock_BuiltinClocks)
	*p = x
	return p
}

func (x ClockSnapshot_Clock_BuiltinClocks) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClockSnapshot_Clock_BuiltinClocks) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[24].Descriptor()
}

func (ClockSnapshot_Clock_BuiltinClocks) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[24]
}

func (x ClockSnapshot_Clock_BuiltinClocks) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClockSnapshot_Clock_BuiltinClocks) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClockSnapshot_Clock_BuiltinClocks(num)
	return nil
}

// Deprecated: Use ClockSnapshot_Clock_BuiltinClocks.Descriptor instead.
func (ClockSnapshot_Clock_BuiltinClocks) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{40, 0, 0}
}

type FieldDescriptorProto_Type int32

const (
	// 0 is reserved for errors.
	// Order is weird for historical reasons.
	FieldDescriptorProto_TYPE_DOUBLE FieldDescriptorProto_Type = 1
	FieldDescriptorProto_TYPE_FLOAT  FieldDescriptorProto_Type = 2
	// Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
	// negative values are likely.
	FieldDescriptorProto_TYPE_INT64  FieldDescriptorProto_Type = 3
	FieldDescriptorProto_TYPE_UINT64 FieldDescriptorProto_Type = 4
	// Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
	// negative values are likely.
	FieldDescriptorProto_TYPE_INT32   FieldDescriptorProto_Type = 5
	FieldDescriptorProto_TYPE_FIXED64 FieldDescriptorProto_Type = 6
	FieldDescriptorProto_TYPE_FIXED32 FieldDescriptorProto_Type = 7
	FieldDescriptorProto_TYPE_BOOL    FieldDescriptorProto_Type = 8
	FieldDescriptorProto_TYPE_STRING  FieldDescriptorProto_Type = 9
	// Tag-delimited aggregate.
	// Group type is deprecated and not supported in proto3. However, Proto3
	// implementations should still be able to parse the group wire format and
	// treat group fields as unknown fields.
	FieldDescriptorProto_TYPE_GROUP FieldDescriptorProto_Type = 10
	// Length-delimited aggregate.
	FieldDescriptorProto_TYPE_MESSAGE FieldDescriptorProto_Type = 11
	// New in version 2.
	FieldDescriptorProto_TYPE_BYTES    FieldDescriptorProto_Type = 12
	FieldDescriptorProto_TYPE_UINT32   FieldDescriptorProto_Type = 13
	FieldDescriptorProto_TYPE_ENUM     FieldDescriptorProto_Type = 14
	FieldDescriptorProto_TYPE_SFIXED32 FieldDescriptorProto_Type = 15
	FieldDescriptorProto_TYPE_SFIXED64 FieldDescriptorProto_Type = 16
	// Uses ZigZag encoding.
	FieldDescriptorProto_TYPE_SINT32 FieldDescriptorProto_Type = 17
	// Uses ZigZag encoding.
	FieldDescriptorProto_TYPE_SINT64 FieldDescriptorProto_Type = 18
)

// Enum value maps for FieldDescriptorProto_Type.
var (
	FieldDescriptorProto_Type_name = map[int32]string{
		1:  "TYPE_DOUBLE",
		2:  "TYPE_FLOAT",
		3:  "TYPE_INT64",
		4:  "TYPE_UINT64",
		5:  "TYPE_INT32",
		6:  "TYPE_FIXED64",
		7:  "TYPE_FIXED32",
		8:  "TYPE_BOOL",
		9:  "TYPE_STRING",
		10: "TYPE_GROUP",
		11: "TYPE_MESSAGE",
		12: "TYPE_BYTES",
		13: "TYPE_UINT32",
		14: "TYPE_ENUM",
		15: "TYPE_SFIXED32",
		16: "TYPE_SFIXED64",
		17: "TYPE_SINT32",
		18: "TYPE_SINT64",
	}
	FieldDescriptorProto_Type_value = map[string]int32{
		"TYPE_DOUBLE":   1,
		"TYPE_FLOAT":    2,
		"TYPE_INT64":    3,
		"TYPE_UINT64":   4,
		"TYPE_INT32":    5,
		"TYPE_FIXED64":  6,
		"TYPE_FIXED32":  7,
		"TYPE_BOOL":     8,
		"TYPE_STRING":   9,
		"TYPE_GROUP":    10,
		"TYPE_MESSAGE":  11,
		"TYPE_BYTES":    12,
		"TYPE_UINT32":   13,
		"TYPE_ENUM":     14,
		"TYPE_SFIXED32": 15,
		"TYPE_SFIXED64": 16,
		"TYPE_SINT32":   17,
		"TYPE_SINT64":   18,
	}
)

func (x FieldDescriptorProto_Type) Enum() *FieldDescriptorProto_Type {
	p := new(FieldDescriptorProto_Type)
	*p = x
	return p
}

func (x FieldDescriptorProto_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldDescriptorProto_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[25].Descriptor()
}

func (FieldDescriptorProto_Type) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[25]
}

func (x FieldDescriptorProto_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FieldDescriptorProto_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FieldDescriptorProto_Type(num)
	return nil
}

// Deprecated: Use FieldDescriptorProto_Type.Descriptor instead.
func (FieldDescriptorProto_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{44, 0}
}

type FieldDescriptorProto_Label int32

const (
	// 0 is reserved for errors
	FieldDescriptorProto_LABEL_OPTIONAL FieldDescriptorProto_Label = 1
	FieldDescriptorProto_LABEL_REQUIRED FieldDescriptorProto_Label = 2
	FieldDescriptorProto_LABEL_REPEATED FieldDescriptorProto_Label = 3
)

// Enum value maps for FieldDescriptorProto_Label.
var (
	FieldDescriptorProto_Label_name = map[int32]string{
		1: "LABEL_OPTIONAL",
		2: "LABEL_REQUIRED",
		3: "LABEL_REPEATED",
	}
	FieldDescriptorProto_Label_value = map[string]int32{
		"LABEL_OPTIONAL": 1,
		"LABEL_REQUIRED": 2,
		"LABEL_REPEATED": 3,
	}
)

func (x FieldDescriptorProto_Label) Enum() *FieldDescriptorProto_Label {
	p := new(FieldDescriptorProto_Label)
	*p = x
	return p
}

func (x FieldDescriptorProto_Label) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldDescriptorProto_Label) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[26].Descriptor()
}

func (FieldDescriptorProto_Label) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[26]
}

func (x FieldDescriptorProto_Label) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FieldDescriptorProto_Label) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FieldDescriptorProto_Label(num)
	return nil
}

// Deprecated: Use FieldDescriptorProto_Label.Descriptor instead.
func (FieldDescriptorProto_Label) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{44, 1}
}

// The file type
type InodeFileMap_Entry_Type int32

const (
	InodeFileMap_Entry_UNKNOWN   InodeFileMap_Entry_Type = 0
	InodeFileMap_Entry_FILE      InodeFileMap_Entry_Type = 1
	InodeFileMap_Entry_DIRECTORY InodeFileMap_Entry_Type = 2
)

// Enum value maps for InodeFileMap_Entry_Type.
var (
	InodeFileMap_Entry_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "FILE",
		2: "DIRECTORY",
	}
	InodeFileMap_Entry_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"FILE":      1,
		"DIRECTORY": 2,
	}
)

func (x InodeFileMap_Entry_Type) Enum() *InodeFileMap_Entry_Type {
	p := new(InodeFileMap_Entry_Type)
	*p = x
	return p
}

func (x InodeFileMap_Entry_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InodeFileMap_Entry_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[27].Descriptor()
}

func (InodeFileMap_Entry_Type) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[27]
}

func (x InodeFileMap_Entry_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InodeFileMap_Entry_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InodeFileMap_Entry_Type(num)
	return nil
}

// Deprecated: Use InodeFileMap_Entry_Type.Descriptor instead.
func (InodeFileMap_Entry_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{50, 0, 0}
}

type FtraceStats_Phase int32

const (
	FtraceStats_UNSPECIFIED    FtraceStats_Phase = 0
	FtraceStats_START_OF_TRACE FtraceStats_Phase = 1
	FtraceStats_END_OF_TRACE   FtraceStats_Phase = 2
)

// Enum value maps for FtraceStats_Phase.
var (
	FtraceStats_Phase_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "START_OF_TRACE",
		2: "END_OF_TRACE",
	}
	FtraceStats_Phase_value = map[string]int32{
		"UNSPECIFIED":    0,
		"START_OF_TRACE": 1,
		"END_OF_TRACE":   2,
	}
)

func (x FtraceStats_Phase) Enum() *FtraceStats_Phase {
	p := new(FtraceStats_Phase)
	*p = x
	return p
}

func (x FtraceStats_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FtraceStats_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[28].Descriptor()
}

func (FtraceStats_Phase) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[28]
}

func (x FtraceStats_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FtraceStats_Phase) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FtraceStats_Phase(num)
	return nil
}

// Deprecated: Use FtraceStats_Phase.Descriptor instead.
func (FtraceStats_Phase) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{384, 0}
}

type GpuLog_Severity int32

const (
	GpuLog_LOG_SEVERITY_UNSPECIFIED GpuLog_Severity = 0
	GpuLog_LOG_SEVERITY_VERBOSE     GpuLog_Severity = 1
	GpuLog_LOG_SEVERITY_DEBUG       GpuLog_Severity = 2
	GpuLog_LOG_SEVERITY_INFO        GpuLog_Severity = 3
	GpuLog_LOG_SEVERITY_WARNING     GpuLog_Severity = 4
	GpuLog_LOG_SEVERITY_ERROR       GpuLog_Severity = 5
)

// Enum value maps for GpuLog_Severity.
var (
	GpuLog_Severity_name = map[int32]string{
		0: "LOG_SEVERITY_UNSPECIFIED",
		1: "LOG_SEVERITY_VERBOSE",
		2: "LOG_SEVERITY_DEBUG",
		3: "LOG_SEVERITY_INFO",
		4: "LOG_SEVERITY_WARNING",
		5: "LOG_SEVERITY_ERROR",
	}
	GpuLog_Severity_value = map[string]int32{
		"LOG_SEVERITY_UNSPECIFIED": 0,
		"LOG_SEVERITY_VERBOSE":     1,
		"LOG_SEVERITY_DEBUG":       2,
		"LOG_SEVERITY_INFO":        3,
		"LOG_SEVERITY_WARNING":     4,
		"LOG_SEVERITY_ERROR":       5,
	}
)

func (x GpuLog_Severity) Enum() *GpuLog_Severity {
	p := new(GpuLog_Severity)
	*p = x
	return p
}

func (x GpuLog_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpuLog_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[29].Descriptor()
}

func (GpuLog_Severity) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[29]
}

func (x GpuLog_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GpuLog_Severity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GpuLog_Severity(num)
	return nil
}

// Deprecated: Use GpuLog_Severity.Descriptor instead.
func (GpuLog_Severity) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{386, 0}
}

type InternedGraphicsContext_Api int32

const (
	InternedGraphicsContext_UNDEFINED InternedGraphicsContext_Api = 0
	InternedGraphicsContext_OPEN_GL   InternedGraphicsContext_Api = 1
	InternedGraphicsContext_VULKAN    InternedGraphicsContext_Api = 2
	InternedGraphicsContext_OPEN_CL   InternedGraphicsContext_Api = 3
)

// Enum value maps for InternedGraphicsContext_Api.
var (
	InternedGraphicsContext_Api_name = map[int32]string{
		0: "UNDEFINED",
		1: "OPEN_GL",
		2: "VULKAN",
		3: "OPEN_CL",
	}
	InternedGraphicsContext_Api_value = map[string]int32{
		"UNDEFINED": 0,
		"OPEN_GL":   1,
		"VULKAN":    2,
		"OPEN_CL":   3,
	}
)

func (x InternedGraphicsContext_Api) Enum() *InternedGraphicsContext_Api {
	p := new(InternedGraphicsContext_Api)
	*p = x
	return p
}

func (x InternedGraphicsContext_Api) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternedGraphicsContext_Api) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[30].Descriptor()
}

func (InternedGraphicsContext_Api) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[30]
}

func (x InternedGraphicsContext_Api) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InternedGraphicsContext_Api) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InternedGraphicsContext_Api(num)
	return nil
}

// Deprecated: Use InternedGraphicsContext_Api.Descriptor instead.
func (InternedGraphicsContext_Api) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{388, 0}
}

type InternedGpuRenderStageSpecification_RenderStageCategory int32

const (
	InternedGpuRenderStageSpecification_OTHER    InternedGpuRenderStageSpecification_RenderStageCategory = 0
	InternedGpuRenderStageSpecification_GRAPHICS InternedGpuRenderStageSpecification_RenderStageCategory = 1
	InternedGpuRenderStageSpecification_COMPUTE  InternedGpuRenderStageSpecification_RenderStageCategory = 2
)

// Enum value maps for InternedGpuRenderStageSpecification_RenderStageCategory.
var (
	InternedGpuRenderStageSpecification_RenderStageCategory_name = map[int32]string{
		0: "OTHER",
		1: "GRAPHICS",
		2: "COMPUTE",
	}
	InternedGpuRenderStageSpecification_RenderStageCategory_value = map[string]int32{
		"OTHER":    0,
		"GRAPHICS": 1,
		"COMPUTE":  2,
	}
)

func (x InternedGpuRenderStageSpecification_RenderStageCategory) Enum() *InternedGpuRenderStageSpecification_RenderStageCategory {
	p := new(InternedGpuRenderStageSpecification_RenderStageCategory)
	*p = x
	return p
}

func (x InternedGpuRenderStageSpecification_RenderStageCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InternedGpuRenderStageSpecification_RenderStageCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[31].Descriptor()
}

func (InternedGpuRenderStageSpecification_RenderStageCategory) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[31]
}

func (x InternedGpuRenderStageSpecification_RenderStageCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InternedGpuRenderStageSpecification_RenderStageCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InternedGpuRenderStageSpecification_RenderStageCategory(num)
	return nil
}

// Deprecated: Use InternedGpuRenderStageSpecification_RenderStageCategory.Descriptor instead.
func (InternedGpuRenderStageSpecification_RenderStageCategory) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{389, 0}
}

type VulkanMemoryEvent_Source int32

const (
	VulkanMemoryEvent_SOURCE_UNSPECIFIED   VulkanMemoryEvent_Source = 0
	VulkanMemoryEvent_SOURCE_DRIVER        VulkanMemoryEvent_Source = 1
	VulkanMemoryEvent_SOURCE_DEVICE        VulkanMemoryEvent_Source = 2
	VulkanMemoryEvent_SOURCE_DEVICE_MEMORY VulkanMemoryEvent_Source = 3
	VulkanMemoryEvent_SOURCE_BUFFER        VulkanMemoryEvent_Source = 4
	VulkanMemoryEvent_SOURCE_IMAGE         VulkanMemoryEvent_Source = 5
)

// Enum value maps for VulkanMemoryEvent_Source.
var (
	VulkanMemoryEvent_Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_DRIVER",
		2: "SOURCE_DEVICE",
		3: "SOURCE_DEVICE_MEMORY",
		4: "SOURCE_BUFFER",
		5: "SOURCE_IMAGE",
	}
	VulkanMemoryEvent_Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED":   0,
		"SOURCE_DRIVER":        1,
		"SOURCE_DEVICE":        2,
		"SOURCE_DEVICE_MEMORY": 3,
		"SOURCE_BUFFER":        4,
		"SOURCE_IMAGE":         5,
	}
)

func (x VulkanMemoryEvent_Source) Enum() *VulkanMemoryEvent_Source {
	p := new(VulkanMemoryEvent_Source)
	*p = x
	return p
}

func (x VulkanMemoryEvent_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulkanMemoryEvent_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[32].Descriptor()
}

func (VulkanMemoryEvent_Source) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[32]
}

func (x VulkanMemoryEvent_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VulkanMemoryEvent_Source) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VulkanMemoryEvent_Source(num)
	return nil
}

// Deprecated: Use VulkanMemoryEvent_Source.Descriptor instead.
func (VulkanMemoryEvent_Source) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{392, 0}
}

type VulkanMemoryEvent_Operation int32

const (
	VulkanMemoryEvent_OP_UNSPECIFIED VulkanMemoryEvent_Operation = 0
	// alloc, create
	VulkanMemoryEvent_OP_CREATE VulkanMemoryEvent_Operation = 1
	// free, destroy(non-bound)
	VulkanMemoryEvent_OP_DESTROY VulkanMemoryEvent_Operation = 2
	// bind buffer and image
	VulkanMemoryEvent_OP_BIND VulkanMemoryEvent_Operation = 3
	// destroy (bound)
	VulkanMemoryEvent_OP_DESTROY_BOUND VulkanMemoryEvent_Operation = 4
	// only annotations
	VulkanMemoryEvent_OP_ANNOTATIONS VulkanMemoryEvent_Operation = 5
)

// Enum value maps for VulkanMemoryEvent_Operation.
var (
	VulkanMemoryEvent_Operation_name = map[int32]string{
		0: "OP_UNSPECIFIED",
		1: "OP_CREATE",
		2: "OP_DESTROY",
		3: "OP_BIND",
		4: "OP_DESTROY_BOUND",
		5: "OP_ANNOTATIONS",
	}
	VulkanMemoryEvent_Operation_value = map[string]int32{
		"OP_UNSPECIFIED":   0,
		"OP_CREATE":        1,
		"OP_DESTROY":       2,
		"OP_BIND":          3,
		"OP_DESTROY_BOUND": 4,
		"OP_ANNOTATIONS":   5,
	}
)

func (x VulkanMemoryEvent_Operation) Enum() *VulkanMemoryEvent_Operation {
	p := new(VulkanMemoryEvent_Operation)
	*p = x
	return p
}

func (x VulkanMemoryEvent_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulkanMemoryEvent_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[33].Descriptor()
}

func (VulkanMemoryEvent_Operation) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[33]
}

func (x VulkanMemoryEvent_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VulkanMemoryEvent_Operation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VulkanMemoryEvent_Operation(num)
	return nil
}

// Deprecated: Use VulkanMemoryEvent_Operation.Descriptor instead.
func (VulkanMemoryEvent_Operation) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{392, 1}
}

type VulkanMemoryEvent_AllocationScope int32

const (
	VulkanMemoryEvent_SCOPE_UNSPECIFIED VulkanMemoryEvent_AllocationScope = 0
	VulkanMemoryEvent_SCOPE_COMMAND     VulkanMemoryEvent_AllocationScope = 1
	VulkanMemoryEvent_SCOPE_OBJECT      VulkanMemoryEvent_AllocationScope = 2
	VulkanMemoryEvent_SCOPE_CACHE       VulkanMemoryEvent_AllocationScope = 3
	VulkanMemoryEvent_SCOPE_DEVICE      VulkanMemoryEvent_AllocationScope = 4
	VulkanMemoryEvent_SCOPE_INSTANCE    VulkanMemoryEvent_AllocationScope = 5
)

// Enum value maps for VulkanMemoryEvent_AllocationScope.
var (
	VulkanMemoryEvent_AllocationScope_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "SCOPE_COMMAND",
		2: "SCOPE_OBJECT",
		3: "SCOPE_CACHE",
		4: "SCOPE_DEVICE",
		5: "SCOPE_INSTANCE",
	}
	VulkanMemoryEvent_AllocationScope_value = map[string]int32{
		"SCOPE_UNSPECIFIED": 0,
		"SCOPE_COMMAND":     1,
		"SCOPE_OBJECT":      2,
		"SCOPE_CACHE":       3,
		"SCOPE_DEVICE":      4,
		"SCOPE_INSTANCE":    5,
	}
)

func (x VulkanMemoryEvent_AllocationScope) Enum() *VulkanMemoryEvent_AllocationScope {
	p := new(VulkanMemoryEvent_AllocationScope)
	*p = x
	return p
}

func (x VulkanMemoryEvent_AllocationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VulkanMemoryEvent_AllocationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[34].Descriptor()
}

func (VulkanMemoryEvent_AllocationScope) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[34]
}

func (x VulkanMemoryEvent_AllocationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VulkanMemoryEvent_AllocationScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VulkanMemoryEvent_AllocationScope(num)
	return nil
}

// Deprecated: Use VulkanMemoryEvent_AllocationScope.Descriptor instead.
func (VulkanMemoryEvent_AllocationScope) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{392, 2}
}

type DebugAnnotation_NestedValue_NestedType int32

const (
	// leaf value.
	DebugAnnotation_NestedValue_UNSPECIFIED DebugAnnotation_NestedValue_NestedType = 0
	DebugAnnotation_NestedValue_DICT        DebugAnnotation_NestedValue_NestedType = 1
	DebugAnnotation_NestedValue_ARRAY       DebugAnnotation_NestedValue_NestedType = 2
)

// Enum value maps for DebugAnnotation_NestedValue_NestedType.
var (
	DebugAnnotation_NestedValue_NestedType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "DICT",
		2: "ARRAY",
	}
	DebugAnnotation_NestedValue_NestedType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"DICT":        1,
		"ARRAY":       2,
	}
)

func (x DebugAnnotation_NestedValue_NestedType) Enum() *DebugAnnotation_NestedValue_NestedType {
	p := new(DebugAnnotation_NestedValue_NestedType)
	*p = x
	return p
}

func (x DebugAnnotation_NestedValue_NestedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugAnnotation_NestedValue_NestedType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[35].Descriptor()
}

func (DebugAnnotation_NestedValue_NestedType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[35]
}

func (x DebugAnnotation_NestedValue_NestedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DebugAnnotation_NestedValue_NestedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DebugAnnotation_NestedValue_NestedType(num)
	return nil
}

// Deprecated: Use DebugAnnotation_NestedValue_NestedType.Descriptor instead.
func (DebugAnnotation_NestedValue_NestedType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{403, 0, 0}
}

// Enum definition taken from:
// https://source.chromium.org/chromium/chromium/src/+/master:base/android/application_status_listener.h
type ChromeApplicationStateInfo_ChromeApplicationState int32

const (
	ChromeApplicationStateInfo_APPLICATION_STATE_UNKNOWN                  ChromeApplicationStateInfo_ChromeApplicationState = 0
	ChromeApplicationStateInfo_APPLICATION_STATE_HAS_RUNNING_ACTIVITIES   ChromeApplicationStateInfo_ChromeApplicationState = 1
	ChromeApplicationStateInfo_APPLICATION_STATE_HAS_PAUSED_ACTIVITIES    ChromeApplicationStateInfo_ChromeApplicationState = 2
	ChromeApplicationStateInfo_APPLICATION_STATE_HAS_STOPPED_ACTIVITIES   ChromeApplicationStateInfo_ChromeApplicationState = 3
	ChromeApplicationStateInfo_APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES ChromeApplicationStateInfo_ChromeApplicationState = 4
)

// Enum value maps for ChromeApplicationStateInfo_ChromeApplicationState.
var (
	ChromeApplicationStateInfo_ChromeApplicationState_name = map[int32]string{
		0: "APPLICATION_STATE_UNKNOWN",
		1: "APPLICATION_STATE_HAS_RUNNING_ACTIVITIES",
		2: "APPLICATION_STATE_HAS_PAUSED_ACTIVITIES",
		3: "APPLICATION_STATE_HAS_STOPPED_ACTIVITIES",
		4: "APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES",
	}
	ChromeApplicationStateInfo_ChromeApplicationState_value = map[string]int32{
		"APPLICATION_STATE_UNKNOWN":                  0,
		"APPLICATION_STATE_HAS_RUNNING_ACTIVITIES":   1,
		"APPLICATION_STATE_HAS_PAUSED_ACTIVITIES":    2,
		"APPLICATION_STATE_HAS_STOPPED_ACTIVITIES":   3,
		"APPLICATION_STATE_HAS_DESTROYED_ACTIVITIES": 4,
	}
)

func (x ChromeApplicationStateInfo_ChromeApplicationState) Enum() *ChromeApplicationStateInfo_ChromeApplicationState {
	p := new(ChromeApplicationStateInfo_ChromeApplicationState)
	*p = x
	return p
}

func (x ChromeApplicationStateInfo_ChromeApplicationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeApplicationStateInfo_ChromeApplicationState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[36].Descriptor()
}

func (ChromeApplicationStateInfo_ChromeApplicationState) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[36]
}

func (x ChromeApplicationStateInfo_ChromeApplicationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeApplicationStateInfo_ChromeApplicationState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeApplicationStateInfo_ChromeApplicationState(num)
	return nil
}

// Deprecated: Use ChromeApplicationStateInfo_ChromeApplicationState.Descriptor instead.
func (ChromeApplicationStateInfo_ChromeApplicationState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{408, 0}
}

type ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode int32

const (
	ChromeCompositorSchedulerState_DEADLINE_MODE_UNSPECIFIED ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode = 0
	ChromeCompositorSchedulerState_DEADLINE_MODE_NONE        ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode = 1
	ChromeCompositorSchedulerState_DEADLINE_MODE_IMMEDIATE   ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode = 2
	ChromeCompositorSchedulerState_DEADLINE_MODE_REGULAR     ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode = 3
	ChromeCompositorSchedulerState_DEADLINE_MODE_LATE        ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode = 4
	ChromeCompositorSchedulerState_DEADLINE_MODE_BLOCKED     ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode = 5
)

// Enum value maps for ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode.
var (
	ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_name = map[int32]string{
		0: "DEADLINE_MODE_UNSPECIFIED",
		1: "DEADLINE_MODE_NONE",
		2: "DEADLINE_MODE_IMMEDIATE",
		3: "DEADLINE_MODE_REGULAR",
		4: "DEADLINE_MODE_LATE",
		5: "DEADLINE_MODE_BLOCKED",
	}
	ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode_value = map[string]int32{
		"DEADLINE_MODE_UNSPECIFIED": 0,
		"DEADLINE_MODE_NONE":        1,
		"DEADLINE_MODE_IMMEDIATE":   2,
		"DEADLINE_MODE_REGULAR":     3,
		"DEADLINE_MODE_LATE":        4,
		"DEADLINE_MODE_BLOCKED":     5,
	}
)

func (x ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) Enum() *ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode {
	p := new(ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode)
	*p = x
	return p
}

func (x ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[37].Descriptor()
}

func (ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[37]
}

func (x ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode(num)
	return nil
}

// Deprecated: Use ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode.Descriptor instead.
func (ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{409, 0}
}

type ChromeCompositorStateMachine_MajorState_BeginImplFrameState int32

const (
	ChromeCompositorStateMachine_MajorState_BEGIN_IMPL_FRAME_UNSPECIFIED        ChromeCompositorStateMachine_MajorState_BeginImplFrameState = 0
	ChromeCompositorStateMachine_MajorState_BEGIN_IMPL_FRAME_IDLE               ChromeCompositorStateMachine_MajorState_BeginImplFrameState = 1
	ChromeCompositorStateMachine_MajorState_BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME ChromeCompositorStateMachine_MajorState_BeginImplFrameState = 2
	ChromeCompositorStateMachine_MajorState_BEGIN_IMPL_FRAME_INSIDE_DEADLINE    ChromeCompositorStateMachine_MajorState_BeginImplFrameState = 3
)

// Enum value maps for ChromeCompositorStateMachine_MajorState_BeginImplFrameState.
var (
	ChromeCompositorStateMachine_MajorState_BeginImplFrameState_name = map[int32]string{
		0: "BEGIN_IMPL_FRAME_UNSPECIFIED",
		1: "BEGIN_IMPL_FRAME_IDLE",
		2: "BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME",
		3: "BEGIN_IMPL_FRAME_INSIDE_DEADLINE",
	}
	ChromeCompositorStateMachine_MajorState_BeginImplFrameState_value = map[string]int32{
		"BEGIN_IMPL_FRAME_UNSPECIFIED":        0,
		"BEGIN_IMPL_FRAME_IDLE":               1,
		"BEGIN_IMPL_FRAME_INSIDE_BEGIN_FRAME": 2,
		"BEGIN_IMPL_FRAME_INSIDE_DEADLINE":    3,
	}
)

func (x ChromeCompositorStateMachine_MajorState_BeginImplFrameState) Enum() *ChromeCompositorStateMachine_MajorState_BeginImplFrameState {
	p := new(ChromeCompositorStateMachine_MajorState_BeginImplFrameState)
	*p = x
	return p
}

func (x ChromeCompositorStateMachine_MajorState_BeginImplFrameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorStateMachine_MajorState_BeginImplFrameState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[38].Descriptor()
}

func (ChromeCompositorStateMachine_MajorState_BeginImplFrameState) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[38]
}

func (x ChromeCompositorStateMachine_MajorState_BeginImplFrameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorStateMachine_MajorState_BeginImplFrameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorStateMachine_MajorState_BeginImplFrameState(num)
	return nil
}

// Deprecated: Use ChromeCompositorStateMachine_MajorState_BeginImplFrameState.Descriptor instead.
func (ChromeCompositorStateMachine_MajorState_BeginImplFrameState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 0, 0}
}

type ChromeCompositorStateMachine_MajorState_BeginMainFrameState int32

const (
	ChromeCompositorStateMachine_MajorState_BEGIN_MAIN_FRAME_UNSPECIFIED     ChromeCompositorStateMachine_MajorState_BeginMainFrameState = 0
	ChromeCompositorStateMachine_MajorState_BEGIN_MAIN_FRAME_IDLE            ChromeCompositorStateMachine_MajorState_BeginMainFrameState = 1
	ChromeCompositorStateMachine_MajorState_BEGIN_MAIN_FRAME_SENT            ChromeCompositorStateMachine_MajorState_BeginMainFrameState = 2
	ChromeCompositorStateMachine_MajorState_BEGIN_MAIN_FRAME_READY_TO_COMMIT ChromeCompositorStateMachine_MajorState_BeginMainFrameState = 3
)

// Enum value maps for ChromeCompositorStateMachine_MajorState_BeginMainFrameState.
var (
	ChromeCompositorStateMachine_MajorState_BeginMainFrameState_name = map[int32]string{
		0: "BEGIN_MAIN_FRAME_UNSPECIFIED",
		1: "BEGIN_MAIN_FRAME_IDLE",
		2: "BEGIN_MAIN_FRAME_SENT",
		3: "BEGIN_MAIN_FRAME_READY_TO_COMMIT",
	}
	ChromeCompositorStateMachine_MajorState_BeginMainFrameState_value = map[string]int32{
		"BEGIN_MAIN_FRAME_UNSPECIFIED":     0,
		"BEGIN_MAIN_FRAME_IDLE":            1,
		"BEGIN_MAIN_FRAME_SENT":            2,
		"BEGIN_MAIN_FRAME_READY_TO_COMMIT": 3,
	}
)

func (x ChromeCompositorStateMachine_MajorState_BeginMainFrameState) Enum() *ChromeCompositorStateMachine_MajorState_BeginMainFrameState {
	p := new(ChromeCompositorStateMachine_MajorState_BeginMainFrameState)
	*p = x
	return p
}

func (x ChromeCompositorStateMachine_MajorState_BeginMainFrameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorStateMachine_MajorState_BeginMainFrameState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[39].Descriptor()
}

func (ChromeCompositorStateMachine_MajorState_BeginMainFrameState) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[39]
}

func (x ChromeCompositorStateMachine_MajorState_BeginMainFrameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorStateMachine_MajorState_BeginMainFrameState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorStateMachine_MajorState_BeginMainFrameState(num)
	return nil
}

// Deprecated: Use ChromeCompositorStateMachine_MajorState_BeginMainFrameState.Descriptor instead.
func (ChromeCompositorStateMachine_MajorState_BeginMainFrameState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 0, 1}
}

type ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState int32

const (
	ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_UNSPECIFIED                  ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState = 0
	ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_NONE                         ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState = 1
	ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_ACTIVE                       ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState = 2
	ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_CREATING                     ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState = 3
	ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT     ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState = 4
	ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState = 5
)

// Enum value maps for ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState.
var (
	ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_name = map[int32]string{
		0: "LAYER_TREE_FRAME_UNSPECIFIED",
		1: "LAYER_TREE_FRAME_NONE",
		2: "LAYER_TREE_FRAME_ACTIVE",
		3: "LAYER_TREE_FRAME_CREATING",
		4: "LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT",
		5: "LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION",
	}
	ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState_value = map[string]int32{
		"LAYER_TREE_FRAME_UNSPECIFIED":                  0,
		"LAYER_TREE_FRAME_NONE":                         1,
		"LAYER_TREE_FRAME_ACTIVE":                       2,
		"LAYER_TREE_FRAME_CREATING":                     3,
		"LAYER_TREE_FRAME_WAITING_FOR_FIRST_COMMIT":     4,
		"LAYER_TREE_FRAME_WAITING_FOR_FIRST_ACTIVATION": 5,
	}
)

func (x ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) Enum() *ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState {
	p := new(ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState)
	*p = x
	return p
}

func (x ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[40].Descriptor()
}

func (ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[40]
}

func (x ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState(num)
	return nil
}

// Deprecated: Use ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState.Descriptor instead.
func (ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 0, 2}
}

type ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState int32

const (
	ChromeCompositorStateMachine_MajorState_FORCED_REDRAW_UNSPECIFIED            ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState = 0
	ChromeCompositorStateMachine_MajorState_FORCED_REDRAW_IDLE                   ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState = 1
	ChromeCompositorStateMachine_MajorState_FORCED_REDRAW_WAITING_FOR_COMMIT     ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState = 2
	ChromeCompositorStateMachine_MajorState_FORCED_REDRAW_WAITING_FOR_ACTIVATION ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState = 3
	ChromeCompositorStateMachine_MajorState_FORCED_REDRAW_WAITING_FOR_DRAW       ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState = 4
)

// Enum value maps for ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState.
var (
	ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_name = map[int32]string{
		0: "FORCED_REDRAW_UNSPECIFIED",
		1: "FORCED_REDRAW_IDLE",
		2: "FORCED_REDRAW_WAITING_FOR_COMMIT",
		3: "FORCED_REDRAW_WAITING_FOR_ACTIVATION",
		4: "FORCED_REDRAW_WAITING_FOR_DRAW",
	}
	ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState_value = map[string]int32{
		"FORCED_REDRAW_UNSPECIFIED":            0,
		"FORCED_REDRAW_IDLE":                   1,
		"FORCED_REDRAW_WAITING_FOR_COMMIT":     2,
		"FORCED_REDRAW_WAITING_FOR_ACTIVATION": 3,
		"FORCED_REDRAW_WAITING_FOR_DRAW":       4,
	}
)

func (x ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) Enum() *ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState {
	p := new(ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState)
	*p = x
	return p
}

func (x ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[41].Descriptor()
}

func (ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[41]
}

func (x ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState(num)
	return nil
}

// Deprecated: Use ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState.Descriptor instead.
func (ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 0, 3}
}

type ChromeCompositorStateMachine_MinorState_TreePriority int32

const (
	ChromeCompositorStateMachine_MinorState_TREE_PRIORITY_UNSPECIFIED                  ChromeCompositorStateMachine_MinorState_TreePriority = 0
	ChromeCompositorStateMachine_MinorState_TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES ChromeCompositorStateMachine_MinorState_TreePriority = 1
	ChromeCompositorStateMachine_MinorState_TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY    ChromeCompositorStateMachine_MinorState_TreePriority = 2
	ChromeCompositorStateMachine_MinorState_TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY   ChromeCompositorStateMachine_MinorState_TreePriority = 3
)

// Enum value maps for ChromeCompositorStateMachine_MinorState_TreePriority.
var (
	ChromeCompositorStateMachine_MinorState_TreePriority_name = map[int32]string{
		0: "TREE_PRIORITY_UNSPECIFIED",
		1: "TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES",
		2: "TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY",
		3: "TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY",
	}
	ChromeCompositorStateMachine_MinorState_TreePriority_value = map[string]int32{
		"TREE_PRIORITY_UNSPECIFIED":                  0,
		"TREE_PRIORITY_SAME_PRIORITY_FOR_BOTH_TREES": 1,
		"TREE_PRIORITY_SMOOTHNESS_TAKES_PRIORITY":    2,
		"TREE_PRIORITY_NEW_CONTENT_TAKES_PRIORITY":   3,
	}
)

func (x ChromeCompositorStateMachine_MinorState_TreePriority) Enum() *ChromeCompositorStateMachine_MinorState_TreePriority {
	p := new(ChromeCompositorStateMachine_MinorState_TreePriority)
	*p = x
	return p
}

func (x ChromeCompositorStateMachine_MinorState_TreePriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorStateMachine_MinorState_TreePriority) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[42].Descriptor()
}

func (ChromeCompositorStateMachine_MinorState_TreePriority) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[42]
}

func (x ChromeCompositorStateMachine_MinorState_TreePriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorStateMachine_MinorState_TreePriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorStateMachine_MinorState_TreePriority(num)
	return nil
}

// Deprecated: Use ChromeCompositorStateMachine_MinorState_TreePriority.Descriptor instead.
func (ChromeCompositorStateMachine_MinorState_TreePriority) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 1, 0}
}

type ChromeCompositorStateMachine_MinorState_ScrollHandlerState int32

const (
	ChromeCompositorStateMachine_MinorState_SCROLL_HANDLER_UNSPECIFIED            ChromeCompositorStateMachine_MinorState_ScrollHandlerState = 0
	ChromeCompositorStateMachine_MinorState_SCROLL_AFFECTS_SCROLL_HANDLER         ChromeCompositorStateMachine_MinorState_ScrollHandlerState = 1
	ChromeCompositorStateMachine_MinorState_SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER ChromeCompositorStateMachine_MinorState_ScrollHandlerState = 2
)

// Enum value maps for ChromeCompositorStateMachine_MinorState_ScrollHandlerState.
var (
	ChromeCompositorStateMachine_MinorState_ScrollHandlerState_name = map[int32]string{
		0: "SCROLL_HANDLER_UNSPECIFIED",
		1: "SCROLL_AFFECTS_SCROLL_HANDLER",
		2: "SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER",
	}
	ChromeCompositorStateMachine_MinorState_ScrollHandlerState_value = map[string]int32{
		"SCROLL_HANDLER_UNSPECIFIED":            0,
		"SCROLL_AFFECTS_SCROLL_HANDLER":         1,
		"SCROLL_DOES_NOT_AFFECT_SCROLL_HANDLER": 2,
	}
)

func (x ChromeCompositorStateMachine_MinorState_ScrollHandlerState) Enum() *ChromeCompositorStateMachine_MinorState_ScrollHandlerState {
	p := new(ChromeCompositorStateMachine_MinorState_ScrollHandlerState)
	*p = x
	return p
}

func (x ChromeCompositorStateMachine_MinorState_ScrollHandlerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeCompositorStateMachine_MinorState_ScrollHandlerState) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[43].Descriptor()
}

func (ChromeCompositorStateMachine_MinorState_ScrollHandlerState) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[43]
}

func (x ChromeCompositorStateMachine_MinorState_ScrollHandlerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeCompositorStateMachine_MinorState_ScrollHandlerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeCompositorStateMachine_MinorState_ScrollHandlerState(num)
	return nil
}

// Deprecated: Use ChromeCompositorStateMachine_MinorState_ScrollHandlerState.Descriptor instead.
func (ChromeCompositorStateMachine_MinorState_ScrollHandlerState) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 1, 1}
}

// JSON format has a "type" field that was always just "BeginFrameArgs" we
// drop this in the proto representation, and instead make the JSON format
// "subtype" field become the type field.
type BeginFrameArgs_BeginFrameArgsType int32

const (
	BeginFrameArgs_BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED BeginFrameArgs_BeginFrameArgsType = 0
	BeginFrameArgs_BEGIN_FRAME_ARGS_TYPE_INVALID     BeginFrameArgs_BeginFrameArgsType = 1
	BeginFrameArgs_BEGIN_FRAME_ARGS_TYPE_NORMAL      BeginFrameArgs_BeginFrameArgsType = 2
	BeginFrameArgs_BEGIN_FRAME_ARGS_TYPE_MISSED      BeginFrameArgs_BeginFrameArgsType = 3
)

// Enum value maps for BeginFrameArgs_BeginFrameArgsType.
var (
	BeginFrameArgs_BeginFrameArgsType_name = map[int32]string{
		0: "BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED",
		1: "BEGIN_FRAME_ARGS_TYPE_INVALID",
		2: "BEGIN_FRAME_ARGS_TYPE_NORMAL",
		3: "BEGIN_FRAME_ARGS_TYPE_MISSED",
	}
	BeginFrameArgs_BeginFrameArgsType_value = map[string]int32{
		"BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED": 0,
		"BEGIN_FRAME_ARGS_TYPE_INVALID":     1,
		"BEGIN_FRAME_ARGS_TYPE_NORMAL":      2,
		"BEGIN_FRAME_ARGS_TYPE_MISSED":      3,
	}
)

func (x BeginFrameArgs_BeginFrameArgsType) Enum() *BeginFrameArgs_BeginFrameArgsType {
	p := new(BeginFrameArgs_BeginFrameArgsType)
	*p = x
	return p
}

func (x BeginFrameArgs_BeginFrameArgsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeginFrameArgs_BeginFrameArgsType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[44].Descriptor()
}

func (BeginFrameArgs_BeginFrameArgsType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[44]
}

func (x BeginFrameArgs_BeginFrameArgsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BeginFrameArgs_BeginFrameArgsType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BeginFrameArgs_BeginFrameArgsType(num)
	return nil
}

// Deprecated: Use BeginFrameArgs_BeginFrameArgsType.Descriptor instead.
func (BeginFrameArgs_BeginFrameArgsType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{411, 0}
}

type BeginImplFrameArgs_State int32

const (
	BeginImplFrameArgs_BEGIN_FRAME_FINISHED BeginImplFrameArgs_State = 0
	BeginImplFrameArgs_BEGIN_FRAME_USING    BeginImplFrameArgs_State = 1
)

// Enum value maps for BeginImplFrameArgs_State.
var (
	BeginImplFrameArgs_State_name = map[int32]string{
		0: "BEGIN_FRAME_FINISHED",
		1: "BEGIN_FRAME_USING",
	}
	BeginImplFrameArgs_State_value = map[string]int32{
		"BEGIN_FRAME_FINISHED": 0,
		"BEGIN_FRAME_USING":    1,
	}
)

func (x BeginImplFrameArgs_State) Enum() *BeginImplFrameArgs_State {
	p := new(BeginImplFrameArgs_State)
	*p = x
	return p
}

func (x BeginImplFrameArgs_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BeginImplFrameArgs_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[45].Descriptor()
}

func (BeginImplFrameArgs_State) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[45]
}

func (x BeginImplFrameArgs_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BeginImplFrameArgs_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BeginImplFrameArgs_State(num)
	return nil
}

// Deprecated: Use BeginImplFrameArgs_State.Descriptor instead.
func (BeginImplFrameArgs_State) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{412, 0}
}

type ChromeFrameReporter_State int32

const (
	// The frame did not have any updates to present.
	ChromeFrameReporter_STATE_NO_UPDATE_DESIRED ChromeFrameReporter_State = 0
	// The frame presented all the desired updates (i.e. any updates requested
	// from both the compositor thread and main-threads were handled).
	ChromeFrameReporter_STATE_PRESENTED_ALL ChromeFrameReporter_State = 1
	// The frame was presented with some updates, but also missed some updates
	// (e.g. missed updates from the main-thread, but included updates from the
	// compositor thread).
	ChromeFrameReporter_STATE_PRESENTED_PARTIAL ChromeFrameReporter_State = 2
	// The frame was dropped, i.e. some updates were desired for the frame, but
	// was not presented.
	ChromeFrameReporter_STATE_DROPPED ChromeFrameReporter_State = 3
)

// Enum value maps for ChromeFrameReporter_State.
var (
	ChromeFrameReporter_State_name = map[int32]string{
		0: "STATE_NO_UPDATE_DESIRED",
		1: "STATE_PRESENTED_ALL",
		2: "STATE_PRESENTED_PARTIAL",
		3: "STATE_DROPPED",
	}
	ChromeFrameReporter_State_value = map[string]int32{
		"STATE_NO_UPDATE_DESIRED": 0,
		"STATE_PRESENTED_ALL":     1,
		"STATE_PRESENTED_PARTIAL": 2,
		"STATE_DROPPED":           3,
	}
)

func (x ChromeFrameReporter_State) Enum() *ChromeFrameReporter_State {
	p := new(ChromeFrameReporter_State)
	*p = x
	return p
}

func (x ChromeFrameReporter_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeFrameReporter_State) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[46].Descriptor()
}

func (ChromeFrameReporter_State) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[46]
}

func (x ChromeFrameReporter_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeFrameReporter_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeFrameReporter_State(num)
	return nil
}

// Deprecated: Use ChromeFrameReporter_State.Descriptor instead.
func (ChromeFrameReporter_State) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{416, 0}
}

type ChromeFrameReporter_FrameDropReason int32

const (
	ChromeFrameReporter_REASON_UNSPECIFIED ChromeFrameReporter_FrameDropReason = 0
	// Frame was dropped by the display-compositor.
	// The display-compositor may drop a frame some times (e.g. the frame missed
	// the deadline, or was blocked on surface-sync, etc.)
	ChromeFrameReporter_REASON_DISPLAY_COMPOSITOR ChromeFrameReporter_FrameDropReason = 1
	// Frame was dropped because of the main-thread.
	// The main-thread may cause a frame to be dropped, e.g. if the main-thread
	// is running expensive javascript, or doing a lot of layout updates, etc.
	ChromeFrameReporter_REASON_MAIN_THREAD ChromeFrameReporter_FrameDropReason = 2
	// Frame was dropped by the client compositor.
	// The client compositor can drop some frames too (e.g. attempting to
	// recover latency, missing the deadline, etc.).
	ChromeFrameReporter_REASON_CLIENT_COMPOSITOR ChromeFrameReporter_FrameDropReason = 3
)

// Enum value maps for ChromeFrameReporter_FrameDropReason.
var (
	ChromeFrameReporter_FrameDropReason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "REASON_DISPLAY_COMPOSITOR",
		2: "REASON_MAIN_THREAD",
		3: "REASON_CLIENT_COMPOSITOR",
	}
	ChromeFrameReporter_FrameDropReason_value = map[string]int32{
		"REASON_UNSPECIFIED":        0,
		"REASON_DISPLAY_COMPOSITOR": 1,
		"REASON_MAIN_THREAD":        2,
		"REASON_CLIENT_COMPOSITOR":  3,
	}
)

func (x ChromeFrameReporter_FrameDropReason) Enum() *ChromeFrameReporter_FrameDropReason {
	p := new(ChromeFrameReporter_FrameDropReason)
	*p = x
	return p
}

func (x ChromeFrameReporter_FrameDropReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeFrameReporter_FrameDropReason) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[47].Descriptor()
}

func (ChromeFrameReporter_FrameDropReason) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[47]
}

func (x ChromeFrameReporter_FrameDropReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeFrameReporter_FrameDropReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeFrameReporter_FrameDropReason(num)
	return nil
}

// Deprecated: Use ChromeFrameReporter_FrameDropReason.Descriptor instead.
func (ChromeFrameReporter_FrameDropReason) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{416, 1}
}

// NEXT ID: 11
// All step are optional but the enum is ordered (not by number) below in the
// order we expect them to appear if they are emitted in trace in a blocking
// fashion.
type ChromeLatencyInfo_Step int32

const (
	ChromeLatencyInfo_STEP_UNSPECIFIED ChromeLatencyInfo_Step = 0
	// Emitted on the browser main thread.
	ChromeLatencyInfo_STEP_SEND_INPUT_EVENT_UI ChromeLatencyInfo_Step = 3
	// Happens on the renderer's compositor.
	ChromeLatencyInfo_STEP_HANDLE_INPUT_EVENT_IMPL         ChromeLatencyInfo_Step = 5
	ChromeLatencyInfo_STEP_DID_HANDLE_INPUT_AND_OVERSCROLL ChromeLatencyInfo_Step = 8
	// Occurs on the Renderer's main thread.
	ChromeLatencyInfo_STEP_HANDLE_INPUT_EVENT_MAIN        ChromeLatencyInfo_Step = 4
	ChromeLatencyInfo_STEP_MAIN_THREAD_SCROLL_UPDATE      ChromeLatencyInfo_Step = 2
	ChromeLatencyInfo_STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT ChromeLatencyInfo_Step = 1
	// Could be emitted on both the renderer's main OR compositor.
	ChromeLatencyInfo_STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL ChromeLatencyInfo_Step = 9
	// Optionally sometimes HANDLED_INPUT_EVENT_MAIN_OR_IMPL will proxy to the
	// renderer's compositor and this will be emitted.
	ChromeLatencyInfo_STEP_HANDLED_INPUT_EVENT_IMPL ChromeLatencyInfo_Step = 10
	// Renderer's compositor.
	ChromeLatencyInfo_STEP_SWAP_BUFFERS ChromeLatencyInfo_Step = 6
	// Happens on the VizCompositor in the GPU process.
	ChromeLatencyInfo_STEP_DRAW_AND_SWAP ChromeLatencyInfo_Step = 7
)

// Enum value maps for ChromeLatencyInfo_Step.
var (
	ChromeLatencyInfo_Step_name = map[int32]string{
		0:  "STEP_UNSPECIFIED",
		3:  "STEP_SEND_INPUT_EVENT_UI",
		5:  "STEP_HANDLE_INPUT_EVENT_IMPL",
		8:  "STEP_DID_HANDLE_INPUT_AND_OVERSCROLL",
		4:  "STEP_HANDLE_INPUT_EVENT_MAIN",
		2:  "STEP_MAIN_THREAD_SCROLL_UPDATE",
		1:  "STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT",
		9:  "STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL",
		10: "STEP_HANDLED_INPUT_EVENT_IMPL",
		6:  "STEP_SWAP_BUFFERS",
		7:  "STEP_DRAW_AND_SWAP",
	}
	ChromeLatencyInfo_Step_value = map[string]int32{
		"STEP_UNSPECIFIED":                      0,
		"STEP_SEND_INPUT_EVENT_UI":              3,
		"STEP_HANDLE_INPUT_EVENT_IMPL":          5,
		"STEP_DID_HANDLE_INPUT_AND_OVERSCROLL":  8,
		"STEP_HANDLE_INPUT_EVENT_MAIN":          4,
		"STEP_MAIN_THREAD_SCROLL_UPDATE":        2,
		"STEP_HANDLE_INPUT_EVENT_MAIN_COMMIT":   1,
		"STEP_HANDLED_INPUT_EVENT_MAIN_OR_IMPL": 9,
		"STEP_HANDLED_INPUT_EVENT_IMPL":         10,
		"STEP_SWAP_BUFFERS":                     6,
		"STEP_DRAW_AND_SWAP":                    7,
	}
)

func (x ChromeLatencyInfo_Step) Enum() *ChromeLatencyInfo_Step {
	p := new(ChromeLatencyInfo_Step)
	*p = x
	return p
}

func (x ChromeLatencyInfo_Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeLatencyInfo_Step) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[48].Descriptor()
}

func (ChromeLatencyInfo_Step) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[48]
}

func (x ChromeLatencyInfo_Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeLatencyInfo_Step) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeLatencyInfo_Step(num)
	return nil
}

// Deprecated: Use ChromeLatencyInfo_Step.Descriptor instead.
func (ChromeLatencyInfo_Step) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{418, 0}
}

// This enum is a copy of LatencyComponentType enum in Chrome, located in
// ui/latency/latency_info.h, modulo added UNKNOWN value per protobuf
// practices.
type ChromeLatencyInfo_LatencyComponentType int32

const (
	ChromeLatencyInfo_COMPONENT_UNSPECIFIED                                      ChromeLatencyInfo_LatencyComponentType = 0
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH                    ChromeLatencyInfo_LatencyComponentType = 1
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL       ChromeLatencyInfo_LatencyComponentType = 2
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL ChromeLatencyInfo_LatencyComponentType = 3
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL                     ChromeLatencyInfo_LatencyComponentType = 4
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_UI                           ChromeLatencyInfo_LatencyComponentType = 5
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN                ChromeLatencyInfo_LatencyComponentType = 6
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN     ChromeLatencyInfo_LatencyComponentType = 7
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL     ChromeLatencyInfo_LatencyComponentType = 8
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT     ChromeLatencyInfo_LatencyComponentType = 9
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH                      ChromeLatencyInfo_LatencyComponentType = 10
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP                ChromeLatencyInfo_LatencyComponentType = 11
	ChromeLatencyInfo_COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME                ChromeLatencyInfo_LatencyComponentType = 12
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER                      ChromeLatencyInfo_LatencyComponentType = 13
	ChromeLatencyInfo_COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP                   ChromeLatencyInfo_LatencyComponentType = 14
)

// Enum value maps for ChromeLatencyInfo_LatencyComponentType.
var (
	ChromeLatencyInfo_LatencyComponentType_name = map[int32]string{
		0:  "COMPONENT_UNSPECIFIED",
		1:  "COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH",
		2:  "COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL",
		3:  "COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL",
		4:  "COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL",
		5:  "COMPONENT_INPUT_EVENT_LATENCY_UI",
		6:  "COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN",
		7:  "COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN",
		8:  "COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL",
		9:  "COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT",
		10: "COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH",
		11: "COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP",
		12: "COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME",
		13: "COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER",
		14: "COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP",
	}
	ChromeLatencyInfo_LatencyComponentType_value = map[string]int32{
		"COMPONENT_UNSPECIFIED":                                      0,
		"COMPONENT_INPUT_EVENT_LATENCY_BEGIN_RWH":                    1,
		"COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_ORIGINAL":       2,
		"COMPONENT_INPUT_EVENT_LATENCY_FIRST_SCROLL_UPDATE_ORIGINAL": 3,
		"COMPONENT_INPUT_EVENT_LATENCY_ORIGINAL":                     4,
		"COMPONENT_INPUT_EVENT_LATENCY_UI":                           5,
		"COMPONENT_INPUT_EVENT_LATENCY_RENDERER_MAIN":                6,
		"COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_MAIN":     7,
		"COMPONENT_INPUT_EVENT_LATENCY_RENDERING_SCHEDULED_IMPL":     8,
		"COMPONENT_INPUT_EVENT_LATENCY_SCROLL_UPDATE_LAST_EVENT":     9,
		"COMPONENT_INPUT_EVENT_LATENCY_ACK_RWH":                      10,
		"COMPONENT_INPUT_EVENT_LATENCY_RENDERER_SWAP":                11,
		"COMPONENT_DISPLAY_COMPOSITOR_RECEIVED_FRAME":                12,
		"COMPONENT_INPUT_EVENT_GPU_SWAP_BUFFER":                      13,
		"COMPONENT_INPUT_EVENT_LATENCY_FRAME_SWAP":                   14,
	}
)

func (x ChromeLatencyInfo_LatencyComponentType) Enum() *ChromeLatencyInfo_LatencyComponentType {
	p := new(ChromeLatencyInfo_LatencyComponentType)
	*p = x
	return p
}

func (x ChromeLatencyInfo_LatencyComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeLatencyInfo_LatencyComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[49].Descriptor()
}

func (ChromeLatencyInfo_LatencyComponentType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[49]
}

func (x ChromeLatencyInfo_LatencyComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeLatencyInfo_LatencyComponentType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeLatencyInfo_LatencyComponentType(num)
	return nil
}

// Deprecated: Use ChromeLatencyInfo_LatencyComponentType.Descriptor instead.
func (ChromeLatencyInfo_LatencyComponentType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{418, 1}
}

type ChromeLegacyIpc_MessageClass int32

const (
	ChromeLegacyIpc_CLASS_UNSPECIFIED             ChromeLegacyIpc_MessageClass = 0
	ChromeLegacyIpc_CLASS_AUTOMATION              ChromeLegacyIpc_MessageClass = 1
	ChromeLegacyIpc_CLASS_FRAME                   ChromeLegacyIpc_MessageClass = 2
	ChromeLegacyIpc_CLASS_PAGE                    ChromeLegacyIpc_MessageClass = 3
	ChromeLegacyIpc_CLASS_VIEW                    ChromeLegacyIpc_MessageClass = 4
	ChromeLegacyIpc_CLASS_WIDGET                  ChromeLegacyIpc_MessageClass = 5
	ChromeLegacyIpc_CLASS_INPUT                   ChromeLegacyIpc_MessageClass = 6
	ChromeLegacyIpc_CLASS_TEST                    ChromeLegacyIpc_MessageClass = 7
	ChromeLegacyIpc_CLASS_WORKER                  ChromeLegacyIpc_MessageClass = 8
	ChromeLegacyIpc_CLASS_NACL                    ChromeLegacyIpc_MessageClass = 9
	ChromeLegacyIpc_CLASS_GPU_CHANNEL             ChromeLegacyIpc_MessageClass = 10
	ChromeLegacyIpc_CLASS_MEDIA                   ChromeLegacyIpc_MessageClass = 11
	ChromeLegacyIpc_CLASS_PPAPI                   ChromeLegacyIpc_MessageClass = 12
	ChromeLegacyIpc_CLASS_CHROME                  ChromeLegacyIpc_MessageClass = 13
	ChromeLegacyIpc_CLASS_DRAG                    ChromeLegacyIpc_MessageClass = 14
	ChromeLegacyIpc_CLASS_PRINT                   ChromeLegacyIpc_MessageClass = 15
	ChromeLegacyIpc_CLASS_EXTENSION               ChromeLegacyIpc_MessageClass = 16
	ChromeLegacyIpc_CLASS_TEXT_INPUT_CLIENT       ChromeLegacyIpc_MessageClass = 17
	ChromeLegacyIpc_CLASS_BLINK_TEST              ChromeLegacyIpc_MessageClass = 18
	ChromeLegacyIpc_CLASS_ACCESSIBILITY           ChromeLegacyIpc_MessageClass = 19
	ChromeLegacyIpc_CLASS_PRERENDER               ChromeLegacyIpc_MessageClass = 20
	ChromeLegacyIpc_CLASS_CHROMOTING              ChromeLegacyIpc_MessageClass = 21
	ChromeLegacyIpc_CLASS_BROWSER_PLUGIN          ChromeLegacyIpc_MessageClass = 22
	ChromeLegacyIpc_CLASS_ANDROID_WEB_VIEW        ChromeLegacyIpc_MessageClass = 23
	ChromeLegacyIpc_CLASS_NACL_HOST               ChromeLegacyIpc_MessageClass = 24
	ChromeLegacyIpc_CLASS_ENCRYPTED_MEDIA         ChromeLegacyIpc_MessageClass = 25
	ChromeLegacyIpc_CLASS_CAST                    ChromeLegacyIpc_MessageClass = 26
	ChromeLegacyIpc_CLASS_GIN_JAVA_BRIDGE         ChromeLegacyIpc_MessageClass = 27
	ChromeLegacyIpc_CLASS_CHROME_UTILITY_PRINTING ChromeLegacyIpc_MessageClass = 28
	ChromeLegacyIpc_CLASS_OZONE_GPU               ChromeLegacyIpc_MessageClass = 29
	ChromeLegacyIpc_CLASS_WEB_TEST                ChromeLegacyIpc_MessageClass = 30
	ChromeLegacyIpc_CLASS_NETWORK_HINTS           ChromeLegacyIpc_MessageClass = 31
	ChromeLegacyIpc_CLASS_EXTENSIONS_GUEST_VIEW   ChromeLegacyIpc_MessageClass = 32
	ChromeLegacyIpc_CLASS_GUEST_VIEW              ChromeLegacyIpc_MessageClass = 33
	ChromeLegacyIpc_CLASS_MEDIA_PLAYER_DELEGATE   ChromeLegacyIpc_MessageClass = 34
	ChromeLegacyIpc_CLASS_EXTENSION_WORKER        ChromeLegacyIpc_MessageClass = 35
	ChromeLegacyIpc_CLASS_SUBRESOURCE_FILTER      ChromeLegacyIpc_MessageClass = 36
	ChromeLegacyIpc_CLASS_UNFREEZABLE_FRAME       ChromeLegacyIpc_MessageClass = 37
)

// Enum value maps for ChromeLegacyIpc_MessageClass.
var (
	ChromeLegacyIpc_MessageClass_name = map[int32]string{
		0:  "CLASS_UNSPECIFIED",
		1:  "CLASS_AUTOMATION",
		2:  "CLASS_FRAME",
		3:  "CLASS_PAGE",
		4:  "CLASS_VIEW",
		5:  "CLASS_WIDGET",
		6:  "CLASS_INPUT",
		7:  "CLASS_TEST",
		8:  "CLASS_WORKER",
		9:  "CLASS_NACL",
		10: "CLASS_GPU_CHANNEL",
		11: "CLASS_MEDIA",
		12: "CLASS_PPAPI",
		13: "CLASS_CHROME",
		14: "CLASS_DRAG",
		15: "CLASS_PRINT",
		16: "CLASS_EXTENSION",
		17: "CLASS_TEXT_INPUT_CLIENT",
		18: "CLASS_BLINK_TEST",
		19: "CLASS_ACCESSIBILITY",
		20: "CLASS_PRERENDER",
		21: "CLASS_CHROMOTING",
		22: "CLASS_BROWSER_PLUGIN",
		23: "CLASS_ANDROID_WEB_VIEW",
		24: "CLASS_NACL_HOST",
		25: "CLASS_ENCRYPTED_MEDIA",
		26: "CLASS_CAST",
		27: "CLASS_GIN_JAVA_BRIDGE",
		28: "CLASS_CHROME_UTILITY_PRINTING",
		29: "CLASS_OZONE_GPU",
		30: "CLASS_WEB_TEST",
		31: "CLASS_NETWORK_HINTS",
		32: "CLASS_EXTENSIONS_GUEST_VIEW",
		33: "CLASS_GUEST_VIEW",
		34: "CLASS_MEDIA_PLAYER_DELEGATE",
		35: "CLASS_EXTENSION_WORKER",
		36: "CLASS_SUBRESOURCE_FILTER",
		37: "CLASS_UNFREEZABLE_FRAME",
	}
	ChromeLegacyIpc_MessageClass_value = map[string]int32{
		"CLASS_UNSPECIFIED":             0,
		"CLASS_AUTOMATION":              1,
		"CLASS_FRAME":                   2,
		"CLASS_PAGE":                    3,
		"CLASS_VIEW":                    4,
		"CLASS_WIDGET":                  5,
		"CLASS_INPUT":                   6,
		"CLASS_TEST":                    7,
		"CLASS_WORKER":                  8,
		"CLASS_NACL":                    9,
		"CLASS_GPU_CHANNEL":             10,
		"CLASS_MEDIA":                   11,
		"CLASS_PPAPI":                   12,
		"CLASS_CHROME":                  13,
		"CLASS_DRAG":                    14,
		"CLASS_PRINT":                   15,
		"CLASS_EXTENSION":               16,
		"CLASS_TEXT_INPUT_CLIENT":       17,
		"CLASS_BLINK_TEST":              18,
		"CLASS_ACCESSIBILITY":           19,
		"CLASS_PRERENDER":               20,
		"CLASS_CHROMOTING":              21,
		"CLASS_BROWSER_PLUGIN":          22,
		"CLASS_ANDROID_WEB_VIEW":        23,
		"CLASS_NACL_HOST":               24,
		"CLASS_ENCRYPTED_MEDIA":         25,
		"CLASS_CAST":                    26,
		"CLASS_GIN_JAVA_BRIDGE":         27,
		"CLASS_CHROME_UTILITY_PRINTING": 28,
		"CLASS_OZONE_GPU":               29,
		"CLASS_WEB_TEST":                30,
		"CLASS_NETWORK_HINTS":           31,
		"CLASS_EXTENSIONS_GUEST_VIEW":   32,
		"CLASS_GUEST_VIEW":              33,
		"CLASS_MEDIA_PLAYER_DELEGATE":   34,
		"CLASS_EXTENSION_WORKER":        35,
		"CLASS_SUBRESOURCE_FILTER":      36,
		"CLASS_UNFREEZABLE_FRAME":       37,
	}
)

func (x ChromeLegacyIpc_MessageClass) Enum() *ChromeLegacyIpc_MessageClass {
	p := new(ChromeLegacyIpc_MessageClass)
	*p = x
	return p
}

func (x ChromeLegacyIpc_MessageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeLegacyIpc_MessageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[50].Descriptor()
}

func (ChromeLegacyIpc_MessageClass) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[50]
}

func (x ChromeLegacyIpc_MessageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeLegacyIpc_MessageClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeLegacyIpc_MessageClass(num)
	return nil
}

// Deprecated: Use ChromeLegacyIpc_MessageClass.Descriptor instead.
func (ChromeLegacyIpc_MessageClass) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{419, 0}
}

// Type of the TrackEvent (required if |phase| in LegacyEvent is not set).
type TrackEvent_Type int32

const (
	TrackEvent_TYPE_UNSPECIFIED TrackEvent_Type = 0
	// Slice events are events that have a begin and end timestamp, i.e. a
	// duration. They can be nested similar to a callstack: If, on the same
	// track, event B begins after event A, but before A ends, B is a child
	// event of A and will be drawn as a nested event underneath A in the UI.
	// Note that child events should always end before their parents (e.g. B
	// before A).
	//
	// Each slice event is formed by a pair of BEGIN + END events. The END event
	// does not need to repeat any TrackEvent fields it has in common with its
	// corresponding BEGIN event. Arguments and debug annotations of the BEGIN +
	// END pair will be merged during trace import.
	//
	// Note that we deliberately chose not to support COMPLETE events (which
	// would specify a duration directly) since clients would need to delay
	// writing them until the slice is completed, which can result in reordered
	// events in the trace and loss of unfinished events at the end of a trace.
	TrackEvent_TYPE_SLICE_BEGIN TrackEvent_Type = 1
	TrackEvent_TYPE_SLICE_END   TrackEvent_Type = 2
	// Instant events are nestable events without duration. They can be children
	// of slice events on the same track.
	TrackEvent_TYPE_INSTANT TrackEvent_Type = 3
	// Event that provides a value for a counter track. |track_uuid| should
	// refer to a counter track and |counter_value| set to the new value. Note
	// that most other TrackEvent fields (e.g. categories, name, ..) are not
	// supported for TYPE_COUNTER events. See also CounterDescriptor.
	TrackEvent_TYPE_COUNTER TrackEvent_Type = 4
)

// Enum value maps for TrackEvent_Type.
var (
	TrackEvent_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_SLICE_BEGIN",
		2: "TYPE_SLICE_END",
		3: "TYPE_INSTANT",
		4: "TYPE_COUNTER",
	}
	TrackEvent_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_SLICE_BEGIN": 1,
		"TYPE_SLICE_END":   2,
		"TYPE_INSTANT":     3,
		"TYPE_COUNTER":     4,
	}
)

func (x TrackEvent_Type) Enum() *TrackEvent_Type {
	p := new(TrackEvent_Type)
	*p = x
	return p
}

func (x TrackEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[51].Descriptor()
}

func (TrackEvent_Type) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[51]
}

func (x TrackEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrackEvent_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrackEvent_Type(num)
	return nil
}

// Deprecated: Use TrackEvent_Type.Descriptor instead.
func (TrackEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{426, 0}
}

type TrackEvent_LegacyEvent_FlowDirection int32

const (
	TrackEvent_LegacyEvent_FLOW_UNSPECIFIED TrackEvent_LegacyEvent_FlowDirection = 0
	TrackEvent_LegacyEvent_FLOW_IN          TrackEvent_LegacyEvent_FlowDirection = 1
	TrackEvent_LegacyEvent_FLOW_OUT         TrackEvent_LegacyEvent_FlowDirection = 2
	TrackEvent_LegacyEvent_FLOW_INOUT       TrackEvent_LegacyEvent_FlowDirection = 3
)

// Enum value maps for TrackEvent_LegacyEvent_FlowDirection.
var (
	TrackEvent_LegacyEvent_FlowDirection_name = map[int32]string{
		0: "FLOW_UNSPECIFIED",
		1: "FLOW_IN",
		2: "FLOW_OUT",
		3: "FLOW_INOUT",
	}
	TrackEvent_LegacyEvent_FlowDirection_value = map[string]int32{
		"FLOW_UNSPECIFIED": 0,
		"FLOW_IN":          1,
		"FLOW_OUT":         2,
		"FLOW_INOUT":       3,
	}
)

func (x TrackEvent_LegacyEvent_FlowDirection) Enum() *TrackEvent_LegacyEvent_FlowDirection {
	p := new(TrackEvent_LegacyEvent_FlowDirection)
	*p = x
	return p
}

func (x TrackEvent_LegacyEvent_FlowDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackEvent_LegacyEvent_FlowDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[52].Descriptor()
}

func (TrackEvent_LegacyEvent_FlowDirection) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[52]
}

func (x TrackEvent_LegacyEvent_FlowDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrackEvent_LegacyEvent_FlowDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrackEvent_LegacyEvent_FlowDirection(num)
	return nil
}

// Deprecated: Use TrackEvent_LegacyEvent_FlowDirection.Descriptor instead.
func (TrackEvent_LegacyEvent_FlowDirection) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{426, 0, 0}
}

type TrackEvent_LegacyEvent_InstantEventScope int32

const (
	TrackEvent_LegacyEvent_SCOPE_UNSPECIFIED TrackEvent_LegacyEvent_InstantEventScope = 0
	TrackEvent_LegacyEvent_SCOPE_GLOBAL      TrackEvent_LegacyEvent_InstantEventScope = 1
	TrackEvent_LegacyEvent_SCOPE_PROCESS     TrackEvent_LegacyEvent_InstantEventScope = 2
	TrackEvent_LegacyEvent_SCOPE_THREAD      TrackEvent_LegacyEvent_InstantEventScope = 3
)

// Enum value maps for TrackEvent_LegacyEvent_InstantEventScope.
var (
	TrackEvent_LegacyEvent_InstantEventScope_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "SCOPE_GLOBAL",
		2: "SCOPE_PROCESS",
		3: "SCOPE_THREAD",
	}
	TrackEvent_LegacyEvent_InstantEventScope_value = map[string]int32{
		"SCOPE_UNSPECIFIED": 0,
		"SCOPE_GLOBAL":      1,
		"SCOPE_PROCESS":     2,
		"SCOPE_THREAD":      3,
	}
)

func (x TrackEvent_LegacyEvent_InstantEventScope) Enum() *TrackEvent_LegacyEvent_InstantEventScope {
	p := new(TrackEvent_LegacyEvent_InstantEventScope)
	*p = x
	return p
}

func (x TrackEvent_LegacyEvent_InstantEventScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrackEvent_LegacyEvent_InstantEventScope) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[53].Descriptor()
}

func (TrackEvent_LegacyEvent_InstantEventScope) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[53]
}

func (x TrackEvent_LegacyEvent_InstantEventScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrackEvent_LegacyEvent_InstantEventScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrackEvent_LegacyEvent_InstantEventScope(num)
	return nil
}

// Deprecated: Use TrackEvent_LegacyEvent_InstantEventScope.Descriptor instead.
func (TrackEvent_LegacyEvent_InstantEventScope) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{426, 0, 1}
}

type MemoryTrackerSnapshot_LevelOfDetail int32

const (
	MemoryTrackerSnapshot_DETAIL_FULL       MemoryTrackerSnapshot_LevelOfDetail = 0
	MemoryTrackerSnapshot_DETAIL_LIGHT      MemoryTrackerSnapshot_LevelOfDetail = 1
	MemoryTrackerSnapshot_DETAIL_BACKGROUND MemoryTrackerSnapshot_LevelOfDetail = 2
)

// Enum value maps for MemoryTrackerSnapshot_LevelOfDetail.
var (
	MemoryTrackerSnapshot_LevelOfDetail_name = map[int32]string{
		0: "DETAIL_FULL",
		1: "DETAIL_LIGHT",
		2: "DETAIL_BACKGROUND",
	}
	MemoryTrackerSnapshot_LevelOfDetail_value = map[string]int32{
		"DETAIL_FULL":       0,
		"DETAIL_LIGHT":      1,
		"DETAIL_BACKGROUND": 2,
	}
)

func (x MemoryTrackerSnapshot_LevelOfDetail) Enum() *MemoryTrackerSnapshot_LevelOfDetail {
	p := new(MemoryTrackerSnapshot_LevelOfDetail)
	*p = x
	return p
}

func (x MemoryTrackerSnapshot_LevelOfDetail) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryTrackerSnapshot_LevelOfDetail) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[54].Descriptor()
}

func (MemoryTrackerSnapshot_LevelOfDetail) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[54]
}

func (x MemoryTrackerSnapshot_LevelOfDetail) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MemoryTrackerSnapshot_LevelOfDetail) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MemoryTrackerSnapshot_LevelOfDetail(num)
	return nil
}

// Deprecated: Use MemoryTrackerSnapshot_LevelOfDetail.Descriptor instead.
func (MemoryTrackerSnapshot_LevelOfDetail) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431, 0}
}

type MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units int32

const (
	MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_UNSPECIFIED MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units = 0
	MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_BYTES       MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units = 1
	MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_COUNT       MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units = 2
)

// Enum value maps for MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units.
var (
	MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "BYTES",
		2: "COUNT",
	}
	MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units_value = map[string]int32{
		"UNSPECIFIED": 0,
		"BYTES":       1,
		"COUNT":       2,
	}
)

func (x MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) Enum() *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units {
	p := new(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units)
	*p = x
	return p
}

func (x MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[55].Descriptor()
}

func (MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[55]
}

func (x MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units(num)
	return nil
}

// Deprecated: Use MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units.Descriptor instead.
func (MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431, 0, 0, 0, 0}
}

type HeapGraphRoot_Type int32

const (
	HeapGraphRoot_ROOT_UNKNOWN           HeapGraphRoot_Type = 0
	HeapGraphRoot_ROOT_JNI_GLOBAL        HeapGraphRoot_Type = 1
	HeapGraphRoot_ROOT_JNI_LOCAL         HeapGraphRoot_Type = 2
	HeapGraphRoot_ROOT_JAVA_FRAME        HeapGraphRoot_Type = 3
	HeapGraphRoot_ROOT_NATIVE_STACK      HeapGraphRoot_Type = 4
	HeapGraphRoot_ROOT_STICKY_CLASS      HeapGraphRoot_Type = 5
	HeapGraphRoot_ROOT_THREAD_BLOCK      HeapGraphRoot_Type = 6
	HeapGraphRoot_ROOT_MONITOR_USED      HeapGraphRoot_Type = 7
	HeapGraphRoot_ROOT_THREAD_OBJECT     HeapGraphRoot_Type = 8
	HeapGraphRoot_ROOT_INTERNED_STRING   HeapGraphRoot_Type = 9
	HeapGraphRoot_ROOT_FINALIZING        HeapGraphRoot_Type = 10
	HeapGraphRoot_ROOT_DEBUGGER          HeapGraphRoot_Type = 11
	HeapGraphRoot_ROOT_REFERENCE_CLEANUP HeapGraphRoot_Type = 12
	HeapGraphRoot_ROOT_VM_INTERNAL       HeapGraphRoot_Type = 13
	HeapGraphRoot_ROOT_JNI_MONITOR       HeapGraphRoot_Type = 14
)

// Enum value maps for HeapGraphRoot_Type.
var (
	HeapGraphRoot_Type_name = map[int32]string{
		0:  "ROOT_UNKNOWN",
		1:  "ROOT_JNI_GLOBAL",
		2:  "ROOT_JNI_LOCAL",
		3:  "ROOT_JAVA_FRAME",
		4:  "ROOT_NATIVE_STACK",
		5:  "ROOT_STICKY_CLASS",
		6:  "ROOT_THREAD_BLOCK",
		7:  "ROOT_MONITOR_USED",
		8:  "ROOT_THREAD_OBJECT",
		9:  "ROOT_INTERNED_STRING",
		10: "ROOT_FINALIZING",
		11: "ROOT_DEBUGGER",
		12: "ROOT_REFERENCE_CLEANUP",
		13: "ROOT_VM_INTERNAL",
		14: "ROOT_JNI_MONITOR",
	}
	HeapGraphRoot_Type_value = map[string]int32{
		"ROOT_UNKNOWN":           0,
		"ROOT_JNI_GLOBAL":        1,
		"ROOT_JNI_LOCAL":         2,
		"ROOT_JAVA_FRAME":        3,
		"ROOT_NATIVE_STACK":      4,
		"ROOT_STICKY_CLASS":      5,
		"ROOT_THREAD_BLOCK":      6,
		"ROOT_MONITOR_USED":      7,
		"ROOT_THREAD_OBJECT":     8,
		"ROOT_INTERNED_STRING":   9,
		"ROOT_FINALIZING":        10,
		"ROOT_DEBUGGER":          11,
		"ROOT_REFERENCE_CLEANUP": 12,
		"ROOT_VM_INTERNAL":       13,
		"ROOT_JNI_MONITOR":       14,
	}
)

func (x HeapGraphRoot_Type) Enum() *HeapGraphRoot_Type {
	p := new(HeapGraphRoot_Type)
	*p = x
	return p
}

func (x HeapGraphRoot_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeapGraphRoot_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[56].Descriptor()
}

func (HeapGraphRoot_Type) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[56]
}

func (x HeapGraphRoot_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HeapGraphRoot_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HeapGraphRoot_Type(num)
	return nil
}

// Deprecated: Use HeapGraphRoot_Type.Descriptor instead.
func (HeapGraphRoot_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{439, 0}
}

type HeapGraphType_Kind int32

const (
	HeapGraphType_KIND_UNKNOWN             HeapGraphType_Kind = 0
	HeapGraphType_KIND_NORMAL              HeapGraphType_Kind = 1
	HeapGraphType_KIND_NOREFERENCES        HeapGraphType_Kind = 2
	HeapGraphType_KIND_STRING              HeapGraphType_Kind = 3
	HeapGraphType_KIND_ARRAY               HeapGraphType_Kind = 4
	HeapGraphType_KIND_CLASS               HeapGraphType_Kind = 5
	HeapGraphType_KIND_CLASSLOADER         HeapGraphType_Kind = 6
	HeapGraphType_KIND_DEXCACHE            HeapGraphType_Kind = 7
	HeapGraphType_KIND_SOFT_REFERENCE      HeapGraphType_Kind = 8
	HeapGraphType_KIND_WEAK_REFERENCE      HeapGraphType_Kind = 9
	HeapGraphType_KIND_FINALIZER_REFERENCE HeapGraphType_Kind = 10
	HeapGraphType_KIND_PHANTOM_REFERENCE   HeapGraphType_Kind = 11
)

// Enum value maps for HeapGraphType_Kind.
var (
	HeapGraphType_Kind_name = map[int32]string{
		0:  "KIND_UNKNOWN",
		1:  "KIND_NORMAL",
		2:  "KIND_NOREFERENCES",
		3:  "KIND_STRING",
		4:  "KIND_ARRAY",
		5:  "KIND_CLASS",
		6:  "KIND_CLASSLOADER",
		7:  "KIND_DEXCACHE",
		8:  "KIND_SOFT_REFERENCE",
		9:  "KIND_WEAK_REFERENCE",
		10: "KIND_FINALIZER_REFERENCE",
		11: "KIND_PHANTOM_REFERENCE",
	}
	HeapGraphType_Kind_value = map[string]int32{
		"KIND_UNKNOWN":             0,
		"KIND_NORMAL":              1,
		"KIND_NOREFERENCES":        2,
		"KIND_STRING":              3,
		"KIND_ARRAY":               4,
		"KIND_CLASS":               5,
		"KIND_CLASSLOADER":         6,
		"KIND_DEXCACHE":            7,
		"KIND_SOFT_REFERENCE":      8,
		"KIND_WEAK_REFERENCE":      9,
		"KIND_FINALIZER_REFERENCE": 10,
		"KIND_PHANTOM_REFERENCE":   11,
	}
)

func (x HeapGraphType_Kind) Enum() *HeapGraphType_Kind {
	p := new(HeapGraphType_Kind)
	*p = x
	return p
}

func (x HeapGraphType_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeapGraphType_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[57].Descriptor()
}

func (HeapGraphType_Kind) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[57]
}

func (x HeapGraphType_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HeapGraphType_Kind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HeapGraphType_Kind(num)
	return nil
}

// Deprecated: Use HeapGraphType_Kind.Descriptor instead.
func (HeapGraphType_Kind) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{440, 0}
}

type Profiling_CpuMode int32

const (
	Profiling_MODE_UNKNOWN Profiling_CpuMode = 0
	Profiling_MODE_KERNEL  Profiling_CpuMode = 1
	Profiling_MODE_USER    Profiling_CpuMode = 2
	// The following values aren't expected, but included for completeness:
	Profiling_MODE_HYPERVISOR   Profiling_CpuMode = 3
	Profiling_MODE_GUEST_KERNEL Profiling_CpuMode = 4
	Profiling_MODE_GUEST_USER   Profiling_CpuMode = 5
)

// Enum value maps for Profiling_CpuMode.
var (
	Profiling_CpuMode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_KERNEL",
		2: "MODE_USER",
		3: "MODE_HYPERVISOR",
		4: "MODE_GUEST_KERNEL",
		5: "MODE_GUEST_USER",
	}
	Profiling_CpuMode_value = map[string]int32{
		"MODE_UNKNOWN":      0,
		"MODE_KERNEL":       1,
		"MODE_USER":         2,
		"MODE_HYPERVISOR":   3,
		"MODE_GUEST_KERNEL": 4,
		"MODE_GUEST_USER":   5,
	}
)

func (x Profiling_CpuMode) Enum() *Profiling_CpuMode {
	p := new(Profiling_CpuMode)
	*p = x
	return p
}

func (x Profiling_CpuMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Profiling_CpuMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[58].Descriptor()
}

func (Profiling_CpuMode) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[58]
}

func (x Profiling_CpuMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Profiling_CpuMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Profiling_CpuMode(num)
	return nil
}

// Deprecated: Use Profiling_CpuMode.Descriptor instead.
func (Profiling_CpuMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{447, 0}
}

// Enumeration of libunwindstack's error codes.
// NB: the integral representations of the two enums are different.
type Profiling_StackUnwindError int32

const (
	Profiling_UNWIND_ERROR_UNKNOWN               Profiling_StackUnwindError = 0
	Profiling_UNWIND_ERROR_NONE                  Profiling_StackUnwindError = 1
	Profiling_UNWIND_ERROR_MEMORY_INVALID        Profiling_StackUnwindError = 2
	Profiling_UNWIND_ERROR_UNWIND_INFO           Profiling_StackUnwindError = 3
	Profiling_UNWIND_ERROR_UNSUPPORTED           Profiling_StackUnwindError = 4
	Profiling_UNWIND_ERROR_INVALID_MAP           Profiling_StackUnwindError = 5
	Profiling_UNWIND_ERROR_MAX_FRAMES_EXCEEDED   Profiling_StackUnwindError = 6
	Profiling_UNWIND_ERROR_REPEATED_FRAME        Profiling_StackUnwindError = 7
	Profiling_UNWIND_ERROR_INVALID_ELF           Profiling_StackUnwindError = 8
	Profiling_UNWIND_ERROR_SYSTEM_CALL           Profiling_StackUnwindError = 9
	Profiling_UNWIND_ERROR_THREAD_TIMEOUT        Profiling_StackUnwindError = 10
	Profiling_UNWIND_ERROR_THREAD_DOES_NOT_EXIST Profiling_StackUnwindError = 11
)

// Enum value maps for Profiling_StackUnwindError.
var (
	Profiling_StackUnwindError_name = map[int32]string{
		0:  "UNWIND_ERROR_UNKNOWN",
		1:  "UNWIND_ERROR_NONE",
		2:  "UNWIND_ERROR_MEMORY_INVALID",
		3:  "UNWIND_ERROR_UNWIND_INFO",
		4:  "UNWIND_ERROR_UNSUPPORTED",
		5:  "UNWIND_ERROR_INVALID_MAP",
		6:  "UNWIND_ERROR_MAX_FRAMES_EXCEEDED",
		7:  "UNWIND_ERROR_REPEATED_FRAME",
		8:  "UNWIND_ERROR_INVALID_ELF",
		9:  "UNWIND_ERROR_SYSTEM_CALL",
		10: "UNWIND_ERROR_THREAD_TIMEOUT",
		11: "UNWIND_ERROR_THREAD_DOES_NOT_EXIST",
	}
	Profiling_StackUnwindError_value = map[string]int32{
		"UNWIND_ERROR_UNKNOWN":               0,
		"UNWIND_ERROR_NONE":                  1,
		"UNWIND_ERROR_MEMORY_INVALID":        2,
		"UNWIND_ERROR_UNWIND_INFO":           3,
		"UNWIND_ERROR_UNSUPPORTED":           4,
		"UNWIND_ERROR_INVALID_MAP":           5,
		"UNWIND_ERROR_MAX_FRAMES_EXCEEDED":   6,
		"UNWIND_ERROR_REPEATED_FRAME":        7,
		"UNWIND_ERROR_INVALID_ELF":           8,
		"UNWIND_ERROR_SYSTEM_CALL":           9,
		"UNWIND_ERROR_THREAD_TIMEOUT":        10,
		"UNWIND_ERROR_THREAD_DOES_NOT_EXIST": 11,
	}
)

func (x Profiling_StackUnwindError) Enum() *Profiling_StackUnwindError {
	p := new(Profiling_StackUnwindError)
	*p = x
	return p
}

func (x Profiling_StackUnwindError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Profiling_StackUnwindError) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[59].Descriptor()
}

func (Profiling_StackUnwindError) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[59]
}

func (x Profiling_StackUnwindError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Profiling_StackUnwindError) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Profiling_StackUnwindError(num)
	return nil
}

// Deprecated: Use Profiling_StackUnwindError.Descriptor instead.
func (Profiling_StackUnwindError) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{447, 1}
}

// If set, indicates that the profiler encountered a sample that was relevant,
// but was skipped.
type PerfSample_SampleSkipReason int32

const (
	PerfSample_PROFILER_SKIP_UNKNOWN        PerfSample_SampleSkipReason = 0
	PerfSample_PROFILER_SKIP_READ_STAGE     PerfSample_SampleSkipReason = 1
	PerfSample_PROFILER_SKIP_UNWIND_STAGE   PerfSample_SampleSkipReason = 2
	PerfSample_PROFILER_SKIP_UNWIND_ENQUEUE PerfSample_SampleSkipReason = 3
)

// Enum value maps for PerfSample_SampleSkipReason.
var (
	PerfSample_SampleSkipReason_name = map[int32]string{
		0: "PROFILER_SKIP_UNKNOWN",
		1: "PROFILER_SKIP_READ_STAGE",
		2: "PROFILER_SKIP_UNWIND_STAGE",
		3: "PROFILER_SKIP_UNWIND_ENQUEUE",
	}
	PerfSample_SampleSkipReason_value = map[string]int32{
		"PROFILER_SKIP_UNKNOWN":        0,
		"PROFILER_SKIP_READ_STAGE":     1,
		"PROFILER_SKIP_UNWIND_STAGE":   2,
		"PROFILER_SKIP_UNWIND_ENQUEUE": 3,
	}
)

func (x PerfSample_SampleSkipReason) Enum() *PerfSample_SampleSkipReason {
	p := new(PerfSample_SampleSkipReason)
	*p = x
	return p
}

func (x PerfSample_SampleSkipReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerfSample_SampleSkipReason) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[60].Descriptor()
}

func (PerfSample_SampleSkipReason) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[60]
}

func (x PerfSample_SampleSkipReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PerfSample_SampleSkipReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PerfSample_SampleSkipReason(num)
	return nil
}

// Deprecated: Use PerfSample_SampleSkipReason.Descriptor instead.
func (PerfSample_SampleSkipReason) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{448, 0}
}

// See chromium's content::ProcessType.
type ProcessDescriptor_ChromeProcessType int32

const (
	ProcessDescriptor_PROCESS_UNSPECIFIED    ProcessDescriptor_ChromeProcessType = 0
	ProcessDescriptor_PROCESS_BROWSER        ProcessDescriptor_ChromeProcessType = 1
	ProcessDescriptor_PROCESS_RENDERER       ProcessDescriptor_ChromeProcessType = 2
	ProcessDescriptor_PROCESS_UTILITY        ProcessDescriptor_ChromeProcessType = 3
	ProcessDescriptor_PROCESS_ZYGOTE         ProcessDescriptor_ChromeProcessType = 4
	ProcessDescriptor_PROCESS_SANDBOX_HELPER ProcessDescriptor_ChromeProcessType = 5
	ProcessDescriptor_PROCESS_GPU            ProcessDescriptor_ChromeProcessType = 6
	ProcessDescriptor_PROCESS_PPAPI_PLUGIN   ProcessDescriptor_ChromeProcessType = 7
	ProcessDescriptor_PROCESS_PPAPI_BROKER   ProcessDescriptor_ChromeProcessType = 8
)

// Enum value maps for ProcessDescriptor_ChromeProcessType.
var (
	ProcessDescriptor_ChromeProcessType_name = map[int32]string{
		0: "PROCESS_UNSPECIFIED",
		1: "PROCESS_BROWSER",
		2: "PROCESS_RENDERER",
		3: "PROCESS_UTILITY",
		4: "PROCESS_ZYGOTE",
		5: "PROCESS_SANDBOX_HELPER",
		6: "PROCESS_GPU",
		7: "PROCESS_PPAPI_PLUGIN",
		8: "PROCESS_PPAPI_BROKER",
	}
	ProcessDescriptor_ChromeProcessType_value = map[string]int32{
		"PROCESS_UNSPECIFIED":    0,
		"PROCESS_BROWSER":        1,
		"PROCESS_RENDERER":       2,
		"PROCESS_UTILITY":        3,
		"PROCESS_ZYGOTE":         4,
		"PROCESS_SANDBOX_HELPER": 5,
		"PROCESS_GPU":            6,
		"PROCESS_PPAPI_PLUGIN":   7,
		"PROCESS_PPAPI_BROKER":   8,
	}
)

func (x ProcessDescriptor_ChromeProcessType) Enum() *ProcessDescriptor_ChromeProcessType {
	p := new(ProcessDescriptor_ChromeProcessType)
	*p = x
	return p
}

func (x ProcessDescriptor_ChromeProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessDescriptor_ChromeProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[61].Descriptor()
}

func (ProcessDescriptor_ChromeProcessType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[61]
}

func (x ProcessDescriptor_ChromeProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProcessDescriptor_ChromeProcessType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProcessDescriptor_ChromeProcessType(num)
	return nil
}

// Deprecated: Use ProcessDescriptor_ChromeProcessType.Descriptor instead.
func (ProcessDescriptor_ChromeProcessType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{459, 0}
}

type ThreadDescriptor_ChromeThreadType int32

const (
	ThreadDescriptor_CHROME_THREAD_UNSPECIFIED ThreadDescriptor_ChromeThreadType = 0
	ThreadDescriptor_CHROME_THREAD_MAIN        ThreadDescriptor_ChromeThreadType = 1
	ThreadDescriptor_CHROME_THREAD_IO          ThreadDescriptor_ChromeThreadType = 2
	// Scheduler:
	ThreadDescriptor_CHROME_THREAD_POOL_BG_WORKER   ThreadDescriptor_ChromeThreadType = 3
	ThreadDescriptor_CHROME_THREAD_POOL_FG_WORKER   ThreadDescriptor_ChromeThreadType = 4
	ThreadDescriptor_CHROME_THREAD_POOL_FB_BLOCKING ThreadDescriptor_ChromeThreadType = 5
	ThreadDescriptor_CHROME_THREAD_POOL_BG_BLOCKING ThreadDescriptor_ChromeThreadType = 6
	ThreadDescriptor_CHROME_THREAD_POOL_SERVICE     ThreadDescriptor_ChromeThreadType = 7
	// Compositor:
	ThreadDescriptor_CHROME_THREAD_COMPOSITOR        ThreadDescriptor_ChromeThreadType = 8
	ThreadDescriptor_CHROME_THREAD_VIZ_COMPOSITOR    ThreadDescriptor_ChromeThreadType = 9
	ThreadDescriptor_CHROME_THREAD_COMPOSITOR_WORKER ThreadDescriptor_ChromeThreadType = 10
	// Renderer:
	ThreadDescriptor_CHROME_THREAD_SERVICE_WORKER ThreadDescriptor_ChromeThreadType = 11
	// Tracing related threads:
	ThreadDescriptor_CHROME_THREAD_MEMORY_INFRA      ThreadDescriptor_ChromeThreadType = 50
	ThreadDescriptor_CHROME_THREAD_SAMPLING_PROFILER ThreadDescriptor_ChromeThreadType = 51
)

// Enum value maps for ThreadDescriptor_ChromeThreadType.
var (
	ThreadDescriptor_ChromeThreadType_name = map[int32]string{
		0:  "CHROME_THREAD_UNSPECIFIED",
		1:  "CHROME_THREAD_MAIN",
		2:  "CHROME_THREAD_IO",
		3:  "CHROME_THREAD_POOL_BG_WORKER",
		4:  "CHROME_THREAD_POOL_FG_WORKER",
		5:  "CHROME_THREAD_POOL_FB_BLOCKING",
		6:  "CHROME_THREAD_POOL_BG_BLOCKING",
		7:  "CHROME_THREAD_POOL_SERVICE",
		8:  "CHROME_THREAD_COMPOSITOR",
		9:  "CHROME_THREAD_VIZ_COMPOSITOR",
		10: "CHROME_THREAD_COMPOSITOR_WORKER",
		11: "CHROME_THREAD_SERVICE_WORKER",
		50: "CHROME_THREAD_MEMORY_INFRA",
		51: "CHROME_THREAD_SAMPLING_PROFILER",
	}
	ThreadDescriptor_ChromeThreadType_value = map[string]int32{
		"CHROME_THREAD_UNSPECIFIED":       0,
		"CHROME_THREAD_MAIN":              1,
		"CHROME_THREAD_IO":                2,
		"CHROME_THREAD_POOL_BG_WORKER":    3,
		"CHROME_THREAD_POOL_FG_WORKER":    4,
		"CHROME_THREAD_POOL_FB_BLOCKING":  5,
		"CHROME_THREAD_POOL_BG_BLOCKING":  6,
		"CHROME_THREAD_POOL_SERVICE":      7,
		"CHROME_THREAD_COMPOSITOR":        8,
		"CHROME_THREAD_VIZ_COMPOSITOR":    9,
		"CHROME_THREAD_COMPOSITOR_WORKER": 10,
		"CHROME_THREAD_SERVICE_WORKER":    11,
		"CHROME_THREAD_MEMORY_INFRA":      50,
		"CHROME_THREAD_SAMPLING_PROFILER": 51,
	}
)

func (x ThreadDescriptor_ChromeThreadType) Enum() *ThreadDescriptor_ChromeThreadType {
	p := new(ThreadDescriptor_ChromeThreadType)
	*p = x
	return p
}

func (x ThreadDescriptor_ChromeThreadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThreadDescriptor_ChromeThreadType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[62].Descriptor()
}

func (ThreadDescriptor_ChromeThreadType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[62]
}

func (x ThreadDescriptor_ChromeThreadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ThreadDescriptor_ChromeThreadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ThreadDescriptor_ChromeThreadType(num)
	return nil
}

// Deprecated: Use ThreadDescriptor_ChromeThreadType.Descriptor instead.
func (ThreadDescriptor_ChromeThreadType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{460, 0}
}

// See chromium's content::ProcessType.
type ChromeProcessDescriptor_ProcessType int32

const (
	ChromeProcessDescriptor_PROCESS_UNSPECIFIED    ChromeProcessDescriptor_ProcessType = 0
	ChromeProcessDescriptor_PROCESS_BROWSER        ChromeProcessDescriptor_ProcessType = 1
	ChromeProcessDescriptor_PROCESS_RENDERER       ChromeProcessDescriptor_ProcessType = 2
	ChromeProcessDescriptor_PROCESS_UTILITY        ChromeProcessDescriptor_ProcessType = 3
	ChromeProcessDescriptor_PROCESS_ZYGOTE         ChromeProcessDescriptor_ProcessType = 4
	ChromeProcessDescriptor_PROCESS_SANDBOX_HELPER ChromeProcessDescriptor_ProcessType = 5
	ChromeProcessDescriptor_PROCESS_GPU            ChromeProcessDescriptor_ProcessType = 6
	ChromeProcessDescriptor_PROCESS_PPAPI_PLUGIN   ChromeProcessDescriptor_ProcessType = 7
	ChromeProcessDescriptor_PROCESS_PPAPI_BROKER   ChromeProcessDescriptor_ProcessType = 8
)

// Enum value maps for ChromeProcessDescriptor_ProcessType.
var (
	ChromeProcessDescriptor_ProcessType_name = map[int32]string{
		0: "PROCESS_UNSPECIFIED",
		1: "PROCESS_BROWSER",
		2: "PROCESS_RENDERER",
		3: "PROCESS_UTILITY",
		4: "PROCESS_ZYGOTE",
		5: "PROCESS_SANDBOX_HELPER",
		6: "PROCESS_GPU",
		7: "PROCESS_PPAPI_PLUGIN",
		8: "PROCESS_PPAPI_BROKER",
	}
	ChromeProcessDescriptor_ProcessType_value = map[string]int32{
		"PROCESS_UNSPECIFIED":    0,
		"PROCESS_BROWSER":        1,
		"PROCESS_RENDERER":       2,
		"PROCESS_UTILITY":        3,
		"PROCESS_ZYGOTE":         4,
		"PROCESS_SANDBOX_HELPER": 5,
		"PROCESS_GPU":            6,
		"PROCESS_PPAPI_PLUGIN":   7,
		"PROCESS_PPAPI_BROKER":   8,
	}
)

func (x ChromeProcessDescriptor_ProcessType) Enum() *ChromeProcessDescriptor_ProcessType {
	p := new(ChromeProcessDescriptor_ProcessType)
	*p = x
	return p
}

func (x ChromeProcessDescriptor_ProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeProcessDescriptor_ProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[63].Descriptor()
}

func (ChromeProcessDescriptor_ProcessType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[63]
}

func (x ChromeProcessDescriptor_ProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeProcessDescriptor_ProcessType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeProcessDescriptor_ProcessType(num)
	return nil
}

// Deprecated: Use ChromeProcessDescriptor_ProcessType.Descriptor instead.
func (ChromeProcessDescriptor_ProcessType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{461, 0}
}

type ChromeThreadDescriptor_ThreadType int32

const (
	ChromeThreadDescriptor_THREAD_UNSPECIFIED ChromeThreadDescriptor_ThreadType = 0
	ChromeThreadDescriptor_THREAD_MAIN        ChromeThreadDescriptor_ThreadType = 1
	ChromeThreadDescriptor_THREAD_IO          ChromeThreadDescriptor_ThreadType = 2
	// Scheduler:
	ChromeThreadDescriptor_THREAD_POOL_BG_WORKER   ChromeThreadDescriptor_ThreadType = 3
	ChromeThreadDescriptor_THREAD_POOL_FG_WORKER   ChromeThreadDescriptor_ThreadType = 4
	ChromeThreadDescriptor_THREAD_POOL_BG_BLOCKING ChromeThreadDescriptor_ThreadType = 6
	ChromeThreadDescriptor_THREAD_POOL_FG_BLOCKING ChromeThreadDescriptor_ThreadType = 5
	ChromeThreadDescriptor_THREAD_POOL_SERVICE     ChromeThreadDescriptor_ThreadType = 7
	// Compositor:
	ChromeThreadDescriptor_THREAD_COMPOSITOR        ChromeThreadDescriptor_ThreadType = 8
	ChromeThreadDescriptor_THREAD_VIZ_COMPOSITOR    ChromeThreadDescriptor_ThreadType = 9
	ChromeThreadDescriptor_THREAD_COMPOSITOR_WORKER ChromeThreadDescriptor_ThreadType = 10
	// Renderer:
	ChromeThreadDescriptor_THREAD_SERVICE_WORKER ChromeThreadDescriptor_ThreadType = 11
	// Tracing related threads:
	ChromeThreadDescriptor_THREAD_MEMORY_INFRA      ChromeThreadDescriptor_ThreadType = 50
	ChromeThreadDescriptor_THREAD_SAMPLING_PROFILER ChromeThreadDescriptor_ThreadType = 51
)

// Enum value maps for ChromeThreadDescriptor_ThreadType.
var (
	ChromeThreadDescriptor_ThreadType_name = map[int32]string{
		0:  "THREAD_UNSPECIFIED",
		1:  "THREAD_MAIN",
		2:  "THREAD_IO",
		3:  "THREAD_POOL_BG_WORKER",
		4:  "THREAD_POOL_FG_WORKER",
		6:  "THREAD_POOL_BG_BLOCKING",
		5:  "THREAD_POOL_FG_BLOCKING",
		7:  "THREAD_POOL_SERVICE",
		8:  "THREAD_COMPOSITOR",
		9:  "THREAD_VIZ_COMPOSITOR",
		10: "THREAD_COMPOSITOR_WORKER",
		11: "THREAD_SERVICE_WORKER",
		50: "THREAD_MEMORY_INFRA",
		51: "THREAD_SAMPLING_PROFILER",
	}
	ChromeThreadDescriptor_ThreadType_value = map[string]int32{
		"THREAD_UNSPECIFIED":       0,
		"THREAD_MAIN":              1,
		"THREAD_IO":                2,
		"THREAD_POOL_BG_WORKER":    3,
		"THREAD_POOL_FG_WORKER":    4,
		"THREAD_POOL_BG_BLOCKING":  6,
		"THREAD_POOL_FG_BLOCKING":  5,
		"THREAD_POOL_SERVICE":      7,
		"THREAD_COMPOSITOR":        8,
		"THREAD_VIZ_COMPOSITOR":    9,
		"THREAD_COMPOSITOR_WORKER": 10,
		"THREAD_SERVICE_WORKER":    11,
		"THREAD_MEMORY_INFRA":      50,
		"THREAD_SAMPLING_PROFILER": 51,
	}
)

func (x ChromeThreadDescriptor_ThreadType) Enum() *ChromeThreadDescriptor_ThreadType {
	p := new(ChromeThreadDescriptor_ThreadType)
	*p = x
	return p
}

func (x ChromeThreadDescriptor_ThreadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChromeThreadDescriptor_ThreadType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[64].Descriptor()
}

func (ChromeThreadDescriptor_ThreadType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[64]
}

func (x ChromeThreadDescriptor_ThreadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ChromeThreadDescriptor_ThreadType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ChromeThreadDescriptor_ThreadType(num)
	return nil
}

// Deprecated: Use ChromeThreadDescriptor_ThreadType.Descriptor instead.
func (ChromeThreadDescriptor_ThreadType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{462, 0}
}

// Built-in counters, usually with special meaning in the client library,
// trace processor, legacy JSON format, or UI. Trace processor will infer a
// track name from the enum value if none is provided in TrackDescriptor.
type CounterDescriptor_BuiltinCounterType int32

const (
	CounterDescriptor_COUNTER_UNSPECIFIED CounterDescriptor_BuiltinCounterType = 0
	// implies UNIT_TIME_NS.
	CounterDescriptor_COUNTER_THREAD_TIME_NS CounterDescriptor_BuiltinCounterType = 1
	// implies UNIT_COUNT.
	CounterDescriptor_COUNTER_THREAD_INSTRUCTION_COUNT CounterDescriptor_BuiltinCounterType = 2
)

// Enum value maps for CounterDescriptor_BuiltinCounterType.
var (
	CounterDescriptor_BuiltinCounterType_name = map[int32]string{
		0: "COUNTER_UNSPECIFIED",
		1: "COUNTER_THREAD_TIME_NS",
		2: "COUNTER_THREAD_INSTRUCTION_COUNT",
	}
	CounterDescriptor_BuiltinCounterType_value = map[string]int32{
		"COUNTER_UNSPECIFIED":              0,
		"COUNTER_THREAD_TIME_NS":           1,
		"COUNTER_THREAD_INSTRUCTION_COUNT": 2,
	}
)

func (x CounterDescriptor_BuiltinCounterType) Enum() *CounterDescriptor_BuiltinCounterType {
	p := new(CounterDescriptor_BuiltinCounterType)
	*p = x
	return p
}

func (x CounterDescriptor_BuiltinCounterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterDescriptor_BuiltinCounterType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[65].Descriptor()
}

func (CounterDescriptor_BuiltinCounterType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[65]
}

func (x CounterDescriptor_BuiltinCounterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CounterDescriptor_BuiltinCounterType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CounterDescriptor_BuiltinCounterType(num)
	return nil
}

// Deprecated: Use CounterDescriptor_BuiltinCounterType.Descriptor instead.
func (CounterDescriptor_BuiltinCounterType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{463, 0}
}

// Type of the values for the counters - to supply lower granularity units,
// see also |unit_multiplier|.
type CounterDescriptor_Unit int32

const (
	CounterDescriptor_UNIT_UNSPECIFIED CounterDescriptor_Unit = 0
	CounterDescriptor_UNIT_TIME_NS     CounterDescriptor_Unit = 1
	CounterDescriptor_UNIT_COUNT       CounterDescriptor_Unit = 2
	CounterDescriptor_UNIT_SIZE_BYTES  CounterDescriptor_Unit = 3 // TODO(eseckler): Support more units as necessary.
)

// Enum value maps for CounterDescriptor_Unit.
var (
	CounterDescriptor_Unit_name = map[int32]string{
		0: "UNIT_UNSPECIFIED",
		1: "UNIT_TIME_NS",
		2: "UNIT_COUNT",
		3: "UNIT_SIZE_BYTES",
	}
	CounterDescriptor_Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED": 0,
		"UNIT_TIME_NS":     1,
		"UNIT_COUNT":       2,
		"UNIT_SIZE_BYTES":  3,
	}
)

func (x CounterDescriptor_Unit) Enum() *CounterDescriptor_Unit {
	p := new(CounterDescriptor_Unit)
	*p = x
	return p
}

func (x CounterDescriptor_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterDescriptor_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[66].Descriptor()
}

func (CounterDescriptor_Unit) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[66]
}

func (x CounterDescriptor_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CounterDescriptor_Unit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CounterDescriptor_Unit(num)
	return nil
}

// Deprecated: Use CounterDescriptor_Unit.Descriptor instead.
func (CounterDescriptor_Unit) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{463, 1}
}

type TracePacket_SequenceFlags int32

const (
	TracePacket_SEQ_UNSPECIFIED TracePacket_SequenceFlags = 0
	// Set by the writer to indicate that it will re-emit any incremental data
	// for the packet's sequence before referring to it again. This includes
	// interned data as well as periodically emitted data like
	// Process/ThreadDescriptors. This flag only affects the current packet
	// sequence (see |trusted_packet_sequence_id|).
	//
	// When set, this TracePacket and subsequent TracePackets on the same
	// sequence will not refer to any incremental data emitted before this
	// TracePacket. For example, previously emitted interned data will be
	// re-emitted if it is referred to again.
	//
	// When the reader detects packet loss (|previous_packet_dropped|), it needs
	// to skip packets in the sequence until the next one with this flag set, to
	// ensure intact incremental data.
	TracePacket_SEQ_INCREMENTAL_STATE_CLEARED TracePacket_SequenceFlags = 1
	// This packet requires incremental state, such as TracePacketDefaults or
	// InternedData, to be parsed correctly. The trace reader should skip this
	// packet if incremental state is not valid on this sequence, i.e. if no
	// packet with the SEQ_INCREMENTAL_STATE_CLEARED flag has been seen on the
	// current |trusted_packet_sequence_id|.
	TracePacket_SEQ_NEEDS_INCREMENTAL_STATE TracePacket_SequenceFlags = 2
)

// Enum value maps for TracePacket_SequenceFlags.
var (
	TracePacket_SequenceFlags_name = map[int32]string{
		0: "SEQ_UNSPECIFIED",
		1: "SEQ_INCREMENTAL_STATE_CLEARED",
		2: "SEQ_NEEDS_INCREMENTAL_STATE",
	}
	TracePacket_SequenceFlags_value = map[string]int32{
		"SEQ_UNSPECIFIED":               0,
		"SEQ_INCREMENTAL_STATE_CLEARED": 1,
		"SEQ_NEEDS_INCREMENTAL_STATE":   2,
	}
)

func (x TracePacket_SequenceFlags) Enum() *TracePacket_SequenceFlags {
	p := new(TracePacket_SequenceFlags)
	*p = x
	return p
}

func (x TracePacket_SequenceFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TracePacket_SequenceFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[67].Descriptor()
}

func (TracePacket_SequenceFlags) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_perfetto_trace_proto_enumTypes[67]
}

func (x TracePacket_SequenceFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TracePacket_SequenceFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TracePacket_SequenceFlags(num)
	return nil
}

// Deprecated: Use TracePacket_SequenceFlags.Descriptor instead.
func (TracePacket_SequenceFlags) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{466, 0}
}

// Description of GPU counters.
// This message is sent by a GPU counter producer to specify the counters
// available in the hardware.
type GpuCounterDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Specs  []*GpuCounterDescriptor_GpuCounterSpec  `protobuf:"bytes,1,rep,name=specs" json:"specs,omitempty"`
	Blocks []*GpuCounterDescriptor_GpuCounterBlock `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
	// optional.  Minimum sampling period supported by the producer in
	// nanoseconds.
	MinSamplingPeriodNs *uint64 `protobuf:"varint,3,opt,name=min_sampling_period_ns,json=minSamplingPeriodNs" json:"min_sampling_period_ns,omitempty"`
	// optional.  Maximum sampling period supported by the producer in
	// nanoseconds.
	MaxSamplingPeriodNs *uint64 `protobuf:"varint,4,opt,name=max_sampling_period_ns,json=maxSamplingPeriodNs" json:"max_sampling_period_ns,omitempty"`
	// optional.  The producer supports counter sampling by instrumenting the
	// command buffer.
	SupportsInstrumentedSampling *bool `protobuf:"varint,5,opt,name=supports_instrumented_sampling,json=supportsInstrumentedSampling" json:"supports_instrumented_sampling,omitempty"`
}

func (x *GpuCounterDescriptor) Reset() {
	*x = GpuCounterDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuCounterDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuCounterDescriptor) ProtoMessage() {}

func (x *GpuCounterDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuCounterDescriptor.ProtoReflect.Descriptor instead.
func (*GpuCounterDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{0}
}

func (x *GpuCounterDescriptor) GetSpecs() []*GpuCounterDescriptor_GpuCounterSpec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *GpuCounterDescriptor) GetBlocks() []*GpuCounterDescriptor_GpuCounterBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *GpuCounterDescriptor) GetMinSamplingPeriodNs() uint64 {
	if x != nil && x.MinSamplingPeriodNs != nil {
		return *x.MinSamplingPeriodNs
	}
	return 0
}

func (x *GpuCounterDescriptor) GetMaxSamplingPeriodNs() uint64 {
	if x != nil && x.MaxSamplingPeriodNs != nil {
		return *x.MaxSamplingPeriodNs
	}
	return 0
}

func (x *GpuCounterDescriptor) GetSupportsInstrumentedSampling() bool {
	if x != nil && x.SupportsInstrumentedSampling != nil {
		return *x.SupportsInstrumentedSampling
	}
	return false
}

type TrackEventCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description *string  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Tags        []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (x *TrackEventCategory) Reset() {
	*x = TrackEventCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEventCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEventCategory) ProtoMessage() {}

func (x *TrackEventCategory) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEventCategory.ProtoReflect.Descriptor instead.
func (*TrackEventCategory) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{1}
}

func (x *TrackEventCategory) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TrackEventCategory) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TrackEventCategory) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TrackEventDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableCategories []*TrackEventCategory `protobuf:"bytes,1,rep,name=available_categories,json=availableCategories" json:"available_categories,omitempty"`
}

func (x *TrackEventDescriptor) Reset() {
	*x = TrackEventDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEventDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEventDescriptor) ProtoMessage() {}

func (x *TrackEventDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEventDescriptor.ProtoReflect.Descriptor instead.
func (*TrackEventDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{2}
}

func (x *TrackEventDescriptor) GetAvailableCategories() []*TrackEventCategory {
	if x != nil {
		return x.AvailableCategories
	}
	return nil
}

// This message is sent from Producer(s) to the tracing Service when registering
// to advertise their capabilities. It describes the structure of tracing
// protos that will be produced by the data source and the supported filters.
type DataSourceDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g., "linux.ftrace", "chromium.tracing"
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// When true the data source is expected to ack the stop request through the
	// NotifyDataSourceStopped() IPC. This field has been introduced after
	// Android P in Jul 2018 and is not supported on older versions.
	WillNotifyOnStop *bool `protobuf:"varint,2,opt,name=will_notify_on_stop,json=willNotifyOnStop" json:"will_notify_on_stop,omitempty"`
	// When true the data source is expected to ack the start request through the
	// NotifyDataSourceStarted() IPC. This field has been introduced after
	// Android P in March 2019 and is not supported on older versions.
	WillNotifyOnStart *bool `protobuf:"varint,3,opt,name=will_notify_on_start,json=willNotifyOnStart" json:"will_notify_on_start,omitempty"`
	// If true, opt into receiving the ClearIncrementalState() IPC. This should be
	// set if the data source writes packets that refer to previous trace
	// contents, and knows how to stop referring to the already-emitted data.
	HandlesIncrementalStateClear *bool `protobuf:"varint,4,opt,name=handles_incremental_state_clear,json=handlesIncrementalStateClear" json:"handles_incremental_state_clear,omitempty"`
	// Optional specification about available GPU counters.
	GpuCounterDescriptor *GpuCounterDescriptor `protobuf:"bytes,5,opt,name=gpu_counter_descriptor,json=gpuCounterDescriptor" json:"gpu_counter_descriptor,omitempty"`
	TrackEventDescriptor *TrackEventDescriptor `protobuf:"bytes,6,opt,name=track_event_descriptor,json=trackEventDescriptor" json:"track_event_descriptor,omitempty"`
}

func (x *DataSourceDescriptor) Reset() {
	*x = DataSourceDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceDescriptor) ProtoMessage() {}

func (x *DataSourceDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceDescriptor.ProtoReflect.Descriptor instead.
func (*DataSourceDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{3}
}

func (x *DataSourceDescriptor) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataSourceDescriptor) GetWillNotifyOnStop() bool {
	if x != nil && x.WillNotifyOnStop != nil {
		return *x.WillNotifyOnStop
	}
	return false
}

func (x *DataSourceDescriptor) GetWillNotifyOnStart() bool {
	if x != nil && x.WillNotifyOnStart != nil {
		return *x.WillNotifyOnStart
	}
	return false
}

func (x *DataSourceDescriptor) GetHandlesIncrementalStateClear() bool {
	if x != nil && x.HandlesIncrementalStateClear != nil {
		return *x.HandlesIncrementalStateClear
	}
	return false
}

func (x *DataSourceDescriptor) GetGpuCounterDescriptor() *GpuCounterDescriptor {
	if x != nil {
		return x.GpuCounterDescriptor
	}
	return nil
}

func (x *DataSourceDescriptor) GetTrackEventDescriptor() *TrackEventDescriptor {
	if x != nil {
		return x.TrackEventDescriptor
	}
	return nil
}

// Reports the state of the tracing service. Used to gather details about the
// data sources connected.
// See ConsumerPort::QueryServiceState().
type TracingServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lists all the producers connected.
	Producers []*TracingServiceState_Producer `protobuf:"bytes,1,rep,name=producers" json:"producers,omitempty"`
	// Lists the data sources available.
	DataSources []*TracingServiceState_DataSource `protobuf:"bytes,2,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
	// Total number of tracing sessions.
	NumSessions *int32 `protobuf:"varint,3,opt,name=num_sessions,json=numSessions" json:"num_sessions,omitempty"`
	// Number of tracing sessions in the started state. Always <= num_sessions.
	NumSessionsStarted *int32 `protobuf:"varint,4,opt,name=num_sessions_started,json=numSessionsStarted" json:"num_sessions_started,omitempty"`
}

func (x *TracingServiceState) Reset() {
	*x = TracingServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingServiceState) ProtoMessage() {}

func (x *TracingServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingServiceState.ProtoReflect.Descriptor instead.
func (*TracingServiceState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{4}
}

func (x *TracingServiceState) GetProducers() []*TracingServiceState_Producer {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *TracingServiceState) GetDataSources() []*TracingServiceState_DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *TracingServiceState) GetNumSessions() int32 {
	if x != nil && x.NumSessions != nil {
		return *x.NumSessions
	}
	return 0
}

func (x *TracingServiceState) GetNumSessionsStarted() int32 {
	if x != nil && x.NumSessionsStarted != nil {
		return *x.NumSessionsStarted
	}
	return 0
}

type AndroidLogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogIds []AndroidLogId `protobuf:"varint,1,rep,name=log_ids,json=logIds,enum=perfetto.protos.AndroidLogId" json:"log_ids,omitempty"`
	// If set ignores all log messages whose prio is < the given value.
	MinPrio *AndroidLogPriority `protobuf:"varint,3,opt,name=min_prio,json=minPrio,enum=perfetto.protos.AndroidLogPriority" json:"min_prio,omitempty"`
	// If non-empty ignores all log messages whose tag doesn't match one of the
	// specified values.
	FilterTags []string `protobuf:"bytes,4,rep,name=filter_tags,json=filterTags" json:"filter_tags,omitempty"`
}

func (x *AndroidLogConfig) Reset() {
	*x = AndroidLogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLogConfig) ProtoMessage() {}

func (x *AndroidLogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLogConfig.ProtoReflect.Descriptor instead.
func (*AndroidLogConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{5}
}

func (x *AndroidLogConfig) GetLogIds() []AndroidLogId {
	if x != nil {
		return x.LogIds
	}
	return nil
}

func (x *AndroidLogConfig) GetMinPrio() AndroidLogPriority {
	if x != nil && x.MinPrio != nil {
		return *x.MinPrio
	}
	return AndroidLogPriority_PRIO_UNSPECIFIED
}

func (x *AndroidLogConfig) GetFilterTags() []string {
	if x != nil {
		return x.FilterTags
	}
	return nil
}

// Data source that polls for display state.
type AndroidPolledStateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frequency of polling. If absent the state will be recorded once, at the
	// start of the trace.
	// This is required to be > 100ms to avoid excessive CPU usage.
	PollMs *uint32 `protobuf:"varint,1,opt,name=poll_ms,json=pollMs" json:"poll_ms,omitempty"`
}

func (x *AndroidPolledStateConfig) Reset() {
	*x = AndroidPolledStateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPolledStateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPolledStateConfig) ProtoMessage() {}

func (x *AndroidPolledStateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPolledStateConfig.ProtoReflect.Descriptor instead.
func (*AndroidPolledStateConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{6}
}

func (x *AndroidPolledStateConfig) GetPollMs() uint32 {
	if x != nil && x.PollMs != nil {
		return *x.PollMs
	}
	return 0
}

// Data source that lists details (such as version code) about packages on an
// Android device.
type PackagesListConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If not empty, emit info about only the following list of package names
	// (exact match, no regex). Otherwise, emit info about all packages.
	PackageNameFilter []string `protobuf:"bytes,1,rep,name=package_name_filter,json=packageNameFilter" json:"package_name_filter,omitempty"`
}

func (x *PackagesListConfig) Reset() {
	*x = PackagesListConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagesListConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagesListConfig) ProtoMessage() {}

func (x *PackagesListConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagesListConfig.ProtoReflect.Descriptor instead.
func (*PackagesListConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{7}
}

func (x *PackagesListConfig) GetPackageNameFilter() []string {
	if x != nil {
		return x.PackageNameFilter
	}
	return nil
}

type ChromeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceConfig *string `protobuf:"bytes,1,opt,name=trace_config,json=traceConfig" json:"trace_config,omitempty"`
	// When enabled, the data source should only fill in fields in the output that
	// are not potentially privacy sensitive.
	PrivacyFilteringEnabled *bool `protobuf:"varint,2,opt,name=privacy_filtering_enabled,json=privacyFilteringEnabled" json:"privacy_filtering_enabled,omitempty"`
	// Instead of emitting binary protobuf, convert the trace data to the legacy
	// JSON format. Note that the trace data will still be returned as a series of
	// TracePackets, but the embedded data will be JSON instead of serialized
	// protobuf.
	ConvertToLegacyJson *bool                        `protobuf:"varint,3,opt,name=convert_to_legacy_json,json=convertToLegacyJson" json:"convert_to_legacy_json,omitempty"`
	ClientPriority      *ChromeConfig_ClientPriority `protobuf:"varint,4,opt,name=client_priority,json=clientPriority,enum=perfetto.protos.ChromeConfig_ClientPriority" json:"client_priority,omitempty"`
}

func (x *ChromeConfig) Reset() {
	*x = ChromeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeConfig) ProtoMessage() {}

func (x *ChromeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeConfig.ProtoReflect.Descriptor instead.
func (*ChromeConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{8}
}

func (x *ChromeConfig) GetTraceConfig() string {
	if x != nil && x.TraceConfig != nil {
		return *x.TraceConfig
	}
	return ""
}

func (x *ChromeConfig) GetPrivacyFilteringEnabled() bool {
	if x != nil && x.PrivacyFilteringEnabled != nil {
		return *x.PrivacyFilteringEnabled
	}
	return false
}

func (x *ChromeConfig) GetConvertToLegacyJson() bool {
	if x != nil && x.ConvertToLegacyJson != nil {
		return *x.ConvertToLegacyJson
	}
	return false
}

func (x *ChromeConfig) GetClientPriority() ChromeConfig_ClientPriority {
	if x != nil && x.ClientPriority != nil {
		return *x.ClientPriority
	}
	return ChromeConfig_UNKNOWN
}

type FtraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FtraceEvents     []string `protobuf:"bytes,1,rep,name=ftrace_events,json=ftraceEvents" json:"ftrace_events,omitempty"`
	AtraceCategories []string `protobuf:"bytes,2,rep,name=atrace_categories,json=atraceCategories" json:"atrace_categories,omitempty"`
	AtraceApps       []string `protobuf:"bytes,3,rep,name=atrace_apps,json=atraceApps" json:"atrace_apps,omitempty"`
	// *Per-CPU* buffer size.
	BufferSizeKb  *uint32                          `protobuf:"varint,10,opt,name=buffer_size_kb,json=bufferSizeKb" json:"buffer_size_kb,omitempty"`
	DrainPeriodMs *uint32                          `protobuf:"varint,11,opt,name=drain_period_ms,json=drainPeriodMs" json:"drain_period_ms,omitempty"`
	CompactSched  *FtraceConfig_CompactSchedConfig `protobuf:"bytes,12,opt,name=compact_sched,json=compactSched" json:"compact_sched,omitempty"`
	// Enables symbol name resolution against /proc/kallsyms.
	// It requires that either traced_probes is running as root or that
	// kptr_restrict has been manually lowered.
	// It does not disclose KASLR, symbol addresses are mangled.
	SymbolizeKsyms *bool `protobuf:"varint,13,opt,name=symbolize_ksyms,json=symbolizeKsyms" json:"symbolize_ksyms,omitempty"`
}

func (x *FtraceConfig) Reset() {
	*x = FtraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceConfig) ProtoMessage() {}

func (x *FtraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceConfig.ProtoReflect.Descriptor instead.
func (*FtraceConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{9}
}

func (x *FtraceConfig) GetFtraceEvents() []string {
	if x != nil {
		return x.FtraceEvents
	}
	return nil
}

func (x *FtraceConfig) GetAtraceCategories() []string {
	if x != nil {
		return x.AtraceCategories
	}
	return nil
}

func (x *FtraceConfig) GetAtraceApps() []string {
	if x != nil {
		return x.AtraceApps
	}
	return nil
}

func (x *FtraceConfig) GetBufferSizeKb() uint32 {
	if x != nil && x.BufferSizeKb != nil {
		return *x.BufferSizeKb
	}
	return 0
}

func (x *FtraceConfig) GetDrainPeriodMs() uint32 {
	if x != nil && x.DrainPeriodMs != nil {
		return *x.DrainPeriodMs
	}
	return 0
}

func (x *FtraceConfig) GetCompactSched() *FtraceConfig_CompactSchedConfig {
	if x != nil {
		return x.CompactSched
	}
	return nil
}

func (x *FtraceConfig) GetSymbolizeKsyms() bool {
	if x != nil && x.SymbolizeKsyms != nil {
		return *x.SymbolizeKsyms
	}
	return false
}

type GpuCounterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Desired sampling interval for counters.
	CounterPeriodNs *uint64 `protobuf:"varint,1,opt,name=counter_period_ns,json=counterPeriodNs" json:"counter_period_ns,omitempty"`
	// List of counters to be sampled. Counter IDs correspond to the ones
	// described in GpuCounterSpec in the data source descriptor.
	CounterIds []uint32 `protobuf:"varint,2,rep,name=counter_ids,json=counterIds" json:"counter_ids,omitempty"`
	// Sample counters by instrumenting command buffers.
	InstrumentedSampling *bool `protobuf:"varint,3,opt,name=instrumented_sampling,json=instrumentedSampling" json:"instrumented_sampling,omitempty"`
	// Fix gpu clock rate during trace session.
	FixGpuClock *bool `protobuf:"varint,4,opt,name=fix_gpu_clock,json=fixGpuClock" json:"fix_gpu_clock,omitempty"`
}

func (x *GpuCounterConfig) Reset() {
	*x = GpuCounterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuCounterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuCounterConfig) ProtoMessage() {}

func (x *GpuCounterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuCounterConfig.ProtoReflect.Descriptor instead.
func (*GpuCounterConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{10}
}

func (x *GpuCounterConfig) GetCounterPeriodNs() uint64 {
	if x != nil && x.CounterPeriodNs != nil {
		return *x.CounterPeriodNs
	}
	return 0
}

func (x *GpuCounterConfig) GetCounterIds() []uint32 {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

func (x *GpuCounterConfig) GetInstrumentedSampling() bool {
	if x != nil && x.InstrumentedSampling != nil {
		return *x.InstrumentedSampling
	}
	return false
}

func (x *GpuCounterConfig) GetFixGpuClock() bool {
	if x != nil && x.FixGpuClock != nil {
		return *x.FixGpuClock
	}
	return false
}

type VulkanMemoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tracking driver memory usage events
	TrackDriverMemoryUsage *bool `protobuf:"varint,1,opt,name=track_driver_memory_usage,json=trackDriverMemoryUsage" json:"track_driver_memory_usage,omitempty"`
	// Tracking device memory usage events
	TrackDeviceMemoryUsage *bool `protobuf:"varint,2,opt,name=track_device_memory_usage,json=trackDeviceMemoryUsage" json:"track_device_memory_usage,omitempty"`
}

func (x *VulkanMemoryConfig) Reset() {
	*x = VulkanMemoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulkanMemoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulkanMemoryConfig) ProtoMessage() {}

func (x *VulkanMemoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulkanMemoryConfig.ProtoReflect.Descriptor instead.
func (*VulkanMemoryConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{11}
}

func (x *VulkanMemoryConfig) GetTrackDriverMemoryUsage() bool {
	if x != nil && x.TrackDriverMemoryUsage != nil {
		return *x.TrackDriverMemoryUsage
	}
	return false
}

func (x *VulkanMemoryConfig) GetTrackDeviceMemoryUsage() bool {
	if x != nil && x.TrackDeviceMemoryUsage != nil {
		return *x.TrackDeviceMemoryUsage
	}
	return false
}

type InodeFileConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How long to pause between batches.
	ScanIntervalMs *uint32 `protobuf:"varint,1,opt,name=scan_interval_ms,json=scanIntervalMs" json:"scan_interval_ms,omitempty"`
	// How long to wait before the first scan in order to accumulate inodes.
	ScanDelayMs *uint32 `protobuf:"varint,2,opt,name=scan_delay_ms,json=scanDelayMs" json:"scan_delay_ms,omitempty"`
	// How many inodes to scan in one batch.
	ScanBatchSize *uint32 `protobuf:"varint,3,opt,name=scan_batch_size,json=scanBatchSize" json:"scan_batch_size,omitempty"`
	// Do not scan for inodes not found in the static map.
	DoNotScan *bool `protobuf:"varint,4,opt,name=do_not_scan,json=doNotScan" json:"do_not_scan,omitempty"`
	// If non-empty, only scan inodes corresponding to block devices named in
	// this list.
	ScanMountPoints []string `protobuf:"bytes,5,rep,name=scan_mount_points,json=scanMountPoints" json:"scan_mount_points,omitempty"`
	// When encountering an inode belonging to a block device corresponding
	// to one of the mount points in this map, scan its scan_roots instead.
	MountPointMapping []*InodeFileConfig_MountPointMappingEntry `protobuf:"bytes,6,rep,name=mount_point_mapping,json=mountPointMapping" json:"mount_point_mapping,omitempty"`
}

func (x *InodeFileConfig) Reset() {
	*x = InodeFileConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InodeFileConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InodeFileConfig) ProtoMessage() {}

func (x *InodeFileConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InodeFileConfig.ProtoReflect.Descriptor instead.
func (*InodeFileConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{12}
}

func (x *InodeFileConfig) GetScanIntervalMs() uint32 {
	if x != nil && x.ScanIntervalMs != nil {
		return *x.ScanIntervalMs
	}
	return 0
}

func (x *InodeFileConfig) GetScanDelayMs() uint32 {
	if x != nil && x.ScanDelayMs != nil {
		return *x.ScanDelayMs
	}
	return 0
}

func (x *InodeFileConfig) GetScanBatchSize() uint32 {
	if x != nil && x.ScanBatchSize != nil {
		return *x.ScanBatchSize
	}
	return 0
}

func (x *InodeFileConfig) GetDoNotScan() bool {
	if x != nil && x.DoNotScan != nil {
		return *x.DoNotScan
	}
	return false
}

func (x *InodeFileConfig) GetScanMountPoints() []string {
	if x != nil {
		return x.ScanMountPoints
	}
	return nil
}

func (x *InodeFileConfig) GetMountPointMapping() []*InodeFileConfig_MountPointMappingEntry {
	if x != nil {
		return x.MountPointMapping
	}
	return nil
}

// Configuration for trace packet interception. Used for diverting trace data to
// non-Perfetto sources (e.g., logging to the console, ETW) when using the
// Perfetto SDK.
type InterceptorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matches the name given to RegisterInterceptor().
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *InterceptorConfig) Reset() {
	*x = InterceptorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterceptorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptorConfig) ProtoMessage() {}

func (x *InterceptorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptorConfig.ProtoReflect.Descriptor instead.
func (*InterceptorConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{13}
}

func (x *InterceptorConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type AndroidPowerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryPollMs   *uint32                              `protobuf:"varint,1,opt,name=battery_poll_ms,json=batteryPollMs" json:"battery_poll_ms,omitempty"`
	BatteryCounters []AndroidPowerConfig_BatteryCounters `protobuf:"varint,2,rep,name=battery_counters,json=batteryCounters,enum=perfetto.protos.AndroidPowerConfig_BatteryCounters" json:"battery_counters,omitempty"`
	// Where available enables per-power-rail measurements.
	CollectPowerRails *bool `protobuf:"varint,3,opt,name=collect_power_rails,json=collectPowerRails" json:"collect_power_rails,omitempty"`
}

func (x *AndroidPowerConfig) Reset() {
	*x = AndroidPowerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPowerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPowerConfig) ProtoMessage() {}

func (x *AndroidPowerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPowerConfig.ProtoReflect.Descriptor instead.
func (*AndroidPowerConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{14}
}

func (x *AndroidPowerConfig) GetBatteryPollMs() uint32 {
	if x != nil && x.BatteryPollMs != nil {
		return *x.BatteryPollMs
	}
	return 0
}

func (x *AndroidPowerConfig) GetBatteryCounters() []AndroidPowerConfig_BatteryCounters {
	if x != nil {
		return x.BatteryCounters
	}
	return nil
}

func (x *AndroidPowerConfig) GetCollectPowerRails() bool {
	if x != nil && x.CollectPowerRails != nil {
		return *x.CollectPowerRails
	}
	return false
}

type ProcessStatsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quirks []ProcessStatsConfig_Quirks `protobuf:"varint,1,rep,name=quirks,enum=perfetto.protos.ProcessStatsConfig_Quirks" json:"quirks,omitempty"`
	// If enabled all processes will be scanned and dumped when the trace starts.
	ScanAllProcessesOnStart *bool `protobuf:"varint,2,opt,name=scan_all_processes_on_start,json=scanAllProcessesOnStart" json:"scan_all_processes_on_start,omitempty"`
	// If enabled thread names are also recoded (this is redundant if sched_switch
	// is enabled).
	RecordThreadNames *bool `protobuf:"varint,3,opt,name=record_thread_names,json=recordThreadNames" json:"record_thread_names,omitempty"`
	// If > 0 samples counters (see process_stats.proto) from
	// /proc/pid/status and oom_score_adj every X ms.
	// This is required to be > 100ms to avoid excessive CPU usage.
	// TODO(primiano): add CPU cost for change this value.
	ProcStatsPollMs *uint32 `protobuf:"varint,4,opt,name=proc_stats_poll_ms,json=procStatsPollMs" json:"proc_stats_poll_ms,omitempty"`
	// This is required to be either = 0 or a multiple of |proc_stats_poll_ms|
	// (default: |proc_stats_poll_ms|). If = 0, will be set to
	// |proc_stats_poll_ms|. Non-multiples will be rounded down to the nearest
	// multiple.
	ProcStatsCacheTtlMs *uint32 `protobuf:"varint,6,opt,name=proc_stats_cache_ttl_ms,json=procStatsCacheTtlMs" json:"proc_stats_cache_ttl_ms,omitempty"`
	// Whether to record /proc/tid/time_in_state.
	RecordThreadTimeInState *bool `protobuf:"varint,7,opt,name=record_thread_time_in_state,json=recordThreadTimeInState" json:"record_thread_time_in_state,omitempty"`
	// Size of the cache for thread time_in_state cpu freq values.
	// If not specificed, the default is used.
	ThreadTimeInStateCacheSize *uint32 `protobuf:"varint,8,opt,name=thread_time_in_state_cache_size,json=threadTimeInStateCacheSize" json:"thread_time_in_state_cache_size,omitempty"`
}

func (x *ProcessStatsConfig) Reset() {
	*x = ProcessStatsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStatsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStatsConfig) ProtoMessage() {}

func (x *ProcessStatsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStatsConfig.ProtoReflect.Descriptor instead.
func (*ProcessStatsConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessStatsConfig) GetQuirks() []ProcessStatsConfig_Quirks {
	if x != nil {
		return x.Quirks
	}
	return nil
}

func (x *ProcessStatsConfig) GetScanAllProcessesOnStart() bool {
	if x != nil && x.ScanAllProcessesOnStart != nil {
		return *x.ScanAllProcessesOnStart
	}
	return false
}

func (x *ProcessStatsConfig) GetRecordThreadNames() bool {
	if x != nil && x.RecordThreadNames != nil {
		return *x.RecordThreadNames
	}
	return false
}

func (x *ProcessStatsConfig) GetProcStatsPollMs() uint32 {
	if x != nil && x.ProcStatsPollMs != nil {
		return *x.ProcStatsPollMs
	}
	return 0
}

func (x *ProcessStatsConfig) GetProcStatsCacheTtlMs() uint32 {
	if x != nil && x.ProcStatsCacheTtlMs != nil {
		return *x.ProcStatsCacheTtlMs
	}
	return 0
}

func (x *ProcessStatsConfig) GetRecordThreadTimeInState() bool {
	if x != nil && x.RecordThreadTimeInState != nil {
		return *x.RecordThreadTimeInState
	}
	return false
}

func (x *ProcessStatsConfig) GetThreadTimeInStateCacheSize() uint32 {
	if x != nil && x.ThreadTimeInStateCacheSize != nil {
		return *x.ThreadTimeInStateCacheSize
	}
	return 0
}

// Configuration for go/heapprofd.
// Next id: 24
type HeapprofdConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sampling rate for all heaps not specified via heap_sampling_intervals.
	//
	// These are:
	// * All heaps if heap_sampling_intervals is empty.
	// * Those profiled due to all_heaps and not named in heaps if
	//   heap_sampling_intervals is not empty.
	// * The implicit libc.malloc heap if heaps is empty.
	//
	// Set to 1 for perfect accuracy.
	// Otherwise, sample every sample_interval_bytes on average.
	//
	// See
	// https://perfetto.dev/docs/data-sources/native-heap-profiler#sampling-interval
	// for more details.
	//
	// BUGS
	// Before Android 12, setting this to 0 would crash the target process.
	SamplingIntervalBytes *uint64 `protobuf:"varint,1,opt,name=sampling_interval_bytes,json=samplingIntervalBytes" json:"sampling_interval_bytes,omitempty"`
	// E.g. surfaceflinger, com.android.phone
	// This input is normalized in the following way: if it contains slashes,
	// everything up to the last slash is discarded. If it contains "@",
	// everything after the first @ is discared.
	// E.g. /system/bin/surfaceflinger@1.0 normalizes to surfaceflinger.
	// This transformation is also applied to the processes' command lines when
	// matching.
	ProcessCmdline []string `protobuf:"bytes,2,rep,name=process_cmdline,json=processCmdline" json:"process_cmdline,omitempty"`
	// For watermark based triggering or local debugging.
	Pid []uint64 `protobuf:"varint,4,rep,name=pid" json:"pid,omitempty"`
	// Which heaps to sample, e.g. "libc.malloc". If left empty, only samples
	// "malloc".
	//
	// Introduced in Android 12.
	Heaps             []string `protobuf:"bytes,20,rep,name=heaps" json:"heaps,omitempty"`
	StreamAllocations *bool    `protobuf:"varint,23,opt,name=stream_allocations,json=streamAllocations" json:"stream_allocations,omitempty"`
	// If given, needs to be the same length as heaps and gives the sampling
	// interval for the respective entry in heaps.
	//
	// Otherwise, sampling_interval_bytes is used.
	//
	// It is recommended to set sampling_interval_bytes to a reasonable default
	// value when using this, as a value of 0 for sampling_interval_bytes will
	// crash the target process before Android 12.
	//
	// Introduced in Android 12.
	HeapSamplingIntervals []uint64 `protobuf:"varint,22,rep,name=heap_sampling_intervals,json=heapSamplingIntervals" json:"heap_sampling_intervals,omitempty"`
	// Sample all heaps registered by target process. Introduced in Android 12.
	AllHeaps *bool `protobuf:"varint,21,opt,name=all_heaps,json=allHeaps" json:"all_heaps,omitempty"`
	// Profile all processes eligible for profiling on the system.
	// See
	// https://perfetto.dev/docs/data-sources/native-heap-profiler#heapprofd-targets
	// for which processes are eligible.
	//
	// On unmodified userdebug builds, this will lead to system crashes. Zygote
	// will crash when trying to launch a new process as it will have an
	// unexpected open socket to heapprofd.
	//
	// heapprofd will likely be overloaded by the amount of data for low
	// sampling intervals.
	All *bool `protobuf:"varint,5,opt,name=all" json:"all,omitempty"`
	// Do not profile processes whose anon RSS + swap < given value.
	// Introduced in Android 11.
	MinAnonymousMemoryKb *uint32 `protobuf:"varint,15,opt,name=min_anonymous_memory_kb,json=minAnonymousMemoryKb" json:"min_anonymous_memory_kb,omitempty"`
	// Stop profile if heapprofd memory usage goes beyond the given value.
	// Introduced in Android 11.
	MaxHeapprofdMemoryKb *uint32 `protobuf:"varint,16,opt,name=max_heapprofd_memory_kb,json=maxHeapprofdMemoryKb" json:"max_heapprofd_memory_kb,omitempty"`
	// Stop profile if heapprofd CPU time since start of this data-source
	// goes beyond given value.
	// Introduced in Android 11.
	MaxHeapprofdCpuSecs *uint64 `protobuf:"varint,17,opt,name=max_heapprofd_cpu_secs,json=maxHeapprofdCpuSecs" json:"max_heapprofd_cpu_secs,omitempty"`
	// Do not emit function names for mappings starting with this prefix.
	// E.g. /system to not emit symbols for any system libraries.
	SkipSymbolPrefix []string `protobuf:"bytes,7,rep,name=skip_symbol_prefix,json=skipSymbolPrefix" json:"skip_symbol_prefix,omitempty"`
	// Dump at a predefined interval.
	ContinuousDumpConfig *HeapprofdConfig_ContinuousDumpConfig `protobuf:"bytes,6,opt,name=continuous_dump_config,json=continuousDumpConfig" json:"continuous_dump_config,omitempty"`
	// Size of the shared memory buffer between the profiled processes and
	// heapprofd. Defaults to 8 MiB. If larger than 500 MiB, truncated to 500
	// MiB.
	//
	// Needs to be:
	// * at least 8192,
	// * a power of two,
	// * a multiple of 4096.
	ShmemSizeBytes *uint64 `protobuf:"varint,8,opt,name=shmem_size_bytes,json=shmemSizeBytes" json:"shmem_size_bytes,omitempty"`
	// When the shmem buffer is full, block the client instead of ending the
	// trace. Use with caution as this will significantly slow down the target
	// process.
	BlockClient *bool `protobuf:"varint,9,opt,name=block_client,json=blockClient" json:"block_client,omitempty"`
	// If set, stop the trace session after blocking the client for this
	// timeout. Needs to be larger than 100 us, otherwise no retries are done.
	// Introduced in Android 11.
	BlockClientTimeoutUs *uint32 `protobuf:"varint,14,opt,name=block_client_timeout_us,json=blockClientTimeoutUs" json:"block_client_timeout_us,omitempty"`
	// Do not profile processes from startup, only match already running
	// processes.
	//
	// Can not be set at the same time as no_running.
	// Introduced in Android 11.
	NoStartup *bool `protobuf:"varint,10,opt,name=no_startup,json=noStartup" json:"no_startup,omitempty"`
	// Do not profile running processes. Only match processes on startup.
	//
	// Can not be set at the same time as no_startup.
	// Introduced in Android 11.
	NoRunning *bool `protobuf:"varint,11,opt,name=no_running,json=noRunning" json:"no_running,omitempty"`
	// Cause heapprofd to emit a single dump at the end, showing the memory usage
	// at the point in time when the sampled heap usage of the process was at its
	// maximum. This causes ProfilePacket.HeapSample.self_max to be set, and
	// self_allocated and self_freed to not be set.
	// Introduced in Android 11.
	DumpAtMax *bool `protobuf:"varint,13,opt,name=dump_at_max,json=dumpAtMax" json:"dump_at_max,omitempty"`
	// Escape hatch if the session is being torn down because of a forked child
	// that shares memory space, but is not correctly identified as a vforked
	// child.
	// Introduced in Android 11.
	DisableForkTeardown *bool `protobuf:"varint,18,opt,name=disable_fork_teardown,json=disableForkTeardown" json:"disable_fork_teardown,omitempty"`
	// We try to automatically detect when a target applicatation vforks but then
	// does a memory allocation (or free). This auto-detection can be disabled
	// with this.
	// Introduced in Android 11.
	DisableVforkDetection *bool `protobuf:"varint,19,opt,name=disable_vfork_detection,json=disableVforkDetection" json:"disable_vfork_detection,omitempty"`
}

func (x *HeapprofdConfig) Reset() {
	*x = HeapprofdConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapprofdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapprofdConfig) ProtoMessage() {}

func (x *HeapprofdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapprofdConfig.ProtoReflect.Descriptor instead.
func (*HeapprofdConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{16}
}

func (x *HeapprofdConfig) GetSamplingIntervalBytes() uint64 {
	if x != nil && x.SamplingIntervalBytes != nil {
		return *x.SamplingIntervalBytes
	}
	return 0
}

func (x *HeapprofdConfig) GetProcessCmdline() []string {
	if x != nil {
		return x.ProcessCmdline
	}
	return nil
}

func (x *HeapprofdConfig) GetPid() []uint64 {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *HeapprofdConfig) GetHeaps() []string {
	if x != nil {
		return x.Heaps
	}
	return nil
}

func (x *HeapprofdConfig) GetStreamAllocations() bool {
	if x != nil && x.StreamAllocations != nil {
		return *x.StreamAllocations
	}
	return false
}

func (x *HeapprofdConfig) GetHeapSamplingIntervals() []uint64 {
	if x != nil {
		return x.HeapSamplingIntervals
	}
	return nil
}

func (x *HeapprofdConfig) GetAllHeaps() bool {
	if x != nil && x.AllHeaps != nil {
		return *x.AllHeaps
	}
	return false
}

func (x *HeapprofdConfig) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

func (x *HeapprofdConfig) GetMinAnonymousMemoryKb() uint32 {
	if x != nil && x.MinAnonymousMemoryKb != nil {
		return *x.MinAnonymousMemoryKb
	}
	return 0
}

func (x *HeapprofdConfig) GetMaxHeapprofdMemoryKb() uint32 {
	if x != nil && x.MaxHeapprofdMemoryKb != nil {
		return *x.MaxHeapprofdMemoryKb
	}
	return 0
}

func (x *HeapprofdConfig) GetMaxHeapprofdCpuSecs() uint64 {
	if x != nil && x.MaxHeapprofdCpuSecs != nil {
		return *x.MaxHeapprofdCpuSecs
	}
	return 0
}

func (x *HeapprofdConfig) GetSkipSymbolPrefix() []string {
	if x != nil {
		return x.SkipSymbolPrefix
	}
	return nil
}

func (x *HeapprofdConfig) GetContinuousDumpConfig() *HeapprofdConfig_ContinuousDumpConfig {
	if x != nil {
		return x.ContinuousDumpConfig
	}
	return nil
}

func (x *HeapprofdConfig) GetShmemSizeBytes() uint64 {
	if x != nil && x.ShmemSizeBytes != nil {
		return *x.ShmemSizeBytes
	}
	return 0
}

func (x *HeapprofdConfig) GetBlockClient() bool {
	if x != nil && x.BlockClient != nil {
		return *x.BlockClient
	}
	return false
}

func (x *HeapprofdConfig) GetBlockClientTimeoutUs() uint32 {
	if x != nil && x.BlockClientTimeoutUs != nil {
		return *x.BlockClientTimeoutUs
	}
	return 0
}

func (x *HeapprofdConfig) GetNoStartup() bool {
	if x != nil && x.NoStartup != nil {
		return *x.NoStartup
	}
	return false
}

func (x *HeapprofdConfig) GetNoRunning() bool {
	if x != nil && x.NoRunning != nil {
		return *x.NoRunning
	}
	return false
}

func (x *HeapprofdConfig) GetDumpAtMax() bool {
	if x != nil && x.DumpAtMax != nil {
		return *x.DumpAtMax
	}
	return false
}

func (x *HeapprofdConfig) GetDisableForkTeardown() bool {
	if x != nil && x.DisableForkTeardown != nil {
		return *x.DisableForkTeardown
	}
	return false
}

func (x *HeapprofdConfig) GetDisableVforkDetection() bool {
	if x != nil && x.DisableVforkDetection != nil {
		return *x.DisableVforkDetection
	}
	return false
}

// Configuration for go/heapprofd.
type JavaHprofConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This input is normalized in the following way: if it contains slashes,
	// everything up to the last slash is discarded. If it contains "@",
	// everything after the first @ is discared.
	// E.g. /system/bin/surfaceflinger@1.0 normalizes to surfaceflinger.
	// This transformation is also applied to the processes' command lines when
	// matching.
	ProcessCmdline []string `protobuf:"bytes,1,rep,name=process_cmdline,json=processCmdline" json:"process_cmdline,omitempty"`
	// For watermark based triggering or local debugging.
	Pid []uint64 `protobuf:"varint,2,rep,name=pid" json:"pid,omitempty"`
	// Dump at a predefined interval.
	ContinuousDumpConfig *JavaHprofConfig_ContinuousDumpConfig `protobuf:"bytes,3,opt,name=continuous_dump_config,json=continuousDumpConfig" json:"continuous_dump_config,omitempty"`
	// Do not profile processes whose anon RSS + swap < given value.
	MinAnonymousMemoryKb *uint32 `protobuf:"varint,4,opt,name=min_anonymous_memory_kb,json=minAnonymousMemoryKb" json:"min_anonymous_memory_kb,omitempty"`
	// Include the process' /proc/self/smaps.
	// This only shows maps that:
	// * start with /system
	// * start with /vendor
	// * start with /data/app
	// * contain "extracted in memory from Y", where Y matches any of the above
	DumpSmaps *bool `protobuf:"varint,5,opt,name=dump_smaps,json=dumpSmaps" json:"dump_smaps,omitempty"`
	// Exclude objects of the following types from the profile. This can be
	// useful if lots of uninteresting objects, e.g. "sun.misc.Cleaner".
	IgnoredTypes []string `protobuf:"bytes,6,rep,name=ignored_types,json=ignoredTypes" json:"ignored_types,omitempty"`
}

func (x *JavaHprofConfig) Reset() {
	*x = JavaHprofConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHprofConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHprofConfig) ProtoMessage() {}

func (x *JavaHprofConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHprofConfig.ProtoReflect.Descriptor instead.
func (*JavaHprofConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{17}
}

func (x *JavaHprofConfig) GetProcessCmdline() []string {
	if x != nil {
		return x.ProcessCmdline
	}
	return nil
}

func (x *JavaHprofConfig) GetPid() []uint64 {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *JavaHprofConfig) GetContinuousDumpConfig() *JavaHprofConfig_ContinuousDumpConfig {
	if x != nil {
		return x.ContinuousDumpConfig
	}
	return nil
}

func (x *JavaHprofConfig) GetMinAnonymousMemoryKb() uint32 {
	if x != nil && x.MinAnonymousMemoryKb != nil {
		return *x.MinAnonymousMemoryKb
	}
	return 0
}

func (x *JavaHprofConfig) GetDumpSmaps() bool {
	if x != nil && x.DumpSmaps != nil {
		return *x.DumpSmaps
	}
	return false
}

func (x *JavaHprofConfig) GetIgnoredTypes() []string {
	if x != nil {
		return x.IgnoredTypes
	}
	return nil
}

// Configuration for the traced_perf profiler.
//
// At the time of writing, the config options are restricted to the periodic
// system-wide stack sampling use-case (|all_cpus| must be true).
//
// Next id: 13
type PerfEventConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, sample events on all CPUs.
	AllCpus *bool `protobuf:"varint,1,opt,name=all_cpus,json=allCpus" json:"all_cpus,omitempty"`
	// Per-cpu sampling frequency (requested from the kernel). Not guaranteed to
	// be honored as the kernel can throttle the sampling rate if it's too high.
	// If unset, an implementation-defined default is used.
	SamplingFrequency *uint32 `protobuf:"varint,2,opt,name=sampling_frequency,json=samplingFrequency" json:"sampling_frequency,omitempty"`
	// How often the per-cpu ring buffers are read by the producer.
	// If unset, an implementation-defined default is used.
	RingBufferReadPeriodMs *uint32 `protobuf:"varint,8,opt,name=ring_buffer_read_period_ms,json=ringBufferReadPeriodMs" json:"ring_buffer_read_period_ms,omitempty"`
	// Size (in 4k pages) of each per-cpu ring buffer that is filled by the
	// kernel. If set, must be a power of two.
	// If unset, an implementation-defined default is used.
	RingBufferPages *uint32 `protobuf:"varint,3,opt,name=ring_buffer_pages,json=ringBufferPages" json:"ring_buffer_pages,omitempty"`
	// If true, callstacks will include the kernel-space frames. Such frames can
	// be identified by a magical "kernel" string as their mapping name.
	// Requires traced_perf to be running as root, or kptr_restrict to have been
	// manually unrestricted.
	// This does *not* disclose KASLR, as only the function names are emitted.
	KernelFrames *bool `protobuf:"varint,12,opt,name=kernel_frames,json=kernelFrames" json:"kernel_frames,omitempty"`
	// Process ID (TGID) allowlist. If this list is not empty, only matching
	// samples will be retained. If multiple allow/deny-lists are
	// specified by the config, then all of them are evaluated for each sampled
	// process.
	TargetPid []int32 `protobuf:"varint,4,rep,name=target_pid,json=targetPid" json:"target_pid,omitempty"`
	// Command line allowlist, matched against the
	// /proc/<pid>/cmdline (not the comm string), with both sides being
	// "normalized". Normalization is as follows: (1) trim everything beyond the
	// first null or "@" byte; (2) if the string contains forward slashes, trim
	// everything up to and including the last one.
	TargetCmdline []string `protobuf:"bytes,5,rep,name=target_cmdline,json=targetCmdline" json:"target_cmdline,omitempty"`
	// List of excluded pids.
	ExcludePid []int32 `protobuf:"varint,6,rep,name=exclude_pid,json=excludePid" json:"exclude_pid,omitempty"`
	// List of excluded cmdlines. Normalized in the same way as |target_cmdline|.
	ExcludeCmdline []string `protobuf:"bytes,7,rep,name=exclude_cmdline,json=excludeCmdline" json:"exclude_cmdline,omitempty"`
	// Number of additional command lines to sample. Only those which are neither
	// explicitly included nor excluded will be considered. Processes are accepted
	// on a first come, first served basis.
	AdditionalCmdlineCount *uint32 `protobuf:"varint,11,opt,name=additional_cmdline_count,json=additionalCmdlineCount" json:"additional_cmdline_count,omitempty"`
	// Timeout for the remote /proc/<pid>/{maps,mem} file descriptors for a
	// sampled process. This is primarily for Android, where this lookup is
	// asynchronous. As long as the producer is waiting, the associated samples
	// will be kept enqueued (putting pressure on the capacity of the shared
	// unwinding queue). Once a lookup for a process expires, all associated
	// samples are discarded. However, if the lookup still succeeds after the
	// timeout, future samples will be handled normally.
	// If unset, an implementation-defined default is used.
	RemoteDescriptorTimeoutMs *uint32 `protobuf:"varint,9,opt,name=remote_descriptor_timeout_ms,json=remoteDescriptorTimeoutMs" json:"remote_descriptor_timeout_ms,omitempty"`
	// Optional period for clearing state cached by the unwinder. This is a heavy
	// operation that is only necessary for traces that target a wide set of
	// processes, and require the memory footprint to be reset periodically.
	// If unset, the cached state will not be cleared.
	UnwindStateClearPeriodMs *uint32 `protobuf:"varint,10,opt,name=unwind_state_clear_period_ms,json=unwindStateClearPeriodMs" json:"unwind_state_clear_period_ms,omitempty"`
}

func (x *PerfEventConfig) Reset() {
	*x = PerfEventConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfEventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfEventConfig) ProtoMessage() {}

func (x *PerfEventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfEventConfig.ProtoReflect.Descriptor instead.
func (*PerfEventConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{18}
}

func (x *PerfEventConfig) GetAllCpus() bool {
	if x != nil && x.AllCpus != nil {
		return *x.AllCpus
	}
	return false
}

func (x *PerfEventConfig) GetSamplingFrequency() uint32 {
	if x != nil && x.SamplingFrequency != nil {
		return *x.SamplingFrequency
	}
	return 0
}

func (x *PerfEventConfig) GetRingBufferReadPeriodMs() uint32 {
	if x != nil && x.RingBufferReadPeriodMs != nil {
		return *x.RingBufferReadPeriodMs
	}
	return 0
}

func (x *PerfEventConfig) GetRingBufferPages() uint32 {
	if x != nil && x.RingBufferPages != nil {
		return *x.RingBufferPages
	}
	return 0
}

func (x *PerfEventConfig) GetKernelFrames() bool {
	if x != nil && x.KernelFrames != nil {
		return *x.KernelFrames
	}
	return false
}

func (x *PerfEventConfig) GetTargetPid() []int32 {
	if x != nil {
		return x.TargetPid
	}
	return nil
}

func (x *PerfEventConfig) GetTargetCmdline() []string {
	if x != nil {
		return x.TargetCmdline
	}
	return nil
}

func (x *PerfEventConfig) GetExcludePid() []int32 {
	if x != nil {
		return x.ExcludePid
	}
	return nil
}

func (x *PerfEventConfig) GetExcludeCmdline() []string {
	if x != nil {
		return x.ExcludeCmdline
	}
	return nil
}

func (x *PerfEventConfig) GetAdditionalCmdlineCount() uint32 {
	if x != nil && x.AdditionalCmdlineCount != nil {
		return *x.AdditionalCmdlineCount
	}
	return 0
}

func (x *PerfEventConfig) GetRemoteDescriptorTimeoutMs() uint32 {
	if x != nil && x.RemoteDescriptorTimeoutMs != nil {
		return *x.RemoteDescriptorTimeoutMs
	}
	return 0
}

func (x *PerfEventConfig) GetUnwindStateClearPeriodMs() uint32 {
	if x != nil && x.UnwindStateClearPeriodMs != nil {
		return *x.UnwindStateClearPeriodMs
	}
	return 0
}

// This file defines the configuration for the Linux /proc poller data source,
// which injects counters in the trace.
// Counters that are needed in the trace must be explicitly listed in the
// *_counters fields. This is to avoid spamming the trace with all counters
// at all times.
// The sampling rate is configurable. All polling rates (*_period_ms) need
// to be integer multiples of each other.
// OK:     [10ms, 10ms, 10ms],  [10ms, 20ms, 10ms],  [10ms, 20ms, 60ms]
// Not OK: [10ms, 10ms, 11ms],  [10ms, 15ms, 20ms]
type SysStatsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Polls /proc/meminfo every X ms, if non-zero.
	// This is required to be > 10ms to avoid excessive CPU usage.
	// Cost: 0.3 ms [read] + 0.07 ms [parse + trace injection]
	MeminfoPeriodMs *uint32 `protobuf:"varint,1,opt,name=meminfo_period_ms,json=meminfoPeriodMs" json:"meminfo_period_ms,omitempty"`
	// If empty all known counters are reported. Otherwise, only the counters
	// specified below are reported.
	MeminfoCounters []MeminfoCounters `protobuf:"varint,2,rep,name=meminfo_counters,json=meminfoCounters,enum=perfetto.protos.MeminfoCounters" json:"meminfo_counters,omitempty"`
	// Polls /proc/vmstat every X ms, if non-zero.
	// This is required to be > 10ms to avoid excessive CPU usage.
	// Cost: 0.2 ms [read] + 0.3 ms [parse + trace injection]
	VmstatPeriodMs *uint32          `protobuf:"varint,3,opt,name=vmstat_period_ms,json=vmstatPeriodMs" json:"vmstat_period_ms,omitempty"`
	VmstatCounters []VmstatCounters `protobuf:"varint,4,rep,name=vmstat_counters,json=vmstatCounters,enum=perfetto.protos.VmstatCounters" json:"vmstat_counters,omitempty"`
	// Pols /proc/stat every X ms, if non-zero.
	// This is required to be > 10ms to avoid excessive CPU usage.
	// Cost: 4.1 ms [read] + 1.9 ms [parse + trace injection]
	StatPeriodMs *uint32                       `protobuf:"varint,5,opt,name=stat_period_ms,json=statPeriodMs" json:"stat_period_ms,omitempty"`
	StatCounters []SysStatsConfig_StatCounters `protobuf:"varint,6,rep,name=stat_counters,json=statCounters,enum=perfetto.protos.SysStatsConfig_StatCounters" json:"stat_counters,omitempty"`
}

func (x *SysStatsConfig) Reset() {
	*x = SysStatsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStatsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStatsConfig) ProtoMessage() {}

func (x *SysStatsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStatsConfig.ProtoReflect.Descriptor instead.
func (*SysStatsConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{19}
}

func (x *SysStatsConfig) GetMeminfoPeriodMs() uint32 {
	if x != nil && x.MeminfoPeriodMs != nil {
		return *x.MeminfoPeriodMs
	}
	return 0
}

func (x *SysStatsConfig) GetMeminfoCounters() []MeminfoCounters {
	if x != nil {
		return x.MeminfoCounters
	}
	return nil
}

func (x *SysStatsConfig) GetVmstatPeriodMs() uint32 {
	if x != nil && x.VmstatPeriodMs != nil {
		return *x.VmstatPeriodMs
	}
	return 0
}

func (x *SysStatsConfig) GetVmstatCounters() []VmstatCounters {
	if x != nil {
		return x.VmstatCounters
	}
	return nil
}

func (x *SysStatsConfig) GetStatPeriodMs() uint32 {
	if x != nil && x.StatPeriodMs != nil {
		return *x.StatPeriodMs
	}
	return 0
}

func (x *SysStatsConfig) GetStatCounters() []SysStatsConfig_StatCounters {
	if x != nil {
		return x.StatCounters
	}
	return nil
}

// The configuration for a fake producer used in tests.
type TestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of messages the fake producer should send.
	MessageCount *uint32 `protobuf:"varint,1,opt,name=message_count,json=messageCount" json:"message_count,omitempty"`
	// The maximum number of messages which should be sent each second.
	// The actual obserced speed may be lower if the producer is unable to
	// work fast enough.
	// If this is zero or unset, the producer will send as fast as possible.
	MaxMessagesPerSecond *uint32 `protobuf:"varint,2,opt,name=max_messages_per_second,json=maxMessagesPerSecond" json:"max_messages_per_second,omitempty"`
	// The seed value for a simple multiplicative congruential pseudo-random
	// number sequence.
	Seed *uint32 `protobuf:"varint,3,opt,name=seed" json:"seed,omitempty"`
	// The size of each message in bytes. Should be greater than or equal 5 to
	// account for the number of bytes needed to encode the random number and a
	// null byte for the string.
	MessageSize *uint32 `protobuf:"varint,4,opt,name=message_size,json=messageSize" json:"message_size,omitempty"`
	// Whether the producer should send a event batch when the data source is
	// is initially registered.
	SendBatchOnRegister *bool                   `protobuf:"varint,5,opt,name=send_batch_on_register,json=sendBatchOnRegister" json:"send_batch_on_register,omitempty"`
	DummyFields         *TestConfig_DummyFields `protobuf:"bytes,6,opt,name=dummy_fields,json=dummyFields" json:"dummy_fields,omitempty"`
}

func (x *TestConfig) Reset() {
	*x = TestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConfig) ProtoMessage() {}

func (x *TestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConfig.ProtoReflect.Descriptor instead.
func (*TestConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{20}
}

func (x *TestConfig) GetMessageCount() uint32 {
	if x != nil && x.MessageCount != nil {
		return *x.MessageCount
	}
	return 0
}

func (x *TestConfig) GetMaxMessagesPerSecond() uint32 {
	if x != nil && x.MaxMessagesPerSecond != nil {
		return *x.MaxMessagesPerSecond
	}
	return 0
}

func (x *TestConfig) GetSeed() uint32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *TestConfig) GetMessageSize() uint32 {
	if x != nil && x.MessageSize != nil {
		return *x.MessageSize
	}
	return 0
}

func (x *TestConfig) GetSendBatchOnRegister() bool {
	if x != nil && x.SendBatchOnRegister != nil {
		return *x.SendBatchOnRegister
	}
	return false
}

func (x *TestConfig) GetDummyFields() *TestConfig_DummyFields {
	if x != nil {
		return x.DummyFields
	}
	return nil
}

type TrackEventConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default: []
	DisabledCategories []string `protobuf:"bytes,1,rep,name=disabled_categories,json=disabledCategories" json:"disabled_categories,omitempty"`
	// Default: []
	EnabledCategories []string `protobuf:"bytes,2,rep,name=enabled_categories,json=enabledCategories" json:"enabled_categories,omitempty"`
	// Default: [“slow”, “debug”]
	DisabledTags []string `protobuf:"bytes,3,rep,name=disabled_tags,json=disabledTags" json:"disabled_tags,omitempty"`
	// Default: []
	EnabledTags []string `protobuf:"bytes,4,rep,name=enabled_tags,json=enabledTags" json:"enabled_tags,omitempty"`
}

func (x *TrackEventConfig) Reset() {
	*x = TrackEventConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEventConfig) ProtoMessage() {}

func (x *TrackEventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEventConfig.ProtoReflect.Descriptor instead.
func (*TrackEventConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{21}
}

func (x *TrackEventConfig) GetDisabledCategories() []string {
	if x != nil {
		return x.DisabledCategories
	}
	return nil
}

func (x *TrackEventConfig) GetEnabledCategories() []string {
	if x != nil {
		return x.EnabledCategories
	}
	return nil
}

func (x *TrackEventConfig) GetDisabledTags() []string {
	if x != nil {
		return x.DisabledTags
	}
	return nil
}

func (x *TrackEventConfig) GetEnabledTags() []string {
	if x != nil {
		return x.EnabledTags
	}
	return nil
}

// The configuration that is passed to each data source when starting tracing.
// Next id: 116
type DataSourceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source unique name, e.g., "linux.ftrace". This must match
	// the name passed by the data source when it registers (see
	// RegisterDataSource()).
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The index of the logging buffer where TracePacket(s) will be stored.
	// This field doesn't make a major difference for the Producer(s). The final
	// logging buffers, in fact, are completely owned by the Service. We just ask
	// the Producer to copy this number into the chunk headers it emits, so that
	// the Service can quickly identify the buffer where to move the chunks into
	// without expensive lookups on its fastpath.
	TargetBuffer *uint32 `protobuf:"varint,2,opt,name=target_buffer,json=targetBuffer" json:"target_buffer,omitempty"`
	// Set by the service to indicate the duration of the trace.
	// DO NOT SET in consumer as this will be overridden by the service.
	TraceDurationMs *uint32 `protobuf:"varint,3,opt,name=trace_duration_ms,json=traceDurationMs" json:"trace_duration_ms,omitempty"`
	// Set by the service to indicate how long it waits after StopDataSource.
	// DO NOT SET in consumer as this will be overridden by the service.
	StopTimeoutMs *uint32 `protobuf:"varint,7,opt,name=stop_timeout_ms,json=stopTimeoutMs" json:"stop_timeout_ms,omitempty"`
	// Set by the service to indicate whether this tracing session has extra
	// guardrails.
	// DO NOT SET in consumer as this will be overridden by the service.
	EnableExtraGuardrails *bool `protobuf:"varint,6,opt,name=enable_extra_guardrails,json=enableExtraGuardrails" json:"enable_extra_guardrails,omitempty"`
	// Set by the service to indicate which tracing session the data source
	// belongs to. The intended use case for this is checking if two data sources,
	// one of which produces metadata for the other one, belong to the same trace
	// session and hence should be linked together.
	// This field was introduced in Aug 2018 after Android P.
	// DO NOT SET in consumer as this will be overridden by the service.
	TracingSessionId *uint64 `protobuf:"varint,4,opt,name=tracing_session_id,json=tracingSessionId" json:"tracing_session_id,omitempty"`
	// Data source name: linux.ftrace
	FtraceConfig *FtraceConfig `protobuf:"bytes,100,opt,name=ftrace_config,json=ftraceConfig" json:"ftrace_config,omitempty"`
	// Data source name: linux.inode_file_map
	InodeFileConfig *InodeFileConfig `protobuf:"bytes,102,opt,name=inode_file_config,json=inodeFileConfig" json:"inode_file_config,omitempty"`
	// Data source name: linux.process_stats
	ProcessStatsConfig *ProcessStatsConfig `protobuf:"bytes,103,opt,name=process_stats_config,json=processStatsConfig" json:"process_stats_config,omitempty"`
	// Data source name: linux.sys_stats
	SysStatsConfig *SysStatsConfig `protobuf:"bytes,104,opt,name=sys_stats_config,json=sysStatsConfig" json:"sys_stats_config,omitempty"`
	// Data source name: android.heapprofd
	// Introduced in Android 10.
	HeapprofdConfig *HeapprofdConfig `protobuf:"bytes,105,opt,name=heapprofd_config,json=heapprofdConfig" json:"heapprofd_config,omitempty"`
	// Data source name: android.java_hprof
	// Introduced in Android 11.
	JavaHprofConfig *JavaHprofConfig `protobuf:"bytes,110,opt,name=java_hprof_config,json=javaHprofConfig" json:"java_hprof_config,omitempty"`
	// Data source name: android.power
	AndroidPowerConfig *AndroidPowerConfig `protobuf:"bytes,106,opt,name=android_power_config,json=androidPowerConfig" json:"android_power_config,omitempty"`
	// Data source name: android.log
	AndroidLogConfig *AndroidLogConfig `protobuf:"bytes,107,opt,name=android_log_config,json=androidLogConfig" json:"android_log_config,omitempty"`
	// TODO(fmayer): Add data source name for this.
	GpuCounterConfig *GpuCounterConfig `protobuf:"bytes,108,opt,name=gpu_counter_config,json=gpuCounterConfig" json:"gpu_counter_config,omitempty"`
	// Data source name: android.packages_list
	PackagesListConfig *PackagesListConfig `protobuf:"bytes,109,opt,name=packages_list_config,json=packagesListConfig" json:"packages_list_config,omitempty"`
	// Data source name: linux.perf
	PerfEventConfig *PerfEventConfig `protobuf:"bytes,111,opt,name=perf_event_config,json=perfEventConfig" json:"perf_event_config,omitempty"`
	// Data source name: vulkan.memory_tracker
	VulkanMemoryConfig *VulkanMemoryConfig `protobuf:"bytes,112,opt,name=vulkan_memory_config,json=vulkanMemoryConfig" json:"vulkan_memory_config,omitempty"`
	// Data source name: track_event
	TrackEventConfig *TrackEventConfig `protobuf:"bytes,113,opt,name=track_event_config,json=trackEventConfig" json:"track_event_config,omitempty"`
	// Data source name: android.polled_state
	AndroidPolledStateConfig *AndroidPolledStateConfig `protobuf:"bytes,114,opt,name=android_polled_state_config,json=androidPolledStateConfig" json:"android_polled_state_config,omitempty"`
	// Chrome is special as it doesn't use the perfetto IPC layer. We want to
	// avoid proto serialization and de-serialization there because that would
	// just add extra hops on top of the Mojo ser/des. Instead we auto-generate a
	// C++ class for it so it can pass around plain C++ objets.
	ChromeConfig *ChromeConfig `protobuf:"bytes,101,opt,name=chrome_config,json=chromeConfig" json:"chrome_config,omitempty"`
	// If an interceptor is specified here, packets for this data source will be
	// rerouted to the interceptor instead of the main trace buffer. This can be
	// used, for example, to write trace data into ETW or for logging trace points
	// to the console.
	//
	// Note that interceptors are only supported by data sources registered
	// through the Perfetto SDK API. Data sources that don't use that API (e.g.,
	// traced_probes) may not support interception.
	InterceptorConfig *InterceptorConfig `protobuf:"bytes,115,opt,name=interceptor_config,json=interceptorConfig" json:"interceptor_config,omitempty"`
	// This is a fallback mechanism to send a free-form text config to the
	// producer. In theory this should never be needed. All the code that
	// is part of the platform (i.e. traced service) is supposed to *not* truncate
	// the trace config proto and propagate unknown fields. However, if anything
	// in the pipeline (client or backend) ends up breaking this forward compat
	// plan, this field will become the escape hatch to allow future data sources
	// to get some meaningful configuration.
	LegacyConfig *string `protobuf:"bytes,1000,opt,name=legacy_config,json=legacyConfig" json:"legacy_config,omitempty"`
	// This field is only used for testing.
	ForTesting *TestConfig `protobuf:"bytes,1001,opt,name=for_testing,json=forTesting" json:"for_testing,omitempty"`
}

func (x *DataSourceConfig) Reset() {
	*x = DataSourceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceConfig) ProtoMessage() {}

func (x *DataSourceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceConfig.ProtoReflect.Descriptor instead.
func (*DataSourceConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{22}
}

func (x *DataSourceConfig) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DataSourceConfig) GetTargetBuffer() uint32 {
	if x != nil && x.TargetBuffer != nil {
		return *x.TargetBuffer
	}
	return 0
}

func (x *DataSourceConfig) GetTraceDurationMs() uint32 {
	if x != nil && x.TraceDurationMs != nil {
		return *x.TraceDurationMs
	}
	return 0
}

func (x *DataSourceConfig) GetStopTimeoutMs() uint32 {
	if x != nil && x.StopTimeoutMs != nil {
		return *x.StopTimeoutMs
	}
	return 0
}

func (x *DataSourceConfig) GetEnableExtraGuardrails() bool {
	if x != nil && x.EnableExtraGuardrails != nil {
		return *x.EnableExtraGuardrails
	}
	return false
}

func (x *DataSourceConfig) GetTracingSessionId() uint64 {
	if x != nil && x.TracingSessionId != nil {
		return *x.TracingSessionId
	}
	return 0
}

func (x *DataSourceConfig) GetFtraceConfig() *FtraceConfig {
	if x != nil {
		return x.FtraceConfig
	}
	return nil
}

func (x *DataSourceConfig) GetInodeFileConfig() *InodeFileConfig {
	if x != nil {
		return x.InodeFileConfig
	}
	return nil
}

func (x *DataSourceConfig) GetProcessStatsConfig() *ProcessStatsConfig {
	if x != nil {
		return x.ProcessStatsConfig
	}
	return nil
}

func (x *DataSourceConfig) GetSysStatsConfig() *SysStatsConfig {
	if x != nil {
		return x.SysStatsConfig
	}
	return nil
}

func (x *DataSourceConfig) GetHeapprofdConfig() *HeapprofdConfig {
	if x != nil {
		return x.HeapprofdConfig
	}
	return nil
}

func (x *DataSourceConfig) GetJavaHprofConfig() *JavaHprofConfig {
	if x != nil {
		return x.JavaHprofConfig
	}
	return nil
}

func (x *DataSourceConfig) GetAndroidPowerConfig() *AndroidPowerConfig {
	if x != nil {
		return x.AndroidPowerConfig
	}
	return nil
}

func (x *DataSourceConfig) GetAndroidLogConfig() *AndroidLogConfig {
	if x != nil {
		return x.AndroidLogConfig
	}
	return nil
}

func (x *DataSourceConfig) GetGpuCounterConfig() *GpuCounterConfig {
	if x != nil {
		return x.GpuCounterConfig
	}
	return nil
}

func (x *DataSourceConfig) GetPackagesListConfig() *PackagesListConfig {
	if x != nil {
		return x.PackagesListConfig
	}
	return nil
}

func (x *DataSourceConfig) GetPerfEventConfig() *PerfEventConfig {
	if x != nil {
		return x.PerfEventConfig
	}
	return nil
}

func (x *DataSourceConfig) GetVulkanMemoryConfig() *VulkanMemoryConfig {
	if x != nil {
		return x.VulkanMemoryConfig
	}
	return nil
}

func (x *DataSourceConfig) GetTrackEventConfig() *TrackEventConfig {
	if x != nil {
		return x.TrackEventConfig
	}
	return nil
}

func (x *DataSourceConfig) GetAndroidPolledStateConfig() *AndroidPolledStateConfig {
	if x != nil {
		return x.AndroidPolledStateConfig
	}
	return nil
}

func (x *DataSourceConfig) GetChromeConfig() *ChromeConfig {
	if x != nil {
		return x.ChromeConfig
	}
	return nil
}

func (x *DataSourceConfig) GetInterceptorConfig() *InterceptorConfig {
	if x != nil {
		return x.InterceptorConfig
	}
	return nil
}

func (x *DataSourceConfig) GetLegacyConfig() string {
	if x != nil && x.LegacyConfig != nil {
		return *x.LegacyConfig
	}
	return ""
}

func (x *DataSourceConfig) GetForTesting() *TestConfig {
	if x != nil {
		return x.ForTesting
	}
	return nil
}

// The overall config that is used when starting a new tracing session through
// ProducerPort::StartTracing().
// It contains the general config for the logging buffer(s) and the configs for
// all the data source being enabled.
//
// Next id: 30.
type TraceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buffers            []*TraceConfig_BufferConfig    `protobuf:"bytes,1,rep,name=buffers" json:"buffers,omitempty"`
	DataSources        []*TraceConfig_DataSource      `protobuf:"bytes,2,rep,name=data_sources,json=dataSources" json:"data_sources,omitempty"`
	BuiltinDataSources *TraceConfig_BuiltinDataSource `protobuf:"bytes,20,opt,name=builtin_data_sources,json=builtinDataSources" json:"builtin_data_sources,omitempty"`
	// If specified, the trace will be stopped |duration_ms| after starting.
	// This does *not* count the time the system is suspended, so we will run
	// for duration_ms of system activity, not wall time.
	//
	// However in case of traces with triggers, see
	// TriggerConfig.trigger_timeout_ms instead.
	DurationMs *uint32 `protobuf:"varint,3,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	// This is set when --dropbox is passed to the Perfetto command line client
	// and enables guardrails that limit resource usage for traces requested
	// by statsd.
	EnableExtraGuardrails *bool `protobuf:"varint,4,opt,name=enable_extra_guardrails,json=enableExtraGuardrails" json:"enable_extra_guardrails,omitempty"`
	// Reject producers that are not running under the same UID as the tracing
	// service.
	LockdownMode *TraceConfig_LockdownModeOperation `protobuf:"varint,5,opt,name=lockdown_mode,json=lockdownMode,enum=perfetto.protos.TraceConfig_LockdownModeOperation" json:"lockdown_mode,omitempty"`
	Producers    []*TraceConfig_ProducerConfig      `protobuf:"bytes,6,rep,name=producers" json:"producers,omitempty"`
	// Statsd-specific metadata.
	StatsdMetadata *TraceConfig_StatsdMetadata `protobuf:"bytes,7,opt,name=statsd_metadata,json=statsdMetadata" json:"statsd_metadata,omitempty"`
	// When true && |output_path| is empty, the EnableTracing() request must
	// provide a file descriptor. The service will then periodically read packets
	// out of the trace buffer and store it into the passed file.
	// If |output_path| is not empty no fd should be passed, the service
	// will create a new file and write into that (see comment below).
	WriteIntoFile *bool `protobuf:"varint,8,opt,name=write_into_file,json=writeIntoFile" json:"write_into_file,omitempty"`
	// This must point to a non-existing file. If the file exists the service
	// will NOT overwrite and will fail instead as a security precaution.
	// On Android, when this is used with the system traced, the path must be
	// within /data/misc/perfetto-traces/ or the trace will fail.
	// This option has been introduced in Android R. Before R write_into_file
	// can be used only with the "pass a file descriptor over IPC" mode.
	OutputPath *string `protobuf:"bytes,29,opt,name=output_path,json=outputPath" json:"output_path,omitempty"`
	// Optional. If non-zero tunes the write period. A min value of 100ms is
	// enforced (i.e. smaller values are ignored).
	FileWritePeriodMs *uint32 `protobuf:"varint,9,opt,name=file_write_period_ms,json=fileWritePeriodMs" json:"file_write_period_ms,omitempty"`
	// Optional. When non zero the periodic write stops once at most X bytes
	// have been written into the file. Tracing is disabled when this limit is
	// reached, even if |duration_ms| has not been reached yet.
	MaxFileSizeBytes   *uint64                         `protobuf:"varint,10,opt,name=max_file_size_bytes,json=maxFileSizeBytes" json:"max_file_size_bytes,omitempty"`
	GuardrailOverrides *TraceConfig_GuardrailOverrides `protobuf:"bytes,11,opt,name=guardrail_overrides,json=guardrailOverrides" json:"guardrail_overrides,omitempty"`
	// When true, data sources are not started until an explicit call to
	// StartTracing() on the consumer port. This is to support early
	// initialization and fast trace triggering. This can be used only when the
	// Consumer explicitly triggers the StartTracing() method.
	// This should not be used in a remote trace config via statsd, doing so will
	// result in a hung trace session.
	DeferredStart *bool `protobuf:"varint,12,opt,name=deferred_start,json=deferredStart" json:"deferred_start,omitempty"`
	// When set, it periodically issues a Flush() to all data source, forcing them
	// to commit their data into the tracing service. This can be used for
	// quasi-real-time streaming mode and to guarantee some partial ordering of
	// events in the trace in windows of X ms.
	FlushPeriodMs *uint32 `protobuf:"varint,13,opt,name=flush_period_ms,json=flushPeriodMs" json:"flush_period_ms,omitempty"`
	// Wait for this long for producers to acknowledge flush requests.
	// Default 5s.
	FlushTimeoutMs *uint32 `protobuf:"varint,14,opt,name=flush_timeout_ms,json=flushTimeoutMs" json:"flush_timeout_ms,omitempty"`
	// Wait for this long for producers to acknowledge stop requests.
	// Default 5s.
	DataSourceStopTimeoutMs *uint32 `protobuf:"varint,23,opt,name=data_source_stop_timeout_ms,json=dataSourceStopTimeoutMs" json:"data_source_stop_timeout_ms,omitempty"`
	// Android-only. If set, sends an intent to the Traceur system app when the
	// trace ends to notify it about the trace readiness.
	NotifyTraceur *bool                      `protobuf:"varint,16,opt,name=notify_traceur,json=notifyTraceur" json:"notify_traceur,omitempty"`
	TriggerConfig *TraceConfig_TriggerConfig `protobuf:"bytes,17,opt,name=trigger_config,json=triggerConfig" json:"trigger_config,omitempty"`
	// When this is non-empty the perfetto command line tool will ignore the rest
	// of this TraceConfig and instead connect to the perfetto service as a
	// producer and send these triggers, potentially stopping or starting traces
	// that were previous configured to use a TriggerConfig.
	ActivateTriggers       []string                            `protobuf:"bytes,18,rep,name=activate_triggers,json=activateTriggers" json:"activate_triggers,omitempty"`
	IncrementalStateConfig *TraceConfig_IncrementalStateConfig `protobuf:"bytes,21,opt,name=incremental_state_config,json=incrementalStateConfig" json:"incremental_state_config,omitempty"`
	// Additional guardrail used by the Perfetto command line client.
	// On user builds when --dropbox is set perfetto will refuse to trace unless
	// this is also set.
	// Added in Q.
	AllowUserBuildTracing *bool `protobuf:"varint,19,opt,name=allow_user_build_tracing,json=allowUserBuildTracing" json:"allow_user_build_tracing,omitempty"`
	// If set the tracing service will ensure there is at most one tracing session
	// with this key.
	UniqueSessionName    *string                           `protobuf:"bytes,22,opt,name=unique_session_name,json=uniqueSessionName" json:"unique_session_name,omitempty"`
	CompressionType      *TraceConfig_CompressionType      `protobuf:"varint,24,opt,name=compression_type,json=compressionType,enum=perfetto.protos.TraceConfig_CompressionType" json:"compression_type,omitempty"`
	IncidentReportConfig *TraceConfig_IncidentReportConfig `protobuf:"bytes,25,opt,name=incident_report_config,json=incidentReportConfig" json:"incident_report_config,omitempty"`
	// An identifier clients can use to tie this trace to other logging.
	// Alternative encoding of trace_uuid as two int64s.
	TraceUuidMsb *int64 `protobuf:"varint,27,opt,name=trace_uuid_msb,json=traceUuidMsb" json:"trace_uuid_msb,omitempty"`
	TraceUuidLsb *int64 `protobuf:"varint,28,opt,name=trace_uuid_lsb,json=traceUuidLsb" json:"trace_uuid_lsb,omitempty"`
}

func (x *TraceConfig) Reset() {
	*x = TraceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig) ProtoMessage() {}

func (x *TraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23}
}

func (x *TraceConfig) GetBuffers() []*TraceConfig_BufferConfig {
	if x != nil {
		return x.Buffers
	}
	return nil
}

func (x *TraceConfig) GetDataSources() []*TraceConfig_DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *TraceConfig) GetBuiltinDataSources() *TraceConfig_BuiltinDataSource {
	if x != nil {
		return x.BuiltinDataSources
	}
	return nil
}

func (x *TraceConfig) GetDurationMs() uint32 {
	if x != nil && x.DurationMs != nil {
		return *x.DurationMs
	}
	return 0
}

func (x *TraceConfig) GetEnableExtraGuardrails() bool {
	if x != nil && x.EnableExtraGuardrails != nil {
		return *x.EnableExtraGuardrails
	}
	return false
}

func (x *TraceConfig) GetLockdownMode() TraceConfig_LockdownModeOperation {
	if x != nil && x.LockdownMode != nil {
		return *x.LockdownMode
	}
	return TraceConfig_LOCKDOWN_UNCHANGED
}

func (x *TraceConfig) GetProducers() []*TraceConfig_ProducerConfig {
	if x != nil {
		return x.Producers
	}
	return nil
}

func (x *TraceConfig) GetStatsdMetadata() *TraceConfig_StatsdMetadata {
	if x != nil {
		return x.StatsdMetadata
	}
	return nil
}

func (x *TraceConfig) GetWriteIntoFile() bool {
	if x != nil && x.WriteIntoFile != nil {
		return *x.WriteIntoFile
	}
	return false
}

func (x *TraceConfig) GetOutputPath() string {
	if x != nil && x.OutputPath != nil {
		return *x.OutputPath
	}
	return ""
}

func (x *TraceConfig) GetFileWritePeriodMs() uint32 {
	if x != nil && x.FileWritePeriodMs != nil {
		return *x.FileWritePeriodMs
	}
	return 0
}

func (x *TraceConfig) GetMaxFileSizeBytes() uint64 {
	if x != nil && x.MaxFileSizeBytes != nil {
		return *x.MaxFileSizeBytes
	}
	return 0
}

func (x *TraceConfig) GetGuardrailOverrides() *TraceConfig_GuardrailOverrides {
	if x != nil {
		return x.GuardrailOverrides
	}
	return nil
}

func (x *TraceConfig) GetDeferredStart() bool {
	if x != nil && x.DeferredStart != nil {
		return *x.DeferredStart
	}
	return false
}

func (x *TraceConfig) GetFlushPeriodMs() uint32 {
	if x != nil && x.FlushPeriodMs != nil {
		return *x.FlushPeriodMs
	}
	return 0
}

func (x *TraceConfig) GetFlushTimeoutMs() uint32 {
	if x != nil && x.FlushTimeoutMs != nil {
		return *x.FlushTimeoutMs
	}
	return 0
}

func (x *TraceConfig) GetDataSourceStopTimeoutMs() uint32 {
	if x != nil && x.DataSourceStopTimeoutMs != nil {
		return *x.DataSourceStopTimeoutMs
	}
	return 0
}

func (x *TraceConfig) GetNotifyTraceur() bool {
	if x != nil && x.NotifyTraceur != nil {
		return *x.NotifyTraceur
	}
	return false
}

func (x *TraceConfig) GetTriggerConfig() *TraceConfig_TriggerConfig {
	if x != nil {
		return x.TriggerConfig
	}
	return nil
}

func (x *TraceConfig) GetActivateTriggers() []string {
	if x != nil {
		return x.ActivateTriggers
	}
	return nil
}

func (x *TraceConfig) GetIncrementalStateConfig() *TraceConfig_IncrementalStateConfig {
	if x != nil {
		return x.IncrementalStateConfig
	}
	return nil
}

func (x *TraceConfig) GetAllowUserBuildTracing() bool {
	if x != nil && x.AllowUserBuildTracing != nil {
		return *x.AllowUserBuildTracing
	}
	return false
}

func (x *TraceConfig) GetUniqueSessionName() string {
	if x != nil && x.UniqueSessionName != nil {
		return *x.UniqueSessionName
	}
	return ""
}

func (x *TraceConfig) GetCompressionType() TraceConfig_CompressionType {
	if x != nil && x.CompressionType != nil {
		return *x.CompressionType
	}
	return TraceConfig_COMPRESSION_TYPE_UNSPECIFIED
}

func (x *TraceConfig) GetIncidentReportConfig() *TraceConfig_IncidentReportConfig {
	if x != nil {
		return x.IncidentReportConfig
	}
	return nil
}

func (x *TraceConfig) GetTraceUuidMsb() int64 {
	if x != nil && x.TraceUuidMsb != nil {
		return *x.TraceUuidMsb
	}
	return 0
}

func (x *TraceConfig) GetTraceUuidLsb() int64 {
	if x != nil && x.TraceUuidLsb != nil {
		return *x.TraceUuidLsb
	}
	return 0
}

// Statistics for the internals of the tracing service.
//
// Next id: 11.
type TraceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stats for the TraceBuffer(s) of the current trace session.
	BufferStats []*TraceStats_BufferStats `protobuf:"bytes,1,rep,name=buffer_stats,json=bufferStats" json:"buffer_stats,omitempty"`
	// Num. producers connected (whether they are involved in the current tracing
	// session or not).
	ProducersConnected *uint32 `protobuf:"varint,2,opt,name=producers_connected,json=producersConnected" json:"producers_connected,omitempty"`
	// Num. producers ever seen for all trace sessions since startup (it's a good
	// proxy for inferring num. producers crashed / killed).
	ProducersSeen *uint64 `protobuf:"varint,3,opt,name=producers_seen,json=producersSeen" json:"producers_seen,omitempty"`
	// Num. data sources registered for all trace sessions.
	DataSourcesRegistered *uint32 `protobuf:"varint,4,opt,name=data_sources_registered,json=dataSourcesRegistered" json:"data_sources_registered,omitempty"`
	// Num. data sources ever seen for all trace sessions since startup.
	DataSourcesSeen *uint64 `protobuf:"varint,5,opt,name=data_sources_seen,json=dataSourcesSeen" json:"data_sources_seen,omitempty"`
	// Num. concurrently active tracing sessions.
	TracingSessions *uint32 `protobuf:"varint,6,opt,name=tracing_sessions,json=tracingSessions" json:"tracing_sessions,omitempty"`
	// Num. buffers for all tracing session (not just the current one). This will
	// be >= buffer_stats.size(), because the latter is only about the current
	// session.
	TotalBuffers *uint32 `protobuf:"varint,7,opt,name=total_buffers,json=totalBuffers" json:"total_buffers,omitempty"`
	// Num. chunks that were discarded by the service before attempting to commit
	// them to a buffer, e.g. because the producer specified an invalid buffer ID.
	ChunksDiscarded *uint64 `protobuf:"varint,8,opt,name=chunks_discarded,json=chunksDiscarded" json:"chunks_discarded,omitempty"`
	// Num. patches that were discarded by the service before attempting to apply
	// them to a buffer, e.g. because the producer specified an invalid buffer ID.
	PatchesDiscarded *uint64 `protobuf:"varint,9,opt,name=patches_discarded,json=patchesDiscarded" json:"patches_discarded,omitempty"`
	// Packets that failed validation of the TrustedPacket. If this is > 0, there
	// is a bug in the producer.
	InvalidPackets *uint64 `protobuf:"varint,10,opt,name=invalid_packets,json=invalidPackets" json:"invalid_packets,omitempty"`
}

func (x *TraceStats) Reset() {
	*x = TraceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStats) ProtoMessage() {}

func (x *TraceStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStats.ProtoReflect.Descriptor instead.
func (*TraceStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{24}
}

func (x *TraceStats) GetBufferStats() []*TraceStats_BufferStats {
	if x != nil {
		return x.BufferStats
	}
	return nil
}

func (x *TraceStats) GetProducersConnected() uint32 {
	if x != nil && x.ProducersConnected != nil {
		return *x.ProducersConnected
	}
	return 0
}

func (x *TraceStats) GetProducersSeen() uint64 {
	if x != nil && x.ProducersSeen != nil {
		return *x.ProducersSeen
	}
	return 0
}

func (x *TraceStats) GetDataSourcesRegistered() uint32 {
	if x != nil && x.DataSourcesRegistered != nil {
		return *x.DataSourcesRegistered
	}
	return 0
}

func (x *TraceStats) GetDataSourcesSeen() uint64 {
	if x != nil && x.DataSourcesSeen != nil {
		return *x.DataSourcesSeen
	}
	return 0
}

func (x *TraceStats) GetTracingSessions() uint32 {
	if x != nil && x.TracingSessions != nil {
		return *x.TracingSessions
	}
	return 0
}

func (x *TraceStats) GetTotalBuffers() uint32 {
	if x != nil && x.TotalBuffers != nil {
		return *x.TotalBuffers
	}
	return 0
}

func (x *TraceStats) GetChunksDiscarded() uint64 {
	if x != nil && x.ChunksDiscarded != nil {
		return *x.ChunksDiscarded
	}
	return 0
}

func (x *TraceStats) GetPatchesDiscarded() uint64 {
	if x != nil && x.PatchesDiscarded != nil {
		return *x.PatchesDiscarded
	}
	return 0
}

func (x *TraceStats) GetInvalidPackets() uint64 {
	if x != nil && x.InvalidPackets != nil {
		return *x.InvalidPackets
	}
	return 0
}

type AndroidLogPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*AndroidLogPacket_LogEvent `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	Stats  *AndroidLogPacket_Stats      `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
}

func (x *AndroidLogPacket) Reset() {
	*x = AndroidLogPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLogPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLogPacket) ProtoMessage() {}

func (x *AndroidLogPacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLogPacket.ProtoReflect.Descriptor instead.
func (*AndroidLogPacket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{25}
}

func (x *AndroidLogPacket) GetEvents() []*AndroidLogPacket_LogEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *AndroidLogPacket) GetStats() *AndroidLogPacket_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Generated by SurfaceFlinger's FrameTimeline (go/adaptive-scheduling-fr).
// Used in comparing the expected timeline of a frame to the actual timeline.
// Key terms:
//    1) DisplayFrame - represents SurfaceFlinger's work on a frame(composited)
//    2) SurfaceFrame - represents App's work on its frame
//    3) Timeline = start to end of a component's(app/SF) work on a frame.
// SurfaceFlinger composites frames from many apps together, so
//    One DisplayFrame can map to N SurfaceFrame(s)
// This relationship can be reconstructed by using
//    DisplayFrame.token = SurfaceFrame.display_frame_token
type FrameTimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*FrameTimelineEvent_DisplayFrame_
	//	*FrameTimelineEvent_SurfaceFrame_
	Event isFrameTimelineEvent_Event `protobuf_oneof:"event"`
}

func (x *FrameTimelineEvent) Reset() {
	*x = FrameTimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTimelineEvent) ProtoMessage() {}

func (x *FrameTimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTimelineEvent.ProtoReflect.Descriptor instead.
func (*FrameTimelineEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{26}
}

func (m *FrameTimelineEvent) GetEvent() isFrameTimelineEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *FrameTimelineEvent) GetDisplayFrame() *FrameTimelineEvent_DisplayFrame {
	if x, ok := x.GetEvent().(*FrameTimelineEvent_DisplayFrame_); ok {
		return x.DisplayFrame
	}
	return nil
}

func (x *FrameTimelineEvent) GetSurfaceFrame() *FrameTimelineEvent_SurfaceFrame {
	if x, ok := x.GetEvent().(*FrameTimelineEvent_SurfaceFrame_); ok {
		return x.SurfaceFrame
	}
	return nil
}

type isFrameTimelineEvent_Event interface {
	isFrameTimelineEvent_Event()
}

type FrameTimelineEvent_DisplayFrame_ struct {
	DisplayFrame *FrameTimelineEvent_DisplayFrame `protobuf:"bytes,1,opt,name=display_frame,json=displayFrame,oneof"`
}

type FrameTimelineEvent_SurfaceFrame_ struct {
	SurfaceFrame *FrameTimelineEvent_SurfaceFrame `protobuf:"bytes,2,opt,name=surface_frame,json=surfaceFrame,oneof"`
}

func (*FrameTimelineEvent_DisplayFrame_) isFrameTimelineEvent_Event() {}

func (*FrameTimelineEvent_SurfaceFrame_) isFrameTimelineEvent_Event() {}

// Generated by Android's GpuService.
type GpuMemTotalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuId *uint32 `protobuf:"varint,1,opt,name=gpu_id,json=gpuId" json:"gpu_id,omitempty"`
	Pid   *uint32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Size  *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (x *GpuMemTotalEvent) Reset() {
	*x = GpuMemTotalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuMemTotalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuMemTotalEvent) ProtoMessage() {}

func (x *GpuMemTotalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuMemTotalEvent.ProtoReflect.Descriptor instead.
func (*GpuMemTotalEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{27}
}

func (x *GpuMemTotalEvent) GetGpuId() uint32 {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return 0
}

func (x *GpuMemTotalEvent) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *GpuMemTotalEvent) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

// Generated by Android's SurfaceFlinger.
type GraphicsFrameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferEvent *GraphicsFrameEvent_BufferEvent `protobuf:"bytes,1,opt,name=buffer_event,json=bufferEvent" json:"buffer_event,omitempty"`
}

func (x *GraphicsFrameEvent) Reset() {
	*x = GraphicsFrameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphicsFrameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphicsFrameEvent) ProtoMessage() {}

func (x *GraphicsFrameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphicsFrameEvent.ProtoReflect.Descriptor instead.
func (*GraphicsFrameEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{28}
}

func (x *GraphicsFrameEvent) GetBufferEvent() *GraphicsFrameEvent_BufferEvent {
	if x != nil {
		return x.BufferEvent
	}
	return nil
}

type InitialDisplayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Same values as android.view.Display.STATE_*
	DisplayState *int32   `protobuf:"varint,1,opt,name=display_state,json=displayState" json:"display_state,omitempty"`
	Brightness   *float64 `protobuf:"fixed64,2,opt,name=brightness" json:"brightness,omitempty"`
}

func (x *InitialDisplayState) Reset() {
	*x = InitialDisplayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialDisplayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialDisplayState) ProtoMessage() {}

func (x *InitialDisplayState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialDisplayState.ProtoReflect.Descriptor instead.
func (*InitialDisplayState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{29}
}

func (x *InitialDisplayState) GetDisplayState() int32 {
	if x != nil && x.DisplayState != nil {
		return *x.DisplayState
	}
	return 0
}

func (x *InitialDisplayState) GetBrightness() float64 {
	if x != nil && x.Brightness != nil {
		return *x.Brightness
	}
	return 0
}

type PackagesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packages []*PackagesList_PackageInfo `protobuf:"bytes,1,rep,name=packages" json:"packages,omitempty"`
	// At least one error occurred parsing the packages.list.
	ParseError *bool `protobuf:"varint,2,opt,name=parse_error,json=parseError" json:"parse_error,omitempty"`
	// Failed to open / read packages.list.
	ReadError *bool `protobuf:"varint,3,opt,name=read_error,json=readError" json:"read_error,omitempty"`
}

func (x *PackagesList) Reset() {
	*x = PackagesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagesList) ProtoMessage() {}

func (x *PackagesList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagesList.ProtoReflect.Descriptor instead.
func (*PackagesList) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{30}
}

func (x *PackagesList) GetPackages() []*PackagesList_PackageInfo {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *PackagesList) GetParseError() bool {
	if x != nil && x.ParseError != nil {
		return *x.ParseError
	}
	return false
}

func (x *PackagesList) GetReadError() bool {
	if x != nil && x.ReadError != nil {
		return *x.ReadError
	}
	return false
}

// This message is not intended to be written by the chrome on the device.
// It's emitted on the host by the telemetry benchmark infrastructure (it's a
// part of the trace that's written by the telemetry tracing agent).
type ChromeBenchmarkMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time when the benchmark execution started (host unixtime in microseconds).
	BenchmarkStartTimeUs *int64 `protobuf:"varint,1,opt,name=benchmark_start_time_us,json=benchmarkStartTimeUs" json:"benchmark_start_time_us,omitempty"`
	// Time when this particular story was run (host unixtime in microseconds).
	StoryRunTimeUs *int64 `protobuf:"varint,2,opt,name=story_run_time_us,json=storyRunTimeUs" json:"story_run_time_us,omitempty"`
	// Name of benchmark.
	BenchmarkName *string `protobuf:"bytes,3,opt,name=benchmark_name,json=benchmarkName" json:"benchmark_name,omitempty"`
	// Description of benchmark.
	BenchmarkDescription *string `protobuf:"bytes,4,opt,name=benchmark_description,json=benchmarkDescription" json:"benchmark_description,omitempty"`
	// Optional label.
	Label *string `protobuf:"bytes,5,opt,name=label" json:"label,omitempty"`
	// Name of story.
	StoryName *string `protobuf:"bytes,6,opt,name=story_name,json=storyName" json:"story_name,omitempty"`
	// List of story tags.
	StoryTags []string `protobuf:"bytes,7,rep,name=story_tags,json=storyTags" json:"story_tags,omitempty"`
	// Index of the story run (>0 if the same story was run several times).
	StoryRunIndex *int32 `protobuf:"varint,8,opt,name=story_run_index,json=storyRunIndex" json:"story_run_index,omitempty"`
	// Whether this run failed.
	HadFailures *bool `protobuf:"varint,9,opt,name=had_failures,json=hadFailures" json:"had_failures,omitempty"`
}

func (x *ChromeBenchmarkMetadata) Reset() {
	*x = ChromeBenchmarkMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeBenchmarkMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeBenchmarkMetadata) ProtoMessage() {}

func (x *ChromeBenchmarkMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeBenchmarkMetadata.ProtoReflect.Descriptor instead.
func (*ChromeBenchmarkMetadata) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{31}
}

func (x *ChromeBenchmarkMetadata) GetBenchmarkStartTimeUs() int64 {
	if x != nil && x.BenchmarkStartTimeUs != nil {
		return *x.BenchmarkStartTimeUs
	}
	return 0
}

func (x *ChromeBenchmarkMetadata) GetStoryRunTimeUs() int64 {
	if x != nil && x.StoryRunTimeUs != nil {
		return *x.StoryRunTimeUs
	}
	return 0
}

func (x *ChromeBenchmarkMetadata) GetBenchmarkName() string {
	if x != nil && x.BenchmarkName != nil {
		return *x.BenchmarkName
	}
	return ""
}

func (x *ChromeBenchmarkMetadata) GetBenchmarkDescription() string {
	if x != nil && x.BenchmarkDescription != nil {
		return *x.BenchmarkDescription
	}
	return ""
}

func (x *ChromeBenchmarkMetadata) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ChromeBenchmarkMetadata) GetStoryName() string {
	if x != nil && x.StoryName != nil {
		return *x.StoryName
	}
	return ""
}

func (x *ChromeBenchmarkMetadata) GetStoryTags() []string {
	if x != nil {
		return x.StoryTags
	}
	return nil
}

func (x *ChromeBenchmarkMetadata) GetStoryRunIndex() int32 {
	if x != nil && x.StoryRunIndex != nil {
		return *x.StoryRunIndex
	}
	return 0
}

func (x *ChromeBenchmarkMetadata) GetHadFailures() bool {
	if x != nil && x.HadFailures != nil {
		return *x.HadFailures
	}
	return false
}

// Metadata for chrome traces.
type ChromeMetadataPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackgroundTracingMetadata *BackgroundTracingMetadata `protobuf:"bytes,1,opt,name=background_tracing_metadata,json=backgroundTracingMetadata" json:"background_tracing_metadata,omitempty"`
	// Version code of Chrome used by Android's Play Store. This field is only set
	// on Android.
	ChromeVersionCode *int32 `protobuf:"varint,2,opt,name=chrome_version_code,json=chromeVersionCode" json:"chrome_version_code,omitempty"`
}

func (x *ChromeMetadataPacket) Reset() {
	*x = ChromeMetadataPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeMetadataPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeMetadataPacket) ProtoMessage() {}

func (x *ChromeMetadataPacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeMetadataPacket.ProtoReflect.Descriptor instead.
func (*ChromeMetadataPacket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{32}
}

func (x *ChromeMetadataPacket) GetBackgroundTracingMetadata() *BackgroundTracingMetadata {
	if x != nil {
		return x.BackgroundTracingMetadata
	}
	return nil
}

func (x *ChromeMetadataPacket) GetChromeVersionCode() int32 {
	if x != nil && x.ChromeVersionCode != nil {
		return *x.ChromeVersionCode
	}
	return 0
}

// Metadata related to background tracing scenarios, states and triggers.
type BackgroundTracingMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the rule that caused the trace to be uploaded.
	TriggeredRule *BackgroundTracingMetadata_TriggerRule `protobuf:"bytes,1,opt,name=triggered_rule,json=triggeredRule" json:"triggered_rule,omitempty"`
	// List of all active triggers in current session, when trace was triggered.
	ActiveRules []*BackgroundTracingMetadata_TriggerRule `protobuf:"bytes,2,rep,name=active_rules,json=activeRules" json:"active_rules,omitempty"`
}

func (x *BackgroundTracingMetadata) Reset() {
	*x = BackgroundTracingMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundTracingMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundTracingMetadata) ProtoMessage() {}

func (x *BackgroundTracingMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundTracingMetadata.ProtoReflect.Descriptor instead.
func (*BackgroundTracingMetadata) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{33}
}

func (x *BackgroundTracingMetadata) GetTriggeredRule() *BackgroundTracingMetadata_TriggerRule {
	if x != nil {
		return x.TriggeredRule
	}
	return nil
}

func (x *BackgroundTracingMetadata) GetActiveRules() []*BackgroundTracingMetadata_TriggerRule {
	if x != nil {
		return x.ActiveRules
	}
	return nil
}

type ChromeTracedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedType  *ChromeTracedValue_NestedType `protobuf:"varint,1,opt,name=nested_type,json=nestedType,enum=perfetto.protos.ChromeTracedValue_NestedType" json:"nested_type,omitempty"`
	DictKeys    []string                      `protobuf:"bytes,2,rep,name=dict_keys,json=dictKeys" json:"dict_keys,omitempty"`
	DictValues  []*ChromeTracedValue          `protobuf:"bytes,3,rep,name=dict_values,json=dictValues" json:"dict_values,omitempty"`
	ArrayValues []*ChromeTracedValue          `protobuf:"bytes,4,rep,name=array_values,json=arrayValues" json:"array_values,omitempty"`
	IntValue    *int32                        `protobuf:"varint,5,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	DoubleValue *float64                      `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	BoolValue   *bool                         `protobuf:"varint,7,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue *string                       `protobuf:"bytes,8,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *ChromeTracedValue) Reset() {
	*x = ChromeTracedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeTracedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeTracedValue) ProtoMessage() {}

func (x *ChromeTracedValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeTracedValue.ProtoReflect.Descriptor instead.
func (*ChromeTracedValue) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{34}
}

func (x *ChromeTracedValue) GetNestedType() ChromeTracedValue_NestedType {
	if x != nil && x.NestedType != nil {
		return *x.NestedType
	}
	return ChromeTracedValue_DICT
}

func (x *ChromeTracedValue) GetDictKeys() []string {
	if x != nil {
		return x.DictKeys
	}
	return nil
}

func (x *ChromeTracedValue) GetDictValues() []*ChromeTracedValue {
	if x != nil {
		return x.DictValues
	}
	return nil
}

func (x *ChromeTracedValue) GetArrayValues() []*ChromeTracedValue {
	if x != nil {
		return x.ArrayValues
	}
	return nil
}

func (x *ChromeTracedValue) GetIntValue() int32 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

func (x *ChromeTracedValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *ChromeTracedValue) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *ChromeTracedValue) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

type ChromeStringTableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	Index *int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (x *ChromeStringTableEntry) Reset() {
	*x = ChromeStringTableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeStringTableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeStringTableEntry) ProtoMessage() {}

func (x *ChromeStringTableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeStringTableEntry.ProtoReflect.Descriptor instead.
func (*ChromeStringTableEntry) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{35}
}

func (x *ChromeStringTableEntry) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ChromeStringTableEntry) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

// Deprecated, use TrackEvent protos instead.
type ChromeTraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Timestamp         *int64                  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Phase             *int32                  `protobuf:"varint,3,opt,name=phase" json:"phase,omitempty"`
	ThreadId          *int32                  `protobuf:"varint,4,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	Duration          *int64                  `protobuf:"varint,5,opt,name=duration" json:"duration,omitempty"`
	ThreadDuration    *int64                  `protobuf:"varint,6,opt,name=thread_duration,json=threadDuration" json:"thread_duration,omitempty"`
	Scope             *string                 `protobuf:"bytes,7,opt,name=scope" json:"scope,omitempty"`
	Id                *uint64                 `protobuf:"varint,8,opt,name=id" json:"id,omitempty"`
	Flags             *uint32                 `protobuf:"varint,9,opt,name=flags" json:"flags,omitempty"`
	CategoryGroupName *string                 `protobuf:"bytes,10,opt,name=category_group_name,json=categoryGroupName" json:"category_group_name,omitempty"`
	ProcessId         *int32                  `protobuf:"varint,11,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	ThreadTimestamp   *int64                  `protobuf:"varint,12,opt,name=thread_timestamp,json=threadTimestamp" json:"thread_timestamp,omitempty"`
	BindId            *uint64                 `protobuf:"varint,13,opt,name=bind_id,json=bindId" json:"bind_id,omitempty"`
	Args              []*ChromeTraceEvent_Arg `protobuf:"bytes,14,rep,name=args" json:"args,omitempty"`
	// Takes precedence over respectively |name| and
	// |category_group_name_index| if set,
	// and are indices into |string_table|.
	NameIndex              *uint32 `protobuf:"varint,15,opt,name=name_index,json=nameIndex" json:"name_index,omitempty"`
	CategoryGroupNameIndex *uint32 `protobuf:"varint,16,opt,name=category_group_name_index,json=categoryGroupNameIndex" json:"category_group_name_index,omitempty"`
}

func (x *ChromeTraceEvent) Reset() {
	*x = ChromeTraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeTraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeTraceEvent) ProtoMessage() {}

func (x *ChromeTraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeTraceEvent.ProtoReflect.Descriptor instead.
func (*ChromeTraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{36}
}

func (x *ChromeTraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChromeTraceEvent) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ChromeTraceEvent) GetPhase() int32 {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return 0
}

func (x *ChromeTraceEvent) GetThreadId() int32 {
	if x != nil && x.ThreadId != nil {
		return *x.ThreadId
	}
	return 0
}

func (x *ChromeTraceEvent) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *ChromeTraceEvent) GetThreadDuration() int64 {
	if x != nil && x.ThreadDuration != nil {
		return *x.ThreadDuration
	}
	return 0
}

func (x *ChromeTraceEvent) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *ChromeTraceEvent) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ChromeTraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *ChromeTraceEvent) GetCategoryGroupName() string {
	if x != nil && x.CategoryGroupName != nil {
		return *x.CategoryGroupName
	}
	return ""
}

func (x *ChromeTraceEvent) GetProcessId() int32 {
	if x != nil && x.ProcessId != nil {
		return *x.ProcessId
	}
	return 0
}

func (x *ChromeTraceEvent) GetThreadTimestamp() int64 {
	if x != nil && x.ThreadTimestamp != nil {
		return *x.ThreadTimestamp
	}
	return 0
}

func (x *ChromeTraceEvent) GetBindId() uint64 {
	if x != nil && x.BindId != nil {
		return *x.BindId
	}
	return 0
}

func (x *ChromeTraceEvent) GetArgs() []*ChromeTraceEvent_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ChromeTraceEvent) GetNameIndex() uint32 {
	if x != nil && x.NameIndex != nil {
		return *x.NameIndex
	}
	return 0
}

func (x *ChromeTraceEvent) GetCategoryGroupNameIndex() uint32 {
	if x != nil && x.CategoryGroupNameIndex != nil {
		return *x.CategoryGroupNameIndex
	}
	return 0
}

type ChromeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*ChromeMetadata_StringValue
	//	*ChromeMetadata_BoolValue
	//	*ChromeMetadata_IntValue
	//	*ChromeMetadata_JsonValue
	Value isChromeMetadata_Value `protobuf_oneof:"value"`
}

func (x *ChromeMetadata) Reset() {
	*x = ChromeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeMetadata) ProtoMessage() {}

func (x *ChromeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeMetadata.ProtoReflect.Descriptor instead.
func (*ChromeMetadata) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{37}
}

func (x *ChromeMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *ChromeMetadata) GetValue() isChromeMetadata_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ChromeMetadata) GetStringValue() string {
	if x, ok := x.GetValue().(*ChromeMetadata_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ChromeMetadata) GetBoolValue() bool {
	if x, ok := x.GetValue().(*ChromeMetadata_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ChromeMetadata) GetIntValue() int64 {
	if x, ok := x.GetValue().(*ChromeMetadata_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ChromeMetadata) GetJsonValue() string {
	if x, ok := x.GetValue().(*ChromeMetadata_JsonValue); ok {
		return x.JsonValue
	}
	return ""
}

type isChromeMetadata_Value interface {
	isChromeMetadata_Value()
}

type ChromeMetadata_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=string_value,json=stringValue,oneof"`
}

type ChromeMetadata_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,oneof"`
}

type ChromeMetadata_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}

type ChromeMetadata_JsonValue struct {
	JsonValue string `protobuf:"bytes,5,opt,name=json_value,json=jsonValue,oneof"`
}

func (*ChromeMetadata_StringValue) isChromeMetadata_Value() {}

func (*ChromeMetadata_BoolValue) isChromeMetadata_Value() {}

func (*ChromeMetadata_IntValue) isChromeMetadata_Value() {}

func (*ChromeMetadata_JsonValue) isChromeMetadata_Value() {}

// Subtraces produced in legacy json format by Chrome tracing agents not yet
// updated to support the new binary format, e.g. ETW and CrOS ARC.
// TODO(eseckler): Update these agents to become perfetto producers.
type ChromeLegacyJsonTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ChromeLegacyJsonTrace_TraceType `protobuf:"varint,1,opt,name=type,enum=perfetto.protos.ChromeLegacyJsonTrace_TraceType" json:"type,omitempty"`
	Data *string                          `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *ChromeLegacyJsonTrace) Reset() {
	*x = ChromeLegacyJsonTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeLegacyJsonTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeLegacyJsonTrace) ProtoMessage() {}

func (x *ChromeLegacyJsonTrace) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeLegacyJsonTrace.ProtoReflect.Descriptor instead.
func (*ChromeLegacyJsonTrace) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{38}
}

func (x *ChromeLegacyJsonTrace) GetType() ChromeLegacyJsonTrace_TraceType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ChromeLegacyJsonTrace_USER_TRACE
}

func (x *ChromeLegacyJsonTrace) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type ChromeEventBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, use TrackEvent protos instead.
	//
	// Deprecated: Do not use.
	TraceEvents []*ChromeTraceEvent `protobuf:"bytes,1,rep,name=trace_events,json=traceEvents" json:"trace_events,omitempty"`
	Metadata    []*ChromeMetadata   `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty"`
	// ftrace output from CrOS and Cast system tracing agents.
	// TODO(eseckler): Replace system traces with native perfetto service.
	LegacyFtraceOutput []string                 `protobuf:"bytes,4,rep,name=legacy_ftrace_output,json=legacyFtraceOutput" json:"legacy_ftrace_output,omitempty"`
	LegacyJsonTrace    []*ChromeLegacyJsonTrace `protobuf:"bytes,5,rep,name=legacy_json_trace,json=legacyJsonTrace" json:"legacy_json_trace,omitempty"`
	// Contents of a string table that's valid for
	// the whole ChromeEventBundle entry.
	//
	// Deprecated: Do not use.
	StringTable []*ChromeStringTableEntry `protobuf:"bytes,3,rep,name=string_table,json=stringTable" json:"string_table,omitempty"`
}

func (x *ChromeEventBundle) Reset() {
	*x = ChromeEventBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeEventBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeEventBundle) ProtoMessage() {}

func (x *ChromeEventBundle) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeEventBundle.ProtoReflect.Descriptor instead.
func (*ChromeEventBundle) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{39}
}

// Deprecated: Do not use.
func (x *ChromeEventBundle) GetTraceEvents() []*ChromeTraceEvent {
	if x != nil {
		return x.TraceEvents
	}
	return nil
}

func (x *ChromeEventBundle) GetMetadata() []*ChromeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ChromeEventBundle) GetLegacyFtraceOutput() []string {
	if x != nil {
		return x.LegacyFtraceOutput
	}
	return nil
}

func (x *ChromeEventBundle) GetLegacyJsonTrace() []*ChromeLegacyJsonTrace {
	if x != nil {
		return x.LegacyJsonTrace
	}
	return nil
}

// Deprecated: Do not use.
func (x *ChromeEventBundle) GetStringTable() []*ChromeStringTableEntry {
	if x != nil {
		return x.StringTable
	}
	return nil
}

// A snapshot of clock readings to allow for trace alignment.
type ClockSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clocks []*ClockSnapshot_Clock `protobuf:"bytes,1,rep,name=clocks" json:"clocks,omitempty"`
	// The authoritative clock domain for the trace. Defaults to BOOTTIME, but can
	// be overridden in TraceConfig's builtin_data_sources. Trace processor will
	// attempt to translate packet/event timestamps from various data sources (and
	// their chosen clock domains) to this domain during import.
	PrimaryTraceClock *BuiltinClock `protobuf:"varint,2,opt,name=primary_trace_clock,json=primaryTraceClock,enum=perfetto.protos.BuiltinClock" json:"primary_trace_clock,omitempty"`
}

func (x *ClockSnapshot) Reset() {
	*x = ClockSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockSnapshot) ProtoMessage() {}

func (x *ClockSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockSnapshot.ProtoReflect.Descriptor instead.
func (*ClockSnapshot) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{40}
}

func (x *ClockSnapshot) GetClocks() []*ClockSnapshot_Clock {
	if x != nil {
		return x.Clocks
	}
	return nil
}

func (x *ClockSnapshot) GetPrimaryTraceClock() BuiltinClock {
	if x != nil && x.PrimaryTraceClock != nil {
		return *x.PrimaryTraceClock
	}
	return BuiltinClock_BUILTIN_CLOCK_UNKNOWN
}

// The protocol compiler can output a FileDescriptorSet containing the .proto
// files it parses.
type FileDescriptorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []*FileDescriptorProto `protobuf:"bytes,1,rep,name=file" json:"file,omitempty"`
}

func (x *FileDescriptorSet) Reset() {
	*x = FileDescriptorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescriptorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptorSet) ProtoMessage() {}

func (x *FileDescriptorSet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptorSet.ProtoReflect.Descriptor instead.
func (*FileDescriptorSet) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{41}
}

func (x *FileDescriptorSet) GetFile() []*FileDescriptorProto {
	if x != nil {
		return x.File
	}
	return nil
}

// Describes a complete .proto file.
type FileDescriptorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// file name, relative to root of source tree
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// e.g. "foo", "foo.bar", etc.
	Package *string `protobuf:"bytes,2,opt,name=package" json:"package,omitempty"`
	// Names of files imported by this file.
	Dependency []string `protobuf:"bytes,3,rep,name=dependency" json:"dependency,omitempty"`
	// Indexes of the public imported files in the dependency list above.
	PublicDependency []int32 `protobuf:"varint,10,rep,name=public_dependency,json=publicDependency" json:"public_dependency,omitempty"`
	// Indexes of the weak imported files in the dependency list.
	// For Google-internal migration only. Do not use.
	WeakDependency []int32 `protobuf:"varint,11,rep,name=weak_dependency,json=weakDependency" json:"weak_dependency,omitempty"`
	// All top-level definitions in this file.
	MessageType []*DescriptorProto      `protobuf:"bytes,4,rep,name=message_type,json=messageType" json:"message_type,omitempty"`
	EnumType    []*EnumDescriptorProto  `protobuf:"bytes,5,rep,name=enum_type,json=enumType" json:"enum_type,omitempty"`
	Extension   []*FieldDescriptorProto `protobuf:"bytes,7,rep,name=extension" json:"extension,omitempty"`
}

func (x *FileDescriptorProto) Reset() {
	*x = FileDescriptorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDescriptorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDescriptorProto) ProtoMessage() {}

func (x *FileDescriptorProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDescriptorProto.ProtoReflect.Descriptor instead.
func (*FileDescriptorProto) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{42}
}

func (x *FileDescriptorProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FileDescriptorProto) GetPackage() string {
	if x != nil && x.Package != nil {
		return *x.Package
	}
	return ""
}

func (x *FileDescriptorProto) GetDependency() []string {
	if x != nil {
		return x.Dependency
	}
	return nil
}

func (x *FileDescriptorProto) GetPublicDependency() []int32 {
	if x != nil {
		return x.PublicDependency
	}
	return nil
}

func (x *FileDescriptorProto) GetWeakDependency() []int32 {
	if x != nil {
		return x.WeakDependency
	}
	return nil
}

func (x *FileDescriptorProto) GetMessageType() []*DescriptorProto {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *FileDescriptorProto) GetEnumType() []*EnumDescriptorProto {
	if x != nil {
		return x.EnumType
	}
	return nil
}

func (x *FileDescriptorProto) GetExtension() []*FieldDescriptorProto {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Describes a message type.
type DescriptorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          *string                          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Field         []*FieldDescriptorProto          `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
	Extension     []*FieldDescriptorProto          `protobuf:"bytes,6,rep,name=extension" json:"extension,omitempty"`
	NestedType    []*DescriptorProto               `protobuf:"bytes,3,rep,name=nested_type,json=nestedType" json:"nested_type,omitempty"`
	EnumType      []*EnumDescriptorProto           `protobuf:"bytes,4,rep,name=enum_type,json=enumType" json:"enum_type,omitempty"`
	OneofDecl     []*OneofDescriptorProto          `protobuf:"bytes,8,rep,name=oneof_decl,json=oneofDecl" json:"oneof_decl,omitempty"`
	ReservedRange []*DescriptorProto_ReservedRange `protobuf:"bytes,9,rep,name=reserved_range,json=reservedRange" json:"reserved_range,omitempty"`
	// Reserved field names, which may not be used by fields in the same message.
	// A given name may only be reserved once.
	ReservedName []string `protobuf:"bytes,10,rep,name=reserved_name,json=reservedName" json:"reserved_name,omitempty"`
}

func (x *DescriptorProto) Reset() {
	*x = DescriptorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescriptorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptorProto) ProtoMessage() {}

func (x *DescriptorProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptorProto.ProtoReflect.Descriptor instead.
func (*DescriptorProto) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{43}
}

func (x *DescriptorProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DescriptorProto) GetField() []*FieldDescriptorProto {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *DescriptorProto) GetExtension() []*FieldDescriptorProto {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DescriptorProto) GetNestedType() []*DescriptorProto {
	if x != nil {
		return x.NestedType
	}
	return nil
}

func (x *DescriptorProto) GetEnumType() []*EnumDescriptorProto {
	if x != nil {
		return x.EnumType
	}
	return nil
}

func (x *DescriptorProto) GetOneofDecl() []*OneofDescriptorProto {
	if x != nil {
		return x.OneofDecl
	}
	return nil
}

func (x *DescriptorProto) GetReservedRange() []*DescriptorProto_ReservedRange {
	if x != nil {
		return x.ReservedRange
	}
	return nil
}

func (x *DescriptorProto) GetReservedName() []string {
	if x != nil {
		return x.ReservedName
	}
	return nil
}

// Describes a field within a message.
type FieldDescriptorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Number *int32                      `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Label  *FieldDescriptorProto_Label `protobuf:"varint,4,opt,name=label,enum=perfetto.protos.FieldDescriptorProto_Label" json:"label,omitempty"`
	// If type_name is set, this need not be set.  If both this and type_name
	// are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
	Type *FieldDescriptorProto_Type `protobuf:"varint,5,opt,name=type,enum=perfetto.protos.FieldDescriptorProto_Type" json:"type,omitempty"`
	// For message and enum types, this is the name of the type.  If the name
	// starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
	// rules are used to find the type (i.e. first the nested types within this
	// message are searched, then within the parent, on up to the root
	// namespace).
	TypeName *string `protobuf:"bytes,6,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	// For extensions, this is the name of the type being extended.  It is
	// resolved in the same manner as type_name.
	Extendee *string `protobuf:"bytes,2,opt,name=extendee" json:"extendee,omitempty"`
	// For numeric types, contains the original text representation of the value.
	// For booleans, "true" or "false".
	// For strings, contains the default text contents (not escaped in any way).
	// For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
	// TODO(kenton):  Base-64 encode?
	DefaultValue *string `protobuf:"bytes,7,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// If set, gives the index of a oneof in the containing type's oneof_decl
	// list.  This field is a member of that oneof.
	OneofIndex *int32 `protobuf:"varint,9,opt,name=oneof_index,json=oneofIndex" json:"oneof_index,omitempty"`
}

func (x *FieldDescriptorProto) Reset() {
	*x = FieldDescriptorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDescriptorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDescriptorProto) ProtoMessage() {}

func (x *FieldDescriptorProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDescriptorProto.ProtoReflect.Descriptor instead.
func (*FieldDescriptorProto) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{44}
}

func (x *FieldDescriptorProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FieldDescriptorProto) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *FieldDescriptorProto) GetLabel() FieldDescriptorProto_Label {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return FieldDescriptorProto_LABEL_OPTIONAL
}

func (x *FieldDescriptorProto) GetType() FieldDescriptorProto_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FieldDescriptorProto_TYPE_DOUBLE
}

func (x *FieldDescriptorProto) GetTypeName() string {
	if x != nil && x.TypeName != nil {
		return *x.TypeName
	}
	return ""
}

func (x *FieldDescriptorProto) GetExtendee() string {
	if x != nil && x.Extendee != nil {
		return *x.Extendee
	}
	return ""
}

func (x *FieldDescriptorProto) GetDefaultValue() string {
	if x != nil && x.DefaultValue != nil {
		return *x.DefaultValue
	}
	return ""
}

func (x *FieldDescriptorProto) GetOneofIndex() int32 {
	if x != nil && x.OneofIndex != nil {
		return *x.OneofIndex
	}
	return 0
}

// Describes a oneof.
type OneofDescriptorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    *string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Options *OneofOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (x *OneofDescriptorProto) Reset() {
	*x = OneofDescriptorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofDescriptorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofDescriptorProto) ProtoMessage() {}

func (x *OneofDescriptorProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofDescriptorProto.ProtoReflect.Descriptor instead.
func (*OneofDescriptorProto) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{45}
}

func (x *OneofDescriptorProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OneofDescriptorProto) GetOptions() *OneofOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Describes an enum type.
type EnumDescriptorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value []*EnumValueDescriptorProto `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	// Reserved enum value names, which may not be reused. A given name may only
	// be reserved once.
	ReservedName []string `protobuf:"bytes,5,rep,name=reserved_name,json=reservedName" json:"reserved_name,omitempty"`
}

func (x *EnumDescriptorProto) Reset() {
	*x = EnumDescriptorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumDescriptorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumDescriptorProto) ProtoMessage() {}

func (x *EnumDescriptorProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumDescriptorProto.ProtoReflect.Descriptor instead.
func (*EnumDescriptorProto) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{46}
}

func (x *EnumDescriptorProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EnumDescriptorProto) GetValue() []*EnumValueDescriptorProto {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *EnumDescriptorProto) GetReservedName() []string {
	if x != nil {
		return x.ReservedName
	}
	return nil
}

// Describes a value within an enum.
type EnumValueDescriptorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Number *int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
}

func (x *EnumValueDescriptorProto) Reset() {
	*x = EnumValueDescriptorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueDescriptorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueDescriptorProto) ProtoMessage() {}

func (x *EnumValueDescriptorProto) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueDescriptorProto.ProtoReflect.Descriptor instead.
func (*EnumValueDescriptorProto) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{47}
}

func (x *EnumValueDescriptorProto) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EnumValueDescriptorProto) GetNumber() int32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

type OneofOptions struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *OneofOptions) Reset() {
	*x = OneofOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofOptions) ProtoMessage() {}

func (x *OneofOptions) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofOptions.ProtoReflect.Descriptor instead.
func (*OneofOptions) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{48}
}

var extRange_OneofOptions = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 536870911},
}

// Deprecated: Use OneofOptions.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*OneofOptions) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_OneofOptions
}

// This message contains descriptors used to parse extension fields of
// TrackEvent.
//
// See docs/design-docs/extensions.md for more details.
type ExtensionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtensionSet *FileDescriptorSet `protobuf:"bytes,1,opt,name=extension_set,json=extensionSet" json:"extension_set,omitempty"`
}

func (x *ExtensionDescriptor) Reset() {
	*x = ExtensionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionDescriptor) ProtoMessage() {}

func (x *ExtensionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionDescriptor.ProtoReflect.Descriptor instead.
func (*ExtensionDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{49}
}

func (x *ExtensionDescriptor) GetExtensionSet() *FileDescriptorSet {
	if x != nil {
		return x.ExtensionSet
	}
	return nil
}

// Represents the mapping between inode numbers in a block device and their path
// on the filesystem
type InodeFileMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockDeviceId *uint64 `protobuf:"varint,1,opt,name=block_device_id,json=blockDeviceId" json:"block_device_id,omitempty"`
	// The mount points of the block device, e.g. ["system"].
	MountPoints []string `protobuf:"bytes,2,rep,name=mount_points,json=mountPoints" json:"mount_points,omitempty"`
	// The list of all the entries from the block device
	Entries []*InodeFileMap_Entry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (x *InodeFileMap) Reset() {
	*x = InodeFileMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InodeFileMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InodeFileMap) ProtoMessage() {}

func (x *InodeFileMap) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InodeFileMap.ProtoReflect.Descriptor instead.
func (*InodeFileMap) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{50}
}

func (x *InodeFileMap) GetBlockDeviceId() uint64 {
	if x != nil && x.BlockDeviceId != nil {
		return *x.BlockDeviceId
	}
	return 0
}

func (x *InodeFileMap) GetMountPoints() []string {
	if x != nil {
		return x.MountPoints
	}
	return nil
}

func (x *InodeFileMap) GetEntries() []*InodeFileMap_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type BinderTransactionFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugId    *int32  `protobuf:"varint,1,opt,name=debug_id,json=debugId" json:"debug_id,omitempty"`
	TargetNode *int32  `protobuf:"varint,2,opt,name=target_node,json=targetNode" json:"target_node,omitempty"`
	ToProc     *int32  `protobuf:"varint,3,opt,name=to_proc,json=toProc" json:"to_proc,omitempty"`
	ToThread   *int32  `protobuf:"varint,4,opt,name=to_thread,json=toThread" json:"to_thread,omitempty"`
	Reply      *int32  `protobuf:"varint,5,opt,name=reply" json:"reply,omitempty"`
	Code       *uint32 `protobuf:"varint,6,opt,name=code" json:"code,omitempty"`
	Flags      *uint32 `protobuf:"varint,7,opt,name=flags" json:"flags,omitempty"`
}

func (x *BinderTransactionFtraceEvent) Reset() {
	*x = BinderTransactionFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderTransactionFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderTransactionFtraceEvent) ProtoMessage() {}

func (x *BinderTransactionFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderTransactionFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderTransactionFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{51}
}

func (x *BinderTransactionFtraceEvent) GetDebugId() int32 {
	if x != nil && x.DebugId != nil {
		return *x.DebugId
	}
	return 0
}

func (x *BinderTransactionFtraceEvent) GetTargetNode() int32 {
	if x != nil && x.TargetNode != nil {
		return *x.TargetNode
	}
	return 0
}

func (x *BinderTransactionFtraceEvent) GetToProc() int32 {
	if x != nil && x.ToProc != nil {
		return *x.ToProc
	}
	return 0
}

func (x *BinderTransactionFtraceEvent) GetToThread() int32 {
	if x != nil && x.ToThread != nil {
		return *x.ToThread
	}
	return 0
}

func (x *BinderTransactionFtraceEvent) GetReply() int32 {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return 0
}

func (x *BinderTransactionFtraceEvent) GetCode() uint32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *BinderTransactionFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type BinderTransactionReceivedFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugId *int32 `protobuf:"varint,1,opt,name=debug_id,json=debugId" json:"debug_id,omitempty"`
}

func (x *BinderTransactionReceivedFtraceEvent) Reset() {
	*x = BinderTransactionReceivedFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderTransactionReceivedFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderTransactionReceivedFtraceEvent) ProtoMessage() {}

func (x *BinderTransactionReceivedFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderTransactionReceivedFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderTransactionReceivedFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{52}
}

func (x *BinderTransactionReceivedFtraceEvent) GetDebugId() int32 {
	if x != nil && x.DebugId != nil {
		return *x.DebugId
	}
	return 0
}

type BinderSetPriorityFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proc        *int32  `protobuf:"varint,1,opt,name=proc" json:"proc,omitempty"`
	Thread      *int32  `protobuf:"varint,2,opt,name=thread" json:"thread,omitempty"`
	OldPrio     *uint32 `protobuf:"varint,3,opt,name=old_prio,json=oldPrio" json:"old_prio,omitempty"`
	NewPrio     *uint32 `protobuf:"varint,4,opt,name=new_prio,json=newPrio" json:"new_prio,omitempty"`
	DesiredPrio *uint32 `protobuf:"varint,5,opt,name=desired_prio,json=desiredPrio" json:"desired_prio,omitempty"`
}

func (x *BinderSetPriorityFtraceEvent) Reset() {
	*x = BinderSetPriorityFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderSetPriorityFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderSetPriorityFtraceEvent) ProtoMessage() {}

func (x *BinderSetPriorityFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderSetPriorityFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderSetPriorityFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{53}
}

func (x *BinderSetPriorityFtraceEvent) GetProc() int32 {
	if x != nil && x.Proc != nil {
		return *x.Proc
	}
	return 0
}

func (x *BinderSetPriorityFtraceEvent) GetThread() int32 {
	if x != nil && x.Thread != nil {
		return *x.Thread
	}
	return 0
}

func (x *BinderSetPriorityFtraceEvent) GetOldPrio() uint32 {
	if x != nil && x.OldPrio != nil {
		return *x.OldPrio
	}
	return 0
}

func (x *BinderSetPriorityFtraceEvent) GetNewPrio() uint32 {
	if x != nil && x.NewPrio != nil {
		return *x.NewPrio
	}
	return 0
}

func (x *BinderSetPriorityFtraceEvent) GetDesiredPrio() uint32 {
	if x != nil && x.DesiredPrio != nil {
		return *x.DesiredPrio
	}
	return 0
}

type BinderLockFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
}

func (x *BinderLockFtraceEvent) Reset() {
	*x = BinderLockFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderLockFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderLockFtraceEvent) ProtoMessage() {}

func (x *BinderLockFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderLockFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderLockFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{54}
}

func (x *BinderLockFtraceEvent) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

type BinderLockedFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
}

func (x *BinderLockedFtraceEvent) Reset() {
	*x = BinderLockedFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderLockedFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderLockedFtraceEvent) ProtoMessage() {}

func (x *BinderLockedFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderLockedFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderLockedFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{55}
}

func (x *BinderLockedFtraceEvent) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

type BinderUnlockFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag *string `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
}

func (x *BinderUnlockFtraceEvent) Reset() {
	*x = BinderUnlockFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderUnlockFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderUnlockFtraceEvent) ProtoMessage() {}

func (x *BinderUnlockFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderUnlockFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderUnlockFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{56}
}

func (x *BinderUnlockFtraceEvent) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

type BinderTransactionAllocBufFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSize    *uint64 `protobuf:"varint,1,opt,name=data_size,json=dataSize" json:"data_size,omitempty"`
	DebugId     *int32  `protobuf:"varint,2,opt,name=debug_id,json=debugId" json:"debug_id,omitempty"`
	OffsetsSize *uint64 `protobuf:"varint,3,opt,name=offsets_size,json=offsetsSize" json:"offsets_size,omitempty"`
}

func (x *BinderTransactionAllocBufFtraceEvent) Reset() {
	*x = BinderTransactionAllocBufFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderTransactionAllocBufFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderTransactionAllocBufFtraceEvent) ProtoMessage() {}

func (x *BinderTransactionAllocBufFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderTransactionAllocBufFtraceEvent.ProtoReflect.Descriptor instead.
func (*BinderTransactionAllocBufFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{57}
}

func (x *BinderTransactionAllocBufFtraceEvent) GetDataSize() uint64 {
	if x != nil && x.DataSize != nil {
		return *x.DataSize
	}
	return 0
}

func (x *BinderTransactionAllocBufFtraceEvent) GetDebugId() int32 {
	if x != nil && x.DebugId != nil {
		return *x.DebugId
	}
	return 0
}

func (x *BinderTransactionAllocBufFtraceEvent) GetOffsetsSize() uint64 {
	if x != nil && x.OffsetsSize != nil {
		return *x.OffsetsSize
	}
	return 0
}

type BlockRqIssueFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Bytes    *uint32 `protobuf:"varint,4,opt,name=bytes" json:"bytes,omitempty"`
	Rwbs     *string `protobuf:"bytes,5,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,6,opt,name=comm" json:"comm,omitempty"`
	Cmd      *string `protobuf:"bytes,7,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *BlockRqIssueFtraceEvent) Reset() {
	*x = BlockRqIssueFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRqIssueFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRqIssueFtraceEvent) ProtoMessage() {}

func (x *BlockRqIssueFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRqIssueFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockRqIssueFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{58}
}

func (x *BlockRqIssueFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockRqIssueFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockRqIssueFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockRqIssueFtraceEvent) GetBytes() uint32 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *BlockRqIssueFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockRqIssueFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *BlockRqIssueFtraceEvent) GetCmd() string {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return ""
}

type BlockBioBackmergeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Rwbs     *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockBioBackmergeFtraceEvent) Reset() {
	*x = BlockBioBackmergeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBioBackmergeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBioBackmergeFtraceEvent) ProtoMessage() {}

func (x *BlockBioBackmergeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBioBackmergeFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockBioBackmergeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{59}
}

func (x *BlockBioBackmergeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockBioBackmergeFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockBioBackmergeFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockBioBackmergeFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockBioBackmergeFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockBioBounceFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Rwbs     *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockBioBounceFtraceEvent) Reset() {
	*x = BlockBioBounceFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBioBounceFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBioBounceFtraceEvent) ProtoMessage() {}

func (x *BlockBioBounceFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBioBounceFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockBioBounceFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{60}
}

func (x *BlockBioBounceFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockBioBounceFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockBioBounceFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockBioBounceFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockBioBounceFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockBioCompleteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Error    *int32  `protobuf:"varint,4,opt,name=error" json:"error,omitempty"`
	Rwbs     *string `protobuf:"bytes,5,opt,name=rwbs" json:"rwbs,omitempty"`
}

func (x *BlockBioCompleteFtraceEvent) Reset() {
	*x = BlockBioCompleteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBioCompleteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBioCompleteFtraceEvent) ProtoMessage() {}

func (x *BlockBioCompleteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBioCompleteFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockBioCompleteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{61}
}

func (x *BlockBioCompleteFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockBioCompleteFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockBioCompleteFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockBioCompleteFtraceEvent) GetError() int32 {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return 0
}

func (x *BlockBioCompleteFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

type BlockBioFrontmergeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Rwbs     *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockBioFrontmergeFtraceEvent) Reset() {
	*x = BlockBioFrontmergeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBioFrontmergeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBioFrontmergeFtraceEvent) ProtoMessage() {}

func (x *BlockBioFrontmergeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBioFrontmergeFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockBioFrontmergeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{62}
}

func (x *BlockBioFrontmergeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockBioFrontmergeFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockBioFrontmergeFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockBioFrontmergeFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockBioFrontmergeFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockBioQueueFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Rwbs     *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockBioQueueFtraceEvent) Reset() {
	*x = BlockBioQueueFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBioQueueFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBioQueueFtraceEvent) ProtoMessage() {}

func (x *BlockBioQueueFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBioQueueFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockBioQueueFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{63}
}

func (x *BlockBioQueueFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockBioQueueFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockBioQueueFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockBioQueueFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockBioQueueFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockBioRemapFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector    *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector  *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	OldDev    *uint64 `protobuf:"varint,4,opt,name=old_dev,json=oldDev" json:"old_dev,omitempty"`
	OldSector *uint64 `protobuf:"varint,5,opt,name=old_sector,json=oldSector" json:"old_sector,omitempty"`
	Rwbs      *string `protobuf:"bytes,6,opt,name=rwbs" json:"rwbs,omitempty"`
}

func (x *BlockBioRemapFtraceEvent) Reset() {
	*x = BlockBioRemapFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockBioRemapFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockBioRemapFtraceEvent) ProtoMessage() {}

func (x *BlockBioRemapFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockBioRemapFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockBioRemapFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{64}
}

func (x *BlockBioRemapFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockBioRemapFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockBioRemapFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockBioRemapFtraceEvent) GetOldDev() uint64 {
	if x != nil && x.OldDev != nil {
		return *x.OldDev
	}
	return 0
}

func (x *BlockBioRemapFtraceEvent) GetOldSector() uint64 {
	if x != nil && x.OldSector != nil {
		return *x.OldSector
	}
	return 0
}

func (x *BlockBioRemapFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

type BlockDirtyBufferFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	Size   *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (x *BlockDirtyBufferFtraceEvent) Reset() {
	*x = BlockDirtyBufferFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockDirtyBufferFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockDirtyBufferFtraceEvent) ProtoMessage() {}

func (x *BlockDirtyBufferFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockDirtyBufferFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockDirtyBufferFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{65}
}

func (x *BlockDirtyBufferFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockDirtyBufferFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockDirtyBufferFtraceEvent) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type BlockGetrqFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Rwbs     *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockGetrqFtraceEvent) Reset() {
	*x = BlockGetrqFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockGetrqFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockGetrqFtraceEvent) ProtoMessage() {}

func (x *BlockGetrqFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockGetrqFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockGetrqFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{66}
}

func (x *BlockGetrqFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockGetrqFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockGetrqFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockGetrqFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockGetrqFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockPlugFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockPlugFtraceEvent) Reset() {
	*x = BlockPlugFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockPlugFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockPlugFtraceEvent) ProtoMessage() {}

func (x *BlockPlugFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockPlugFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockPlugFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{67}
}

func (x *BlockPlugFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockRqAbortFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Errors   *int32  `protobuf:"varint,4,opt,name=errors" json:"errors,omitempty"`
	Rwbs     *string `protobuf:"bytes,5,opt,name=rwbs" json:"rwbs,omitempty"`
	Cmd      *string `protobuf:"bytes,6,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *BlockRqAbortFtraceEvent) Reset() {
	*x = BlockRqAbortFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRqAbortFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRqAbortFtraceEvent) ProtoMessage() {}

func (x *BlockRqAbortFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRqAbortFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockRqAbortFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{68}
}

func (x *BlockRqAbortFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockRqAbortFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockRqAbortFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockRqAbortFtraceEvent) GetErrors() int32 {
	if x != nil && x.Errors != nil {
		return *x.Errors
	}
	return 0
}

func (x *BlockRqAbortFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockRqAbortFtraceEvent) GetCmd() string {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return ""
}

type BlockRqCompleteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Errors   *int32  `protobuf:"varint,4,opt,name=errors" json:"errors,omitempty"`
	Rwbs     *string `protobuf:"bytes,5,opt,name=rwbs" json:"rwbs,omitempty"`
	Cmd      *string `protobuf:"bytes,6,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *BlockRqCompleteFtraceEvent) Reset() {
	*x = BlockRqCompleteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRqCompleteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRqCompleteFtraceEvent) ProtoMessage() {}

func (x *BlockRqCompleteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRqCompleteFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockRqCompleteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{69}
}

func (x *BlockRqCompleteFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockRqCompleteFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockRqCompleteFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockRqCompleteFtraceEvent) GetErrors() int32 {
	if x != nil && x.Errors != nil {
		return *x.Errors
	}
	return 0
}

func (x *BlockRqCompleteFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockRqCompleteFtraceEvent) GetCmd() string {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return ""
}

type BlockRqInsertFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Bytes    *uint32 `protobuf:"varint,4,opt,name=bytes" json:"bytes,omitempty"`
	Rwbs     *string `protobuf:"bytes,5,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,6,opt,name=comm" json:"comm,omitempty"`
	Cmd      *string `protobuf:"bytes,7,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *BlockRqInsertFtraceEvent) Reset() {
	*x = BlockRqInsertFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRqInsertFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRqInsertFtraceEvent) ProtoMessage() {}

func (x *BlockRqInsertFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRqInsertFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockRqInsertFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{70}
}

func (x *BlockRqInsertFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockRqInsertFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockRqInsertFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockRqInsertFtraceEvent) GetBytes() uint32 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *BlockRqInsertFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockRqInsertFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *BlockRqInsertFtraceEvent) GetCmd() string {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return ""
}

type BlockRqRemapFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector    *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector  *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	OldDev    *uint64 `protobuf:"varint,4,opt,name=old_dev,json=oldDev" json:"old_dev,omitempty"`
	OldSector *uint64 `protobuf:"varint,5,opt,name=old_sector,json=oldSector" json:"old_sector,omitempty"`
	NrBios    *uint32 `protobuf:"varint,6,opt,name=nr_bios,json=nrBios" json:"nr_bios,omitempty"`
	Rwbs      *string `protobuf:"bytes,7,opt,name=rwbs" json:"rwbs,omitempty"`
}

func (x *BlockRqRemapFtraceEvent) Reset() {
	*x = BlockRqRemapFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRqRemapFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRqRemapFtraceEvent) ProtoMessage() {}

func (x *BlockRqRemapFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRqRemapFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockRqRemapFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{71}
}

func (x *BlockRqRemapFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockRqRemapFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockRqRemapFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockRqRemapFtraceEvent) GetOldDev() uint64 {
	if x != nil && x.OldDev != nil {
		return *x.OldDev
	}
	return 0
}

func (x *BlockRqRemapFtraceEvent) GetOldSector() uint64 {
	if x != nil && x.OldSector != nil {
		return *x.OldSector
	}
	return 0
}

func (x *BlockRqRemapFtraceEvent) GetNrBios() uint32 {
	if x != nil && x.NrBios != nil {
		return *x.NrBios
	}
	return 0
}

func (x *BlockRqRemapFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

type BlockRqRequeueFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Errors   *int32  `protobuf:"varint,4,opt,name=errors" json:"errors,omitempty"`
	Rwbs     *string `protobuf:"bytes,5,opt,name=rwbs" json:"rwbs,omitempty"`
	Cmd      *string `protobuf:"bytes,6,opt,name=cmd" json:"cmd,omitempty"`
}

func (x *BlockRqRequeueFtraceEvent) Reset() {
	*x = BlockRqRequeueFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRqRequeueFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRqRequeueFtraceEvent) ProtoMessage() {}

func (x *BlockRqRequeueFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRqRequeueFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockRqRequeueFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{72}
}

func (x *BlockRqRequeueFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockRqRequeueFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockRqRequeueFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockRqRequeueFtraceEvent) GetErrors() int32 {
	if x != nil && x.Errors != nil {
		return *x.Errors
	}
	return 0
}

func (x *BlockRqRequeueFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockRqRequeueFtraceEvent) GetCmd() string {
	if x != nil && x.Cmd != nil {
		return *x.Cmd
	}
	return ""
}

type BlockSleeprqFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector   *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NrSector *uint32 `protobuf:"varint,3,opt,name=nr_sector,json=nrSector" json:"nr_sector,omitempty"`
	Rwbs     *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm     *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockSleeprqFtraceEvent) Reset() {
	*x = BlockSleeprqFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSleeprqFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSleeprqFtraceEvent) ProtoMessage() {}

func (x *BlockSleeprqFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSleeprqFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockSleeprqFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{73}
}

func (x *BlockSleeprqFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockSleeprqFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockSleeprqFtraceEvent) GetNrSector() uint32 {
	if x != nil && x.NrSector != nil {
		return *x.NrSector
	}
	return 0
}

func (x *BlockSleeprqFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockSleeprqFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockSplitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector    *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	NewSector *uint64 `protobuf:"varint,3,opt,name=new_sector,json=newSector" json:"new_sector,omitempty"`
	Rwbs      *string `protobuf:"bytes,4,opt,name=rwbs" json:"rwbs,omitempty"`
	Comm      *string `protobuf:"bytes,5,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockSplitFtraceEvent) Reset() {
	*x = BlockSplitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockSplitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockSplitFtraceEvent) ProtoMessage() {}

func (x *BlockSplitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockSplitFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockSplitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{74}
}

func (x *BlockSplitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockSplitFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockSplitFtraceEvent) GetNewSector() uint64 {
	if x != nil && x.NewSector != nil {
		return *x.NewSector
	}
	return 0
}

func (x *BlockSplitFtraceEvent) GetRwbs() string {
	if x != nil && x.Rwbs != nil {
		return *x.Rwbs
	}
	return ""
}

func (x *BlockSplitFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type BlockTouchBufferFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Sector *uint64 `protobuf:"varint,2,opt,name=sector" json:"sector,omitempty"`
	Size   *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (x *BlockTouchBufferFtraceEvent) Reset() {
	*x = BlockTouchBufferFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockTouchBufferFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockTouchBufferFtraceEvent) ProtoMessage() {}

func (x *BlockTouchBufferFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockTouchBufferFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockTouchBufferFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{75}
}

func (x *BlockTouchBufferFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *BlockTouchBufferFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *BlockTouchBufferFtraceEvent) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type BlockUnplugFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrRq *int32  `protobuf:"varint,1,opt,name=nr_rq,json=nrRq" json:"nr_rq,omitempty"`
	Comm *string `protobuf:"bytes,2,opt,name=comm" json:"comm,omitempty"`
}

func (x *BlockUnplugFtraceEvent) Reset() {
	*x = BlockUnplugFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUnplugFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUnplugFtraceEvent) ProtoMessage() {}

func (x *BlockUnplugFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUnplugFtraceEvent.ProtoReflect.Descriptor instead.
func (*BlockUnplugFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{76}
}

func (x *BlockUnplugFtraceEvent) GetNrRq() int32 {
	if x != nil && x.NrRq != nil {
		return *x.NrRq
	}
	return 0
}

func (x *BlockUnplugFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

type CgroupAttachTaskFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstRoot *int32  `protobuf:"varint,1,opt,name=dst_root,json=dstRoot" json:"dst_root,omitempty"`
	DstId   *int32  `protobuf:"varint,2,opt,name=dst_id,json=dstId" json:"dst_id,omitempty"`
	Pid     *int32  `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	Comm    *string `protobuf:"bytes,4,opt,name=comm" json:"comm,omitempty"`
	Cname   *string `protobuf:"bytes,5,opt,name=cname" json:"cname,omitempty"`
}

func (x *CgroupAttachTaskFtraceEvent) Reset() {
	*x = CgroupAttachTaskFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupAttachTaskFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupAttachTaskFtraceEvent) ProtoMessage() {}

func (x *CgroupAttachTaskFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupAttachTaskFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupAttachTaskFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{77}
}

func (x *CgroupAttachTaskFtraceEvent) GetDstRoot() int32 {
	if x != nil && x.DstRoot != nil {
		return *x.DstRoot
	}
	return 0
}

func (x *CgroupAttachTaskFtraceEvent) GetDstId() int32 {
	if x != nil && x.DstId != nil {
		return *x.DstId
	}
	return 0
}

func (x *CgroupAttachTaskFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CgroupAttachTaskFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *CgroupAttachTaskFtraceEvent) GetCname() string {
	if x != nil && x.Cname != nil {
		return *x.Cname
	}
	return ""
}

type CgroupMkdirFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root  *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	Id    *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Cname *string `protobuf:"bytes,3,opt,name=cname" json:"cname,omitempty"`
}

func (x *CgroupMkdirFtraceEvent) Reset() {
	*x = CgroupMkdirFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupMkdirFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupMkdirFtraceEvent) ProtoMessage() {}

func (x *CgroupMkdirFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupMkdirFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupMkdirFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{78}
}

func (x *CgroupMkdirFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupMkdirFtraceEvent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CgroupMkdirFtraceEvent) GetCname() string {
	if x != nil && x.Cname != nil {
		return *x.Cname
	}
	return ""
}

type CgroupRemountFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root   *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	SsMask *uint32 `protobuf:"varint,2,opt,name=ss_mask,json=ssMask" json:"ss_mask,omitempty"`
	Name   *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CgroupRemountFtraceEvent) Reset() {
	*x = CgroupRemountFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupRemountFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupRemountFtraceEvent) ProtoMessage() {}

func (x *CgroupRemountFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupRemountFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupRemountFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{79}
}

func (x *CgroupRemountFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupRemountFtraceEvent) GetSsMask() uint32 {
	if x != nil && x.SsMask != nil {
		return *x.SsMask
	}
	return 0
}

func (x *CgroupRemountFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CgroupRmdirFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root  *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	Id    *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Cname *string `protobuf:"bytes,3,opt,name=cname" json:"cname,omitempty"`
}

func (x *CgroupRmdirFtraceEvent) Reset() {
	*x = CgroupRmdirFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupRmdirFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupRmdirFtraceEvent) ProtoMessage() {}

func (x *CgroupRmdirFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupRmdirFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupRmdirFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{80}
}

func (x *CgroupRmdirFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupRmdirFtraceEvent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CgroupRmdirFtraceEvent) GetCname() string {
	if x != nil && x.Cname != nil {
		return *x.Cname
	}
	return ""
}

type CgroupTransferTasksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstRoot *int32  `protobuf:"varint,1,opt,name=dst_root,json=dstRoot" json:"dst_root,omitempty"`
	DstId   *int32  `protobuf:"varint,2,opt,name=dst_id,json=dstId" json:"dst_id,omitempty"`
	Pid     *int32  `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	Comm    *string `protobuf:"bytes,4,opt,name=comm" json:"comm,omitempty"`
	Cname   *string `protobuf:"bytes,5,opt,name=cname" json:"cname,omitempty"`
}

func (x *CgroupTransferTasksFtraceEvent) Reset() {
	*x = CgroupTransferTasksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupTransferTasksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupTransferTasksFtraceEvent) ProtoMessage() {}

func (x *CgroupTransferTasksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupTransferTasksFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupTransferTasksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{81}
}

func (x *CgroupTransferTasksFtraceEvent) GetDstRoot() int32 {
	if x != nil && x.DstRoot != nil {
		return *x.DstRoot
	}
	return 0
}

func (x *CgroupTransferTasksFtraceEvent) GetDstId() int32 {
	if x != nil && x.DstId != nil {
		return *x.DstId
	}
	return 0
}

func (x *CgroupTransferTasksFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *CgroupTransferTasksFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *CgroupTransferTasksFtraceEvent) GetCname() string {
	if x != nil && x.Cname != nil {
		return *x.Cname
	}
	return ""
}

type CgroupDestroyRootFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root   *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	SsMask *uint32 `protobuf:"varint,2,opt,name=ss_mask,json=ssMask" json:"ss_mask,omitempty"`
	Name   *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CgroupDestroyRootFtraceEvent) Reset() {
	*x = CgroupDestroyRootFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupDestroyRootFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupDestroyRootFtraceEvent) ProtoMessage() {}

func (x *CgroupDestroyRootFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupDestroyRootFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupDestroyRootFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{82}
}

func (x *CgroupDestroyRootFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupDestroyRootFtraceEvent) GetSsMask() uint32 {
	if x != nil && x.SsMask != nil {
		return *x.SsMask
	}
	return 0
}

func (x *CgroupDestroyRootFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CgroupReleaseFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root  *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	Id    *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Cname *string `protobuf:"bytes,3,opt,name=cname" json:"cname,omitempty"`
}

func (x *CgroupReleaseFtraceEvent) Reset() {
	*x = CgroupReleaseFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupReleaseFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupReleaseFtraceEvent) ProtoMessage() {}

func (x *CgroupReleaseFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupReleaseFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupReleaseFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{83}
}

func (x *CgroupReleaseFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupReleaseFtraceEvent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CgroupReleaseFtraceEvent) GetCname() string {
	if x != nil && x.Cname != nil {
		return *x.Cname
	}
	return ""
}

type CgroupRenameFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root  *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	Id    *int32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Cname *string `protobuf:"bytes,3,opt,name=cname" json:"cname,omitempty"`
}

func (x *CgroupRenameFtraceEvent) Reset() {
	*x = CgroupRenameFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupRenameFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupRenameFtraceEvent) ProtoMessage() {}

func (x *CgroupRenameFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupRenameFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupRenameFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{84}
}

func (x *CgroupRenameFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupRenameFtraceEvent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *CgroupRenameFtraceEvent) GetCname() string {
	if x != nil && x.Cname != nil {
		return *x.Cname
	}
	return ""
}

type CgroupSetupRootFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root   *int32  `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	SsMask *uint32 `protobuf:"varint,2,opt,name=ss_mask,json=ssMask" json:"ss_mask,omitempty"`
	Name   *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (x *CgroupSetupRootFtraceEvent) Reset() {
	*x = CgroupSetupRootFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupSetupRootFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupSetupRootFtraceEvent) ProtoMessage() {}

func (x *CgroupSetupRootFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupSetupRootFtraceEvent.ProtoReflect.Descriptor instead.
func (*CgroupSetupRootFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{85}
}

func (x *CgroupSetupRootFtraceEvent) GetRoot() int32 {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return 0
}

func (x *CgroupSetupRootFtraceEvent) GetSsMask() uint32 {
	if x != nil && x.SsMask != nil {
		return *x.SsMask
	}
	return 0
}

func (x *CgroupSetupRootFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ClkEnableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *ClkEnableFtraceEvent) Reset() {
	*x = ClkEnableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClkEnableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClkEnableFtraceEvent) ProtoMessage() {}

func (x *ClkEnableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClkEnableFtraceEvent.ProtoReflect.Descriptor instead.
func (*ClkEnableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{86}
}

func (x *ClkEnableFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ClkDisableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *ClkDisableFtraceEvent) Reset() {
	*x = ClkDisableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClkDisableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClkDisableFtraceEvent) ProtoMessage() {}

func (x *ClkDisableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClkDisableFtraceEvent.ProtoReflect.Descriptor instead.
func (*ClkDisableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{87}
}

func (x *ClkDisableFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ClkSetRateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Rate *uint64 `protobuf:"varint,2,opt,name=rate" json:"rate,omitempty"`
}

func (x *ClkSetRateFtraceEvent) Reset() {
	*x = ClkSetRateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClkSetRateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClkSetRateFtraceEvent) ProtoMessage() {}

func (x *ClkSetRateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClkSetRateFtraceEvent.ProtoReflect.Descriptor instead.
func (*ClkSetRateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{88}
}

func (x *ClkSetRateFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClkSetRateFtraceEvent) GetRate() uint64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

type MmCompactionBeginFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneStart  *uint64 `protobuf:"varint,1,opt,name=zone_start,json=zoneStart" json:"zone_start,omitempty"`
	MigratePfn *uint64 `protobuf:"varint,2,opt,name=migrate_pfn,json=migratePfn" json:"migrate_pfn,omitempty"`
	FreePfn    *uint64 `protobuf:"varint,3,opt,name=free_pfn,json=freePfn" json:"free_pfn,omitempty"`
	ZoneEnd    *uint64 `protobuf:"varint,4,opt,name=zone_end,json=zoneEnd" json:"zone_end,omitempty"`
	Sync       *uint32 `protobuf:"varint,5,opt,name=sync" json:"sync,omitempty"`
}

func (x *MmCompactionBeginFtraceEvent) Reset() {
	*x = MmCompactionBeginFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionBeginFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionBeginFtraceEvent) ProtoMessage() {}

func (x *MmCompactionBeginFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionBeginFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionBeginFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{89}
}

func (x *MmCompactionBeginFtraceEvent) GetZoneStart() uint64 {
	if x != nil && x.ZoneStart != nil {
		return *x.ZoneStart
	}
	return 0
}

func (x *MmCompactionBeginFtraceEvent) GetMigratePfn() uint64 {
	if x != nil && x.MigratePfn != nil {
		return *x.MigratePfn
	}
	return 0
}

func (x *MmCompactionBeginFtraceEvent) GetFreePfn() uint64 {
	if x != nil && x.FreePfn != nil {
		return *x.FreePfn
	}
	return 0
}

func (x *MmCompactionBeginFtraceEvent) GetZoneEnd() uint64 {
	if x != nil && x.ZoneEnd != nil {
		return *x.ZoneEnd
	}
	return 0
}

func (x *MmCompactionBeginFtraceEvent) GetSync() uint32 {
	if x != nil && x.Sync != nil {
		return *x.Sync
	}
	return 0
}

type MmCompactionDeferCompactionFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid         *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Idx         *uint32 `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Order       *int32  `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Considered  *uint32 `protobuf:"varint,4,opt,name=considered" json:"considered,omitempty"`
	DeferShift  *uint32 `protobuf:"varint,5,opt,name=defer_shift,json=deferShift" json:"defer_shift,omitempty"`
	OrderFailed *int32  `protobuf:"varint,6,opt,name=order_failed,json=orderFailed" json:"order_failed,omitempty"`
}

func (x *MmCompactionDeferCompactionFtraceEvent) Reset() {
	*x = MmCompactionDeferCompactionFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionDeferCompactionFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionDeferCompactionFtraceEvent) ProtoMessage() {}

func (x *MmCompactionDeferCompactionFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionDeferCompactionFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionDeferCompactionFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{90}
}

func (x *MmCompactionDeferCompactionFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionDeferCompactionFtraceEvent) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *MmCompactionDeferCompactionFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionDeferCompactionFtraceEvent) GetConsidered() uint32 {
	if x != nil && x.Considered != nil {
		return *x.Considered
	}
	return 0
}

func (x *MmCompactionDeferCompactionFtraceEvent) GetDeferShift() uint32 {
	if x != nil && x.DeferShift != nil {
		return *x.DeferShift
	}
	return 0
}

func (x *MmCompactionDeferCompactionFtraceEvent) GetOrderFailed() int32 {
	if x != nil && x.OrderFailed != nil {
		return *x.OrderFailed
	}
	return 0
}

type MmCompactionDeferredFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid         *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Idx         *uint32 `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Order       *int32  `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Considered  *uint32 `protobuf:"varint,4,opt,name=considered" json:"considered,omitempty"`
	DeferShift  *uint32 `protobuf:"varint,5,opt,name=defer_shift,json=deferShift" json:"defer_shift,omitempty"`
	OrderFailed *int32  `protobuf:"varint,6,opt,name=order_failed,json=orderFailed" json:"order_failed,omitempty"`
}

func (x *MmCompactionDeferredFtraceEvent) Reset() {
	*x = MmCompactionDeferredFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionDeferredFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionDeferredFtraceEvent) ProtoMessage() {}

func (x *MmCompactionDeferredFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionDeferredFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionDeferredFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{91}
}

func (x *MmCompactionDeferredFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionDeferredFtraceEvent) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *MmCompactionDeferredFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionDeferredFtraceEvent) GetConsidered() uint32 {
	if x != nil && x.Considered != nil {
		return *x.Considered
	}
	return 0
}

func (x *MmCompactionDeferredFtraceEvent) GetDeferShift() uint32 {
	if x != nil && x.DeferShift != nil {
		return *x.DeferShift
	}
	return 0
}

func (x *MmCompactionDeferredFtraceEvent) GetOrderFailed() int32 {
	if x != nil && x.OrderFailed != nil {
		return *x.OrderFailed
	}
	return 0
}

type MmCompactionDeferResetFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid         *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Idx         *uint32 `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Order       *int32  `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Considered  *uint32 `protobuf:"varint,4,opt,name=considered" json:"considered,omitempty"`
	DeferShift  *uint32 `protobuf:"varint,5,opt,name=defer_shift,json=deferShift" json:"defer_shift,omitempty"`
	OrderFailed *int32  `protobuf:"varint,6,opt,name=order_failed,json=orderFailed" json:"order_failed,omitempty"`
}

func (x *MmCompactionDeferResetFtraceEvent) Reset() {
	*x = MmCompactionDeferResetFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionDeferResetFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionDeferResetFtraceEvent) ProtoMessage() {}

func (x *MmCompactionDeferResetFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionDeferResetFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionDeferResetFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{92}
}

func (x *MmCompactionDeferResetFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionDeferResetFtraceEvent) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *MmCompactionDeferResetFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionDeferResetFtraceEvent) GetConsidered() uint32 {
	if x != nil && x.Considered != nil {
		return *x.Considered
	}
	return 0
}

func (x *MmCompactionDeferResetFtraceEvent) GetDeferShift() uint32 {
	if x != nil && x.DeferShift != nil {
		return *x.DeferShift
	}
	return 0
}

func (x *MmCompactionDeferResetFtraceEvent) GetOrderFailed() int32 {
	if x != nil && x.OrderFailed != nil {
		return *x.OrderFailed
	}
	return 0
}

type MmCompactionEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneStart  *uint64 `protobuf:"varint,1,opt,name=zone_start,json=zoneStart" json:"zone_start,omitempty"`
	MigratePfn *uint64 `protobuf:"varint,2,opt,name=migrate_pfn,json=migratePfn" json:"migrate_pfn,omitempty"`
	FreePfn    *uint64 `protobuf:"varint,3,opt,name=free_pfn,json=freePfn" json:"free_pfn,omitempty"`
	ZoneEnd    *uint64 `protobuf:"varint,4,opt,name=zone_end,json=zoneEnd" json:"zone_end,omitempty"`
	Sync       *uint32 `protobuf:"varint,5,opt,name=sync" json:"sync,omitempty"`
	Status     *int32  `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *MmCompactionEndFtraceEvent) Reset() {
	*x = MmCompactionEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionEndFtraceEvent) ProtoMessage() {}

func (x *MmCompactionEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{93}
}

func (x *MmCompactionEndFtraceEvent) GetZoneStart() uint64 {
	if x != nil && x.ZoneStart != nil {
		return *x.ZoneStart
	}
	return 0
}

func (x *MmCompactionEndFtraceEvent) GetMigratePfn() uint64 {
	if x != nil && x.MigratePfn != nil {
		return *x.MigratePfn
	}
	return 0
}

func (x *MmCompactionEndFtraceEvent) GetFreePfn() uint64 {
	if x != nil && x.FreePfn != nil {
		return *x.FreePfn
	}
	return 0
}

func (x *MmCompactionEndFtraceEvent) GetZoneEnd() uint64 {
	if x != nil && x.ZoneEnd != nil {
		return *x.ZoneEnd
	}
	return 0
}

func (x *MmCompactionEndFtraceEvent) GetSync() uint32 {
	if x != nil && x.Sync != nil {
		return *x.Sync
	}
	return 0
}

func (x *MmCompactionEndFtraceEvent) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type MmCompactionFinishedFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid   *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Idx   *uint32 `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Order *int32  `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Ret   *int32  `protobuf:"varint,4,opt,name=ret" json:"ret,omitempty"`
}

func (x *MmCompactionFinishedFtraceEvent) Reset() {
	*x = MmCompactionFinishedFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionFinishedFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionFinishedFtraceEvent) ProtoMessage() {}

func (x *MmCompactionFinishedFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionFinishedFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionFinishedFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{94}
}

func (x *MmCompactionFinishedFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionFinishedFtraceEvent) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *MmCompactionFinishedFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionFinishedFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MmCompactionIsolateFreepagesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPfn  *uint64 `protobuf:"varint,1,opt,name=start_pfn,json=startPfn" json:"start_pfn,omitempty"`
	EndPfn    *uint64 `protobuf:"varint,2,opt,name=end_pfn,json=endPfn" json:"end_pfn,omitempty"`
	NrScanned *uint64 `protobuf:"varint,3,opt,name=nr_scanned,json=nrScanned" json:"nr_scanned,omitempty"`
	NrTaken   *uint64 `protobuf:"varint,4,opt,name=nr_taken,json=nrTaken" json:"nr_taken,omitempty"`
}

func (x *MmCompactionIsolateFreepagesFtraceEvent) Reset() {
	*x = MmCompactionIsolateFreepagesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionIsolateFreepagesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionIsolateFreepagesFtraceEvent) ProtoMessage() {}

func (x *MmCompactionIsolateFreepagesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionIsolateFreepagesFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionIsolateFreepagesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{95}
}

func (x *MmCompactionIsolateFreepagesFtraceEvent) GetStartPfn() uint64 {
	if x != nil && x.StartPfn != nil {
		return *x.StartPfn
	}
	return 0
}

func (x *MmCompactionIsolateFreepagesFtraceEvent) GetEndPfn() uint64 {
	if x != nil && x.EndPfn != nil {
		return *x.EndPfn
	}
	return 0
}

func (x *MmCompactionIsolateFreepagesFtraceEvent) GetNrScanned() uint64 {
	if x != nil && x.NrScanned != nil {
		return *x.NrScanned
	}
	return 0
}

func (x *MmCompactionIsolateFreepagesFtraceEvent) GetNrTaken() uint64 {
	if x != nil && x.NrTaken != nil {
		return *x.NrTaken
	}
	return 0
}

type MmCompactionIsolateMigratepagesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPfn  *uint64 `protobuf:"varint,1,opt,name=start_pfn,json=startPfn" json:"start_pfn,omitempty"`
	EndPfn    *uint64 `protobuf:"varint,2,opt,name=end_pfn,json=endPfn" json:"end_pfn,omitempty"`
	NrScanned *uint64 `protobuf:"varint,3,opt,name=nr_scanned,json=nrScanned" json:"nr_scanned,omitempty"`
	NrTaken   *uint64 `protobuf:"varint,4,opt,name=nr_taken,json=nrTaken" json:"nr_taken,omitempty"`
}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) Reset() {
	*x = MmCompactionIsolateMigratepagesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionIsolateMigratepagesFtraceEvent) ProtoMessage() {}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionIsolateMigratepagesFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionIsolateMigratepagesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{96}
}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) GetStartPfn() uint64 {
	if x != nil && x.StartPfn != nil {
		return *x.StartPfn
	}
	return 0
}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) GetEndPfn() uint64 {
	if x != nil && x.EndPfn != nil {
		return *x.EndPfn
	}
	return 0
}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) GetNrScanned() uint64 {
	if x != nil && x.NrScanned != nil {
		return *x.NrScanned
	}
	return 0
}

func (x *MmCompactionIsolateMigratepagesFtraceEvent) GetNrTaken() uint64 {
	if x != nil && x.NrTaken != nil {
		return *x.NrTaken
	}
	return 0
}

type MmCompactionKcompactdSleepFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *int32 `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
}

func (x *MmCompactionKcompactdSleepFtraceEvent) Reset() {
	*x = MmCompactionKcompactdSleepFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionKcompactdSleepFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionKcompactdSleepFtraceEvent) ProtoMessage() {}

func (x *MmCompactionKcompactdSleepFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionKcompactdSleepFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionKcompactdSleepFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{97}
}

func (x *MmCompactionKcompactdSleepFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

type MmCompactionKcompactdWakeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid          *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Order        *int32  `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	ClasszoneIdx *uint32 `protobuf:"varint,3,opt,name=classzone_idx,json=classzoneIdx" json:"classzone_idx,omitempty"`
}

func (x *MmCompactionKcompactdWakeFtraceEvent) Reset() {
	*x = MmCompactionKcompactdWakeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionKcompactdWakeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionKcompactdWakeFtraceEvent) ProtoMessage() {}

func (x *MmCompactionKcompactdWakeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionKcompactdWakeFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionKcompactdWakeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{98}
}

func (x *MmCompactionKcompactdWakeFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionKcompactdWakeFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionKcompactdWakeFtraceEvent) GetClasszoneIdx() uint32 {
	if x != nil && x.ClasszoneIdx != nil {
		return *x.ClasszoneIdx
	}
	return 0
}

type MmCompactionMigratepagesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrMigrated *uint64 `protobuf:"varint,1,opt,name=nr_migrated,json=nrMigrated" json:"nr_migrated,omitempty"`
	NrFailed   *uint64 `protobuf:"varint,2,opt,name=nr_failed,json=nrFailed" json:"nr_failed,omitempty"`
}

func (x *MmCompactionMigratepagesFtraceEvent) Reset() {
	*x = MmCompactionMigratepagesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionMigratepagesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionMigratepagesFtraceEvent) ProtoMessage() {}

func (x *MmCompactionMigratepagesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionMigratepagesFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionMigratepagesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{99}
}

func (x *MmCompactionMigratepagesFtraceEvent) GetNrMigrated() uint64 {
	if x != nil && x.NrMigrated != nil {
		return *x.NrMigrated
	}
	return 0
}

func (x *MmCompactionMigratepagesFtraceEvent) GetNrFailed() uint64 {
	if x != nil && x.NrFailed != nil {
		return *x.NrFailed
	}
	return 0
}

type MmCompactionSuitableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid   *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Idx   *uint32 `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Order *int32  `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Ret   *int32  `protobuf:"varint,4,opt,name=ret" json:"ret,omitempty"`
}

func (x *MmCompactionSuitableFtraceEvent) Reset() {
	*x = MmCompactionSuitableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionSuitableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionSuitableFtraceEvent) ProtoMessage() {}

func (x *MmCompactionSuitableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionSuitableFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionSuitableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{100}
}

func (x *MmCompactionSuitableFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionSuitableFtraceEvent) GetIdx() uint32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *MmCompactionSuitableFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionSuitableFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type MmCompactionTryToCompactPagesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order   *int32  `protobuf:"varint,1,opt,name=order" json:"order,omitempty"`
	GfpMask *uint32 `protobuf:"varint,2,opt,name=gfp_mask,json=gfpMask" json:"gfp_mask,omitempty"`
	Mode    *uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (x *MmCompactionTryToCompactPagesFtraceEvent) Reset() {
	*x = MmCompactionTryToCompactPagesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionTryToCompactPagesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionTryToCompactPagesFtraceEvent) ProtoMessage() {}

func (x *MmCompactionTryToCompactPagesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionTryToCompactPagesFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionTryToCompactPagesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{101}
}

func (x *MmCompactionTryToCompactPagesFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionTryToCompactPagesFtraceEvent) GetGfpMask() uint32 {
	if x != nil && x.GfpMask != nil {
		return *x.GfpMask
	}
	return 0
}

func (x *MmCompactionTryToCompactPagesFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type MmCompactionWakeupKcompactdFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid          *int32  `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Order        *int32  `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	ClasszoneIdx *uint32 `protobuf:"varint,3,opt,name=classzone_idx,json=classzoneIdx" json:"classzone_idx,omitempty"`
}

func (x *MmCompactionWakeupKcompactdFtraceEvent) Reset() {
	*x = MmCompactionWakeupKcompactdFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmCompactionWakeupKcompactdFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmCompactionWakeupKcompactdFtraceEvent) ProtoMessage() {}

func (x *MmCompactionWakeupKcompactdFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmCompactionWakeupKcompactdFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmCompactionWakeupKcompactdFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{102}
}

func (x *MmCompactionWakeupKcompactdFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmCompactionWakeupKcompactdFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmCompactionWakeupKcompactdFtraceEvent) GetClasszoneIdx() uint32 {
	if x != nil && x.ClasszoneIdx != nil {
		return *x.ClasszoneIdx
	}
	return 0
}

type CpuhpExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu   *uint32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Idx   *int32  `protobuf:"varint,2,opt,name=idx" json:"idx,omitempty"`
	Ret   *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
	State *int32  `protobuf:"varint,4,opt,name=state" json:"state,omitempty"`
}

func (x *CpuhpExitFtraceEvent) Reset() {
	*x = CpuhpExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuhpExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuhpExitFtraceEvent) ProtoMessage() {}

func (x *CpuhpExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuhpExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuhpExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{103}
}

func (x *CpuhpExitFtraceEvent) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *CpuhpExitFtraceEvent) GetIdx() int32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *CpuhpExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *CpuhpExitFtraceEvent) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type CpuhpMultiEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    *uint32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Fun    *uint64 `protobuf:"varint,2,opt,name=fun" json:"fun,omitempty"`
	Idx    *int32  `protobuf:"varint,3,opt,name=idx" json:"idx,omitempty"`
	Target *int32  `protobuf:"varint,4,opt,name=target" json:"target,omitempty"`
}

func (x *CpuhpMultiEnterFtraceEvent) Reset() {
	*x = CpuhpMultiEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuhpMultiEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuhpMultiEnterFtraceEvent) ProtoMessage() {}

func (x *CpuhpMultiEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuhpMultiEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuhpMultiEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{104}
}

func (x *CpuhpMultiEnterFtraceEvent) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *CpuhpMultiEnterFtraceEvent) GetFun() uint64 {
	if x != nil && x.Fun != nil {
		return *x.Fun
	}
	return 0
}

func (x *CpuhpMultiEnterFtraceEvent) GetIdx() int32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *CpuhpMultiEnterFtraceEvent) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

type CpuhpEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    *uint32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Fun    *uint64 `protobuf:"varint,2,opt,name=fun" json:"fun,omitempty"`
	Idx    *int32  `protobuf:"varint,3,opt,name=idx" json:"idx,omitempty"`
	Target *int32  `protobuf:"varint,4,opt,name=target" json:"target,omitempty"`
}

func (x *CpuhpEnterFtraceEvent) Reset() {
	*x = CpuhpEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuhpEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuhpEnterFtraceEvent) ProtoMessage() {}

func (x *CpuhpEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuhpEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuhpEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{105}
}

func (x *CpuhpEnterFtraceEvent) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *CpuhpEnterFtraceEvent) GetFun() uint64 {
	if x != nil && x.Fun != nil {
		return *x.Fun
	}
	return 0
}

func (x *CpuhpEnterFtraceEvent) GetIdx() int32 {
	if x != nil && x.Idx != nil {
		return *x.Idx
	}
	return 0
}

func (x *CpuhpEnterFtraceEvent) GetTarget() int32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

type CpuhpLatencyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu   *uint32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Ret   *int32  `protobuf:"varint,2,opt,name=ret" json:"ret,omitempty"`
	State *uint32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	Time  *uint64 `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
}

func (x *CpuhpLatencyFtraceEvent) Reset() {
	*x = CpuhpLatencyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuhpLatencyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuhpLatencyFtraceEvent) ProtoMessage() {}

func (x *CpuhpLatencyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuhpLatencyFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuhpLatencyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{106}
}

func (x *CpuhpLatencyFtraceEvent) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *CpuhpLatencyFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *CpuhpLatencyFtraceEvent) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CpuhpLatencyFtraceEvent) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type DpuTracingMarkWriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid        *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	TraceName  *string `protobuf:"bytes,2,opt,name=trace_name,json=traceName" json:"trace_name,omitempty"`
	TraceBegin *uint32 `protobuf:"varint,3,opt,name=trace_begin,json=traceBegin" json:"trace_begin,omitempty"`
	Name       *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Type       *uint32 `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Value      *int32  `protobuf:"varint,6,opt,name=value" json:"value,omitempty"`
}

func (x *DpuTracingMarkWriteFtraceEvent) Reset() {
	*x = DpuTracingMarkWriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DpuTracingMarkWriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DpuTracingMarkWriteFtraceEvent) ProtoMessage() {}

func (x *DpuTracingMarkWriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DpuTracingMarkWriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*DpuTracingMarkWriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{107}
}

func (x *DpuTracingMarkWriteFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *DpuTracingMarkWriteFtraceEvent) GetTraceName() string {
	if x != nil && x.TraceName != nil {
		return *x.TraceName
	}
	return ""
}

func (x *DpuTracingMarkWriteFtraceEvent) GetTraceBegin() uint32 {
	if x != nil && x.TraceBegin != nil {
		return *x.TraceBegin
	}
	return 0
}

func (x *DpuTracingMarkWriteFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DpuTracingMarkWriteFtraceEvent) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *DpuTracingMarkWriteFtraceEvent) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type Ext4DaWriteBeginFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos   *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Flags *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4DaWriteBeginFtraceEvent) Reset() {
	*x = Ext4DaWriteBeginFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaWriteBeginFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaWriteBeginFtraceEvent) ProtoMessage() {}

func (x *Ext4DaWriteBeginFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaWriteBeginFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaWriteBeginFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{108}
}

func (x *Ext4DaWriteBeginFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaWriteBeginFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaWriteBeginFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4DaWriteBeginFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4DaWriteBeginFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4DaWriteEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos    *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Copied *uint32 `protobuf:"varint,5,opt,name=copied" json:"copied,omitempty"`
}

func (x *Ext4DaWriteEndFtraceEvent) Reset() {
	*x = Ext4DaWriteEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaWriteEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaWriteEndFtraceEvent) ProtoMessage() {}

func (x *Ext4DaWriteEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaWriteEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaWriteEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{109}
}

func (x *Ext4DaWriteEndFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaWriteEndFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaWriteEndFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4DaWriteEndFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4DaWriteEndFtraceEvent) GetCopied() uint32 {
	if x != nil && x.Copied != nil {
		return *x.Copied
	}
	return 0
}

type Ext4SyncFileEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino      *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Parent   *uint64 `protobuf:"varint,3,opt,name=parent" json:"parent,omitempty"`
	Datasync *int32  `protobuf:"varint,4,opt,name=datasync" json:"datasync,omitempty"`
}

func (x *Ext4SyncFileEnterFtraceEvent) Reset() {
	*x = Ext4SyncFileEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4SyncFileEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4SyncFileEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4SyncFileEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4SyncFileEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4SyncFileEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{110}
}

func (x *Ext4SyncFileEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4SyncFileEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4SyncFileEnterFtraceEvent) GetParent() uint64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *Ext4SyncFileEnterFtraceEvent) GetDatasync() int32 {
	if x != nil && x.Datasync != nil {
		return *x.Datasync
	}
	return 0
}

type Ext4SyncFileExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4SyncFileExitFtraceEvent) Reset() {
	*x = Ext4SyncFileExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4SyncFileExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4SyncFileExitFtraceEvent) ProtoMessage() {}

func (x *Ext4SyncFileExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4SyncFileExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4SyncFileExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{111}
}

func (x *Ext4SyncFileExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4SyncFileExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4SyncFileExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4AllocDaBlocksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev        *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino        *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	DataBlocks *uint32 `protobuf:"varint,3,opt,name=data_blocks,json=dataBlocks" json:"data_blocks,omitempty"`
	MetaBlocks *uint32 `protobuf:"varint,4,opt,name=meta_blocks,json=metaBlocks" json:"meta_blocks,omitempty"`
}

func (x *Ext4AllocDaBlocksFtraceEvent) Reset() {
	*x = Ext4AllocDaBlocksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4AllocDaBlocksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4AllocDaBlocksFtraceEvent) ProtoMessage() {}

func (x *Ext4AllocDaBlocksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4AllocDaBlocksFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4AllocDaBlocksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{112}
}

func (x *Ext4AllocDaBlocksFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4AllocDaBlocksFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4AllocDaBlocksFtraceEvent) GetDataBlocks() uint32 {
	if x != nil && x.DataBlocks != nil {
		return *x.DataBlocks
	}
	return 0
}

func (x *Ext4AllocDaBlocksFtraceEvent) GetMetaBlocks() uint32 {
	if x != nil && x.MetaBlocks != nil {
		return *x.MetaBlocks
	}
	return 0
}

type Ext4AllocateBlocksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Block   *uint64 `protobuf:"varint,3,opt,name=block" json:"block,omitempty"`
	Len     *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Logical *uint32 `protobuf:"varint,5,opt,name=logical" json:"logical,omitempty"`
	Lleft   *uint32 `protobuf:"varint,6,opt,name=lleft" json:"lleft,omitempty"`
	Lright  *uint32 `protobuf:"varint,7,opt,name=lright" json:"lright,omitempty"`
	Goal    *uint64 `protobuf:"varint,8,opt,name=goal" json:"goal,omitempty"`
	Pleft   *uint64 `protobuf:"varint,9,opt,name=pleft" json:"pleft,omitempty"`
	Pright  *uint64 `protobuf:"varint,10,opt,name=pright" json:"pright,omitempty"`
	Flags   *uint32 `protobuf:"varint,11,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4AllocateBlocksFtraceEvent) Reset() {
	*x = Ext4AllocateBlocksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4AllocateBlocksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4AllocateBlocksFtraceEvent) ProtoMessage() {}

func (x *Ext4AllocateBlocksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4AllocateBlocksFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4AllocateBlocksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{113}
}

func (x *Ext4AllocateBlocksFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetBlock() uint64 {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetLogical() uint32 {
	if x != nil && x.Logical != nil {
		return *x.Logical
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetLleft() uint32 {
	if x != nil && x.Lleft != nil {
		return *x.Lleft
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetLright() uint32 {
	if x != nil && x.Lright != nil {
		return *x.Lright
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetGoal() uint64 {
	if x != nil && x.Goal != nil {
		return *x.Goal
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetPleft() uint64 {
	if x != nil && x.Pleft != nil {
		return *x.Pleft
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetPright() uint64 {
	if x != nil && x.Pright != nil {
		return *x.Pright
	}
	return 0
}

func (x *Ext4AllocateBlocksFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4AllocateInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Dir  *uint64 `protobuf:"varint,3,opt,name=dir" json:"dir,omitempty"`
	Mode *uint32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4AllocateInodeFtraceEvent) Reset() {
	*x = Ext4AllocateInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4AllocateInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4AllocateInodeFtraceEvent) ProtoMessage() {}

func (x *Ext4AllocateInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4AllocateInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4AllocateInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{114}
}

func (x *Ext4AllocateInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4AllocateInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4AllocateInodeFtraceEvent) GetDir() uint64 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *Ext4AllocateInodeFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4BeginOrderedTruncateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	NewSize *int64  `protobuf:"varint,3,opt,name=new_size,json=newSize" json:"new_size,omitempty"`
}

func (x *Ext4BeginOrderedTruncateFtraceEvent) Reset() {
	*x = Ext4BeginOrderedTruncateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4BeginOrderedTruncateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4BeginOrderedTruncateFtraceEvent) ProtoMessage() {}

func (x *Ext4BeginOrderedTruncateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4BeginOrderedTruncateFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4BeginOrderedTruncateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{115}
}

func (x *Ext4BeginOrderedTruncateFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4BeginOrderedTruncateFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4BeginOrderedTruncateFtraceEvent) GetNewSize() int64 {
	if x != nil && x.NewSize != nil {
		return *x.NewSize
	}
	return 0
}

type Ext4CollapseRangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Offset *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Len    *int64  `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4CollapseRangeFtraceEvent) Reset() {
	*x = Ext4CollapseRangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4CollapseRangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4CollapseRangeFtraceEvent) ProtoMessage() {}

func (x *Ext4CollapseRangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4CollapseRangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4CollapseRangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{116}
}

func (x *Ext4CollapseRangeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4CollapseRangeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4CollapseRangeFtraceEvent) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4CollapseRangeFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4DaReleaseSpaceFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev                 *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino                 *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	IBlocks             *uint64 `protobuf:"varint,3,opt,name=i_blocks,json=iBlocks" json:"i_blocks,omitempty"`
	FreedBlocks         *int32  `protobuf:"varint,4,opt,name=freed_blocks,json=freedBlocks" json:"freed_blocks,omitempty"`
	ReservedDataBlocks  *int32  `protobuf:"varint,5,opt,name=reserved_data_blocks,json=reservedDataBlocks" json:"reserved_data_blocks,omitempty"`
	ReservedMetaBlocks  *int32  `protobuf:"varint,6,opt,name=reserved_meta_blocks,json=reservedMetaBlocks" json:"reserved_meta_blocks,omitempty"`
	AllocatedMetaBlocks *int32  `protobuf:"varint,7,opt,name=allocated_meta_blocks,json=allocatedMetaBlocks" json:"allocated_meta_blocks,omitempty"`
	Mode                *uint32 `protobuf:"varint,8,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4DaReleaseSpaceFtraceEvent) Reset() {
	*x = Ext4DaReleaseSpaceFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaReleaseSpaceFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaReleaseSpaceFtraceEvent) ProtoMessage() {}

func (x *Ext4DaReleaseSpaceFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaReleaseSpaceFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaReleaseSpaceFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{117}
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetIBlocks() uint64 {
	if x != nil && x.IBlocks != nil {
		return *x.IBlocks
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetFreedBlocks() int32 {
	if x != nil && x.FreedBlocks != nil {
		return *x.FreedBlocks
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetReservedDataBlocks() int32 {
	if x != nil && x.ReservedDataBlocks != nil {
		return *x.ReservedDataBlocks
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetReservedMetaBlocks() int32 {
	if x != nil && x.ReservedMetaBlocks != nil {
		return *x.ReservedMetaBlocks
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetAllocatedMetaBlocks() int32 {
	if x != nil && x.AllocatedMetaBlocks != nil {
		return *x.AllocatedMetaBlocks
	}
	return 0
}

func (x *Ext4DaReleaseSpaceFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4DaReserveSpaceFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev                *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino                *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	IBlocks            *uint64 `protobuf:"varint,3,opt,name=i_blocks,json=iBlocks" json:"i_blocks,omitempty"`
	ReservedDataBlocks *int32  `protobuf:"varint,4,opt,name=reserved_data_blocks,json=reservedDataBlocks" json:"reserved_data_blocks,omitempty"`
	ReservedMetaBlocks *int32  `protobuf:"varint,5,opt,name=reserved_meta_blocks,json=reservedMetaBlocks" json:"reserved_meta_blocks,omitempty"`
	Mode               *uint32 `protobuf:"varint,6,opt,name=mode" json:"mode,omitempty"`
	MdNeeded           *int32  `protobuf:"varint,7,opt,name=md_needed,json=mdNeeded" json:"md_needed,omitempty"`
}

func (x *Ext4DaReserveSpaceFtraceEvent) Reset() {
	*x = Ext4DaReserveSpaceFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaReserveSpaceFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaReserveSpaceFtraceEvent) ProtoMessage() {}

func (x *Ext4DaReserveSpaceFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaReserveSpaceFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaReserveSpaceFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{118}
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetIBlocks() uint64 {
	if x != nil && x.IBlocks != nil {
		return *x.IBlocks
	}
	return 0
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetReservedDataBlocks() int32 {
	if x != nil && x.ReservedDataBlocks != nil {
		return *x.ReservedDataBlocks
	}
	return 0
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetReservedMetaBlocks() int32 {
	if x != nil && x.ReservedMetaBlocks != nil {
		return *x.ReservedMetaBlocks
	}
	return 0
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *Ext4DaReserveSpaceFtraceEvent) GetMdNeeded() int32 {
	if x != nil && x.MdNeeded != nil {
		return *x.MdNeeded
	}
	return 0
}

type Ext4DaUpdateReserveSpaceFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev                 *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino                 *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	IBlocks             *uint64 `protobuf:"varint,3,opt,name=i_blocks,json=iBlocks" json:"i_blocks,omitempty"`
	UsedBlocks          *int32  `protobuf:"varint,4,opt,name=used_blocks,json=usedBlocks" json:"used_blocks,omitempty"`
	ReservedDataBlocks  *int32  `protobuf:"varint,5,opt,name=reserved_data_blocks,json=reservedDataBlocks" json:"reserved_data_blocks,omitempty"`
	ReservedMetaBlocks  *int32  `protobuf:"varint,6,opt,name=reserved_meta_blocks,json=reservedMetaBlocks" json:"reserved_meta_blocks,omitempty"`
	AllocatedMetaBlocks *int32  `protobuf:"varint,7,opt,name=allocated_meta_blocks,json=allocatedMetaBlocks" json:"allocated_meta_blocks,omitempty"`
	QuotaClaim          *int32  `protobuf:"varint,8,opt,name=quota_claim,json=quotaClaim" json:"quota_claim,omitempty"`
	Mode                *uint32 `protobuf:"varint,9,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) Reset() {
	*x = Ext4DaUpdateReserveSpaceFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaUpdateReserveSpaceFtraceEvent) ProtoMessage() {}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaUpdateReserveSpaceFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaUpdateReserveSpaceFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{119}
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetIBlocks() uint64 {
	if x != nil && x.IBlocks != nil {
		return *x.IBlocks
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetUsedBlocks() int32 {
	if x != nil && x.UsedBlocks != nil {
		return *x.UsedBlocks
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetReservedDataBlocks() int32 {
	if x != nil && x.ReservedDataBlocks != nil {
		return *x.ReservedDataBlocks
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetReservedMetaBlocks() int32 {
	if x != nil && x.ReservedMetaBlocks != nil {
		return *x.ReservedMetaBlocks
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetAllocatedMetaBlocks() int32 {
	if x != nil && x.AllocatedMetaBlocks != nil {
		return *x.AllocatedMetaBlocks
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetQuotaClaim() int32 {
	if x != nil && x.QuotaClaim != nil {
		return *x.QuotaClaim
	}
	return 0
}

func (x *Ext4DaUpdateReserveSpaceFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4DaWritePagesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev          *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino          *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	FirstPage    *uint64 `protobuf:"varint,3,opt,name=first_page,json=firstPage" json:"first_page,omitempty"`
	NrToWrite    *int64  `protobuf:"varint,4,opt,name=nr_to_write,json=nrToWrite" json:"nr_to_write,omitempty"`
	SyncMode     *int32  `protobuf:"varint,5,opt,name=sync_mode,json=syncMode" json:"sync_mode,omitempty"`
	BBlocknr     *uint64 `protobuf:"varint,6,opt,name=b_blocknr,json=bBlocknr" json:"b_blocknr,omitempty"`
	BSize        *uint32 `protobuf:"varint,7,opt,name=b_size,json=bSize" json:"b_size,omitempty"`
	BState       *uint32 `protobuf:"varint,8,opt,name=b_state,json=bState" json:"b_state,omitempty"`
	IoDone       *int32  `protobuf:"varint,9,opt,name=io_done,json=ioDone" json:"io_done,omitempty"`
	PagesWritten *int32  `protobuf:"varint,10,opt,name=pages_written,json=pagesWritten" json:"pages_written,omitempty"`
}

func (x *Ext4DaWritePagesFtraceEvent) Reset() {
	*x = Ext4DaWritePagesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaWritePagesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaWritePagesFtraceEvent) ProtoMessage() {}

func (x *Ext4DaWritePagesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaWritePagesFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaWritePagesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{120}
}

func (x *Ext4DaWritePagesFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetFirstPage() uint64 {
	if x != nil && x.FirstPage != nil {
		return *x.FirstPage
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetNrToWrite() int64 {
	if x != nil && x.NrToWrite != nil {
		return *x.NrToWrite
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetSyncMode() int32 {
	if x != nil && x.SyncMode != nil {
		return *x.SyncMode
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetBBlocknr() uint64 {
	if x != nil && x.BBlocknr != nil {
		return *x.BBlocknr
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetBSize() uint32 {
	if x != nil && x.BSize != nil {
		return *x.BSize
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetBState() uint32 {
	if x != nil && x.BState != nil {
		return *x.BState
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetIoDone() int32 {
	if x != nil && x.IoDone != nil {
		return *x.IoDone
	}
	return 0
}

func (x *Ext4DaWritePagesFtraceEvent) GetPagesWritten() int32 {
	if x != nil && x.PagesWritten != nil {
		return *x.PagesWritten
	}
	return 0
}

type Ext4DaWritePagesExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk  *uint64 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Flags *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4DaWritePagesExtentFtraceEvent) Reset() {
	*x = Ext4DaWritePagesExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DaWritePagesExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DaWritePagesExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4DaWritePagesExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DaWritePagesExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DaWritePagesExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{121}
}

func (x *Ext4DaWritePagesExtentFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DaWritePagesExtentFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DaWritePagesExtentFtraceEvent) GetLblk() uint64 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4DaWritePagesExtentFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4DaWritePagesExtentFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4DirectIOEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Rw  *int32  `protobuf:"varint,5,opt,name=rw" json:"rw,omitempty"`
}

func (x *Ext4DirectIOEnterFtraceEvent) Reset() {
	*x = Ext4DirectIOEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DirectIOEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DirectIOEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4DirectIOEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DirectIOEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DirectIOEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{122}
}

func (x *Ext4DirectIOEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DirectIOEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DirectIOEnterFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4DirectIOEnterFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4DirectIOEnterFtraceEvent) GetRw() int32 {
	if x != nil && x.Rw != nil {
		return *x.Rw
	}
	return 0
}

type Ext4DirectIOExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Rw  *int32  `protobuf:"varint,5,opt,name=rw" json:"rw,omitempty"`
	Ret *int32  `protobuf:"varint,6,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4DirectIOExitFtraceEvent) Reset() {
	*x = Ext4DirectIOExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DirectIOExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DirectIOExitFtraceEvent) ProtoMessage() {}

func (x *Ext4DirectIOExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DirectIOExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DirectIOExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{123}
}

func (x *Ext4DirectIOExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DirectIOExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DirectIOExitFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4DirectIOExitFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4DirectIOExitFtraceEvent) GetRw() int32 {
	if x != nil && x.Rw != nil {
		return *x.Rw
	}
	return 0
}

func (x *Ext4DirectIOExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4DiscardBlocksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Blk   *uint64 `protobuf:"varint,2,opt,name=blk" json:"blk,omitempty"`
	Count *uint64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *Ext4DiscardBlocksFtraceEvent) Reset() {
	*x = Ext4DiscardBlocksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DiscardBlocksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DiscardBlocksFtraceEvent) ProtoMessage() {}

func (x *Ext4DiscardBlocksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DiscardBlocksFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DiscardBlocksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{124}
}

func (x *Ext4DiscardBlocksFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DiscardBlocksFtraceEvent) GetBlk() uint64 {
	if x != nil && x.Blk != nil {
		return *x.Blk
	}
	return 0
}

func (x *Ext4DiscardBlocksFtraceEvent) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Ext4DiscardPreallocationsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
}

func (x *Ext4DiscardPreallocationsFtraceEvent) Reset() {
	*x = Ext4DiscardPreallocationsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DiscardPreallocationsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DiscardPreallocationsFtraceEvent) ProtoMessage() {}

func (x *Ext4DiscardPreallocationsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DiscardPreallocationsFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DiscardPreallocationsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{125}
}

func (x *Ext4DiscardPreallocationsFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DiscardPreallocationsFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

type Ext4DropInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Drop *int32  `protobuf:"varint,3,opt,name=drop" json:"drop,omitempty"`
}

func (x *Ext4DropInodeFtraceEvent) Reset() {
	*x = Ext4DropInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4DropInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4DropInodeFtraceEvent) ProtoMessage() {}

func (x *Ext4DropInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4DropInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4DropInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{126}
}

func (x *Ext4DropInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4DropInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4DropInodeFtraceEvent) GetDrop() int32 {
	if x != nil && x.Drop != nil {
		return *x.Drop
	}
	return 0
}

type Ext4EsCacheExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk   *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Pblk   *uint64 `protobuf:"varint,5,opt,name=pblk" json:"pblk,omitempty"`
	Status *uint32 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *Ext4EsCacheExtentFtraceEvent) Reset() {
	*x = Ext4EsCacheExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsCacheExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsCacheExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4EsCacheExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsCacheExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsCacheExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{127}
}

func (x *Ext4EsCacheExtentFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsCacheExtentFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsCacheExtentFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4EsCacheExtentFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4EsCacheExtentFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4EsCacheExtentFtraceEvent) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type Ext4EsFindDelayedExtentRangeEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
}

func (x *Ext4EsFindDelayedExtentRangeEnterFtraceEvent) Reset() {
	*x = Ext4EsFindDelayedExtentRangeEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsFindDelayedExtentRangeEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsFindDelayedExtentRangeEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4EsFindDelayedExtentRangeEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsFindDelayedExtentRangeEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsFindDelayedExtentRangeEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{128}
}

func (x *Ext4EsFindDelayedExtentRangeEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeEnterFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

type Ext4EsFindDelayedExtentRangeExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk   *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Pblk   *uint64 `protobuf:"varint,5,opt,name=pblk" json:"pblk,omitempty"`
	Status *uint64 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) Reset() {
	*x = Ext4EsFindDelayedExtentRangeExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsFindDelayedExtentRangeExitFtraceEvent) ProtoMessage() {}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsFindDelayedExtentRangeExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsFindDelayedExtentRangeExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{129}
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4EsFindDelayedExtentRangeExitFtraceEvent) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type Ext4EsInsertExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk   *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Pblk   *uint64 `protobuf:"varint,5,opt,name=pblk" json:"pblk,omitempty"`
	Status *uint64 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
}

func (x *Ext4EsInsertExtentFtraceEvent) Reset() {
	*x = Ext4EsInsertExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsInsertExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsInsertExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4EsInsertExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsInsertExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsInsertExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{130}
}

func (x *Ext4EsInsertExtentFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsInsertExtentFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsInsertExtentFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4EsInsertExtentFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4EsInsertExtentFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4EsInsertExtentFtraceEvent) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type Ext4EsLookupExtentEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
}

func (x *Ext4EsLookupExtentEnterFtraceEvent) Reset() {
	*x = Ext4EsLookupExtentEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsLookupExtentEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsLookupExtentEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4EsLookupExtentEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsLookupExtentEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsLookupExtentEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{131}
}

func (x *Ext4EsLookupExtentEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsLookupExtentEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsLookupExtentEnterFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

type Ext4EsLookupExtentExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk   *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Pblk   *uint64 `protobuf:"varint,5,opt,name=pblk" json:"pblk,omitempty"`
	Status *uint64 `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	Found  *int32  `protobuf:"varint,7,opt,name=found" json:"found,omitempty"`
}

func (x *Ext4EsLookupExtentExitFtraceEvent) Reset() {
	*x = Ext4EsLookupExtentExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsLookupExtentExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsLookupExtentExitFtraceEvent) ProtoMessage() {}

func (x *Ext4EsLookupExtentExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsLookupExtentExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsLookupExtentExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{132}
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetStatus() uint64 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *Ext4EsLookupExtentExitFtraceEvent) GetFound() int32 {
	if x != nil && x.Found != nil {
		return *x.Found
	}
	return 0
}

type Ext4EsRemoveExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk *int64  `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len  *int64  `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4EsRemoveExtentFtraceEvent) Reset() {
	*x = Ext4EsRemoveExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsRemoveExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsRemoveExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4EsRemoveExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsRemoveExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsRemoveExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{133}
}

func (x *Ext4EsRemoveExtentFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsRemoveExtentFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EsRemoveExtentFtraceEvent) GetLblk() int64 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4EsRemoveExtentFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4EsShrinkFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	NrShrunk  *int32  `protobuf:"varint,2,opt,name=nr_shrunk,json=nrShrunk" json:"nr_shrunk,omitempty"`
	ScanTime  *uint64 `protobuf:"varint,3,opt,name=scan_time,json=scanTime" json:"scan_time,omitempty"`
	NrSkipped *int32  `protobuf:"varint,4,opt,name=nr_skipped,json=nrSkipped" json:"nr_skipped,omitempty"`
	Retried   *int32  `protobuf:"varint,5,opt,name=retried" json:"retried,omitempty"`
}

func (x *Ext4EsShrinkFtraceEvent) Reset() {
	*x = Ext4EsShrinkFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsShrinkFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsShrinkFtraceEvent) ProtoMessage() {}

func (x *Ext4EsShrinkFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsShrinkFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsShrinkFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{134}
}

func (x *Ext4EsShrinkFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsShrinkFtraceEvent) GetNrShrunk() int32 {
	if x != nil && x.NrShrunk != nil {
		return *x.NrShrunk
	}
	return 0
}

func (x *Ext4EsShrinkFtraceEvent) GetScanTime() uint64 {
	if x != nil && x.ScanTime != nil {
		return *x.ScanTime
	}
	return 0
}

func (x *Ext4EsShrinkFtraceEvent) GetNrSkipped() int32 {
	if x != nil && x.NrSkipped != nil {
		return *x.NrSkipped
	}
	return 0
}

func (x *Ext4EsShrinkFtraceEvent) GetRetried() int32 {
	if x != nil && x.Retried != nil {
		return *x.Retried
	}
	return 0
}

type Ext4EsShrinkCountFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	NrToScan *int32  `protobuf:"varint,2,opt,name=nr_to_scan,json=nrToScan" json:"nr_to_scan,omitempty"`
	CacheCnt *int32  `protobuf:"varint,3,opt,name=cache_cnt,json=cacheCnt" json:"cache_cnt,omitempty"`
}

func (x *Ext4EsShrinkCountFtraceEvent) Reset() {
	*x = Ext4EsShrinkCountFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsShrinkCountFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsShrinkCountFtraceEvent) ProtoMessage() {}

func (x *Ext4EsShrinkCountFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsShrinkCountFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsShrinkCountFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{135}
}

func (x *Ext4EsShrinkCountFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsShrinkCountFtraceEvent) GetNrToScan() int32 {
	if x != nil && x.NrToScan != nil {
		return *x.NrToScan
	}
	return 0
}

func (x *Ext4EsShrinkCountFtraceEvent) GetCacheCnt() int32 {
	if x != nil && x.CacheCnt != nil {
		return *x.CacheCnt
	}
	return 0
}

type Ext4EsShrinkScanEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	NrToScan *int32  `protobuf:"varint,2,opt,name=nr_to_scan,json=nrToScan" json:"nr_to_scan,omitempty"`
	CacheCnt *int32  `protobuf:"varint,3,opt,name=cache_cnt,json=cacheCnt" json:"cache_cnt,omitempty"`
}

func (x *Ext4EsShrinkScanEnterFtraceEvent) Reset() {
	*x = Ext4EsShrinkScanEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsShrinkScanEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsShrinkScanEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4EsShrinkScanEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsShrinkScanEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsShrinkScanEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{136}
}

func (x *Ext4EsShrinkScanEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsShrinkScanEnterFtraceEvent) GetNrToScan() int32 {
	if x != nil && x.NrToScan != nil {
		return *x.NrToScan
	}
	return 0
}

func (x *Ext4EsShrinkScanEnterFtraceEvent) GetCacheCnt() int32 {
	if x != nil && x.CacheCnt != nil {
		return *x.CacheCnt
	}
	return 0
}

type Ext4EsShrinkScanExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	NrShrunk *int32  `protobuf:"varint,2,opt,name=nr_shrunk,json=nrShrunk" json:"nr_shrunk,omitempty"`
	CacheCnt *int32  `protobuf:"varint,3,opt,name=cache_cnt,json=cacheCnt" json:"cache_cnt,omitempty"`
}

func (x *Ext4EsShrinkScanExitFtraceEvent) Reset() {
	*x = Ext4EsShrinkScanExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EsShrinkScanExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EsShrinkScanExitFtraceEvent) ProtoMessage() {}

func (x *Ext4EsShrinkScanExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EsShrinkScanExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EsShrinkScanExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{137}
}

func (x *Ext4EsShrinkScanExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EsShrinkScanExitFtraceEvent) GetNrShrunk() int32 {
	if x != nil && x.NrShrunk != nil {
		return *x.NrShrunk
	}
	return 0
}

func (x *Ext4EsShrinkScanExitFtraceEvent) GetCacheCnt() int32 {
	if x != nil && x.CacheCnt != nil {
		return *x.CacheCnt
	}
	return 0
}

type Ext4EvictInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Nlink *int32  `protobuf:"varint,3,opt,name=nlink" json:"nlink,omitempty"`
}

func (x *Ext4EvictInodeFtraceEvent) Reset() {
	*x = Ext4EvictInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4EvictInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4EvictInodeFtraceEvent) ProtoMessage() {}

func (x *Ext4EvictInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4EvictInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4EvictInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{138}
}

func (x *Ext4EvictInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4EvictInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4EvictInodeFtraceEvent) GetNlink() int32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

type Ext4ExtConvertToInitializedEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	MLblk *uint32 `protobuf:"varint,3,opt,name=m_lblk,json=mLblk" json:"m_lblk,omitempty"`
	MLen  *uint32 `protobuf:"varint,4,opt,name=m_len,json=mLen" json:"m_len,omitempty"`
	ULblk *uint32 `protobuf:"varint,5,opt,name=u_lblk,json=uLblk" json:"u_lblk,omitempty"`
	ULen  *uint32 `protobuf:"varint,6,opt,name=u_len,json=uLen" json:"u_len,omitempty"`
	UPblk *uint64 `protobuf:"varint,7,opt,name=u_pblk,json=uPblk" json:"u_pblk,omitempty"`
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) Reset() {
	*x = Ext4ExtConvertToInitializedEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtConvertToInitializedEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtConvertToInitializedEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtConvertToInitializedEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{139}
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetMLblk() uint32 {
	if x != nil && x.MLblk != nil {
		return *x.MLblk
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetMLen() uint32 {
	if x != nil && x.MLen != nil {
		return *x.MLen
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetULblk() uint32 {
	if x != nil && x.ULblk != nil {
		return *x.ULblk
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetULen() uint32 {
	if x != nil && x.ULen != nil {
		return *x.ULen
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedEnterFtraceEvent) GetUPblk() uint64 {
	if x != nil && x.UPblk != nil {
		return *x.UPblk
	}
	return 0
}

type Ext4ExtConvertToInitializedFastpathFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	MLblk *uint32 `protobuf:"varint,3,opt,name=m_lblk,json=mLblk" json:"m_lblk,omitempty"`
	MLen  *uint32 `protobuf:"varint,4,opt,name=m_len,json=mLen" json:"m_len,omitempty"`
	ULblk *uint32 `protobuf:"varint,5,opt,name=u_lblk,json=uLblk" json:"u_lblk,omitempty"`
	ULen  *uint32 `protobuf:"varint,6,opt,name=u_len,json=uLen" json:"u_len,omitempty"`
	UPblk *uint64 `protobuf:"varint,7,opt,name=u_pblk,json=uPblk" json:"u_pblk,omitempty"`
	ILblk *uint32 `protobuf:"varint,8,opt,name=i_lblk,json=iLblk" json:"i_lblk,omitempty"`
	ILen  *uint32 `protobuf:"varint,9,opt,name=i_len,json=iLen" json:"i_len,omitempty"`
	IPblk *uint64 `protobuf:"varint,10,opt,name=i_pblk,json=iPblk" json:"i_pblk,omitempty"`
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) Reset() {
	*x = Ext4ExtConvertToInitializedFastpathFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtConvertToInitializedFastpathFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtConvertToInitializedFastpathFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtConvertToInitializedFastpathFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{140}
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetMLblk() uint32 {
	if x != nil && x.MLblk != nil {
		return *x.MLblk
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetMLen() uint32 {
	if x != nil && x.MLen != nil {
		return *x.MLen
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetULblk() uint32 {
	if x != nil && x.ULblk != nil {
		return *x.ULblk
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetULen() uint32 {
	if x != nil && x.ULen != nil {
		return *x.ULen
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetUPblk() uint64 {
	if x != nil && x.UPblk != nil {
		return *x.UPblk
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetILblk() uint32 {
	if x != nil && x.ILblk != nil {
		return *x.ILblk
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetILen() uint32 {
	if x != nil && x.ILen != nil {
		return *x.ILen
	}
	return 0
}

func (x *Ext4ExtConvertToInitializedFastpathFtraceEvent) GetIPblk() uint64 {
	if x != nil && x.IPblk != nil {
		return *x.IPblk
	}
	return 0
}

type Ext4ExtHandleUnwrittenExtentsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino       *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Flags     *int32  `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Lblk      *uint32 `protobuf:"varint,4,opt,name=lblk" json:"lblk,omitempty"`
	Pblk      *uint64 `protobuf:"varint,5,opt,name=pblk" json:"pblk,omitempty"`
	Len       *uint32 `protobuf:"varint,6,opt,name=len" json:"len,omitempty"`
	Allocated *uint32 `protobuf:"varint,7,opt,name=allocated" json:"allocated,omitempty"`
	Newblk    *uint64 `protobuf:"varint,8,opt,name=newblk" json:"newblk,omitempty"`
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) Reset() {
	*x = Ext4ExtHandleUnwrittenExtentsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtHandleUnwrittenExtentsFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtHandleUnwrittenExtentsFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtHandleUnwrittenExtentsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{141}
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetAllocated() uint32 {
	if x != nil && x.Allocated != nil {
		return *x.Allocated
	}
	return 0
}

func (x *Ext4ExtHandleUnwrittenExtentsFtraceEvent) GetNewblk() uint64 {
	if x != nil && x.Newblk != nil {
		return *x.Newblk
	}
	return 0
}

type Ext4ExtInCacheFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Ret  *int32  `protobuf:"varint,4,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4ExtInCacheFtraceEvent) Reset() {
	*x = Ext4ExtInCacheFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtInCacheFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtInCacheFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtInCacheFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtInCacheFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtInCacheFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{142}
}

func (x *Ext4ExtInCacheFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtInCacheFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtInCacheFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4ExtInCacheFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4ExtLoadExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pblk *uint64 `protobuf:"varint,3,opt,name=pblk" json:"pblk,omitempty"`
	Lblk *uint32 `protobuf:"varint,4,opt,name=lblk" json:"lblk,omitempty"`
}

func (x *Ext4ExtLoadExtentFtraceEvent) Reset() {
	*x = Ext4ExtLoadExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtLoadExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtLoadExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtLoadExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtLoadExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtLoadExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{143}
}

func (x *Ext4ExtLoadExtentFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtLoadExtentFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtLoadExtentFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4ExtLoadExtentFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

type Ext4ExtMapBlocksEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk  *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Flags *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) Reset() {
	*x = Ext4ExtMapBlocksEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtMapBlocksEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtMapBlocksEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtMapBlocksEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{144}
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4ExtMapBlocksEnterFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4ExtMapBlocksExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Flags  *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Pblk   *uint64 `protobuf:"varint,4,opt,name=pblk" json:"pblk,omitempty"`
	Lblk   *uint32 `protobuf:"varint,5,opt,name=lblk" json:"lblk,omitempty"`
	Len    *uint32 `protobuf:"varint,6,opt,name=len" json:"len,omitempty"`
	Mflags *uint32 `protobuf:"varint,7,opt,name=mflags" json:"mflags,omitempty"`
	Ret    *int32  `protobuf:"varint,8,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) Reset() {
	*x = Ext4ExtMapBlocksExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtMapBlocksExitFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtMapBlocksExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtMapBlocksExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtMapBlocksExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{145}
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetMflags() uint32 {
	if x != nil && x.Mflags != nil {
		return *x.Mflags
	}
	return 0
}

func (x *Ext4ExtMapBlocksExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4ExtPutInCacheFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk  *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Start *uint64 `protobuf:"varint,5,opt,name=start" json:"start,omitempty"`
}

func (x *Ext4ExtPutInCacheFtraceEvent) Reset() {
	*x = Ext4ExtPutInCacheFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtPutInCacheFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtPutInCacheFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtPutInCacheFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtPutInCacheFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtPutInCacheFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{146}
}

func (x *Ext4ExtPutInCacheFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtPutInCacheFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtPutInCacheFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4ExtPutInCacheFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4ExtPutInCacheFtraceEvent) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

type Ext4ExtRemoveSpaceFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Start *uint32 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End   *uint32 `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
	Depth *int32  `protobuf:"varint,5,opt,name=depth" json:"depth,omitempty"`
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) Reset() {
	*x = Ext4ExtRemoveSpaceFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtRemoveSpaceFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtRemoveSpaceFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtRemoveSpaceFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtRemoveSpaceFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{147}
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceFtraceEvent) GetDepth() int32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

type Ext4ExtRemoveSpaceDoneFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino       *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Start     *uint32 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End       *uint32 `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
	Depth     *int32  `protobuf:"varint,5,opt,name=depth" json:"depth,omitempty"`
	Partial   *int64  `protobuf:"varint,6,opt,name=partial" json:"partial,omitempty"`
	EhEntries *uint32 `protobuf:"varint,7,opt,name=eh_entries,json=ehEntries" json:"eh_entries,omitempty"`
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) Reset() {
	*x = Ext4ExtRemoveSpaceDoneFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtRemoveSpaceDoneFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtRemoveSpaceDoneFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtRemoveSpaceDoneFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{148}
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetEnd() uint32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetDepth() int32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetPartial() int64 {
	if x != nil && x.Partial != nil {
		return *x.Partial
	}
	return 0
}

func (x *Ext4ExtRemoveSpaceDoneFtraceEvent) GetEhEntries() uint32 {
	if x != nil && x.EhEntries != nil {
		return *x.EhEntries
	}
	return 0
}

type Ext4ExtRmIdxFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pblk *uint64 `protobuf:"varint,3,opt,name=pblk" json:"pblk,omitempty"`
}

func (x *Ext4ExtRmIdxFtraceEvent) Reset() {
	*x = Ext4ExtRmIdxFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtRmIdxFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtRmIdxFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtRmIdxFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtRmIdxFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtRmIdxFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{149}
}

func (x *Ext4ExtRmIdxFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtRmIdxFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtRmIdxFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

type Ext4ExtRmLeafFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Partial *int64  `protobuf:"varint,3,opt,name=partial" json:"partial,omitempty"`
	Start   *uint32 `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	EeLblk  *uint32 `protobuf:"varint,5,opt,name=ee_lblk,json=eeLblk" json:"ee_lblk,omitempty"`
	EePblk  *uint64 `protobuf:"varint,6,opt,name=ee_pblk,json=eePblk" json:"ee_pblk,omitempty"`
	EeLen   *int32  `protobuf:"varint,7,opt,name=ee_len,json=eeLen" json:"ee_len,omitempty"`
}

func (x *Ext4ExtRmLeafFtraceEvent) Reset() {
	*x = Ext4ExtRmLeafFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtRmLeafFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtRmLeafFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtRmLeafFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtRmLeafFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtRmLeafFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{150}
}

func (x *Ext4ExtRmLeafFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtRmLeafFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtRmLeafFtraceEvent) GetPartial() int64 {
	if x != nil && x.Partial != nil {
		return *x.Partial
	}
	return 0
}

func (x *Ext4ExtRmLeafFtraceEvent) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Ext4ExtRmLeafFtraceEvent) GetEeLblk() uint32 {
	if x != nil && x.EeLblk != nil {
		return *x.EeLblk
	}
	return 0
}

func (x *Ext4ExtRmLeafFtraceEvent) GetEePblk() uint64 {
	if x != nil && x.EePblk != nil {
		return *x.EePblk
	}
	return 0
}

func (x *Ext4ExtRmLeafFtraceEvent) GetEeLen() int32 {
	if x != nil && x.EeLen != nil {
		return *x.EeLen
	}
	return 0
}

type Ext4ExtShowExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pblk *uint64 `protobuf:"varint,3,opt,name=pblk" json:"pblk,omitempty"`
	Lblk *uint32 `protobuf:"varint,4,opt,name=lblk" json:"lblk,omitempty"`
	Len  *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4ExtShowExtentFtraceEvent) Reset() {
	*x = Ext4ExtShowExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ExtShowExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ExtShowExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4ExtShowExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ExtShowExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ExtShowExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{151}
}

func (x *Ext4ExtShowExtentFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ExtShowExtentFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ExtShowExtentFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4ExtShowExtentFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4ExtShowExtentFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4FallocateEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Offset *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Len    *int64  `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Mode   *int32  `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
	Pos    *int64  `protobuf:"varint,6,opt,name=pos" json:"pos,omitempty"`
}

func (x *Ext4FallocateEnterFtraceEvent) Reset() {
	*x = Ext4FallocateEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4FallocateEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4FallocateEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4FallocateEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4FallocateEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4FallocateEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{152}
}

func (x *Ext4FallocateEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4FallocateEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4FallocateEnterFtraceEvent) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4FallocateEnterFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4FallocateEnterFtraceEvent) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *Ext4FallocateEnterFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

type Ext4FallocateExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos    *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Blocks *uint32 `protobuf:"varint,4,opt,name=blocks" json:"blocks,omitempty"`
	Ret    *int32  `protobuf:"varint,5,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4FallocateExitFtraceEvent) Reset() {
	*x = Ext4FallocateExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4FallocateExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4FallocateExitFtraceEvent) ProtoMessage() {}

func (x *Ext4FallocateExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4FallocateExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4FallocateExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{153}
}

func (x *Ext4FallocateExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4FallocateExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4FallocateExitFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4FallocateExitFtraceEvent) GetBlocks() uint32 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *Ext4FallocateExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4FindDelallocRangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino      *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	From     *uint32 `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	To       *uint32 `protobuf:"varint,4,opt,name=to" json:"to,omitempty"`
	Reverse  *int32  `protobuf:"varint,5,opt,name=reverse" json:"reverse,omitempty"`
	Found    *int32  `protobuf:"varint,6,opt,name=found" json:"found,omitempty"`
	FoundBlk *uint32 `protobuf:"varint,7,opt,name=found_blk,json=foundBlk" json:"found_blk,omitempty"`
}

func (x *Ext4FindDelallocRangeFtraceEvent) Reset() {
	*x = Ext4FindDelallocRangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4FindDelallocRangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4FindDelallocRangeFtraceEvent) ProtoMessage() {}

func (x *Ext4FindDelallocRangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4FindDelallocRangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4FindDelallocRangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{154}
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetFrom() uint32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetTo() uint32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetReverse() int32 {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return 0
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetFound() int32 {
	if x != nil && x.Found != nil {
		return *x.Found
	}
	return 0
}

func (x *Ext4FindDelallocRangeFtraceEvent) GetFoundBlk() uint32 {
	if x != nil && x.FoundBlk != nil {
		return *x.FoundBlk
	}
	return 0
}

type Ext4ForgetFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev        *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino        *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Block      *uint64 `protobuf:"varint,3,opt,name=block" json:"block,omitempty"`
	IsMetadata *int32  `protobuf:"varint,4,opt,name=is_metadata,json=isMetadata" json:"is_metadata,omitempty"`
	Mode       *uint32 `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4ForgetFtraceEvent) Reset() {
	*x = Ext4ForgetFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ForgetFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ForgetFtraceEvent) ProtoMessage() {}

func (x *Ext4ForgetFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ForgetFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ForgetFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{155}
}

func (x *Ext4ForgetFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ForgetFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ForgetFtraceEvent) GetBlock() uint64 {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return 0
}

func (x *Ext4ForgetFtraceEvent) GetIsMetadata() int32 {
	if x != nil && x.IsMetadata != nil {
		return *x.IsMetadata
	}
	return 0
}

func (x *Ext4ForgetFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4FreeBlocksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Block *uint64 `protobuf:"varint,3,opt,name=block" json:"block,omitempty"`
	Count *uint64 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Flags *int32  `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	Mode  *uint32 `protobuf:"varint,6,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4FreeBlocksFtraceEvent) Reset() {
	*x = Ext4FreeBlocksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4FreeBlocksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4FreeBlocksFtraceEvent) ProtoMessage() {}

func (x *Ext4FreeBlocksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4FreeBlocksFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4FreeBlocksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{156}
}

func (x *Ext4FreeBlocksFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4FreeBlocksFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4FreeBlocksFtraceEvent) GetBlock() uint64 {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return 0
}

func (x *Ext4FreeBlocksFtraceEvent) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Ext4FreeBlocksFtraceEvent) GetFlags() int32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Ext4FreeBlocksFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4FreeInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Uid    *uint32 `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	Gid    *uint32 `protobuf:"varint,4,opt,name=gid" json:"gid,omitempty"`
	Blocks *uint64 `protobuf:"varint,5,opt,name=blocks" json:"blocks,omitempty"`
	Mode   *uint32 `protobuf:"varint,6,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4FreeInodeFtraceEvent) Reset() {
	*x = Ext4FreeInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4FreeInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4FreeInodeFtraceEvent) ProtoMessage() {}

func (x *Ext4FreeInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4FreeInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4FreeInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{157}
}

func (x *Ext4FreeInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4FreeInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4FreeInodeFtraceEvent) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *Ext4FreeInodeFtraceEvent) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *Ext4FreeInodeFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *Ext4FreeInodeFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4GetImpliedClusterAllocExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Flags *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Lblk  *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Pblk  *uint64 `protobuf:"varint,4,opt,name=pblk" json:"pblk,omitempty"`
	Len   *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Ret   *int32  `protobuf:"varint,6,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) Reset() {
	*x = Ext4GetImpliedClusterAllocExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4GetImpliedClusterAllocExitFtraceEvent) ProtoMessage() {}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4GetImpliedClusterAllocExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4GetImpliedClusterAllocExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{158}
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4GetImpliedClusterAllocExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4GetReservedClusterAllocFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len  *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4GetReservedClusterAllocFtraceEvent) Reset() {
	*x = Ext4GetReservedClusterAllocFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4GetReservedClusterAllocFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4GetReservedClusterAllocFtraceEvent) ProtoMessage() {}

func (x *Ext4GetReservedClusterAllocFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4GetReservedClusterAllocFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4GetReservedClusterAllocFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{159}
}

func (x *Ext4GetReservedClusterAllocFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4GetReservedClusterAllocFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4GetReservedClusterAllocFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4GetReservedClusterAllocFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4IndMapBlocksEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Lblk  *uint32 `protobuf:"varint,3,opt,name=lblk" json:"lblk,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Flags *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) Reset() {
	*x = Ext4IndMapBlocksEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4IndMapBlocksEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4IndMapBlocksEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4IndMapBlocksEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4IndMapBlocksEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{160}
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4IndMapBlocksEnterFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4IndMapBlocksExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Flags  *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Pblk   *uint64 `protobuf:"varint,4,opt,name=pblk" json:"pblk,omitempty"`
	Lblk   *uint32 `protobuf:"varint,5,opt,name=lblk" json:"lblk,omitempty"`
	Len    *uint32 `protobuf:"varint,6,opt,name=len" json:"len,omitempty"`
	Mflags *uint32 `protobuf:"varint,7,opt,name=mflags" json:"mflags,omitempty"`
	Ret    *int32  `protobuf:"varint,8,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4IndMapBlocksExitFtraceEvent) Reset() {
	*x = Ext4IndMapBlocksExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4IndMapBlocksExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4IndMapBlocksExitFtraceEvent) ProtoMessage() {}

func (x *Ext4IndMapBlocksExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4IndMapBlocksExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4IndMapBlocksExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{161}
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetPblk() uint64 {
	if x != nil && x.Pblk != nil {
		return *x.Pblk
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetLblk() uint32 {
	if x != nil && x.Lblk != nil {
		return *x.Lblk
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetMflags() uint32 {
	if x != nil && x.Mflags != nil {
		return *x.Mflags
	}
	return 0
}

func (x *Ext4IndMapBlocksExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4InsertRangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Offset *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Len    *int64  `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4InsertRangeFtraceEvent) Reset() {
	*x = Ext4InsertRangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4InsertRangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4InsertRangeFtraceEvent) ProtoMessage() {}

func (x *Ext4InsertRangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4InsertRangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4InsertRangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{162}
}

func (x *Ext4InsertRangeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4InsertRangeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4InsertRangeFtraceEvent) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4InsertRangeFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4InvalidatepageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Index  *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Offset *uint64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Length *uint32 `protobuf:"varint,5,opt,name=length" json:"length,omitempty"`
}

func (x *Ext4InvalidatepageFtraceEvent) Reset() {
	*x = Ext4InvalidatepageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4InvalidatepageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4InvalidatepageFtraceEvent) ProtoMessage() {}

func (x *Ext4InvalidatepageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4InvalidatepageFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4InvalidatepageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{163}
}

func (x *Ext4InvalidatepageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4InvalidatepageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4InvalidatepageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ext4InvalidatepageFtraceEvent) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4InvalidatepageFtraceEvent) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type Ext4JournalStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ip        *uint64 `protobuf:"varint,2,opt,name=ip" json:"ip,omitempty"`
	Blocks    *int32  `protobuf:"varint,3,opt,name=blocks" json:"blocks,omitempty"`
	RsvBlocks *int32  `protobuf:"varint,4,opt,name=rsv_blocks,json=rsvBlocks" json:"rsv_blocks,omitempty"`
	Nblocks   *int32  `protobuf:"varint,5,opt,name=nblocks" json:"nblocks,omitempty"`
}

func (x *Ext4JournalStartFtraceEvent) Reset() {
	*x = Ext4JournalStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4JournalStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4JournalStartFtraceEvent) ProtoMessage() {}

func (x *Ext4JournalStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4JournalStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4JournalStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{164}
}

func (x *Ext4JournalStartFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4JournalStartFtraceEvent) GetIp() uint64 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *Ext4JournalStartFtraceEvent) GetBlocks() int32 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *Ext4JournalStartFtraceEvent) GetRsvBlocks() int32 {
	if x != nil && x.RsvBlocks != nil {
		return *x.RsvBlocks
	}
	return 0
}

func (x *Ext4JournalStartFtraceEvent) GetNblocks() int32 {
	if x != nil && x.Nblocks != nil {
		return *x.Nblocks
	}
	return 0
}

type Ext4JournalStartReservedFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ip     *uint64 `protobuf:"varint,2,opt,name=ip" json:"ip,omitempty"`
	Blocks *int32  `protobuf:"varint,3,opt,name=blocks" json:"blocks,omitempty"`
}

func (x *Ext4JournalStartReservedFtraceEvent) Reset() {
	*x = Ext4JournalStartReservedFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4JournalStartReservedFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4JournalStartReservedFtraceEvent) ProtoMessage() {}

func (x *Ext4JournalStartReservedFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4JournalStartReservedFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4JournalStartReservedFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{165}
}

func (x *Ext4JournalStartReservedFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4JournalStartReservedFtraceEvent) GetIp() uint64 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *Ext4JournalStartReservedFtraceEvent) GetBlocks() int32 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

type Ext4JournalledInvalidatepageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Index  *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Offset *uint64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Length *uint32 `protobuf:"varint,5,opt,name=length" json:"length,omitempty"`
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) Reset() {
	*x = Ext4JournalledInvalidatepageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4JournalledInvalidatepageFtraceEvent) ProtoMessage() {}

func (x *Ext4JournalledInvalidatepageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4JournalledInvalidatepageFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4JournalledInvalidatepageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{166}
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4JournalledInvalidatepageFtraceEvent) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type Ext4JournalledWriteEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos    *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Copied *uint32 `protobuf:"varint,5,opt,name=copied" json:"copied,omitempty"`
}

func (x *Ext4JournalledWriteEndFtraceEvent) Reset() {
	*x = Ext4JournalledWriteEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4JournalledWriteEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4JournalledWriteEndFtraceEvent) ProtoMessage() {}

func (x *Ext4JournalledWriteEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4JournalledWriteEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4JournalledWriteEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{167}
}

func (x *Ext4JournalledWriteEndFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4JournalledWriteEndFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4JournalledWriteEndFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4JournalledWriteEndFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4JournalledWriteEndFtraceEvent) GetCopied() uint32 {
	if x != nil && x.Copied != nil {
		return *x.Copied
	}
	return 0
}

type Ext4LoadInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
}

func (x *Ext4LoadInodeFtraceEvent) Reset() {
	*x = Ext4LoadInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4LoadInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4LoadInodeFtraceEvent) ProtoMessage() {}

func (x *Ext4LoadInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4LoadInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4LoadInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{168}
}

func (x *Ext4LoadInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4LoadInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

type Ext4LoadInodeBitmapFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Group *uint32 `protobuf:"varint,2,opt,name=group" json:"group,omitempty"`
}

func (x *Ext4LoadInodeBitmapFtraceEvent) Reset() {
	*x = Ext4LoadInodeBitmapFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4LoadInodeBitmapFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4LoadInodeBitmapFtraceEvent) ProtoMessage() {}

func (x *Ext4LoadInodeBitmapFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4LoadInodeBitmapFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4LoadInodeBitmapFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{169}
}

func (x *Ext4LoadInodeBitmapFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4LoadInodeBitmapFtraceEvent) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type Ext4MarkInodeDirtyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ip  *uint64 `protobuf:"varint,3,opt,name=ip" json:"ip,omitempty"`
}

func (x *Ext4MarkInodeDirtyFtraceEvent) Reset() {
	*x = Ext4MarkInodeDirtyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MarkInodeDirtyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MarkInodeDirtyFtraceEvent) ProtoMessage() {}

func (x *Ext4MarkInodeDirtyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MarkInodeDirtyFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MarkInodeDirtyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{170}
}

func (x *Ext4MarkInodeDirtyFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MarkInodeDirtyFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MarkInodeDirtyFtraceEvent) GetIp() uint64 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

type Ext4MbBitmapLoadFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Group *uint32 `protobuf:"varint,2,opt,name=group" json:"group,omitempty"`
}

func (x *Ext4MbBitmapLoadFtraceEvent) Reset() {
	*x = Ext4MbBitmapLoadFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbBitmapLoadFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbBitmapLoadFtraceEvent) ProtoMessage() {}

func (x *Ext4MbBitmapLoadFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbBitmapLoadFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbBitmapLoadFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{171}
}

func (x *Ext4MbBitmapLoadFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbBitmapLoadFtraceEvent) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type Ext4MbBuddyBitmapLoadFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Group *uint32 `protobuf:"varint,2,opt,name=group" json:"group,omitempty"`
}

func (x *Ext4MbBuddyBitmapLoadFtraceEvent) Reset() {
	*x = Ext4MbBuddyBitmapLoadFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbBuddyBitmapLoadFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbBuddyBitmapLoadFtraceEvent) ProtoMessage() {}

func (x *Ext4MbBuddyBitmapLoadFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbBuddyBitmapLoadFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbBuddyBitmapLoadFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{172}
}

func (x *Ext4MbBuddyBitmapLoadFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbBuddyBitmapLoadFtraceEvent) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type Ext4MbDiscardPreallocationsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Needed *int32  `protobuf:"varint,2,opt,name=needed" json:"needed,omitempty"`
}

func (x *Ext4MbDiscardPreallocationsFtraceEvent) Reset() {
	*x = Ext4MbDiscardPreallocationsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbDiscardPreallocationsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbDiscardPreallocationsFtraceEvent) ProtoMessage() {}

func (x *Ext4MbDiscardPreallocationsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbDiscardPreallocationsFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbDiscardPreallocationsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{173}
}

func (x *Ext4MbDiscardPreallocationsFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbDiscardPreallocationsFtraceEvent) GetNeeded() int32 {
	if x != nil && x.Needed != nil {
		return *x.Needed
	}
	return 0
}

type Ext4MbNewGroupPaFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino      *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	PaPstart *uint64 `protobuf:"varint,3,opt,name=pa_pstart,json=paPstart" json:"pa_pstart,omitempty"`
	PaLstart *uint64 `protobuf:"varint,4,opt,name=pa_lstart,json=paLstart" json:"pa_lstart,omitempty"`
	PaLen    *uint32 `protobuf:"varint,5,opt,name=pa_len,json=paLen" json:"pa_len,omitempty"`
}

func (x *Ext4MbNewGroupPaFtraceEvent) Reset() {
	*x = Ext4MbNewGroupPaFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbNewGroupPaFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbNewGroupPaFtraceEvent) ProtoMessage() {}

func (x *Ext4MbNewGroupPaFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbNewGroupPaFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbNewGroupPaFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{174}
}

func (x *Ext4MbNewGroupPaFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbNewGroupPaFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MbNewGroupPaFtraceEvent) GetPaPstart() uint64 {
	if x != nil && x.PaPstart != nil {
		return *x.PaPstart
	}
	return 0
}

func (x *Ext4MbNewGroupPaFtraceEvent) GetPaLstart() uint64 {
	if x != nil && x.PaLstart != nil {
		return *x.PaLstart
	}
	return 0
}

func (x *Ext4MbNewGroupPaFtraceEvent) GetPaLen() uint32 {
	if x != nil && x.PaLen != nil {
		return *x.PaLen
	}
	return 0
}

type Ext4MbNewInodePaFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino      *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	PaPstart *uint64 `protobuf:"varint,3,opt,name=pa_pstart,json=paPstart" json:"pa_pstart,omitempty"`
	PaLstart *uint64 `protobuf:"varint,4,opt,name=pa_lstart,json=paLstart" json:"pa_lstart,omitempty"`
	PaLen    *uint32 `protobuf:"varint,5,opt,name=pa_len,json=paLen" json:"pa_len,omitempty"`
}

func (x *Ext4MbNewInodePaFtraceEvent) Reset() {
	*x = Ext4MbNewInodePaFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbNewInodePaFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbNewInodePaFtraceEvent) ProtoMessage() {}

func (x *Ext4MbNewInodePaFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbNewInodePaFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbNewInodePaFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{175}
}

func (x *Ext4MbNewInodePaFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbNewInodePaFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MbNewInodePaFtraceEvent) GetPaPstart() uint64 {
	if x != nil && x.PaPstart != nil {
		return *x.PaPstart
	}
	return 0
}

func (x *Ext4MbNewInodePaFtraceEvent) GetPaLstart() uint64 {
	if x != nil && x.PaLstart != nil {
		return *x.PaLstart
	}
	return 0
}

func (x *Ext4MbNewInodePaFtraceEvent) GetPaLen() uint32 {
	if x != nil && x.PaLen != nil {
		return *x.PaLen
	}
	return 0
}

type Ext4MbReleaseGroupPaFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	PaPstart *uint64 `protobuf:"varint,2,opt,name=pa_pstart,json=paPstart" json:"pa_pstart,omitempty"`
	PaLen    *uint32 `protobuf:"varint,3,opt,name=pa_len,json=paLen" json:"pa_len,omitempty"`
}

func (x *Ext4MbReleaseGroupPaFtraceEvent) Reset() {
	*x = Ext4MbReleaseGroupPaFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbReleaseGroupPaFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbReleaseGroupPaFtraceEvent) ProtoMessage() {}

func (x *Ext4MbReleaseGroupPaFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbReleaseGroupPaFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbReleaseGroupPaFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{176}
}

func (x *Ext4MbReleaseGroupPaFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbReleaseGroupPaFtraceEvent) GetPaPstart() uint64 {
	if x != nil && x.PaPstart != nil {
		return *x.PaPstart
	}
	return 0
}

func (x *Ext4MbReleaseGroupPaFtraceEvent) GetPaLen() uint32 {
	if x != nil && x.PaLen != nil {
		return *x.PaLen
	}
	return 0
}

type Ext4MbReleaseInodePaFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Block *uint64 `protobuf:"varint,3,opt,name=block" json:"block,omitempty"`
	Count *uint32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (x *Ext4MbReleaseInodePaFtraceEvent) Reset() {
	*x = Ext4MbReleaseInodePaFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MbReleaseInodePaFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MbReleaseInodePaFtraceEvent) ProtoMessage() {}

func (x *Ext4MbReleaseInodePaFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MbReleaseInodePaFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MbReleaseInodePaFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{177}
}

func (x *Ext4MbReleaseInodePaFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MbReleaseInodePaFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MbReleaseInodePaFtraceEvent) GetBlock() uint64 {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return 0
}

func (x *Ext4MbReleaseInodePaFtraceEvent) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Ext4MballocAllocFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev           *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino           *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	OrigLogical   *uint32 `protobuf:"varint,3,opt,name=orig_logical,json=origLogical" json:"orig_logical,omitempty"`
	OrigStart     *int32  `protobuf:"varint,4,opt,name=orig_start,json=origStart" json:"orig_start,omitempty"`
	OrigGroup     *uint32 `protobuf:"varint,5,opt,name=orig_group,json=origGroup" json:"orig_group,omitempty"`
	OrigLen       *int32  `protobuf:"varint,6,opt,name=orig_len,json=origLen" json:"orig_len,omitempty"`
	GoalLogical   *uint32 `protobuf:"varint,7,opt,name=goal_logical,json=goalLogical" json:"goal_logical,omitempty"`
	GoalStart     *int32  `protobuf:"varint,8,opt,name=goal_start,json=goalStart" json:"goal_start,omitempty"`
	GoalGroup     *uint32 `protobuf:"varint,9,opt,name=goal_group,json=goalGroup" json:"goal_group,omitempty"`
	GoalLen       *int32  `protobuf:"varint,10,opt,name=goal_len,json=goalLen" json:"goal_len,omitempty"`
	ResultLogical *uint32 `protobuf:"varint,11,opt,name=result_logical,json=resultLogical" json:"result_logical,omitempty"`
	ResultStart   *int32  `protobuf:"varint,12,opt,name=result_start,json=resultStart" json:"result_start,omitempty"`
	ResultGroup   *uint32 `protobuf:"varint,13,opt,name=result_group,json=resultGroup" json:"result_group,omitempty"`
	ResultLen     *int32  `protobuf:"varint,14,opt,name=result_len,json=resultLen" json:"result_len,omitempty"`
	Found         *uint32 `protobuf:"varint,15,opt,name=found" json:"found,omitempty"`
	Groups        *uint32 `protobuf:"varint,16,opt,name=groups" json:"groups,omitempty"`
	Buddy         *uint32 `protobuf:"varint,17,opt,name=buddy" json:"buddy,omitempty"`
	Flags         *uint32 `protobuf:"varint,18,opt,name=flags" json:"flags,omitempty"`
	Tail          *uint32 `protobuf:"varint,19,opt,name=tail" json:"tail,omitempty"`
	Cr            *uint32 `protobuf:"varint,20,opt,name=cr" json:"cr,omitempty"`
}

func (x *Ext4MballocAllocFtraceEvent) Reset() {
	*x = Ext4MballocAllocFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MballocAllocFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MballocAllocFtraceEvent) ProtoMessage() {}

func (x *Ext4MballocAllocFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MballocAllocFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MballocAllocFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{178}
}

func (x *Ext4MballocAllocFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetOrigLogical() uint32 {
	if x != nil && x.OrigLogical != nil {
		return *x.OrigLogical
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetOrigStart() int32 {
	if x != nil && x.OrigStart != nil {
		return *x.OrigStart
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetOrigGroup() uint32 {
	if x != nil && x.OrigGroup != nil {
		return *x.OrigGroup
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetOrigLen() int32 {
	if x != nil && x.OrigLen != nil {
		return *x.OrigLen
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetGoalLogical() uint32 {
	if x != nil && x.GoalLogical != nil {
		return *x.GoalLogical
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetGoalStart() int32 {
	if x != nil && x.GoalStart != nil {
		return *x.GoalStart
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetGoalGroup() uint32 {
	if x != nil && x.GoalGroup != nil {
		return *x.GoalGroup
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetGoalLen() int32 {
	if x != nil && x.GoalLen != nil {
		return *x.GoalLen
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetResultLogical() uint32 {
	if x != nil && x.ResultLogical != nil {
		return *x.ResultLogical
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetResultStart() int32 {
	if x != nil && x.ResultStart != nil {
		return *x.ResultStart
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetResultGroup() uint32 {
	if x != nil && x.ResultGroup != nil {
		return *x.ResultGroup
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetResultLen() int32 {
	if x != nil && x.ResultLen != nil {
		return *x.ResultLen
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetFound() uint32 {
	if x != nil && x.Found != nil {
		return *x.Found
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetGroups() uint32 {
	if x != nil && x.Groups != nil {
		return *x.Groups
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetBuddy() uint32 {
	if x != nil && x.Buddy != nil {
		return *x.Buddy
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetTail() uint32 {
	if x != nil && x.Tail != nil {
		return *x.Tail
	}
	return 0
}

func (x *Ext4MballocAllocFtraceEvent) GetCr() uint32 {
	if x != nil && x.Cr != nil {
		return *x.Cr
	}
	return 0
}

type Ext4MballocDiscardFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev         *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino         *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	ResultStart *int32  `protobuf:"varint,3,opt,name=result_start,json=resultStart" json:"result_start,omitempty"`
	ResultGroup *uint32 `protobuf:"varint,4,opt,name=result_group,json=resultGroup" json:"result_group,omitempty"`
	ResultLen   *int32  `protobuf:"varint,5,opt,name=result_len,json=resultLen" json:"result_len,omitempty"`
}

func (x *Ext4MballocDiscardFtraceEvent) Reset() {
	*x = Ext4MballocDiscardFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MballocDiscardFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MballocDiscardFtraceEvent) ProtoMessage() {}

func (x *Ext4MballocDiscardFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MballocDiscardFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MballocDiscardFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{179}
}

func (x *Ext4MballocDiscardFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MballocDiscardFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MballocDiscardFtraceEvent) GetResultStart() int32 {
	if x != nil && x.ResultStart != nil {
		return *x.ResultStart
	}
	return 0
}

func (x *Ext4MballocDiscardFtraceEvent) GetResultGroup() uint32 {
	if x != nil && x.ResultGroup != nil {
		return *x.ResultGroup
	}
	return 0
}

func (x *Ext4MballocDiscardFtraceEvent) GetResultLen() int32 {
	if x != nil && x.ResultLen != nil {
		return *x.ResultLen
	}
	return 0
}

type Ext4MballocFreeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev         *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino         *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	ResultStart *int32  `protobuf:"varint,3,opt,name=result_start,json=resultStart" json:"result_start,omitempty"`
	ResultGroup *uint32 `protobuf:"varint,4,opt,name=result_group,json=resultGroup" json:"result_group,omitempty"`
	ResultLen   *int32  `protobuf:"varint,5,opt,name=result_len,json=resultLen" json:"result_len,omitempty"`
}

func (x *Ext4MballocFreeFtraceEvent) Reset() {
	*x = Ext4MballocFreeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MballocFreeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MballocFreeFtraceEvent) ProtoMessage() {}

func (x *Ext4MballocFreeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MballocFreeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MballocFreeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{180}
}

func (x *Ext4MballocFreeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MballocFreeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MballocFreeFtraceEvent) GetResultStart() int32 {
	if x != nil && x.ResultStart != nil {
		return *x.ResultStart
	}
	return 0
}

func (x *Ext4MballocFreeFtraceEvent) GetResultGroup() uint32 {
	if x != nil && x.ResultGroup != nil {
		return *x.ResultGroup
	}
	return 0
}

func (x *Ext4MballocFreeFtraceEvent) GetResultLen() int32 {
	if x != nil && x.ResultLen != nil {
		return *x.ResultLen
	}
	return 0
}

type Ext4MballocPreallocFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev           *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino           *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	OrigLogical   *uint32 `protobuf:"varint,3,opt,name=orig_logical,json=origLogical" json:"orig_logical,omitempty"`
	OrigStart     *int32  `protobuf:"varint,4,opt,name=orig_start,json=origStart" json:"orig_start,omitempty"`
	OrigGroup     *uint32 `protobuf:"varint,5,opt,name=orig_group,json=origGroup" json:"orig_group,omitempty"`
	OrigLen       *int32  `protobuf:"varint,6,opt,name=orig_len,json=origLen" json:"orig_len,omitempty"`
	ResultLogical *uint32 `protobuf:"varint,7,opt,name=result_logical,json=resultLogical" json:"result_logical,omitempty"`
	ResultStart   *int32  `protobuf:"varint,8,opt,name=result_start,json=resultStart" json:"result_start,omitempty"`
	ResultGroup   *uint32 `protobuf:"varint,9,opt,name=result_group,json=resultGroup" json:"result_group,omitempty"`
	ResultLen     *int32  `protobuf:"varint,10,opt,name=result_len,json=resultLen" json:"result_len,omitempty"`
}

func (x *Ext4MballocPreallocFtraceEvent) Reset() {
	*x = Ext4MballocPreallocFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4MballocPreallocFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4MballocPreallocFtraceEvent) ProtoMessage() {}

func (x *Ext4MballocPreallocFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4MballocPreallocFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4MballocPreallocFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{181}
}

func (x *Ext4MballocPreallocFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetOrigLogical() uint32 {
	if x != nil && x.OrigLogical != nil {
		return *x.OrigLogical
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetOrigStart() int32 {
	if x != nil && x.OrigStart != nil {
		return *x.OrigStart
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetOrigGroup() uint32 {
	if x != nil && x.OrigGroup != nil {
		return *x.OrigGroup
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetOrigLen() int32 {
	if x != nil && x.OrigLen != nil {
		return *x.OrigLen
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetResultLogical() uint32 {
	if x != nil && x.ResultLogical != nil {
		return *x.ResultLogical
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetResultStart() int32 {
	if x != nil && x.ResultStart != nil {
		return *x.ResultStart
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetResultGroup() uint32 {
	if x != nil && x.ResultGroup != nil {
		return *x.ResultGroup
	}
	return 0
}

func (x *Ext4MballocPreallocFtraceEvent) GetResultLen() int32 {
	if x != nil && x.ResultLen != nil {
		return *x.ResultLen
	}
	return 0
}

type Ext4OtherInodeUpdateTimeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	OrigIno *uint64 `protobuf:"varint,3,opt,name=orig_ino,json=origIno" json:"orig_ino,omitempty"`
	Uid     *uint32 `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	Gid     *uint32 `protobuf:"varint,5,opt,name=gid" json:"gid,omitempty"`
	Mode    *uint32 `protobuf:"varint,6,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) Reset() {
	*x = Ext4OtherInodeUpdateTimeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4OtherInodeUpdateTimeFtraceEvent) ProtoMessage() {}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4OtherInodeUpdateTimeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4OtherInodeUpdateTimeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{182}
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) GetOrigIno() uint64 {
	if x != nil && x.OrigIno != nil {
		return *x.OrigIno
	}
	return 0
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *Ext4OtherInodeUpdateTimeFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4PunchHoleFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Offset *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Len    *int64  `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Mode   *int32  `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4PunchHoleFtraceEvent) Reset() {
	*x = Ext4PunchHoleFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4PunchHoleFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4PunchHoleFtraceEvent) ProtoMessage() {}

func (x *Ext4PunchHoleFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4PunchHoleFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4PunchHoleFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{183}
}

func (x *Ext4PunchHoleFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4PunchHoleFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4PunchHoleFtraceEvent) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4PunchHoleFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4PunchHoleFtraceEvent) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4ReadBlockBitmapLoadFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Group *uint32 `protobuf:"varint,2,opt,name=group" json:"group,omitempty"`
}

func (x *Ext4ReadBlockBitmapLoadFtraceEvent) Reset() {
	*x = Ext4ReadBlockBitmapLoadFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ReadBlockBitmapLoadFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ReadBlockBitmapLoadFtraceEvent) ProtoMessage() {}

func (x *Ext4ReadBlockBitmapLoadFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ReadBlockBitmapLoadFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ReadBlockBitmapLoadFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{184}
}

func (x *Ext4ReadBlockBitmapLoadFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ReadBlockBitmapLoadFtraceEvent) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

type Ext4ReadpageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Index *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (x *Ext4ReadpageFtraceEvent) Reset() {
	*x = Ext4ReadpageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ReadpageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ReadpageFtraceEvent) ProtoMessage() {}

func (x *Ext4ReadpageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ReadpageFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ReadpageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{185}
}

func (x *Ext4ReadpageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ReadpageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ReadpageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Ext4ReleasepageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Index *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (x *Ext4ReleasepageFtraceEvent) Reset() {
	*x = Ext4ReleasepageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ReleasepageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ReleasepageFtraceEvent) ProtoMessage() {}

func (x *Ext4ReleasepageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ReleasepageFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ReleasepageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{186}
}

func (x *Ext4ReleasepageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ReleasepageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ReleasepageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Ext4RemoveBlocksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	From    *uint32 `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	To      *uint32 `protobuf:"varint,4,opt,name=to" json:"to,omitempty"`
	Partial *int64  `protobuf:"varint,5,opt,name=partial" json:"partial,omitempty"`
	EePblk  *uint64 `protobuf:"varint,6,opt,name=ee_pblk,json=eePblk" json:"ee_pblk,omitempty"`
	EeLblk  *uint32 `protobuf:"varint,7,opt,name=ee_lblk,json=eeLblk" json:"ee_lblk,omitempty"`
	EeLen   *uint32 `protobuf:"varint,8,opt,name=ee_len,json=eeLen" json:"ee_len,omitempty"`
}

func (x *Ext4RemoveBlocksFtraceEvent) Reset() {
	*x = Ext4RemoveBlocksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4RemoveBlocksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4RemoveBlocksFtraceEvent) ProtoMessage() {}

func (x *Ext4RemoveBlocksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4RemoveBlocksFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4RemoveBlocksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{187}
}

func (x *Ext4RemoveBlocksFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetFrom() uint32 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetTo() uint32 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetPartial() int64 {
	if x != nil && x.Partial != nil {
		return *x.Partial
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetEePblk() uint64 {
	if x != nil && x.EePblk != nil {
		return *x.EePblk
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetEeLblk() uint32 {
	if x != nil && x.EeLblk != nil {
		return *x.EeLblk
	}
	return 0
}

func (x *Ext4RemoveBlocksFtraceEvent) GetEeLen() uint32 {
	if x != nil && x.EeLen != nil {
		return *x.EeLen
	}
	return 0
}

type Ext4RequestBlocksFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Len     *uint32 `protobuf:"varint,3,opt,name=len" json:"len,omitempty"`
	Logical *uint32 `protobuf:"varint,4,opt,name=logical" json:"logical,omitempty"`
	Lleft   *uint32 `protobuf:"varint,5,opt,name=lleft" json:"lleft,omitempty"`
	Lright  *uint32 `protobuf:"varint,6,opt,name=lright" json:"lright,omitempty"`
	Goal    *uint64 `protobuf:"varint,7,opt,name=goal" json:"goal,omitempty"`
	Pleft   *uint64 `protobuf:"varint,8,opt,name=pleft" json:"pleft,omitempty"`
	Pright  *uint64 `protobuf:"varint,9,opt,name=pright" json:"pright,omitempty"`
	Flags   *uint32 `protobuf:"varint,10,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4RequestBlocksFtraceEvent) Reset() {
	*x = Ext4RequestBlocksFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4RequestBlocksFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4RequestBlocksFtraceEvent) ProtoMessage() {}

func (x *Ext4RequestBlocksFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4RequestBlocksFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4RequestBlocksFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{188}
}

func (x *Ext4RequestBlocksFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetLogical() uint32 {
	if x != nil && x.Logical != nil {
		return *x.Logical
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetLleft() uint32 {
	if x != nil && x.Lleft != nil {
		return *x.Lleft
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetLright() uint32 {
	if x != nil && x.Lright != nil {
		return *x.Lright
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetGoal() uint64 {
	if x != nil && x.Goal != nil {
		return *x.Goal
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetPleft() uint64 {
	if x != nil && x.Pleft != nil {
		return *x.Pleft
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetPright() uint64 {
	if x != nil && x.Pright != nil {
		return *x.Pright
	}
	return 0
}

func (x *Ext4RequestBlocksFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4RequestInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Dir  *uint64 `protobuf:"varint,2,opt,name=dir" json:"dir,omitempty"`
	Mode *uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4RequestInodeFtraceEvent) Reset() {
	*x = Ext4RequestInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4RequestInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4RequestInodeFtraceEvent) ProtoMessage() {}

func (x *Ext4RequestInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4RequestInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4RequestInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{189}
}

func (x *Ext4RequestInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4RequestInodeFtraceEvent) GetDir() uint64 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *Ext4RequestInodeFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type Ext4SyncFsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Wait *int32  `protobuf:"varint,2,opt,name=wait" json:"wait,omitempty"`
}

func (x *Ext4SyncFsFtraceEvent) Reset() {
	*x = Ext4SyncFsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4SyncFsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4SyncFsFtraceEvent) ProtoMessage() {}

func (x *Ext4SyncFsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4SyncFsFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4SyncFsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{190}
}

func (x *Ext4SyncFsFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4SyncFsFtraceEvent) GetWait() int32 {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return 0
}

type Ext4TrimAllFreeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevMajor *int32  `protobuf:"varint,1,opt,name=dev_major,json=devMajor" json:"dev_major,omitempty"`
	DevMinor *int32  `protobuf:"varint,2,opt,name=dev_minor,json=devMinor" json:"dev_minor,omitempty"`
	Group    *uint32 `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
	Start    *int32  `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	Len      *int32  `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4TrimAllFreeFtraceEvent) Reset() {
	*x = Ext4TrimAllFreeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4TrimAllFreeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4TrimAllFreeFtraceEvent) ProtoMessage() {}

func (x *Ext4TrimAllFreeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4TrimAllFreeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4TrimAllFreeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{191}
}

func (x *Ext4TrimAllFreeFtraceEvent) GetDevMajor() int32 {
	if x != nil && x.DevMajor != nil {
		return *x.DevMajor
	}
	return 0
}

func (x *Ext4TrimAllFreeFtraceEvent) GetDevMinor() int32 {
	if x != nil && x.DevMinor != nil {
		return *x.DevMinor
	}
	return 0
}

func (x *Ext4TrimAllFreeFtraceEvent) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

func (x *Ext4TrimAllFreeFtraceEvent) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Ext4TrimAllFreeFtraceEvent) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4TrimExtentFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevMajor *int32  `protobuf:"varint,1,opt,name=dev_major,json=devMajor" json:"dev_major,omitempty"`
	DevMinor *int32  `protobuf:"varint,2,opt,name=dev_minor,json=devMinor" json:"dev_minor,omitempty"`
	Group    *uint32 `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
	Start    *int32  `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	Len      *int32  `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
}

func (x *Ext4TrimExtentFtraceEvent) Reset() {
	*x = Ext4TrimExtentFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4TrimExtentFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4TrimExtentFtraceEvent) ProtoMessage() {}

func (x *Ext4TrimExtentFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4TrimExtentFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4TrimExtentFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{192}
}

func (x *Ext4TrimExtentFtraceEvent) GetDevMajor() int32 {
	if x != nil && x.DevMajor != nil {
		return *x.DevMajor
	}
	return 0
}

func (x *Ext4TrimExtentFtraceEvent) GetDevMinor() int32 {
	if x != nil && x.DevMinor != nil {
		return *x.DevMinor
	}
	return 0
}

func (x *Ext4TrimExtentFtraceEvent) GetGroup() uint32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

func (x *Ext4TrimExtentFtraceEvent) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Ext4TrimExtentFtraceEvent) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type Ext4TruncateEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Blocks *uint64 `protobuf:"varint,3,opt,name=blocks" json:"blocks,omitempty"`
}

func (x *Ext4TruncateEnterFtraceEvent) Reset() {
	*x = Ext4TruncateEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4TruncateEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4TruncateEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4TruncateEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4TruncateEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4TruncateEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{193}
}

func (x *Ext4TruncateEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4TruncateEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4TruncateEnterFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

type Ext4TruncateExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Blocks *uint64 `protobuf:"varint,3,opt,name=blocks" json:"blocks,omitempty"`
}

func (x *Ext4TruncateExitFtraceEvent) Reset() {
	*x = Ext4TruncateExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4TruncateExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4TruncateExitFtraceEvent) ProtoMessage() {}

func (x *Ext4TruncateExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4TruncateExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4TruncateExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{194}
}

func (x *Ext4TruncateExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4TruncateExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4TruncateExitFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

type Ext4UnlinkEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Parent *uint64 `protobuf:"varint,3,opt,name=parent" json:"parent,omitempty"`
	Size   *int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (x *Ext4UnlinkEnterFtraceEvent) Reset() {
	*x = Ext4UnlinkEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4UnlinkEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4UnlinkEnterFtraceEvent) ProtoMessage() {}

func (x *Ext4UnlinkEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4UnlinkEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4UnlinkEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{195}
}

func (x *Ext4UnlinkEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4UnlinkEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4UnlinkEnterFtraceEvent) GetParent() uint64 {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return 0
}

func (x *Ext4UnlinkEnterFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type Ext4UnlinkExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *Ext4UnlinkExitFtraceEvent) Reset() {
	*x = Ext4UnlinkExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4UnlinkExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4UnlinkExitFtraceEvent) ProtoMessage() {}

func (x *Ext4UnlinkExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4UnlinkExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4UnlinkExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{196}
}

func (x *Ext4UnlinkExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4UnlinkExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4UnlinkExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type Ext4WriteBeginFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos   *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Flags *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (x *Ext4WriteBeginFtraceEvent) Reset() {
	*x = Ext4WriteBeginFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4WriteBeginFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4WriteBeginFtraceEvent) ProtoMessage() {}

func (x *Ext4WriteBeginFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4WriteBeginFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4WriteBeginFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{197}
}

func (x *Ext4WriteBeginFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4WriteBeginFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4WriteBeginFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4WriteBeginFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4WriteBeginFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type Ext4WriteEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos    *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Copied *uint32 `protobuf:"varint,5,opt,name=copied" json:"copied,omitempty"`
}

func (x *Ext4WriteEndFtraceEvent) Reset() {
	*x = Ext4WriteEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4WriteEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4WriteEndFtraceEvent) ProtoMessage() {}

func (x *Ext4WriteEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4WriteEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4WriteEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{198}
}

func (x *Ext4WriteEndFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4WriteEndFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4WriteEndFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *Ext4WriteEndFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4WriteEndFtraceEvent) GetCopied() uint32 {
	if x != nil && x.Copied != nil {
		return *x.Copied
	}
	return 0
}

type Ext4WritepageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Index *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
}

func (x *Ext4WritepageFtraceEvent) Reset() {
	*x = Ext4WritepageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4WritepageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4WritepageFtraceEvent) ProtoMessage() {}

func (x *Ext4WritepageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4WritepageFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4WritepageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{199}
}

func (x *Ext4WritepageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4WritepageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4WritepageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Ext4WritepagesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev            *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino            *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	NrToWrite      *int64  `protobuf:"varint,3,opt,name=nr_to_write,json=nrToWrite" json:"nr_to_write,omitempty"`
	PagesSkipped   *int64  `protobuf:"varint,4,opt,name=pages_skipped,json=pagesSkipped" json:"pages_skipped,omitempty"`
	RangeStart     *int64  `protobuf:"varint,5,opt,name=range_start,json=rangeStart" json:"range_start,omitempty"`
	RangeEnd       *int64  `protobuf:"varint,6,opt,name=range_end,json=rangeEnd" json:"range_end,omitempty"`
	WritebackIndex *uint64 `protobuf:"varint,7,opt,name=writeback_index,json=writebackIndex" json:"writeback_index,omitempty"`
	SyncMode       *int32  `protobuf:"varint,8,opt,name=sync_mode,json=syncMode" json:"sync_mode,omitempty"`
	ForKupdate     *uint32 `protobuf:"varint,9,opt,name=for_kupdate,json=forKupdate" json:"for_kupdate,omitempty"`
	RangeCyclic    *uint32 `protobuf:"varint,10,opt,name=range_cyclic,json=rangeCyclic" json:"range_cyclic,omitempty"`
}

func (x *Ext4WritepagesFtraceEvent) Reset() {
	*x = Ext4WritepagesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4WritepagesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4WritepagesFtraceEvent) ProtoMessage() {}

func (x *Ext4WritepagesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4WritepagesFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4WritepagesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{200}
}

func (x *Ext4WritepagesFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetNrToWrite() int64 {
	if x != nil && x.NrToWrite != nil {
		return *x.NrToWrite
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetPagesSkipped() int64 {
	if x != nil && x.PagesSkipped != nil {
		return *x.PagesSkipped
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetRangeStart() int64 {
	if x != nil && x.RangeStart != nil {
		return *x.RangeStart
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetRangeEnd() int64 {
	if x != nil && x.RangeEnd != nil {
		return *x.RangeEnd
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetWritebackIndex() uint64 {
	if x != nil && x.WritebackIndex != nil {
		return *x.WritebackIndex
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetSyncMode() int32 {
	if x != nil && x.SyncMode != nil {
		return *x.SyncMode
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetForKupdate() uint32 {
	if x != nil && x.ForKupdate != nil {
		return *x.ForKupdate
	}
	return 0
}

func (x *Ext4WritepagesFtraceEvent) GetRangeCyclic() uint32 {
	if x != nil && x.RangeCyclic != nil {
		return *x.RangeCyclic
	}
	return 0
}

type Ext4WritepagesResultFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev            *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino            *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret            *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
	PagesWritten   *int32  `protobuf:"varint,4,opt,name=pages_written,json=pagesWritten" json:"pages_written,omitempty"`
	PagesSkipped   *int64  `protobuf:"varint,5,opt,name=pages_skipped,json=pagesSkipped" json:"pages_skipped,omitempty"`
	WritebackIndex *uint64 `protobuf:"varint,6,opt,name=writeback_index,json=writebackIndex" json:"writeback_index,omitempty"`
	SyncMode       *int32  `protobuf:"varint,7,opt,name=sync_mode,json=syncMode" json:"sync_mode,omitempty"`
}

func (x *Ext4WritepagesResultFtraceEvent) Reset() {
	*x = Ext4WritepagesResultFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4WritepagesResultFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4WritepagesResultFtraceEvent) ProtoMessage() {}

func (x *Ext4WritepagesResultFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4WritepagesResultFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4WritepagesResultFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{201}
}

func (x *Ext4WritepagesResultFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4WritepagesResultFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4WritepagesResultFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

func (x *Ext4WritepagesResultFtraceEvent) GetPagesWritten() int32 {
	if x != nil && x.PagesWritten != nil {
		return *x.PagesWritten
	}
	return 0
}

func (x *Ext4WritepagesResultFtraceEvent) GetPagesSkipped() int64 {
	if x != nil && x.PagesSkipped != nil {
		return *x.PagesSkipped
	}
	return 0
}

func (x *Ext4WritepagesResultFtraceEvent) GetWritebackIndex() uint64 {
	if x != nil && x.WritebackIndex != nil {
		return *x.WritebackIndex
	}
	return 0
}

func (x *Ext4WritepagesResultFtraceEvent) GetSyncMode() int32 {
	if x != nil && x.SyncMode != nil {
		return *x.SyncMode
	}
	return 0
}

type Ext4ZeroRangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Offset *int64  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Len    *int64  `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Mode   *int32  `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
}

func (x *Ext4ZeroRangeFtraceEvent) Reset() {
	*x = Ext4ZeroRangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ext4ZeroRangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ext4ZeroRangeFtraceEvent) ProtoMessage() {}

func (x *Ext4ZeroRangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ext4ZeroRangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*Ext4ZeroRangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{202}
}

func (x *Ext4ZeroRangeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *Ext4ZeroRangeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *Ext4ZeroRangeFtraceEvent) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *Ext4ZeroRangeFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *Ext4ZeroRangeFtraceEvent) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type F2FsDoSubmitBioFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Btype  *int32  `protobuf:"varint,2,opt,name=btype" json:"btype,omitempty"`
	Sync   *uint32 `protobuf:"varint,3,opt,name=sync" json:"sync,omitempty"`
	Sector *uint64 `protobuf:"varint,4,opt,name=sector" json:"sector,omitempty"`
	Size   *uint32 `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
}

func (x *F2FsDoSubmitBioFtraceEvent) Reset() {
	*x = F2FsDoSubmitBioFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsDoSubmitBioFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsDoSubmitBioFtraceEvent) ProtoMessage() {}

func (x *F2FsDoSubmitBioFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsDoSubmitBioFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsDoSubmitBioFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{203}
}

func (x *F2FsDoSubmitBioFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsDoSubmitBioFtraceEvent) GetBtype() int32 {
	if x != nil && x.Btype != nil {
		return *x.Btype
	}
	return 0
}

func (x *F2FsDoSubmitBioFtraceEvent) GetSync() uint32 {
	if x != nil && x.Sync != nil {
		return *x.Sync
	}
	return 0
}

func (x *F2FsDoSubmitBioFtraceEvent) GetSector() uint64 {
	if x != nil && x.Sector != nil {
		return *x.Sector
	}
	return 0
}

func (x *F2FsDoSubmitBioFtraceEvent) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type F2FsEvictInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pino   *uint64 `protobuf:"varint,3,opt,name=pino" json:"pino,omitempty"`
	Mode   *uint32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
	Size   *int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Nlink  *uint32 `protobuf:"varint,6,opt,name=nlink" json:"nlink,omitempty"`
	Blocks *uint64 `protobuf:"varint,7,opt,name=blocks" json:"blocks,omitempty"`
	Advise *uint32 `protobuf:"varint,8,opt,name=advise" json:"advise,omitempty"`
}

func (x *F2FsEvictInodeFtraceEvent) Reset() {
	*x = F2FsEvictInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsEvictInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsEvictInodeFtraceEvent) ProtoMessage() {}

func (x *F2FsEvictInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsEvictInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsEvictInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{204}
}

func (x *F2FsEvictInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetPino() uint64 {
	if x != nil && x.Pino != nil {
		return *x.Pino
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetNlink() uint32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsEvictInodeFtraceEvent) GetAdvise() uint32 {
	if x != nil && x.Advise != nil {
		return *x.Advise
	}
	return 0
}

type F2FsFallocateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Mode   *int32  `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	Offset *int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Len    *int64  `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Size   *int64  `protobuf:"varint,6,opt,name=size" json:"size,omitempty"`
	Blocks *uint64 `protobuf:"varint,7,opt,name=blocks" json:"blocks,omitempty"`
	Ret    *int32  `protobuf:"varint,8,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsFallocateFtraceEvent) Reset() {
	*x = F2FsFallocateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsFallocateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsFallocateFtraceEvent) ProtoMessage() {}

func (x *F2FsFallocateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsFallocateFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsFallocateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{205}
}

func (x *F2FsFallocateFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsFallocateFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsGetDataBlockFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Iblock  *uint64 `protobuf:"varint,3,opt,name=iblock" json:"iblock,omitempty"`
	BhStart *uint64 `protobuf:"varint,4,opt,name=bh_start,json=bhStart" json:"bh_start,omitempty"`
	BhSize  *uint64 `protobuf:"varint,5,opt,name=bh_size,json=bhSize" json:"bh_size,omitempty"`
	Ret     *int32  `protobuf:"varint,6,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsGetDataBlockFtraceEvent) Reset() {
	*x = F2FsGetDataBlockFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsGetDataBlockFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsGetDataBlockFtraceEvent) ProtoMessage() {}

func (x *F2FsGetDataBlockFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsGetDataBlockFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsGetDataBlockFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{206}
}

func (x *F2FsGetDataBlockFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsGetDataBlockFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsGetDataBlockFtraceEvent) GetIblock() uint64 {
	if x != nil && x.Iblock != nil {
		return *x.Iblock
	}
	return 0
}

func (x *F2FsGetDataBlockFtraceEvent) GetBhStart() uint64 {
	if x != nil && x.BhStart != nil {
		return *x.BhStart
	}
	return 0
}

func (x *F2FsGetDataBlockFtraceEvent) GetBhSize() uint64 {
	if x != nil && x.BhSize != nil {
		return *x.BhSize
	}
	return 0
}

func (x *F2FsGetDataBlockFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsGetVictimFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Type      *int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	GcType    *int32  `protobuf:"varint,3,opt,name=gc_type,json=gcType" json:"gc_type,omitempty"`
	AllocMode *int32  `protobuf:"varint,4,opt,name=alloc_mode,json=allocMode" json:"alloc_mode,omitempty"`
	GcMode    *int32  `protobuf:"varint,5,opt,name=gc_mode,json=gcMode" json:"gc_mode,omitempty"`
	Victim    *uint32 `protobuf:"varint,6,opt,name=victim" json:"victim,omitempty"`
	OfsUnit   *uint32 `protobuf:"varint,7,opt,name=ofs_unit,json=ofsUnit" json:"ofs_unit,omitempty"`
	PreVictim *uint32 `protobuf:"varint,8,opt,name=pre_victim,json=preVictim" json:"pre_victim,omitempty"`
	Prefree   *uint32 `protobuf:"varint,9,opt,name=prefree" json:"prefree,omitempty"`
	Free      *uint32 `protobuf:"varint,10,opt,name=free" json:"free,omitempty"`
}

func (x *F2FsGetVictimFtraceEvent) Reset() {
	*x = F2FsGetVictimFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsGetVictimFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsGetVictimFtraceEvent) ProtoMessage() {}

func (x *F2FsGetVictimFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsGetVictimFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsGetVictimFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{207}
}

func (x *F2FsGetVictimFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetGcType() int32 {
	if x != nil && x.GcType != nil {
		return *x.GcType
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetAllocMode() int32 {
	if x != nil && x.AllocMode != nil {
		return *x.AllocMode
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetGcMode() int32 {
	if x != nil && x.GcMode != nil {
		return *x.GcMode
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetVictim() uint32 {
	if x != nil && x.Victim != nil {
		return *x.Victim
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetOfsUnit() uint32 {
	if x != nil && x.OfsUnit != nil {
		return *x.OfsUnit
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetPreVictim() uint32 {
	if x != nil && x.PreVictim != nil {
		return *x.PreVictim
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetPrefree() uint32 {
	if x != nil && x.Prefree != nil {
		return *x.Prefree
	}
	return 0
}

func (x *F2FsGetVictimFtraceEvent) GetFree() uint32 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

type F2FsIgetFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pino   *uint64 `protobuf:"varint,3,opt,name=pino" json:"pino,omitempty"`
	Mode   *uint32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
	Size   *int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Nlink  *uint32 `protobuf:"varint,6,opt,name=nlink" json:"nlink,omitempty"`
	Blocks *uint64 `protobuf:"varint,7,opt,name=blocks" json:"blocks,omitempty"`
	Advise *uint32 `protobuf:"varint,8,opt,name=advise" json:"advise,omitempty"`
}

func (x *F2FsIgetFtraceEvent) Reset() {
	*x = F2FsIgetFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsIgetFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsIgetFtraceEvent) ProtoMessage() {}

func (x *F2FsIgetFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsIgetFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsIgetFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{208}
}

func (x *F2FsIgetFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetPino() uint64 {
	if x != nil && x.Pino != nil {
		return *x.Pino
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetNlink() uint32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsIgetFtraceEvent) GetAdvise() uint32 {
	if x != nil && x.Advise != nil {
		return *x.Advise
	}
	return 0
}

type F2FsIgetExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsIgetExitFtraceEvent) Reset() {
	*x = F2FsIgetExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsIgetExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsIgetExitFtraceEvent) ProtoMessage() {}

func (x *F2FsIgetExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsIgetExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsIgetExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{209}
}

func (x *F2FsIgetExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsIgetExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsIgetExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsNewInodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsNewInodeFtraceEvent) Reset() {
	*x = F2FsNewInodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsNewInodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsNewInodeFtraceEvent) ProtoMessage() {}

func (x *F2FsNewInodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsNewInodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsNewInodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{210}
}

func (x *F2FsNewInodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsNewInodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsNewInodeFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsReadpageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Index   *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	Blkaddr *uint64 `protobuf:"varint,4,opt,name=blkaddr" json:"blkaddr,omitempty"`
	Type    *int32  `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
}

func (x *F2FsReadpageFtraceEvent) Reset() {
	*x = F2FsReadpageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsReadpageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsReadpageFtraceEvent) ProtoMessage() {}

func (x *F2FsReadpageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsReadpageFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsReadpageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{211}
}

func (x *F2FsReadpageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsReadpageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsReadpageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *F2FsReadpageFtraceEvent) GetBlkaddr() uint64 {
	if x != nil && x.Blkaddr != nil {
		return *x.Blkaddr
	}
	return 0
}

func (x *F2FsReadpageFtraceEvent) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type F2FsReserveNewBlockFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev       *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Nid       *uint32 `protobuf:"varint,2,opt,name=nid" json:"nid,omitempty"`
	OfsInNode *uint32 `protobuf:"varint,3,opt,name=ofs_in_node,json=ofsInNode" json:"ofs_in_node,omitempty"`
}

func (x *F2FsReserveNewBlockFtraceEvent) Reset() {
	*x = F2FsReserveNewBlockFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsReserveNewBlockFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsReserveNewBlockFtraceEvent) ProtoMessage() {}

func (x *F2FsReserveNewBlockFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsReserveNewBlockFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsReserveNewBlockFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{212}
}

func (x *F2FsReserveNewBlockFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsReserveNewBlockFtraceEvent) GetNid() uint32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *F2FsReserveNewBlockFtraceEvent) GetOfsInNode() uint32 {
	if x != nil && x.OfsInNode != nil {
		return *x.OfsInNode
	}
	return 0
}

type F2FsSetPageDirtyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Type  *int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Dir   *int32  `protobuf:"varint,4,opt,name=dir" json:"dir,omitempty"`
	Index *uint64 `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Dirty *int32  `protobuf:"varint,6,opt,name=dirty" json:"dirty,omitempty"`
}

func (x *F2FsSetPageDirtyFtraceEvent) Reset() {
	*x = F2FsSetPageDirtyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsSetPageDirtyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsSetPageDirtyFtraceEvent) ProtoMessage() {}

func (x *F2FsSetPageDirtyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsSetPageDirtyFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsSetPageDirtyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{213}
}

func (x *F2FsSetPageDirtyFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsSetPageDirtyFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsSetPageDirtyFtraceEvent) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *F2FsSetPageDirtyFtraceEvent) GetDir() int32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *F2FsSetPageDirtyFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *F2FsSetPageDirtyFtraceEvent) GetDirty() int32 {
	if x != nil && x.Dirty != nil {
		return *x.Dirty
	}
	return 0
}

type F2FsSubmitWritePageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Type  *int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Index *uint64 `protobuf:"varint,4,opt,name=index" json:"index,omitempty"`
	Block *uint32 `protobuf:"varint,5,opt,name=block" json:"block,omitempty"`
}

func (x *F2FsSubmitWritePageFtraceEvent) Reset() {
	*x = F2FsSubmitWritePageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsSubmitWritePageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsSubmitWritePageFtraceEvent) ProtoMessage() {}

func (x *F2FsSubmitWritePageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsSubmitWritePageFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsSubmitWritePageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{214}
}

func (x *F2FsSubmitWritePageFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsSubmitWritePageFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsSubmitWritePageFtraceEvent) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *F2FsSubmitWritePageFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *F2FsSubmitWritePageFtraceEvent) GetBlock() uint32 {
	if x != nil && x.Block != nil {
		return *x.Block
	}
	return 0
}

type F2FsSyncFileEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pino   *uint64 `protobuf:"varint,3,opt,name=pino" json:"pino,omitempty"`
	Mode   *uint32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
	Size   *int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Nlink  *uint32 `protobuf:"varint,6,opt,name=nlink" json:"nlink,omitempty"`
	Blocks *uint64 `protobuf:"varint,7,opt,name=blocks" json:"blocks,omitempty"`
	Advise *uint32 `protobuf:"varint,8,opt,name=advise" json:"advise,omitempty"`
}

func (x *F2FsSyncFileEnterFtraceEvent) Reset() {
	*x = F2FsSyncFileEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsSyncFileEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsSyncFileEnterFtraceEvent) ProtoMessage() {}

func (x *F2FsSyncFileEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsSyncFileEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsSyncFileEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{215}
}

func (x *F2FsSyncFileEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetPino() uint64 {
	if x != nil && x.Pino != nil {
		return *x.Pino
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetNlink() uint32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsSyncFileEnterFtraceEvent) GetAdvise() uint32 {
	if x != nil && x.Advise != nil {
		return *x.Advise
	}
	return 0
}

type F2FsSyncFileExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino      *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	NeedCp   *uint32 `protobuf:"varint,3,opt,name=need_cp,json=needCp" json:"need_cp,omitempty"`
	Datasync *int32  `protobuf:"varint,4,opt,name=datasync" json:"datasync,omitempty"`
	Ret      *int32  `protobuf:"varint,5,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsSyncFileExitFtraceEvent) Reset() {
	*x = F2FsSyncFileExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsSyncFileExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsSyncFileExitFtraceEvent) ProtoMessage() {}

func (x *F2FsSyncFileExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsSyncFileExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsSyncFileExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{216}
}

func (x *F2FsSyncFileExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsSyncFileExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsSyncFileExitFtraceEvent) GetNeedCp() uint32 {
	if x != nil && x.NeedCp != nil {
		return *x.NeedCp
	}
	return 0
}

func (x *F2FsSyncFileExitFtraceEvent) GetDatasync() int32 {
	if x != nil && x.Datasync != nil {
		return *x.Datasync
	}
	return 0
}

func (x *F2FsSyncFileExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsSyncFsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Dirty *int32  `protobuf:"varint,2,opt,name=dirty" json:"dirty,omitempty"`
	Wait  *int32  `protobuf:"varint,3,opt,name=wait" json:"wait,omitempty"`
}

func (x *F2FsSyncFsFtraceEvent) Reset() {
	*x = F2FsSyncFsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsSyncFsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsSyncFsFtraceEvent) ProtoMessage() {}

func (x *F2FsSyncFsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsSyncFsFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsSyncFsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{217}
}

func (x *F2FsSyncFsFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsSyncFsFtraceEvent) GetDirty() int32 {
	if x != nil && x.Dirty != nil {
		return *x.Dirty
	}
	return 0
}

func (x *F2FsSyncFsFtraceEvent) GetWait() int32 {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return 0
}

type F2FsTruncateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pino   *uint64 `protobuf:"varint,3,opt,name=pino" json:"pino,omitempty"`
	Mode   *uint32 `protobuf:"varint,4,opt,name=mode" json:"mode,omitempty"`
	Size   *int64  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Nlink  *uint32 `protobuf:"varint,6,opt,name=nlink" json:"nlink,omitempty"`
	Blocks *uint64 `protobuf:"varint,7,opt,name=blocks" json:"blocks,omitempty"`
	Advise *uint32 `protobuf:"varint,8,opt,name=advise" json:"advise,omitempty"`
}

func (x *F2FsTruncateFtraceEvent) Reset() {
	*x = F2FsTruncateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{218}
}

func (x *F2FsTruncateFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetPino() uint64 {
	if x != nil && x.Pino != nil {
		return *x.Pino
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetNlink() uint32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsTruncateFtraceEvent) GetAdvise() uint32 {
	if x != nil && x.Advise != nil {
		return *x.Advise
	}
	return 0
}

type F2FsTruncateBlocksEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Size   *int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Blocks *uint64 `protobuf:"varint,4,opt,name=blocks" json:"blocks,omitempty"`
	From   *uint64 `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) Reset() {
	*x = F2FsTruncateBlocksEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateBlocksEnterFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateBlocksEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateBlocksEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateBlocksEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{219}
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsTruncateBlocksEnterFtraceEvent) GetFrom() uint64 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

type F2FsTruncateBlocksExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsTruncateBlocksExitFtraceEvent) Reset() {
	*x = F2FsTruncateBlocksExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateBlocksExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateBlocksExitFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateBlocksExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateBlocksExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateBlocksExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{220}
}

func (x *F2FsTruncateBlocksExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateBlocksExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateBlocksExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsTruncateDataBlocksRangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev  *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino  *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Nid  *uint32 `protobuf:"varint,3,opt,name=nid" json:"nid,omitempty"`
	Ofs  *uint32 `protobuf:"varint,4,opt,name=ofs" json:"ofs,omitempty"`
	Free *int32  `protobuf:"varint,5,opt,name=free" json:"free,omitempty"`
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) Reset() {
	*x = F2FsTruncateDataBlocksRangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateDataBlocksRangeFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateDataBlocksRangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateDataBlocksRangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{221}
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) GetNid() uint32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) GetOfs() uint32 {
	if x != nil && x.Ofs != nil {
		return *x.Ofs
	}
	return 0
}

func (x *F2FsTruncateDataBlocksRangeFtraceEvent) GetFree() int32 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

type F2FsTruncateInodeBlocksEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Size   *int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Blocks *uint64 `protobuf:"varint,4,opt,name=blocks" json:"blocks,omitempty"`
	From   *uint64 `protobuf:"varint,5,opt,name=from" json:"from,omitempty"`
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) Reset() {
	*x = F2FsTruncateInodeBlocksEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateInodeBlocksEnterFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateInodeBlocksEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateInodeBlocksEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{222}
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsTruncateInodeBlocksEnterFtraceEvent) GetFrom() uint64 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

type F2FsTruncateInodeBlocksExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsTruncateInodeBlocksExitFtraceEvent) Reset() {
	*x = F2FsTruncateInodeBlocksExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateInodeBlocksExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateInodeBlocksExitFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateInodeBlocksExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateInodeBlocksExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateInodeBlocksExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{223}
}

func (x *F2FsTruncateInodeBlocksExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateInodeBlocksExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateInodeBlocksExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsTruncateNodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Nid     *uint32 `protobuf:"varint,3,opt,name=nid" json:"nid,omitempty"`
	BlkAddr *uint32 `protobuf:"varint,4,opt,name=blk_addr,json=blkAddr" json:"blk_addr,omitempty"`
}

func (x *F2FsTruncateNodeFtraceEvent) Reset() {
	*x = F2FsTruncateNodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateNodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateNodeFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateNodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateNodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateNodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{224}
}

func (x *F2FsTruncateNodeFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateNodeFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateNodeFtraceEvent) GetNid() uint32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *F2FsTruncateNodeFtraceEvent) GetBlkAddr() uint32 {
	if x != nil && x.BlkAddr != nil {
		return *x.BlkAddr
	}
	return 0
}

type F2FsTruncateNodesEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev     *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino     *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Nid     *uint32 `protobuf:"varint,3,opt,name=nid" json:"nid,omitempty"`
	BlkAddr *uint32 `protobuf:"varint,4,opt,name=blk_addr,json=blkAddr" json:"blk_addr,omitempty"`
}

func (x *F2FsTruncateNodesEnterFtraceEvent) Reset() {
	*x = F2FsTruncateNodesEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateNodesEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateNodesEnterFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateNodesEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateNodesEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateNodesEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{225}
}

func (x *F2FsTruncateNodesEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateNodesEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateNodesEnterFtraceEvent) GetNid() uint32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *F2FsTruncateNodesEnterFtraceEvent) GetBlkAddr() uint32 {
	if x != nil && x.BlkAddr != nil {
		return *x.BlkAddr
	}
	return 0
}

type F2FsTruncateNodesExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsTruncateNodesExitFtraceEvent) Reset() {
	*x = F2FsTruncateNodesExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncateNodesExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncateNodesExitFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncateNodesExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncateNodesExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncateNodesExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{226}
}

func (x *F2FsTruncateNodesExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncateNodesExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncateNodesExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsTruncatePartialNodesFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Nid   *uint32 `protobuf:"varint,3,opt,name=nid" json:"nid,omitempty"`
	Depth *int32  `protobuf:"varint,4,opt,name=depth" json:"depth,omitempty"`
	Err   *int32  `protobuf:"varint,5,opt,name=err" json:"err,omitempty"`
}

func (x *F2FsTruncatePartialNodesFtraceEvent) Reset() {
	*x = F2FsTruncatePartialNodesFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsTruncatePartialNodesFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsTruncatePartialNodesFtraceEvent) ProtoMessage() {}

func (x *F2FsTruncatePartialNodesFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsTruncatePartialNodesFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsTruncatePartialNodesFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{227}
}

func (x *F2FsTruncatePartialNodesFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsTruncatePartialNodesFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsTruncatePartialNodesFtraceEvent) GetNid() uint32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *F2FsTruncatePartialNodesFtraceEvent) GetDepth() int32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *F2FsTruncatePartialNodesFtraceEvent) GetErr() int32 {
	if x != nil && x.Err != nil {
		return *x.Err
	}
	return 0
}

type F2FsUnlinkEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Size   *int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Blocks *uint64 `protobuf:"varint,4,opt,name=blocks" json:"blocks,omitempty"`
	Name   *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
}

func (x *F2FsUnlinkEnterFtraceEvent) Reset() {
	*x = F2FsUnlinkEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsUnlinkEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsUnlinkEnterFtraceEvent) ProtoMessage() {}

func (x *F2FsUnlinkEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsUnlinkEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsUnlinkEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{228}
}

func (x *F2FsUnlinkEnterFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsUnlinkEnterFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsUnlinkEnterFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *F2FsUnlinkEnterFtraceEvent) GetBlocks() uint64 {
	if x != nil && x.Blocks != nil {
		return *x.Blocks
	}
	return 0
}

func (x *F2FsUnlinkEnterFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type F2FsUnlinkExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Ret *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *F2FsUnlinkExitFtraceEvent) Reset() {
	*x = F2FsUnlinkExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsUnlinkExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsUnlinkExitFtraceEvent) ProtoMessage() {}

func (x *F2FsUnlinkExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsUnlinkExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsUnlinkExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{229}
}

func (x *F2FsUnlinkExitFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsUnlinkExitFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsUnlinkExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type F2FsVmPageMkwriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Type  *int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Dir   *int32  `protobuf:"varint,4,opt,name=dir" json:"dir,omitempty"`
	Index *uint64 `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Dirty *int32  `protobuf:"varint,6,opt,name=dirty" json:"dirty,omitempty"`
}

func (x *F2FsVmPageMkwriteFtraceEvent) Reset() {
	*x = F2FsVmPageMkwriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsVmPageMkwriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsVmPageMkwriteFtraceEvent) ProtoMessage() {}

func (x *F2FsVmPageMkwriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsVmPageMkwriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsVmPageMkwriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{230}
}

func (x *F2FsVmPageMkwriteFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsVmPageMkwriteFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsVmPageMkwriteFtraceEvent) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *F2FsVmPageMkwriteFtraceEvent) GetDir() int32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

func (x *F2FsVmPageMkwriteFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *F2FsVmPageMkwriteFtraceEvent) GetDirty() int32 {
	if x != nil && x.Dirty != nil {
		return *x.Dirty
	}
	return 0
}

type F2FsWriteBeginFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino   *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos   *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len   *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Flags *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (x *F2FsWriteBeginFtraceEvent) Reset() {
	*x = F2FsWriteBeginFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsWriteBeginFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsWriteBeginFtraceEvent) ProtoMessage() {}

func (x *F2FsWriteBeginFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsWriteBeginFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsWriteBeginFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{231}
}

func (x *F2FsWriteBeginFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsWriteBeginFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsWriteBeginFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *F2FsWriteBeginFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *F2FsWriteBeginFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

type F2FsWriteCheckpointFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev      *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	IsUmount *uint32 `protobuf:"varint,2,opt,name=is_umount,json=isUmount" json:"is_umount,omitempty"`
	Msg      *string `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (x *F2FsWriteCheckpointFtraceEvent) Reset() {
	*x = F2FsWriteCheckpointFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsWriteCheckpointFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsWriteCheckpointFtraceEvent) ProtoMessage() {}

func (x *F2FsWriteCheckpointFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsWriteCheckpointFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsWriteCheckpointFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{232}
}

func (x *F2FsWriteCheckpointFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsWriteCheckpointFtraceEvent) GetIsUmount() uint32 {
	if x != nil && x.IsUmount != nil {
		return *x.IsUmount
	}
	return 0
}

func (x *F2FsWriteCheckpointFtraceEvent) GetMsg() string {
	if x != nil && x.Msg != nil {
		return *x.Msg
	}
	return ""
}

type F2FsWriteEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev    *uint64 `protobuf:"varint,1,opt,name=dev" json:"dev,omitempty"`
	Ino    *uint64 `protobuf:"varint,2,opt,name=ino" json:"ino,omitempty"`
	Pos    *int64  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
	Len    *uint32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Copied *uint32 `protobuf:"varint,5,opt,name=copied" json:"copied,omitempty"`
}

func (x *F2FsWriteEndFtraceEvent) Reset() {
	*x = F2FsWriteEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *F2FsWriteEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*F2FsWriteEndFtraceEvent) ProtoMessage() {}

func (x *F2FsWriteEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use F2FsWriteEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*F2FsWriteEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{233}
}

func (x *F2FsWriteEndFtraceEvent) GetDev() uint64 {
	if x != nil && x.Dev != nil {
		return *x.Dev
	}
	return 0
}

func (x *F2FsWriteEndFtraceEvent) GetIno() uint64 {
	if x != nil && x.Ino != nil {
		return *x.Ino
	}
	return 0
}

func (x *F2FsWriteEndFtraceEvent) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *F2FsWriteEndFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *F2FsWriteEndFtraceEvent) GetCopied() uint32 {
	if x != nil && x.Copied != nil {
		return *x.Copied
	}
	return 0
}

type FastrpcDmaStatFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid            *int32  `protobuf:"varint,1,opt,name=cid" json:"cid,omitempty"`
	Len            *int64  `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	TotalAllocated *uint64 `protobuf:"varint,3,opt,name=total_allocated,json=totalAllocated" json:"total_allocated,omitempty"`
}

func (x *FastrpcDmaStatFtraceEvent) Reset() {
	*x = FastrpcDmaStatFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FastrpcDmaStatFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastrpcDmaStatFtraceEvent) ProtoMessage() {}

func (x *FastrpcDmaStatFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastrpcDmaStatFtraceEvent.ProtoReflect.Descriptor instead.
func (*FastrpcDmaStatFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{234}
}

func (x *FastrpcDmaStatFtraceEvent) GetCid() int32 {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return 0
}

func (x *FastrpcDmaStatFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *FastrpcDmaStatFtraceEvent) GetTotalAllocated() uint64 {
	if x != nil && x.TotalAllocated != nil {
		return *x.TotalAllocated
	}
	return 0
}

type FenceInitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *uint32 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	Driver   *string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Seqno    *uint32 `protobuf:"varint,3,opt,name=seqno" json:"seqno,omitempty"`
	Timeline *string `protobuf:"bytes,4,opt,name=timeline" json:"timeline,omitempty"`
}

func (x *FenceInitFtraceEvent) Reset() {
	*x = FenceInitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenceInitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenceInitFtraceEvent) ProtoMessage() {}

func (x *FenceInitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenceInitFtraceEvent.ProtoReflect.Descriptor instead.
func (*FenceInitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{235}
}

func (x *FenceInitFtraceEvent) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *FenceInitFtraceEvent) GetDriver() string {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return ""
}

func (x *FenceInitFtraceEvent) GetSeqno() uint32 {
	if x != nil && x.Seqno != nil {
		return *x.Seqno
	}
	return 0
}

func (x *FenceInitFtraceEvent) GetTimeline() string {
	if x != nil && x.Timeline != nil {
		return *x.Timeline
	}
	return ""
}

type FenceDestroyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *uint32 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	Driver   *string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Seqno    *uint32 `protobuf:"varint,3,opt,name=seqno" json:"seqno,omitempty"`
	Timeline *string `protobuf:"bytes,4,opt,name=timeline" json:"timeline,omitempty"`
}

func (x *FenceDestroyFtraceEvent) Reset() {
	*x = FenceDestroyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenceDestroyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenceDestroyFtraceEvent) ProtoMessage() {}

func (x *FenceDestroyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenceDestroyFtraceEvent.ProtoReflect.Descriptor instead.
func (*FenceDestroyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{236}
}

func (x *FenceDestroyFtraceEvent) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *FenceDestroyFtraceEvent) GetDriver() string {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return ""
}

func (x *FenceDestroyFtraceEvent) GetSeqno() uint32 {
	if x != nil && x.Seqno != nil {
		return *x.Seqno
	}
	return 0
}

func (x *FenceDestroyFtraceEvent) GetTimeline() string {
	if x != nil && x.Timeline != nil {
		return *x.Timeline
	}
	return ""
}

type FenceEnableSignalFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *uint32 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	Driver   *string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Seqno    *uint32 `protobuf:"varint,3,opt,name=seqno" json:"seqno,omitempty"`
	Timeline *string `protobuf:"bytes,4,opt,name=timeline" json:"timeline,omitempty"`
}

func (x *FenceEnableSignalFtraceEvent) Reset() {
	*x = FenceEnableSignalFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenceEnableSignalFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenceEnableSignalFtraceEvent) ProtoMessage() {}

func (x *FenceEnableSignalFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenceEnableSignalFtraceEvent.ProtoReflect.Descriptor instead.
func (*FenceEnableSignalFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{237}
}

func (x *FenceEnableSignalFtraceEvent) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *FenceEnableSignalFtraceEvent) GetDriver() string {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return ""
}

func (x *FenceEnableSignalFtraceEvent) GetSeqno() uint32 {
	if x != nil && x.Seqno != nil {
		return *x.Seqno
	}
	return 0
}

func (x *FenceEnableSignalFtraceEvent) GetTimeline() string {
	if x != nil && x.Timeline != nil {
		return *x.Timeline
	}
	return ""
}

type FenceSignaledFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context  *uint32 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	Driver   *string `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	Seqno    *uint32 `protobuf:"varint,3,opt,name=seqno" json:"seqno,omitempty"`
	Timeline *string `protobuf:"bytes,4,opt,name=timeline" json:"timeline,omitempty"`
}

func (x *FenceSignaledFtraceEvent) Reset() {
	*x = FenceSignaledFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenceSignaledFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenceSignaledFtraceEvent) ProtoMessage() {}

func (x *FenceSignaledFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenceSignaledFtraceEvent.ProtoReflect.Descriptor instead.
func (*FenceSignaledFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{238}
}

func (x *FenceSignaledFtraceEvent) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *FenceSignaledFtraceEvent) GetDriver() string {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return ""
}

func (x *FenceSignaledFtraceEvent) GetSeqno() uint32 {
	if x != nil && x.Seqno != nil {
		return *x.Seqno
	}
	return 0
}

func (x *FenceSignaledFtraceEvent) GetTimeline() string {
	if x != nil && x.Timeline != nil {
		return *x.Timeline
	}
	return ""
}

type MmFilemapAddToPageCacheFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pfn   *uint64 `protobuf:"varint,1,opt,name=pfn" json:"pfn,omitempty"`
	IIno  *uint64 `protobuf:"varint,2,opt,name=i_ino,json=iIno" json:"i_ino,omitempty"`
	Index *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	SDev  *uint64 `protobuf:"varint,4,opt,name=s_dev,json=sDev" json:"s_dev,omitempty"`
	Page  *uint64 `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
}

func (x *MmFilemapAddToPageCacheFtraceEvent) Reset() {
	*x = MmFilemapAddToPageCacheFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmFilemapAddToPageCacheFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmFilemapAddToPageCacheFtraceEvent) ProtoMessage() {}

func (x *MmFilemapAddToPageCacheFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmFilemapAddToPageCacheFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmFilemapAddToPageCacheFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{239}
}

func (x *MmFilemapAddToPageCacheFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

func (x *MmFilemapAddToPageCacheFtraceEvent) GetIIno() uint64 {
	if x != nil && x.IIno != nil {
		return *x.IIno
	}
	return 0
}

func (x *MmFilemapAddToPageCacheFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MmFilemapAddToPageCacheFtraceEvent) GetSDev() uint64 {
	if x != nil && x.SDev != nil {
		return *x.SDev
	}
	return 0
}

func (x *MmFilemapAddToPageCacheFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type MmFilemapDeleteFromPageCacheFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pfn   *uint64 `protobuf:"varint,1,opt,name=pfn" json:"pfn,omitempty"`
	IIno  *uint64 `protobuf:"varint,2,opt,name=i_ino,json=iIno" json:"i_ino,omitempty"`
	Index *uint64 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	SDev  *uint64 `protobuf:"varint,4,opt,name=s_dev,json=sDev" json:"s_dev,omitempty"`
	Page  *uint64 `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) Reset() {
	*x = MmFilemapDeleteFromPageCacheFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmFilemapDeleteFromPageCacheFtraceEvent) ProtoMessage() {}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmFilemapDeleteFromPageCacheFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmFilemapDeleteFromPageCacheFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{240}
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) GetIIno() uint64 {
	if x != nil && x.IIno != nil {
		return *x.IIno
	}
	return 0
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) GetSDev() uint64 {
	if x != nil && x.SDev != nil {
		return *x.SDev
	}
	return 0
}

func (x *MmFilemapDeleteFromPageCacheFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

type PrintFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip  *uint64 `protobuf:"varint,1,opt,name=ip" json:"ip,omitempty"`
	Buf *string `protobuf:"bytes,2,opt,name=buf" json:"buf,omitempty"`
}

func (x *PrintFtraceEvent) Reset() {
	*x = PrintFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrintFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrintFtraceEvent) ProtoMessage() {}

func (x *PrintFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrintFtraceEvent.ProtoReflect.Descriptor instead.
func (*PrintFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{241}
}

func (x *PrintFtraceEvent) GetIp() uint64 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *PrintFtraceEvent) GetBuf() string {
	if x != nil && x.Buf != nil {
		return *x.Buf
	}
	return ""
}

type G2DTracingMarkWriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid   *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Name  *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Type  *uint32 `protobuf:"varint,5,opt,name=type" json:"type,omitempty"`
	Value *int32  `protobuf:"varint,6,opt,name=value" json:"value,omitempty"`
}

func (x *G2DTracingMarkWriteFtraceEvent) Reset() {
	*x = G2DTracingMarkWriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *G2DTracingMarkWriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*G2DTracingMarkWriteFtraceEvent) ProtoMessage() {}

func (x *G2DTracingMarkWriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use G2DTracingMarkWriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*G2DTracingMarkWriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{242}
}

func (x *G2DTracingMarkWriteFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *G2DTracingMarkWriteFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *G2DTracingMarkWriteFtraceEvent) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *G2DTracingMarkWriteFtraceEvent) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// This generic proto is used to output events in the trace
// when a specific proto for that event does not exist.
type GenericFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName *string                     `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	Field     []*GenericFtraceEvent_Field `protobuf:"bytes,2,rep,name=field" json:"field,omitempty"`
}

func (x *GenericFtraceEvent) Reset() {
	*x = GenericFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericFtraceEvent) ProtoMessage() {}

func (x *GenericFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericFtraceEvent.ProtoReflect.Descriptor instead.
func (*GenericFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{243}
}

func (x *GenericFtraceEvent) GetEventName() string {
	if x != nil && x.EventName != nil {
		return *x.EventName
	}
	return ""
}

func (x *GenericFtraceEvent) GetField() []*GenericFtraceEvent_Field {
	if x != nil {
		return x.Field
	}
	return nil
}

type GpuMemTotalFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuId *uint32 `protobuf:"varint,1,opt,name=gpu_id,json=gpuId" json:"gpu_id,omitempty"`
	Pid   *uint32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Size  *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (x *GpuMemTotalFtraceEvent) Reset() {
	*x = GpuMemTotalFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuMemTotalFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuMemTotalFtraceEvent) ProtoMessage() {}

func (x *GpuMemTotalFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuMemTotalFtraceEvent.ProtoReflect.Descriptor instead.
func (*GpuMemTotalFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{244}
}

func (x *GpuMemTotalFtraceEvent) GetGpuId() uint32 {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return 0
}

func (x *GpuMemTotalFtraceEvent) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *GpuMemTotalFtraceEvent) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type I2CReadFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	MsgNr     *uint32 `protobuf:"varint,2,opt,name=msg_nr,json=msgNr" json:"msg_nr,omitempty"`
	Addr      *uint32 `protobuf:"varint,3,opt,name=addr" json:"addr,omitempty"`
	Flags     *uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	Len       *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
}

func (x *I2CReadFtraceEvent) Reset() {
	*x = I2CReadFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I2CReadFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I2CReadFtraceEvent) ProtoMessage() {}

func (x *I2CReadFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I2CReadFtraceEvent.ProtoReflect.Descriptor instead.
func (*I2CReadFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{245}
}

func (x *I2CReadFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *I2CReadFtraceEvent) GetMsgNr() uint32 {
	if x != nil && x.MsgNr != nil {
		return *x.MsgNr
	}
	return 0
}

func (x *I2CReadFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *I2CReadFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *I2CReadFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type I2CWriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	MsgNr     *uint32 `protobuf:"varint,2,opt,name=msg_nr,json=msgNr" json:"msg_nr,omitempty"`
	Addr      *uint32 `protobuf:"varint,3,opt,name=addr" json:"addr,omitempty"`
	Flags     *uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	Len       *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Buf       *uint32 `protobuf:"varint,6,opt,name=buf" json:"buf,omitempty"`
}

func (x *I2CWriteFtraceEvent) Reset() {
	*x = I2CWriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I2CWriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I2CWriteFtraceEvent) ProtoMessage() {}

func (x *I2CWriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I2CWriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*I2CWriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{246}
}

func (x *I2CWriteFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *I2CWriteFtraceEvent) GetMsgNr() uint32 {
	if x != nil && x.MsgNr != nil {
		return *x.MsgNr
	}
	return 0
}

func (x *I2CWriteFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *I2CWriteFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *I2CWriteFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *I2CWriteFtraceEvent) GetBuf() uint32 {
	if x != nil && x.Buf != nil {
		return *x.Buf
	}
	return 0
}

type I2CResultFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	NrMsgs    *uint32 `protobuf:"varint,2,opt,name=nr_msgs,json=nrMsgs" json:"nr_msgs,omitempty"`
	Ret       *int32  `protobuf:"varint,3,opt,name=ret" json:"ret,omitempty"`
}

func (x *I2CResultFtraceEvent) Reset() {
	*x = I2CResultFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I2CResultFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I2CResultFtraceEvent) ProtoMessage() {}

func (x *I2CResultFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I2CResultFtraceEvent.ProtoReflect.Descriptor instead.
func (*I2CResultFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{247}
}

func (x *I2CResultFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *I2CResultFtraceEvent) GetNrMsgs() uint32 {
	if x != nil && x.NrMsgs != nil {
		return *x.NrMsgs
	}
	return 0
}

func (x *I2CResultFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type I2CReplyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	MsgNr     *uint32 `protobuf:"varint,2,opt,name=msg_nr,json=msgNr" json:"msg_nr,omitempty"`
	Addr      *uint32 `protobuf:"varint,3,opt,name=addr" json:"addr,omitempty"`
	Flags     *uint32 `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
	Len       *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Buf       *uint32 `protobuf:"varint,6,opt,name=buf" json:"buf,omitempty"`
}

func (x *I2CReplyFtraceEvent) Reset() {
	*x = I2CReplyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I2CReplyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I2CReplyFtraceEvent) ProtoMessage() {}

func (x *I2CReplyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I2CReplyFtraceEvent.ProtoReflect.Descriptor instead.
func (*I2CReplyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{248}
}

func (x *I2CReplyFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *I2CReplyFtraceEvent) GetMsgNr() uint32 {
	if x != nil && x.MsgNr != nil {
		return *x.MsgNr
	}
	return 0
}

func (x *I2CReplyFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *I2CReplyFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *I2CReplyFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *I2CReplyFtraceEvent) GetBuf() uint32 {
	if x != nil && x.Buf != nil {
		return *x.Buf
	}
	return 0
}

type SmbusReadFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	Flags     *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Addr      *uint32 `protobuf:"varint,3,opt,name=addr" json:"addr,omitempty"`
	Command   *uint32 `protobuf:"varint,4,opt,name=command" json:"command,omitempty"`
	Protocol  *uint32 `protobuf:"varint,5,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *SmbusReadFtraceEvent) Reset() {
	*x = SmbusReadFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmbusReadFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmbusReadFtraceEvent) ProtoMessage() {}

func (x *SmbusReadFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmbusReadFtraceEvent.ProtoReflect.Descriptor instead.
func (*SmbusReadFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{249}
}

func (x *SmbusReadFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *SmbusReadFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *SmbusReadFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *SmbusReadFtraceEvent) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *SmbusReadFtraceEvent) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

type SmbusWriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	Addr      *uint32 `protobuf:"varint,2,opt,name=addr" json:"addr,omitempty"`
	Flags     *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Command   *uint32 `protobuf:"varint,4,opt,name=command" json:"command,omitempty"`
	Len       *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Protocol  *uint32 `protobuf:"varint,6,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *SmbusWriteFtraceEvent) Reset() {
	*x = SmbusWriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmbusWriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmbusWriteFtraceEvent) ProtoMessage() {}

func (x *SmbusWriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmbusWriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*SmbusWriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{250}
}

func (x *SmbusWriteFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *SmbusWriteFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *SmbusWriteFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *SmbusWriteFtraceEvent) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *SmbusWriteFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *SmbusWriteFtraceEvent) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

type SmbusResultFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	Addr      *uint32 `protobuf:"varint,2,opt,name=addr" json:"addr,omitempty"`
	Flags     *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	ReadWrite *uint32 `protobuf:"varint,4,opt,name=read_write,json=readWrite" json:"read_write,omitempty"`
	Command   *uint32 `protobuf:"varint,5,opt,name=command" json:"command,omitempty"`
	Res       *int32  `protobuf:"varint,6,opt,name=res" json:"res,omitempty"`
	Protocol  *uint32 `protobuf:"varint,7,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *SmbusResultFtraceEvent) Reset() {
	*x = SmbusResultFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmbusResultFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmbusResultFtraceEvent) ProtoMessage() {}

func (x *SmbusResultFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmbusResultFtraceEvent.ProtoReflect.Descriptor instead.
func (*SmbusResultFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{251}
}

func (x *SmbusResultFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *SmbusResultFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *SmbusResultFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *SmbusResultFtraceEvent) GetReadWrite() uint32 {
	if x != nil && x.ReadWrite != nil {
		return *x.ReadWrite
	}
	return 0
}

func (x *SmbusResultFtraceEvent) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *SmbusResultFtraceEvent) GetRes() int32 {
	if x != nil && x.Res != nil {
		return *x.Res
	}
	return 0
}

func (x *SmbusResultFtraceEvent) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

type SmbusReplyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdapterNr *int32  `protobuf:"varint,1,opt,name=adapter_nr,json=adapterNr" json:"adapter_nr,omitempty"`
	Addr      *uint32 `protobuf:"varint,2,opt,name=addr" json:"addr,omitempty"`
	Flags     *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Command   *uint32 `protobuf:"varint,4,opt,name=command" json:"command,omitempty"`
	Len       *uint32 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Protocol  *uint32 `protobuf:"varint,6,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *SmbusReplyFtraceEvent) Reset() {
	*x = SmbusReplyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmbusReplyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmbusReplyFtraceEvent) ProtoMessage() {}

func (x *SmbusReplyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmbusReplyFtraceEvent.ProtoReflect.Descriptor instead.
func (*SmbusReplyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{252}
}

func (x *SmbusReplyFtraceEvent) GetAdapterNr() int32 {
	if x != nil && x.AdapterNr != nil {
		return *x.AdapterNr
	}
	return 0
}

func (x *SmbusReplyFtraceEvent) GetAddr() uint32 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *SmbusReplyFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *SmbusReplyFtraceEvent) GetCommand() uint32 {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return 0
}

func (x *SmbusReplyFtraceEvent) GetLen() uint32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *SmbusReplyFtraceEvent) GetProtocol() uint32 {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return 0
}

type IonStatFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferId       *uint32 `protobuf:"varint,1,opt,name=buffer_id,json=bufferId" json:"buffer_id,omitempty"`
	Len            *int64  `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	TotalAllocated *uint64 `protobuf:"varint,3,opt,name=total_allocated,json=totalAllocated" json:"total_allocated,omitempty"`
}

func (x *IonStatFtraceEvent) Reset() {
	*x = IonStatFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonStatFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonStatFtraceEvent) ProtoMessage() {}

func (x *IonStatFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonStatFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonStatFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{253}
}

func (x *IonStatFtraceEvent) GetBufferId() uint32 {
	if x != nil && x.BufferId != nil {
		return *x.BufferId
	}
	return 0
}

func (x *IonStatFtraceEvent) GetLen() int64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonStatFtraceEvent) GetTotalAllocated() uint64 {
	if x != nil && x.TotalAllocated != nil {
		return *x.TotalAllocated
	}
	return 0
}

type IpiEntryFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (x *IpiEntryFtraceEvent) Reset() {
	*x = IpiEntryFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpiEntryFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpiEntryFtraceEvent) ProtoMessage() {}

func (x *IpiEntryFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpiEntryFtraceEvent.ProtoReflect.Descriptor instead.
func (*IpiEntryFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{254}
}

func (x *IpiEntryFtraceEvent) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type IpiExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason *string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (x *IpiExitFtraceEvent) Reset() {
	*x = IpiExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpiExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpiExitFtraceEvent) ProtoMessage() {}

func (x *IpiExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpiExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*IpiExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{255}
}

func (x *IpiExitFtraceEvent) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type IpiRaiseFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetCpus *uint32 `protobuf:"varint,1,opt,name=target_cpus,json=targetCpus" json:"target_cpus,omitempty"`
	Reason     *string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
}

func (x *IpiRaiseFtraceEvent) Reset() {
	*x = IpiRaiseFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpiRaiseFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpiRaiseFtraceEvent) ProtoMessage() {}

func (x *IpiRaiseFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpiRaiseFtraceEvent.ProtoReflect.Descriptor instead.
func (*IpiRaiseFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{256}
}

func (x *IpiRaiseFtraceEvent) GetTargetCpus() uint32 {
	if x != nil && x.TargetCpus != nil {
		return *x.TargetCpus
	}
	return 0
}

func (x *IpiRaiseFtraceEvent) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type SoftirqEntryFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vec *uint32 `protobuf:"varint,1,opt,name=vec" json:"vec,omitempty"`
}

func (x *SoftirqEntryFtraceEvent) Reset() {
	*x = SoftirqEntryFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftirqEntryFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftirqEntryFtraceEvent) ProtoMessage() {}

func (x *SoftirqEntryFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftirqEntryFtraceEvent.ProtoReflect.Descriptor instead.
func (*SoftirqEntryFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{257}
}

func (x *SoftirqEntryFtraceEvent) GetVec() uint32 {
	if x != nil && x.Vec != nil {
		return *x.Vec
	}
	return 0
}

type SoftirqExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vec *uint32 `protobuf:"varint,1,opt,name=vec" json:"vec,omitempty"`
}

func (x *SoftirqExitFtraceEvent) Reset() {
	*x = SoftirqExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftirqExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftirqExitFtraceEvent) ProtoMessage() {}

func (x *SoftirqExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftirqExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*SoftirqExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{258}
}

func (x *SoftirqExitFtraceEvent) GetVec() uint32 {
	if x != nil && x.Vec != nil {
		return *x.Vec
	}
	return 0
}

type SoftirqRaiseFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vec *uint32 `protobuf:"varint,1,opt,name=vec" json:"vec,omitempty"`
}

func (x *SoftirqRaiseFtraceEvent) Reset() {
	*x = SoftirqRaiseFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftirqRaiseFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftirqRaiseFtraceEvent) ProtoMessage() {}

func (x *SoftirqRaiseFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftirqRaiseFtraceEvent.ProtoReflect.Descriptor instead.
func (*SoftirqRaiseFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{259}
}

func (x *SoftirqRaiseFtraceEvent) GetVec() uint32 {
	if x != nil && x.Vec != nil {
		return *x.Vec
	}
	return 0
}

type IrqHandlerEntryFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Irq     *int32  `protobuf:"varint,1,opt,name=irq" json:"irq,omitempty"`
	Name    *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Handler *uint32 `protobuf:"varint,3,opt,name=handler" json:"handler,omitempty"`
}

func (x *IrqHandlerEntryFtraceEvent) Reset() {
	*x = IrqHandlerEntryFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrqHandlerEntryFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrqHandlerEntryFtraceEvent) ProtoMessage() {}

func (x *IrqHandlerEntryFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrqHandlerEntryFtraceEvent.ProtoReflect.Descriptor instead.
func (*IrqHandlerEntryFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{260}
}

func (x *IrqHandlerEntryFtraceEvent) GetIrq() int32 {
	if x != nil && x.Irq != nil {
		return *x.Irq
	}
	return 0
}

func (x *IrqHandlerEntryFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IrqHandlerEntryFtraceEvent) GetHandler() uint32 {
	if x != nil && x.Handler != nil {
		return *x.Handler
	}
	return 0
}

type IrqHandlerExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Irq *int32 `protobuf:"varint,1,opt,name=irq" json:"irq,omitempty"`
	Ret *int32 `protobuf:"varint,2,opt,name=ret" json:"ret,omitempty"`
}

func (x *IrqHandlerExitFtraceEvent) Reset() {
	*x = IrqHandlerExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrqHandlerExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrqHandlerExitFtraceEvent) ProtoMessage() {}

func (x *IrqHandlerExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrqHandlerExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*IrqHandlerExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{261}
}

func (x *IrqHandlerExitFtraceEvent) GetIrq() int32 {
	if x != nil && x.Irq != nil {
		return *x.Irq
	}
	return 0
}

func (x *IrqHandlerExitFtraceEvent) GetRet() int32 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type AllocPagesIommuEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Order    *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *AllocPagesIommuEndFtraceEvent) Reset() {
	*x = AllocPagesIommuEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocPagesIommuEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocPagesIommuEndFtraceEvent) ProtoMessage() {}

func (x *AllocPagesIommuEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocPagesIommuEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*AllocPagesIommuEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{262}
}

func (x *AllocPagesIommuEndFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *AllocPagesIommuEndFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type AllocPagesIommuFailFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Order    *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *AllocPagesIommuFailFtraceEvent) Reset() {
	*x = AllocPagesIommuFailFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocPagesIommuFailFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocPagesIommuFailFtraceEvent) ProtoMessage() {}

func (x *AllocPagesIommuFailFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocPagesIommuFailFtraceEvent.ProtoReflect.Descriptor instead.
func (*AllocPagesIommuFailFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{263}
}

func (x *AllocPagesIommuFailFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *AllocPagesIommuFailFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type AllocPagesIommuStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Order    *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *AllocPagesIommuStartFtraceEvent) Reset() {
	*x = AllocPagesIommuStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocPagesIommuStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocPagesIommuStartFtraceEvent) ProtoMessage() {}

func (x *AllocPagesIommuStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocPagesIommuStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*AllocPagesIommuStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{264}
}

func (x *AllocPagesIommuStartFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *AllocPagesIommuStartFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type AllocPagesSysEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Order    *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *AllocPagesSysEndFtraceEvent) Reset() {
	*x = AllocPagesSysEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocPagesSysEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocPagesSysEndFtraceEvent) ProtoMessage() {}

func (x *AllocPagesSysEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocPagesSysEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*AllocPagesSysEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{265}
}

func (x *AllocPagesSysEndFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *AllocPagesSysEndFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type AllocPagesSysFailFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Order    *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *AllocPagesSysFailFtraceEvent) Reset() {
	*x = AllocPagesSysFailFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocPagesSysFailFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocPagesSysFailFtraceEvent) ProtoMessage() {}

func (x *AllocPagesSysFailFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocPagesSysFailFtraceEvent.ProtoReflect.Descriptor instead.
func (*AllocPagesSysFailFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{266}
}

func (x *AllocPagesSysFailFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *AllocPagesSysFailFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type AllocPagesSysStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Order    *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *AllocPagesSysStartFtraceEvent) Reset() {
	*x = AllocPagesSysStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocPagesSysStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocPagesSysStartFtraceEvent) ProtoMessage() {}

func (x *AllocPagesSysStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocPagesSysStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*AllocPagesSysStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{267}
}

func (x *AllocPagesSysStartFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *AllocPagesSysStartFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type DmaAllocContiguousRetryFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tries *int32 `protobuf:"varint,1,opt,name=tries" json:"tries,omitempty"`
}

func (x *DmaAllocContiguousRetryFtraceEvent) Reset() {
	*x = DmaAllocContiguousRetryFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DmaAllocContiguousRetryFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DmaAllocContiguousRetryFtraceEvent) ProtoMessage() {}

func (x *DmaAllocContiguousRetryFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DmaAllocContiguousRetryFtraceEvent.ProtoReflect.Descriptor instead.
func (*DmaAllocContiguousRetryFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{268}
}

func (x *DmaAllocContiguousRetryFtraceEvent) GetTries() int32 {
	if x != nil && x.Tries != nil {
		return *x.Tries
	}
	return 0
}

type IommuMapRangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkSize *uint64 `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize" json:"chunk_size,omitempty"`
	Len       *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	Pa        *uint64 `protobuf:"varint,3,opt,name=pa" json:"pa,omitempty"`
	Va        *uint64 `protobuf:"varint,4,opt,name=va" json:"va,omitempty"`
}

func (x *IommuMapRangeFtraceEvent) Reset() {
	*x = IommuMapRangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IommuMapRangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IommuMapRangeFtraceEvent) ProtoMessage() {}

func (x *IommuMapRangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IommuMapRangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*IommuMapRangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{269}
}

func (x *IommuMapRangeFtraceEvent) GetChunkSize() uint64 {
	if x != nil && x.ChunkSize != nil {
		return *x.ChunkSize
	}
	return 0
}

func (x *IommuMapRangeFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IommuMapRangeFtraceEvent) GetPa() uint64 {
	if x != nil && x.Pa != nil {
		return *x.Pa
	}
	return 0
}

func (x *IommuMapRangeFtraceEvent) GetVa() uint64 {
	if x != nil && x.Va != nil {
		return *x.Va
	}
	return 0
}

type IommuSecPtblMapRangeEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len   *uint64 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
	Num   *int32  `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Pa    *uint32 `protobuf:"varint,3,opt,name=pa" json:"pa,omitempty"`
	SecId *int32  `protobuf:"varint,4,opt,name=sec_id,json=secId" json:"sec_id,omitempty"`
	Va    *uint64 `protobuf:"varint,5,opt,name=va" json:"va,omitempty"`
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) Reset() {
	*x = IommuSecPtblMapRangeEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IommuSecPtblMapRangeEndFtraceEvent) ProtoMessage() {}

func (x *IommuSecPtblMapRangeEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IommuSecPtblMapRangeEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*IommuSecPtblMapRangeEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{270}
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) GetPa() uint32 {
	if x != nil && x.Pa != nil {
		return *x.Pa
	}
	return 0
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) GetSecId() int32 {
	if x != nil && x.SecId != nil {
		return *x.SecId
	}
	return 0
}

func (x *IommuSecPtblMapRangeEndFtraceEvent) GetVa() uint64 {
	if x != nil && x.Va != nil {
		return *x.Va
	}
	return 0
}

type IommuSecPtblMapRangeStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len   *uint64 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
	Num   *int32  `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Pa    *uint32 `protobuf:"varint,3,opt,name=pa" json:"pa,omitempty"`
	SecId *int32  `protobuf:"varint,4,opt,name=sec_id,json=secId" json:"sec_id,omitempty"`
	Va    *uint64 `protobuf:"varint,5,opt,name=va" json:"va,omitempty"`
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) Reset() {
	*x = IommuSecPtblMapRangeStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IommuSecPtblMapRangeStartFtraceEvent) ProtoMessage() {}

func (x *IommuSecPtblMapRangeStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IommuSecPtblMapRangeStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*IommuSecPtblMapRangeStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{271}
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) GetPa() uint32 {
	if x != nil && x.Pa != nil {
		return *x.Pa
	}
	return 0
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) GetSecId() int32 {
	if x != nil && x.SecId != nil {
		return *x.SecId
	}
	return 0
}

func (x *IommuSecPtblMapRangeStartFtraceEvent) GetVa() uint64 {
	if x != nil && x.Va != nil {
		return *x.Va
	}
	return 0
}

type IonAllocBufferEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName *string `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	Flags      *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	HeapName   *string `protobuf:"bytes,3,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len        *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Mask       *uint32 `protobuf:"varint,5,opt,name=mask" json:"mask,omitempty"`
}

func (x *IonAllocBufferEndFtraceEvent) Reset() {
	*x = IonAllocBufferEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonAllocBufferEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonAllocBufferEndFtraceEvent) ProtoMessage() {}

func (x *IonAllocBufferEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonAllocBufferEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonAllocBufferEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{272}
}

func (x *IonAllocBufferEndFtraceEvent) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *IonAllocBufferEndFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonAllocBufferEndFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonAllocBufferEndFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonAllocBufferEndFtraceEvent) GetMask() uint32 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

type IonAllocBufferFailFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName *string `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	Error      *int64  `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
	Flags      *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	HeapName   *string `protobuf:"bytes,4,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len        *uint64 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Mask       *uint32 `protobuf:"varint,6,opt,name=mask" json:"mask,omitempty"`
}

func (x *IonAllocBufferFailFtraceEvent) Reset() {
	*x = IonAllocBufferFailFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonAllocBufferFailFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonAllocBufferFailFtraceEvent) ProtoMessage() {}

func (x *IonAllocBufferFailFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonAllocBufferFailFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonAllocBufferFailFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{273}
}

func (x *IonAllocBufferFailFtraceEvent) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *IonAllocBufferFailFtraceEvent) GetError() int64 {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return 0
}

func (x *IonAllocBufferFailFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonAllocBufferFailFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonAllocBufferFailFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonAllocBufferFailFtraceEvent) GetMask() uint32 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

type IonAllocBufferFallbackFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName *string `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	Error      *int64  `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
	Flags      *uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	HeapName   *string `protobuf:"bytes,4,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len        *uint64 `protobuf:"varint,5,opt,name=len" json:"len,omitempty"`
	Mask       *uint32 `protobuf:"varint,6,opt,name=mask" json:"mask,omitempty"`
}

func (x *IonAllocBufferFallbackFtraceEvent) Reset() {
	*x = IonAllocBufferFallbackFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonAllocBufferFallbackFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonAllocBufferFallbackFtraceEvent) ProtoMessage() {}

func (x *IonAllocBufferFallbackFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonAllocBufferFallbackFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonAllocBufferFallbackFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{274}
}

func (x *IonAllocBufferFallbackFtraceEvent) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *IonAllocBufferFallbackFtraceEvent) GetError() int64 {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return 0
}

func (x *IonAllocBufferFallbackFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonAllocBufferFallbackFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonAllocBufferFallbackFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonAllocBufferFallbackFtraceEvent) GetMask() uint32 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

type IonAllocBufferStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName *string `protobuf:"bytes,1,opt,name=client_name,json=clientName" json:"client_name,omitempty"`
	Flags      *uint32 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	HeapName   *string `protobuf:"bytes,3,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len        *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	Mask       *uint32 `protobuf:"varint,5,opt,name=mask" json:"mask,omitempty"`
}

func (x *IonAllocBufferStartFtraceEvent) Reset() {
	*x = IonAllocBufferStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonAllocBufferStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonAllocBufferStartFtraceEvent) ProtoMessage() {}

func (x *IonAllocBufferStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonAllocBufferStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonAllocBufferStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{275}
}

func (x *IonAllocBufferStartFtraceEvent) GetClientName() string {
	if x != nil && x.ClientName != nil {
		return *x.ClientName
	}
	return ""
}

func (x *IonAllocBufferStartFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonAllocBufferStartFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonAllocBufferStartFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonAllocBufferStartFtraceEvent) GetMask() uint32 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

type IonCpAllocRetryFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tries *int32 `protobuf:"varint,1,opt,name=tries" json:"tries,omitempty"`
}

func (x *IonCpAllocRetryFtraceEvent) Reset() {
	*x = IonCpAllocRetryFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonCpAllocRetryFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonCpAllocRetryFtraceEvent) ProtoMessage() {}

func (x *IonCpAllocRetryFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonCpAllocRetryFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonCpAllocRetryFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{276}
}

func (x *IonCpAllocRetryFtraceEvent) GetTries() int32 {
	if x != nil && x.Tries != nil {
		return *x.Tries
	}
	return 0
}

type IonCpSecureBufferEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Align    *uint64 `protobuf:"varint,1,opt,name=align" json:"align,omitempty"`
	Flags    *uint64 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	HeapName *string `protobuf:"bytes,3,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len      *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *IonCpSecureBufferEndFtraceEvent) Reset() {
	*x = IonCpSecureBufferEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonCpSecureBufferEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonCpSecureBufferEndFtraceEvent) ProtoMessage() {}

func (x *IonCpSecureBufferEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonCpSecureBufferEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonCpSecureBufferEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{277}
}

func (x *IonCpSecureBufferEndFtraceEvent) GetAlign() uint64 {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return 0
}

func (x *IonCpSecureBufferEndFtraceEvent) GetFlags() uint64 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonCpSecureBufferEndFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonCpSecureBufferEndFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type IonCpSecureBufferStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Align    *uint64 `protobuf:"varint,1,opt,name=align" json:"align,omitempty"`
	Flags    *uint64 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	HeapName *string `protobuf:"bytes,3,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len      *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *IonCpSecureBufferStartFtraceEvent) Reset() {
	*x = IonCpSecureBufferStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonCpSecureBufferStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonCpSecureBufferStartFtraceEvent) ProtoMessage() {}

func (x *IonCpSecureBufferStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonCpSecureBufferStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonCpSecureBufferStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{278}
}

func (x *IonCpSecureBufferStartFtraceEvent) GetAlign() uint64 {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return 0
}

func (x *IonCpSecureBufferStartFtraceEvent) GetFlags() uint64 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonCpSecureBufferStartFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonCpSecureBufferStartFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type IonPrefetchingFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Len *uint64 `protobuf:"varint,1,opt,name=len" json:"len,omitempty"`
}

func (x *IonPrefetchingFtraceEvent) Reset() {
	*x = IonPrefetchingFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonPrefetchingFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonPrefetchingFtraceEvent) ProtoMessage() {}

func (x *IonPrefetchingFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonPrefetchingFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonPrefetchingFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{279}
}

func (x *IonPrefetchingFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type IonSecureCmaAddToPoolEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrefetch *uint32 `protobuf:"varint,1,opt,name=is_prefetch,json=isPrefetch" json:"is_prefetch,omitempty"`
	Len        *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	PoolTotal  *int32  `protobuf:"varint,3,opt,name=pool_total,json=poolTotal" json:"pool_total,omitempty"`
}

func (x *IonSecureCmaAddToPoolEndFtraceEvent) Reset() {
	*x = IonSecureCmaAddToPoolEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonSecureCmaAddToPoolEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonSecureCmaAddToPoolEndFtraceEvent) ProtoMessage() {}

func (x *IonSecureCmaAddToPoolEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonSecureCmaAddToPoolEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonSecureCmaAddToPoolEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{280}
}

func (x *IonSecureCmaAddToPoolEndFtraceEvent) GetIsPrefetch() uint32 {
	if x != nil && x.IsPrefetch != nil {
		return *x.IsPrefetch
	}
	return 0
}

func (x *IonSecureCmaAddToPoolEndFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonSecureCmaAddToPoolEndFtraceEvent) GetPoolTotal() int32 {
	if x != nil && x.PoolTotal != nil {
		return *x.PoolTotal
	}
	return 0
}

type IonSecureCmaAddToPoolStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsPrefetch *uint32 `protobuf:"varint,1,opt,name=is_prefetch,json=isPrefetch" json:"is_prefetch,omitempty"`
	Len        *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	PoolTotal  *int32  `protobuf:"varint,3,opt,name=pool_total,json=poolTotal" json:"pool_total,omitempty"`
}

func (x *IonSecureCmaAddToPoolStartFtraceEvent) Reset() {
	*x = IonSecureCmaAddToPoolStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonSecureCmaAddToPoolStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonSecureCmaAddToPoolStartFtraceEvent) ProtoMessage() {}

func (x *IonSecureCmaAddToPoolStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonSecureCmaAddToPoolStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonSecureCmaAddToPoolStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{281}
}

func (x *IonSecureCmaAddToPoolStartFtraceEvent) GetIsPrefetch() uint32 {
	if x != nil && x.IsPrefetch != nil {
		return *x.IsPrefetch
	}
	return 0
}

func (x *IonSecureCmaAddToPoolStartFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonSecureCmaAddToPoolStartFtraceEvent) GetPoolTotal() int32 {
	if x != nil && x.PoolTotal != nil {
		return *x.PoolTotal
	}
	return 0
}

type IonSecureCmaAllocateEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Align    *uint64 `protobuf:"varint,1,opt,name=align" json:"align,omitempty"`
	Flags    *uint64 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	HeapName *string `protobuf:"bytes,3,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len      *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *IonSecureCmaAllocateEndFtraceEvent) Reset() {
	*x = IonSecureCmaAllocateEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonSecureCmaAllocateEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonSecureCmaAllocateEndFtraceEvent) ProtoMessage() {}

func (x *IonSecureCmaAllocateEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonSecureCmaAllocateEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonSecureCmaAllocateEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{282}
}

func (x *IonSecureCmaAllocateEndFtraceEvent) GetAlign() uint64 {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return 0
}

func (x *IonSecureCmaAllocateEndFtraceEvent) GetFlags() uint64 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonSecureCmaAllocateEndFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonSecureCmaAllocateEndFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type IonSecureCmaAllocateStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Align    *uint64 `protobuf:"varint,1,opt,name=align" json:"align,omitempty"`
	Flags    *uint64 `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	HeapName *string `protobuf:"bytes,3,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len      *uint64 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
}

func (x *IonSecureCmaAllocateStartFtraceEvent) Reset() {
	*x = IonSecureCmaAllocateStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonSecureCmaAllocateStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonSecureCmaAllocateStartFtraceEvent) ProtoMessage() {}

func (x *IonSecureCmaAllocateStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonSecureCmaAllocateStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonSecureCmaAllocateStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{283}
}

func (x *IonSecureCmaAllocateStartFtraceEvent) GetAlign() uint64 {
	if x != nil && x.Align != nil {
		return *x.Align
	}
	return 0
}

func (x *IonSecureCmaAllocateStartFtraceEvent) GetFlags() uint64 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *IonSecureCmaAllocateStartFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonSecureCmaAllocateStartFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type IonSecureCmaShrinkPoolEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrainedSize *uint64 `protobuf:"varint,1,opt,name=drained_size,json=drainedSize" json:"drained_size,omitempty"`
	SkippedSize *uint64 `protobuf:"varint,2,opt,name=skipped_size,json=skippedSize" json:"skipped_size,omitempty"`
}

func (x *IonSecureCmaShrinkPoolEndFtraceEvent) Reset() {
	*x = IonSecureCmaShrinkPoolEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonSecureCmaShrinkPoolEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonSecureCmaShrinkPoolEndFtraceEvent) ProtoMessage() {}

func (x *IonSecureCmaShrinkPoolEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonSecureCmaShrinkPoolEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonSecureCmaShrinkPoolEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{284}
}

func (x *IonSecureCmaShrinkPoolEndFtraceEvent) GetDrainedSize() uint64 {
	if x != nil && x.DrainedSize != nil {
		return *x.DrainedSize
	}
	return 0
}

func (x *IonSecureCmaShrinkPoolEndFtraceEvent) GetSkippedSize() uint64 {
	if x != nil && x.SkippedSize != nil {
		return *x.SkippedSize
	}
	return 0
}

type IonSecureCmaShrinkPoolStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DrainedSize *uint64 `protobuf:"varint,1,opt,name=drained_size,json=drainedSize" json:"drained_size,omitempty"`
	SkippedSize *uint64 `protobuf:"varint,2,opt,name=skipped_size,json=skippedSize" json:"skipped_size,omitempty"`
}

func (x *IonSecureCmaShrinkPoolStartFtraceEvent) Reset() {
	*x = IonSecureCmaShrinkPoolStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonSecureCmaShrinkPoolStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonSecureCmaShrinkPoolStartFtraceEvent) ProtoMessage() {}

func (x *IonSecureCmaShrinkPoolStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonSecureCmaShrinkPoolStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonSecureCmaShrinkPoolStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{285}
}

func (x *IonSecureCmaShrinkPoolStartFtraceEvent) GetDrainedSize() uint64 {
	if x != nil && x.DrainedSize != nil {
		return *x.DrainedSize
	}
	return 0
}

func (x *IonSecureCmaShrinkPoolStartFtraceEvent) GetSkippedSize() uint64 {
	if x != nil && x.SkippedSize != nil {
		return *x.SkippedSize
	}
	return 0
}

type KfreeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSite *uint64 `protobuf:"varint,1,opt,name=call_site,json=callSite" json:"call_site,omitempty"`
	Ptr      *uint64 `protobuf:"varint,2,opt,name=ptr" json:"ptr,omitempty"`
}

func (x *KfreeFtraceEvent) Reset() {
	*x = KfreeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KfreeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KfreeFtraceEvent) ProtoMessage() {}

func (x *KfreeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KfreeFtraceEvent.ProtoReflect.Descriptor instead.
func (*KfreeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{286}
}

func (x *KfreeFtraceEvent) GetCallSite() uint64 {
	if x != nil && x.CallSite != nil {
		return *x.CallSite
	}
	return 0
}

func (x *KfreeFtraceEvent) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

type KmallocFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesAlloc *uint64 `protobuf:"varint,1,opt,name=bytes_alloc,json=bytesAlloc" json:"bytes_alloc,omitempty"`
	BytesReq   *uint64 `protobuf:"varint,2,opt,name=bytes_req,json=bytesReq" json:"bytes_req,omitempty"`
	CallSite   *uint64 `protobuf:"varint,3,opt,name=call_site,json=callSite" json:"call_site,omitempty"`
	GfpFlags   *uint32 `protobuf:"varint,4,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Ptr        *uint64 `protobuf:"varint,5,opt,name=ptr" json:"ptr,omitempty"`
}

func (x *KmallocFtraceEvent) Reset() {
	*x = KmallocFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KmallocFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KmallocFtraceEvent) ProtoMessage() {}

func (x *KmallocFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KmallocFtraceEvent.ProtoReflect.Descriptor instead.
func (*KmallocFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{287}
}

func (x *KmallocFtraceEvent) GetBytesAlloc() uint64 {
	if x != nil && x.BytesAlloc != nil {
		return *x.BytesAlloc
	}
	return 0
}

func (x *KmallocFtraceEvent) GetBytesReq() uint64 {
	if x != nil && x.BytesReq != nil {
		return *x.BytesReq
	}
	return 0
}

func (x *KmallocFtraceEvent) GetCallSite() uint64 {
	if x != nil && x.CallSite != nil {
		return *x.CallSite
	}
	return 0
}

func (x *KmallocFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *KmallocFtraceEvent) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

type KmallocNodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesAlloc *uint64 `protobuf:"varint,1,opt,name=bytes_alloc,json=bytesAlloc" json:"bytes_alloc,omitempty"`
	BytesReq   *uint64 `protobuf:"varint,2,opt,name=bytes_req,json=bytesReq" json:"bytes_req,omitempty"`
	CallSite   *uint64 `protobuf:"varint,3,opt,name=call_site,json=callSite" json:"call_site,omitempty"`
	GfpFlags   *uint32 `protobuf:"varint,4,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Node       *int32  `protobuf:"varint,5,opt,name=node" json:"node,omitempty"`
	Ptr        *uint64 `protobuf:"varint,6,opt,name=ptr" json:"ptr,omitempty"`
}

func (x *KmallocNodeFtraceEvent) Reset() {
	*x = KmallocNodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KmallocNodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KmallocNodeFtraceEvent) ProtoMessage() {}

func (x *KmallocNodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KmallocNodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*KmallocNodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{288}
}

func (x *KmallocNodeFtraceEvent) GetBytesAlloc() uint64 {
	if x != nil && x.BytesAlloc != nil {
		return *x.BytesAlloc
	}
	return 0
}

func (x *KmallocNodeFtraceEvent) GetBytesReq() uint64 {
	if x != nil && x.BytesReq != nil {
		return *x.BytesReq
	}
	return 0
}

func (x *KmallocNodeFtraceEvent) GetCallSite() uint64 {
	if x != nil && x.CallSite != nil {
		return *x.CallSite
	}
	return 0
}

func (x *KmallocNodeFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *KmallocNodeFtraceEvent) GetNode() int32 {
	if x != nil && x.Node != nil {
		return *x.Node
	}
	return 0
}

func (x *KmallocNodeFtraceEvent) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

type KmemCacheAllocFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesAlloc *uint64 `protobuf:"varint,1,opt,name=bytes_alloc,json=bytesAlloc" json:"bytes_alloc,omitempty"`
	BytesReq   *uint64 `protobuf:"varint,2,opt,name=bytes_req,json=bytesReq" json:"bytes_req,omitempty"`
	CallSite   *uint64 `protobuf:"varint,3,opt,name=call_site,json=callSite" json:"call_site,omitempty"`
	GfpFlags   *uint32 `protobuf:"varint,4,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Ptr        *uint64 `protobuf:"varint,5,opt,name=ptr" json:"ptr,omitempty"`
}

func (x *KmemCacheAllocFtraceEvent) Reset() {
	*x = KmemCacheAllocFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KmemCacheAllocFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KmemCacheAllocFtraceEvent) ProtoMessage() {}

func (x *KmemCacheAllocFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KmemCacheAllocFtraceEvent.ProtoReflect.Descriptor instead.
func (*KmemCacheAllocFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{289}
}

func (x *KmemCacheAllocFtraceEvent) GetBytesAlloc() uint64 {
	if x != nil && x.BytesAlloc != nil {
		return *x.BytesAlloc
	}
	return 0
}

func (x *KmemCacheAllocFtraceEvent) GetBytesReq() uint64 {
	if x != nil && x.BytesReq != nil {
		return *x.BytesReq
	}
	return 0
}

func (x *KmemCacheAllocFtraceEvent) GetCallSite() uint64 {
	if x != nil && x.CallSite != nil {
		return *x.CallSite
	}
	return 0
}

func (x *KmemCacheAllocFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *KmemCacheAllocFtraceEvent) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

type KmemCacheAllocNodeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesAlloc *uint64 `protobuf:"varint,1,opt,name=bytes_alloc,json=bytesAlloc" json:"bytes_alloc,omitempty"`
	BytesReq   *uint64 `protobuf:"varint,2,opt,name=bytes_req,json=bytesReq" json:"bytes_req,omitempty"`
	CallSite   *uint64 `protobuf:"varint,3,opt,name=call_site,json=callSite" json:"call_site,omitempty"`
	GfpFlags   *uint32 `protobuf:"varint,4,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Node       *int32  `protobuf:"varint,5,opt,name=node" json:"node,omitempty"`
	Ptr        *uint64 `protobuf:"varint,6,opt,name=ptr" json:"ptr,omitempty"`
}

func (x *KmemCacheAllocNodeFtraceEvent) Reset() {
	*x = KmemCacheAllocNodeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KmemCacheAllocNodeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KmemCacheAllocNodeFtraceEvent) ProtoMessage() {}

func (x *KmemCacheAllocNodeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KmemCacheAllocNodeFtraceEvent.ProtoReflect.Descriptor instead.
func (*KmemCacheAllocNodeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{290}
}

func (x *KmemCacheAllocNodeFtraceEvent) GetBytesAlloc() uint64 {
	if x != nil && x.BytesAlloc != nil {
		return *x.BytesAlloc
	}
	return 0
}

func (x *KmemCacheAllocNodeFtraceEvent) GetBytesReq() uint64 {
	if x != nil && x.BytesReq != nil {
		return *x.BytesReq
	}
	return 0
}

func (x *KmemCacheAllocNodeFtraceEvent) GetCallSite() uint64 {
	if x != nil && x.CallSite != nil {
		return *x.CallSite
	}
	return 0
}

func (x *KmemCacheAllocNodeFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *KmemCacheAllocNodeFtraceEvent) GetNode() int32 {
	if x != nil && x.Node != nil {
		return *x.Node
	}
	return 0
}

func (x *KmemCacheAllocNodeFtraceEvent) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

type KmemCacheFreeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallSite *uint64 `protobuf:"varint,1,opt,name=call_site,json=callSite" json:"call_site,omitempty"`
	Ptr      *uint64 `protobuf:"varint,2,opt,name=ptr" json:"ptr,omitempty"`
}

func (x *KmemCacheFreeFtraceEvent) Reset() {
	*x = KmemCacheFreeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KmemCacheFreeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KmemCacheFreeFtraceEvent) ProtoMessage() {}

func (x *KmemCacheFreeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KmemCacheFreeFtraceEvent.ProtoReflect.Descriptor instead.
func (*KmemCacheFreeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{291}
}

func (x *KmemCacheFreeFtraceEvent) GetCallSite() uint64 {
	if x != nil && x.CallSite != nil {
		return *x.CallSite
	}
	return 0
}

func (x *KmemCacheFreeFtraceEvent) GetPtr() uint64 {
	if x != nil && x.Ptr != nil {
		return *x.Ptr
	}
	return 0
}

type MigratePagesEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *int32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
}

func (x *MigratePagesEndFtraceEvent) Reset() {
	*x = MigratePagesEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigratePagesEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigratePagesEndFtraceEvent) ProtoMessage() {}

func (x *MigratePagesEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigratePagesEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*MigratePagesEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{292}
}

func (x *MigratePagesEndFtraceEvent) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type MigratePagesStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *int32 `protobuf:"varint,1,opt,name=mode" json:"mode,omitempty"`
}

func (x *MigratePagesStartFtraceEvent) Reset() {
	*x = MigratePagesStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigratePagesStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigratePagesStartFtraceEvent) ProtoMessage() {}

func (x *MigratePagesStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigratePagesStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*MigratePagesStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{293}
}

func (x *MigratePagesStartFtraceEvent) GetMode() int32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

type MigrateRetryFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tries *int32 `protobuf:"varint,1,opt,name=tries" json:"tries,omitempty"`
}

func (x *MigrateRetryFtraceEvent) Reset() {
	*x = MigrateRetryFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MigrateRetryFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateRetryFtraceEvent) ProtoMessage() {}

func (x *MigrateRetryFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateRetryFtraceEvent.ProtoReflect.Descriptor instead.
func (*MigrateRetryFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{294}
}

func (x *MigrateRetryFtraceEvent) GetTries() int32 {
	if x != nil && x.Tries != nil {
		return *x.Tries
	}
	return 0
}

type MmPageAllocFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GfpFlags    *uint32 `protobuf:"varint,1,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
	Migratetype *int32  `protobuf:"varint,2,opt,name=migratetype" json:"migratetype,omitempty"`
	Order       *uint32 `protobuf:"varint,3,opt,name=order" json:"order,omitempty"`
	Page        *uint64 `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	Pfn         *uint64 `protobuf:"varint,5,opt,name=pfn" json:"pfn,omitempty"`
}

func (x *MmPageAllocFtraceEvent) Reset() {
	*x = MmPageAllocFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmPageAllocFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmPageAllocFtraceEvent) ProtoMessage() {}

func (x *MmPageAllocFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmPageAllocFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmPageAllocFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{295}
}

func (x *MmPageAllocFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

func (x *MmPageAllocFtraceEvent) GetMigratetype() int32 {
	if x != nil && x.Migratetype != nil {
		return *x.Migratetype
	}
	return 0
}

func (x *MmPageAllocFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmPageAllocFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *MmPageAllocFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

type MmPageAllocExtfragFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocMigratetype    *int32  `protobuf:"varint,1,opt,name=alloc_migratetype,json=allocMigratetype" json:"alloc_migratetype,omitempty"`
	AllocOrder          *int32  `protobuf:"varint,2,opt,name=alloc_order,json=allocOrder" json:"alloc_order,omitempty"`
	FallbackMigratetype *int32  `protobuf:"varint,3,opt,name=fallback_migratetype,json=fallbackMigratetype" json:"fallback_migratetype,omitempty"`
	FallbackOrder       *int32  `protobuf:"varint,4,opt,name=fallback_order,json=fallbackOrder" json:"fallback_order,omitempty"`
	Page                *uint64 `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
	ChangeOwnership     *int32  `protobuf:"varint,6,opt,name=change_ownership,json=changeOwnership" json:"change_ownership,omitempty"`
	Pfn                 *uint64 `protobuf:"varint,7,opt,name=pfn" json:"pfn,omitempty"`
}

func (x *MmPageAllocExtfragFtraceEvent) Reset() {
	*x = MmPageAllocExtfragFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmPageAllocExtfragFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmPageAllocExtfragFtraceEvent) ProtoMessage() {}

func (x *MmPageAllocExtfragFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmPageAllocExtfragFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmPageAllocExtfragFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{296}
}

func (x *MmPageAllocExtfragFtraceEvent) GetAllocMigratetype() int32 {
	if x != nil && x.AllocMigratetype != nil {
		return *x.AllocMigratetype
	}
	return 0
}

func (x *MmPageAllocExtfragFtraceEvent) GetAllocOrder() int32 {
	if x != nil && x.AllocOrder != nil {
		return *x.AllocOrder
	}
	return 0
}

func (x *MmPageAllocExtfragFtraceEvent) GetFallbackMigratetype() int32 {
	if x != nil && x.FallbackMigratetype != nil {
		return *x.FallbackMigratetype
	}
	return 0
}

func (x *MmPageAllocExtfragFtraceEvent) GetFallbackOrder() int32 {
	if x != nil && x.FallbackOrder != nil {
		return *x.FallbackOrder
	}
	return 0
}

func (x *MmPageAllocExtfragFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *MmPageAllocExtfragFtraceEvent) GetChangeOwnership() int32 {
	if x != nil && x.ChangeOwnership != nil {
		return *x.ChangeOwnership
	}
	return 0
}

func (x *MmPageAllocExtfragFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

type MmPageAllocZoneLockedFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Migratetype *int32  `protobuf:"varint,1,opt,name=migratetype" json:"migratetype,omitempty"`
	Order       *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	Page        *uint64 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Pfn         *uint64 `protobuf:"varint,4,opt,name=pfn" json:"pfn,omitempty"`
}

func (x *MmPageAllocZoneLockedFtraceEvent) Reset() {
	*x = MmPageAllocZoneLockedFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmPageAllocZoneLockedFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmPageAllocZoneLockedFtraceEvent) ProtoMessage() {}

func (x *MmPageAllocZoneLockedFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmPageAllocZoneLockedFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmPageAllocZoneLockedFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{297}
}

func (x *MmPageAllocZoneLockedFtraceEvent) GetMigratetype() int32 {
	if x != nil && x.Migratetype != nil {
		return *x.Migratetype
	}
	return 0
}

func (x *MmPageAllocZoneLockedFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmPageAllocZoneLockedFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *MmPageAllocZoneLockedFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

type MmPageFreeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *uint32 `protobuf:"varint,1,opt,name=order" json:"order,omitempty"`
	Page  *uint64 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Pfn   *uint64 `protobuf:"varint,3,opt,name=pfn" json:"pfn,omitempty"`
}

func (x *MmPageFreeFtraceEvent) Reset() {
	*x = MmPageFreeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmPageFreeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmPageFreeFtraceEvent) ProtoMessage() {}

func (x *MmPageFreeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmPageFreeFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmPageFreeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{298}
}

func (x *MmPageFreeFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmPageFreeFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *MmPageFreeFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

type MmPageFreeBatchedFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cold *int32  `protobuf:"varint,1,opt,name=cold" json:"cold,omitempty"`
	Page *uint64 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	Pfn  *uint64 `protobuf:"varint,3,opt,name=pfn" json:"pfn,omitempty"`
}

func (x *MmPageFreeBatchedFtraceEvent) Reset() {
	*x = MmPageFreeBatchedFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmPageFreeBatchedFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmPageFreeBatchedFtraceEvent) ProtoMessage() {}

func (x *MmPageFreeBatchedFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmPageFreeBatchedFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmPageFreeBatchedFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{299}
}

func (x *MmPageFreeBatchedFtraceEvent) GetCold() int32 {
	if x != nil && x.Cold != nil {
		return *x.Cold
	}
	return 0
}

func (x *MmPageFreeBatchedFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *MmPageFreeBatchedFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

type MmPagePcpuDrainFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Migratetype *int32  `protobuf:"varint,1,opt,name=migratetype" json:"migratetype,omitempty"`
	Order       *uint32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	Page        *uint64 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Pfn         *uint64 `protobuf:"varint,4,opt,name=pfn" json:"pfn,omitempty"`
}

func (x *MmPagePcpuDrainFtraceEvent) Reset() {
	*x = MmPagePcpuDrainFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmPagePcpuDrainFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmPagePcpuDrainFtraceEvent) ProtoMessage() {}

func (x *MmPagePcpuDrainFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmPagePcpuDrainFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmPagePcpuDrainFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{300}
}

func (x *MmPagePcpuDrainFtraceEvent) GetMigratetype() int32 {
	if x != nil && x.Migratetype != nil {
		return *x.Migratetype
	}
	return 0
}

func (x *MmPagePcpuDrainFtraceEvent) GetOrder() uint32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmPagePcpuDrainFtraceEvent) GetPage() uint64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *MmPagePcpuDrainFtraceEvent) GetPfn() uint64 {
	if x != nil && x.Pfn != nil {
		return *x.Pfn
	}
	return 0
}

type RssStatFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member *int32  `protobuf:"varint,1,opt,name=member" json:"member,omitempty"`
	Size   *int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	Curr   *uint32 `protobuf:"varint,3,opt,name=curr" json:"curr,omitempty"`
	MmId   *uint32 `protobuf:"varint,4,opt,name=mm_id,json=mmId" json:"mm_id,omitempty"`
}

func (x *RssStatFtraceEvent) Reset() {
	*x = RssStatFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RssStatFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RssStatFtraceEvent) ProtoMessage() {}

func (x *RssStatFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RssStatFtraceEvent.ProtoReflect.Descriptor instead.
func (*RssStatFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{301}
}

func (x *RssStatFtraceEvent) GetMember() int32 {
	if x != nil && x.Member != nil {
		return *x.Member
	}
	return 0
}

func (x *RssStatFtraceEvent) GetSize() int64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *RssStatFtraceEvent) GetCurr() uint32 {
	if x != nil && x.Curr != nil {
		return *x.Curr
	}
	return 0
}

func (x *RssStatFtraceEvent) GetMmId() uint32 {
	if x != nil && x.MmId != nil {
		return *x.MmId
	}
	return 0
}

type IonHeapShrinkFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeapName       *string `protobuf:"bytes,1,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len            *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	TotalAllocated *int64  `protobuf:"varint,3,opt,name=total_allocated,json=totalAllocated" json:"total_allocated,omitempty"`
}

func (x *IonHeapShrinkFtraceEvent) Reset() {
	*x = IonHeapShrinkFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonHeapShrinkFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonHeapShrinkFtraceEvent) ProtoMessage() {}

func (x *IonHeapShrinkFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonHeapShrinkFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonHeapShrinkFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{302}
}

func (x *IonHeapShrinkFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonHeapShrinkFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonHeapShrinkFtraceEvent) GetTotalAllocated() int64 {
	if x != nil && x.TotalAllocated != nil {
		return *x.TotalAllocated
	}
	return 0
}

type IonHeapGrowFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeapName       *string `protobuf:"bytes,1,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	Len            *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	TotalAllocated *int64  `protobuf:"varint,3,opt,name=total_allocated,json=totalAllocated" json:"total_allocated,omitempty"`
}

func (x *IonHeapGrowFtraceEvent) Reset() {
	*x = IonHeapGrowFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonHeapGrowFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonHeapGrowFtraceEvent) ProtoMessage() {}

func (x *IonHeapGrowFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonHeapGrowFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonHeapGrowFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{303}
}

func (x *IonHeapGrowFtraceEvent) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *IonHeapGrowFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *IonHeapGrowFtraceEvent) GetTotalAllocated() int64 {
	if x != nil && x.TotalAllocated != nil {
		return *x.TotalAllocated
	}
	return 0
}

type IonBufferCreateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr *uint64 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Len  *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *IonBufferCreateFtraceEvent) Reset() {
	*x = IonBufferCreateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonBufferCreateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonBufferCreateFtraceEvent) ProtoMessage() {}

func (x *IonBufferCreateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonBufferCreateFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonBufferCreateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{304}
}

func (x *IonBufferCreateFtraceEvent) GetAddr() uint64 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *IonBufferCreateFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type IonBufferDestroyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr *uint64 `protobuf:"varint,1,opt,name=addr" json:"addr,omitempty"`
	Len  *uint64 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *IonBufferDestroyFtraceEvent) Reset() {
	*x = IonBufferDestroyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IonBufferDestroyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IonBufferDestroyFtraceEvent) ProtoMessage() {}

func (x *IonBufferDestroyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IonBufferDestroyFtraceEvent.ProtoReflect.Descriptor instead.
func (*IonBufferDestroyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{305}
}

func (x *IonBufferDestroyFtraceEvent) GetAddr() uint64 {
	if x != nil && x.Addr != nil {
		return *x.Addr
	}
	return 0
}

func (x *IonBufferDestroyFtraceEvent) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

type LowmemoryKillFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm           *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid            *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	PagecacheSize  *int64  `protobuf:"varint,3,opt,name=pagecache_size,json=pagecacheSize" json:"pagecache_size,omitempty"`
	PagecacheLimit *int64  `protobuf:"varint,4,opt,name=pagecache_limit,json=pagecacheLimit" json:"pagecache_limit,omitempty"`
	Free           *int64  `protobuf:"varint,5,opt,name=free" json:"free,omitempty"`
}

func (x *LowmemoryKillFtraceEvent) Reset() {
	*x = LowmemoryKillFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LowmemoryKillFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LowmemoryKillFtraceEvent) ProtoMessage() {}

func (x *LowmemoryKillFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LowmemoryKillFtraceEvent.ProtoReflect.Descriptor instead.
func (*LowmemoryKillFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{306}
}

func (x *LowmemoryKillFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *LowmemoryKillFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *LowmemoryKillFtraceEvent) GetPagecacheSize() int64 {
	if x != nil && x.PagecacheSize != nil {
		return *x.PagecacheSize
	}
	return 0
}

func (x *LowmemoryKillFtraceEvent) GetPagecacheLimit() int64 {
	if x != nil && x.PagecacheLimit != nil {
		return *x.PagecacheLimit
	}
	return 0
}

func (x *LowmemoryKillFtraceEvent) GetFree() int64 {
	if x != nil && x.Free != nil {
		return *x.Free
	}
	return 0
}

type MdpCmdKickoffFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlNum     *uint32 `protobuf:"varint,1,opt,name=ctl_num,json=ctlNum" json:"ctl_num,omitempty"`
	KickoffCnt *int32  `protobuf:"varint,2,opt,name=kickoff_cnt,json=kickoffCnt" json:"kickoff_cnt,omitempty"`
}

func (x *MdpCmdKickoffFtraceEvent) Reset() {
	*x = MdpCmdKickoffFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCmdKickoffFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCmdKickoffFtraceEvent) ProtoMessage() {}

func (x *MdpCmdKickoffFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCmdKickoffFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCmdKickoffFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{307}
}

func (x *MdpCmdKickoffFtraceEvent) GetCtlNum() uint32 {
	if x != nil && x.CtlNum != nil {
		return *x.CtlNum
	}
	return 0
}

func (x *MdpCmdKickoffFtraceEvent) GetKickoffCnt() int32 {
	if x != nil && x.KickoffCnt != nil {
		return *x.KickoffCnt
	}
	return 0
}

type MdpCommitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num       *uint32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	PlayCnt   *uint32 `protobuf:"varint,2,opt,name=play_cnt,json=playCnt" json:"play_cnt,omitempty"`
	ClkRate   *uint32 `protobuf:"varint,3,opt,name=clk_rate,json=clkRate" json:"clk_rate,omitempty"`
	Bandwidth *uint64 `protobuf:"varint,4,opt,name=bandwidth" json:"bandwidth,omitempty"`
}

func (x *MdpCommitFtraceEvent) Reset() {
	*x = MdpCommitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCommitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCommitFtraceEvent) ProtoMessage() {}

func (x *MdpCommitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCommitFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCommitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{308}
}

func (x *MdpCommitFtraceEvent) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *MdpCommitFtraceEvent) GetPlayCnt() uint32 {
	if x != nil && x.PlayCnt != nil {
		return *x.PlayCnt
	}
	return 0
}

func (x *MdpCommitFtraceEvent) GetClkRate() uint32 {
	if x != nil && x.ClkRate != nil {
		return *x.ClkRate
	}
	return 0
}

func (x *MdpCommitFtraceEvent) GetBandwidth() uint64 {
	if x != nil && x.Bandwidth != nil {
		return *x.Bandwidth
	}
	return 0
}

type MdpPerfSetOtFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pnum     *uint32 `protobuf:"varint,1,opt,name=pnum" json:"pnum,omitempty"`
	XinId    *uint32 `protobuf:"varint,2,opt,name=xin_id,json=xinId" json:"xin_id,omitempty"`
	RdLim    *uint32 `protobuf:"varint,3,opt,name=rd_lim,json=rdLim" json:"rd_lim,omitempty"`
	IsVbifRt *uint32 `protobuf:"varint,4,opt,name=is_vbif_rt,json=isVbifRt" json:"is_vbif_rt,omitempty"`
}

func (x *MdpPerfSetOtFtraceEvent) Reset() {
	*x = MdpPerfSetOtFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpPerfSetOtFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpPerfSetOtFtraceEvent) ProtoMessage() {}

func (x *MdpPerfSetOtFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpPerfSetOtFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpPerfSetOtFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{309}
}

func (x *MdpPerfSetOtFtraceEvent) GetPnum() uint32 {
	if x != nil && x.Pnum != nil {
		return *x.Pnum
	}
	return 0
}

func (x *MdpPerfSetOtFtraceEvent) GetXinId() uint32 {
	if x != nil && x.XinId != nil {
		return *x.XinId
	}
	return 0
}

func (x *MdpPerfSetOtFtraceEvent) GetRdLim() uint32 {
	if x != nil && x.RdLim != nil {
		return *x.RdLim
	}
	return 0
}

func (x *MdpPerfSetOtFtraceEvent) GetIsVbifRt() uint32 {
	if x != nil && x.IsVbifRt != nil {
		return *x.IsVbifRt
	}
	return 0
}

type MdpSsppChangeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num     *uint32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	PlayCnt *uint32 `protobuf:"varint,2,opt,name=play_cnt,json=playCnt" json:"play_cnt,omitempty"`
	Mixer   *uint32 `protobuf:"varint,3,opt,name=mixer" json:"mixer,omitempty"`
	Stage   *uint32 `protobuf:"varint,4,opt,name=stage" json:"stage,omitempty"`
	Flags   *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	Format  *uint32 `protobuf:"varint,6,opt,name=format" json:"format,omitempty"`
	ImgW    *uint32 `protobuf:"varint,7,opt,name=img_w,json=imgW" json:"img_w,omitempty"`
	ImgH    *uint32 `protobuf:"varint,8,opt,name=img_h,json=imgH" json:"img_h,omitempty"`
	SrcX    *uint32 `protobuf:"varint,9,opt,name=src_x,json=srcX" json:"src_x,omitempty"`
	SrcY    *uint32 `protobuf:"varint,10,opt,name=src_y,json=srcY" json:"src_y,omitempty"`
	SrcW    *uint32 `protobuf:"varint,11,opt,name=src_w,json=srcW" json:"src_w,omitempty"`
	SrcH    *uint32 `protobuf:"varint,12,opt,name=src_h,json=srcH" json:"src_h,omitempty"`
	DstX    *uint32 `protobuf:"varint,13,opt,name=dst_x,json=dstX" json:"dst_x,omitempty"`
	DstY    *uint32 `protobuf:"varint,14,opt,name=dst_y,json=dstY" json:"dst_y,omitempty"`
	DstW    *uint32 `protobuf:"varint,15,opt,name=dst_w,json=dstW" json:"dst_w,omitempty"`
	DstH    *uint32 `protobuf:"varint,16,opt,name=dst_h,json=dstH" json:"dst_h,omitempty"`
}

func (x *MdpSsppChangeFtraceEvent) Reset() {
	*x = MdpSsppChangeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpSsppChangeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpSsppChangeFtraceEvent) ProtoMessage() {}

func (x *MdpSsppChangeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpSsppChangeFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpSsppChangeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{310}
}

func (x *MdpSsppChangeFtraceEvent) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetPlayCnt() uint32 {
	if x != nil && x.PlayCnt != nil {
		return *x.PlayCnt
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetMixer() uint32 {
	if x != nil && x.Mixer != nil {
		return *x.Mixer
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetStage() uint32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetFormat() uint32 {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetImgW() uint32 {
	if x != nil && x.ImgW != nil {
		return *x.ImgW
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetImgH() uint32 {
	if x != nil && x.ImgH != nil {
		return *x.ImgH
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetSrcX() uint32 {
	if x != nil && x.SrcX != nil {
		return *x.SrcX
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetSrcY() uint32 {
	if x != nil && x.SrcY != nil {
		return *x.SrcY
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetSrcW() uint32 {
	if x != nil && x.SrcW != nil {
		return *x.SrcW
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetSrcH() uint32 {
	if x != nil && x.SrcH != nil {
		return *x.SrcH
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetDstX() uint32 {
	if x != nil && x.DstX != nil {
		return *x.DstX
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetDstY() uint32 {
	if x != nil && x.DstY != nil {
		return *x.DstY
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetDstW() uint32 {
	if x != nil && x.DstW != nil {
		return *x.DstW
	}
	return 0
}

func (x *MdpSsppChangeFtraceEvent) GetDstH() uint32 {
	if x != nil && x.DstH != nil {
		return *x.DstH
	}
	return 0
}

type TracingMarkWriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid        *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	TraceName  *string `protobuf:"bytes,2,opt,name=trace_name,json=traceName" json:"trace_name,omitempty"`
	TraceBegin *uint32 `protobuf:"varint,3,opt,name=trace_begin,json=traceBegin" json:"trace_begin,omitempty"`
}

func (x *TracingMarkWriteFtraceEvent) Reset() {
	*x = TracingMarkWriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingMarkWriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingMarkWriteFtraceEvent) ProtoMessage() {}

func (x *TracingMarkWriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingMarkWriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*TracingMarkWriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{311}
}

func (x *TracingMarkWriteFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *TracingMarkWriteFtraceEvent) GetTraceName() string {
	if x != nil && x.TraceName != nil {
		return *x.TraceName
	}
	return ""
}

func (x *TracingMarkWriteFtraceEvent) GetTraceBegin() uint32 {
	if x != nil && x.TraceBegin != nil {
		return *x.TraceBegin
	}
	return 0
}

type MdpCmdPingpongDoneFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlNum  *uint32 `protobuf:"varint,1,opt,name=ctl_num,json=ctlNum" json:"ctl_num,omitempty"`
	IntfNum *uint32 `protobuf:"varint,2,opt,name=intf_num,json=intfNum" json:"intf_num,omitempty"`
	PpNum   *uint32 `protobuf:"varint,3,opt,name=pp_num,json=ppNum" json:"pp_num,omitempty"`
	KoffCnt *int32  `protobuf:"varint,4,opt,name=koff_cnt,json=koffCnt" json:"koff_cnt,omitempty"`
}

func (x *MdpCmdPingpongDoneFtraceEvent) Reset() {
	*x = MdpCmdPingpongDoneFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCmdPingpongDoneFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCmdPingpongDoneFtraceEvent) ProtoMessage() {}

func (x *MdpCmdPingpongDoneFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCmdPingpongDoneFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCmdPingpongDoneFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{312}
}

func (x *MdpCmdPingpongDoneFtraceEvent) GetCtlNum() uint32 {
	if x != nil && x.CtlNum != nil {
		return *x.CtlNum
	}
	return 0
}

func (x *MdpCmdPingpongDoneFtraceEvent) GetIntfNum() uint32 {
	if x != nil && x.IntfNum != nil {
		return *x.IntfNum
	}
	return 0
}

func (x *MdpCmdPingpongDoneFtraceEvent) GetPpNum() uint32 {
	if x != nil && x.PpNum != nil {
		return *x.PpNum
	}
	return 0
}

func (x *MdpCmdPingpongDoneFtraceEvent) GetKoffCnt() int32 {
	if x != nil && x.KoffCnt != nil {
		return *x.KoffCnt
	}
	return 0
}

type MdpCompareBwFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewAb         *uint64 `protobuf:"varint,1,opt,name=new_ab,json=newAb" json:"new_ab,omitempty"`
	NewIb         *uint64 `protobuf:"varint,2,opt,name=new_ib,json=newIb" json:"new_ib,omitempty"`
	NewWb         *uint64 `protobuf:"varint,3,opt,name=new_wb,json=newWb" json:"new_wb,omitempty"`
	OldAb         *uint64 `protobuf:"varint,4,opt,name=old_ab,json=oldAb" json:"old_ab,omitempty"`
	OldIb         *uint64 `protobuf:"varint,5,opt,name=old_ib,json=oldIb" json:"old_ib,omitempty"`
	OldWb         *uint64 `protobuf:"varint,6,opt,name=old_wb,json=oldWb" json:"old_wb,omitempty"`
	ParamsChanged *uint32 `protobuf:"varint,7,opt,name=params_changed,json=paramsChanged" json:"params_changed,omitempty"`
	UpdateBw      *uint32 `protobuf:"varint,8,opt,name=update_bw,json=updateBw" json:"update_bw,omitempty"`
}

func (x *MdpCompareBwFtraceEvent) Reset() {
	*x = MdpCompareBwFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCompareBwFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCompareBwFtraceEvent) ProtoMessage() {}

func (x *MdpCompareBwFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCompareBwFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCompareBwFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{313}
}

func (x *MdpCompareBwFtraceEvent) GetNewAb() uint64 {
	if x != nil && x.NewAb != nil {
		return *x.NewAb
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetNewIb() uint64 {
	if x != nil && x.NewIb != nil {
		return *x.NewIb
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetNewWb() uint64 {
	if x != nil && x.NewWb != nil {
		return *x.NewWb
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetOldAb() uint64 {
	if x != nil && x.OldAb != nil {
		return *x.OldAb
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetOldIb() uint64 {
	if x != nil && x.OldIb != nil {
		return *x.OldIb
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetOldWb() uint64 {
	if x != nil && x.OldWb != nil {
		return *x.OldWb
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetParamsChanged() uint32 {
	if x != nil && x.ParamsChanged != nil {
		return *x.ParamsChanged
	}
	return 0
}

func (x *MdpCompareBwFtraceEvent) GetUpdateBw() uint32 {
	if x != nil && x.UpdateBw != nil {
		return *x.UpdateBw
	}
	return 0
}

type MdpPerfSetPanicLutsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pnum      *uint32 `protobuf:"varint,1,opt,name=pnum" json:"pnum,omitempty"`
	Fmt       *uint32 `protobuf:"varint,2,opt,name=fmt" json:"fmt,omitempty"`
	Mode      *uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	PanicLut  *uint32 `protobuf:"varint,4,opt,name=panic_lut,json=panicLut" json:"panic_lut,omitempty"`
	RobustLut *uint32 `protobuf:"varint,5,opt,name=robust_lut,json=robustLut" json:"robust_lut,omitempty"`
}

func (x *MdpPerfSetPanicLutsFtraceEvent) Reset() {
	*x = MdpPerfSetPanicLutsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpPerfSetPanicLutsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpPerfSetPanicLutsFtraceEvent) ProtoMessage() {}

func (x *MdpPerfSetPanicLutsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpPerfSetPanicLutsFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpPerfSetPanicLutsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{314}
}

func (x *MdpPerfSetPanicLutsFtraceEvent) GetPnum() uint32 {
	if x != nil && x.Pnum != nil {
		return *x.Pnum
	}
	return 0
}

func (x *MdpPerfSetPanicLutsFtraceEvent) GetFmt() uint32 {
	if x != nil && x.Fmt != nil {
		return *x.Fmt
	}
	return 0
}

func (x *MdpPerfSetPanicLutsFtraceEvent) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *MdpPerfSetPanicLutsFtraceEvent) GetPanicLut() uint32 {
	if x != nil && x.PanicLut != nil {
		return *x.PanicLut
	}
	return 0
}

func (x *MdpPerfSetPanicLutsFtraceEvent) GetRobustLut() uint32 {
	if x != nil && x.RobustLut != nil {
		return *x.RobustLut
	}
	return 0
}

type MdpSsppSetFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num     *uint32 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	PlayCnt *uint32 `protobuf:"varint,2,opt,name=play_cnt,json=playCnt" json:"play_cnt,omitempty"`
	Mixer   *uint32 `protobuf:"varint,3,opt,name=mixer" json:"mixer,omitempty"`
	Stage   *uint32 `protobuf:"varint,4,opt,name=stage" json:"stage,omitempty"`
	Flags   *uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
	Format  *uint32 `protobuf:"varint,6,opt,name=format" json:"format,omitempty"`
	ImgW    *uint32 `protobuf:"varint,7,opt,name=img_w,json=imgW" json:"img_w,omitempty"`
	ImgH    *uint32 `protobuf:"varint,8,opt,name=img_h,json=imgH" json:"img_h,omitempty"`
	SrcX    *uint32 `protobuf:"varint,9,opt,name=src_x,json=srcX" json:"src_x,omitempty"`
	SrcY    *uint32 `protobuf:"varint,10,opt,name=src_y,json=srcY" json:"src_y,omitempty"`
	SrcW    *uint32 `protobuf:"varint,11,opt,name=src_w,json=srcW" json:"src_w,omitempty"`
	SrcH    *uint32 `protobuf:"varint,12,opt,name=src_h,json=srcH" json:"src_h,omitempty"`
	DstX    *uint32 `protobuf:"varint,13,opt,name=dst_x,json=dstX" json:"dst_x,omitempty"`
	DstY    *uint32 `protobuf:"varint,14,opt,name=dst_y,json=dstY" json:"dst_y,omitempty"`
	DstW    *uint32 `protobuf:"varint,15,opt,name=dst_w,json=dstW" json:"dst_w,omitempty"`
	DstH    *uint32 `protobuf:"varint,16,opt,name=dst_h,json=dstH" json:"dst_h,omitempty"`
}

func (x *MdpSsppSetFtraceEvent) Reset() {
	*x = MdpSsppSetFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpSsppSetFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpSsppSetFtraceEvent) ProtoMessage() {}

func (x *MdpSsppSetFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpSsppSetFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpSsppSetFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{315}
}

func (x *MdpSsppSetFtraceEvent) GetNum() uint32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetPlayCnt() uint32 {
	if x != nil && x.PlayCnt != nil {
		return *x.PlayCnt
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetMixer() uint32 {
	if x != nil && x.Mixer != nil {
		return *x.Mixer
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetStage() uint32 {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetFlags() uint32 {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetFormat() uint32 {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetImgW() uint32 {
	if x != nil && x.ImgW != nil {
		return *x.ImgW
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetImgH() uint32 {
	if x != nil && x.ImgH != nil {
		return *x.ImgH
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetSrcX() uint32 {
	if x != nil && x.SrcX != nil {
		return *x.SrcX
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetSrcY() uint32 {
	if x != nil && x.SrcY != nil {
		return *x.SrcY
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetSrcW() uint32 {
	if x != nil && x.SrcW != nil {
		return *x.SrcW
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetSrcH() uint32 {
	if x != nil && x.SrcH != nil {
		return *x.SrcH
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetDstX() uint32 {
	if x != nil && x.DstX != nil {
		return *x.DstX
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetDstY() uint32 {
	if x != nil && x.DstY != nil {
		return *x.DstY
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetDstW() uint32 {
	if x != nil && x.DstW != nil {
		return *x.DstW
	}
	return 0
}

func (x *MdpSsppSetFtraceEvent) GetDstH() uint32 {
	if x != nil && x.DstH != nil {
		return *x.DstH
	}
	return 0
}

type MdpCmdReadptrDoneFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlNum  *uint32 `protobuf:"varint,1,opt,name=ctl_num,json=ctlNum" json:"ctl_num,omitempty"`
	KoffCnt *int32  `protobuf:"varint,2,opt,name=koff_cnt,json=koffCnt" json:"koff_cnt,omitempty"`
}

func (x *MdpCmdReadptrDoneFtraceEvent) Reset() {
	*x = MdpCmdReadptrDoneFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCmdReadptrDoneFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCmdReadptrDoneFtraceEvent) ProtoMessage() {}

func (x *MdpCmdReadptrDoneFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCmdReadptrDoneFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCmdReadptrDoneFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{316}
}

func (x *MdpCmdReadptrDoneFtraceEvent) GetCtlNum() uint32 {
	if x != nil && x.CtlNum != nil {
		return *x.CtlNum
	}
	return 0
}

func (x *MdpCmdReadptrDoneFtraceEvent) GetKoffCnt() int32 {
	if x != nil && x.KoffCnt != nil {
		return *x.KoffCnt
	}
	return 0
}

type MdpMisrCrcFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId  *uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	VsyncCnt *uint32 `protobuf:"varint,2,opt,name=vsync_cnt,json=vsyncCnt" json:"vsync_cnt,omitempty"`
	Crc      *uint32 `protobuf:"varint,3,opt,name=crc" json:"crc,omitempty"`
}

func (x *MdpMisrCrcFtraceEvent) Reset() {
	*x = MdpMisrCrcFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpMisrCrcFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpMisrCrcFtraceEvent) ProtoMessage() {}

func (x *MdpMisrCrcFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpMisrCrcFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpMisrCrcFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{317}
}

func (x *MdpMisrCrcFtraceEvent) GetBlockId() uint32 {
	if x != nil && x.BlockId != nil {
		return *x.BlockId
	}
	return 0
}

func (x *MdpMisrCrcFtraceEvent) GetVsyncCnt() uint32 {
	if x != nil && x.VsyncCnt != nil {
		return *x.VsyncCnt
	}
	return 0
}

func (x *MdpMisrCrcFtraceEvent) GetCrc() uint32 {
	if x != nil && x.Crc != nil {
		return *x.Crc
	}
	return 0
}

type MdpPerfSetQosLutsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pnum   *uint32 `protobuf:"varint,1,opt,name=pnum" json:"pnum,omitempty"`
	Fmt    *uint32 `protobuf:"varint,2,opt,name=fmt" json:"fmt,omitempty"`
	Intf   *uint32 `protobuf:"varint,3,opt,name=intf" json:"intf,omitempty"`
	Rot    *uint32 `protobuf:"varint,4,opt,name=rot" json:"rot,omitempty"`
	Fl     *uint32 `protobuf:"varint,5,opt,name=fl" json:"fl,omitempty"`
	Lut    *uint32 `protobuf:"varint,6,opt,name=lut" json:"lut,omitempty"`
	Linear *uint32 `protobuf:"varint,7,opt,name=linear" json:"linear,omitempty"`
}

func (x *MdpPerfSetQosLutsFtraceEvent) Reset() {
	*x = MdpPerfSetQosLutsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpPerfSetQosLutsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpPerfSetQosLutsFtraceEvent) ProtoMessage() {}

func (x *MdpPerfSetQosLutsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpPerfSetQosLutsFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpPerfSetQosLutsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{318}
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetPnum() uint32 {
	if x != nil && x.Pnum != nil {
		return *x.Pnum
	}
	return 0
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetFmt() uint32 {
	if x != nil && x.Fmt != nil {
		return *x.Fmt
	}
	return 0
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetIntf() uint32 {
	if x != nil && x.Intf != nil {
		return *x.Intf
	}
	return 0
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetRot() uint32 {
	if x != nil && x.Rot != nil {
		return *x.Rot
	}
	return 0
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetFl() uint32 {
	if x != nil && x.Fl != nil {
		return *x.Fl
	}
	return 0
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetLut() uint32 {
	if x != nil && x.Lut != nil {
		return *x.Lut
	}
	return 0
}

func (x *MdpPerfSetQosLutsFtraceEvent) GetLinear() uint32 {
	if x != nil && x.Linear != nil {
		return *x.Linear
	}
	return 0
}

type MdpTraceCounterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	CounterName *string `protobuf:"bytes,2,opt,name=counter_name,json=counterName" json:"counter_name,omitempty"`
	Value       *int32  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
}

func (x *MdpTraceCounterFtraceEvent) Reset() {
	*x = MdpTraceCounterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpTraceCounterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpTraceCounterFtraceEvent) ProtoMessage() {}

func (x *MdpTraceCounterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpTraceCounterFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpTraceCounterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{319}
}

func (x *MdpTraceCounterFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *MdpTraceCounterFtraceEvent) GetCounterName() string {
	if x != nil && x.CounterName != nil {
		return *x.CounterName
	}
	return ""
}

func (x *MdpTraceCounterFtraceEvent) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type MdpCmdReleaseBwFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlNum *uint32 `protobuf:"varint,1,opt,name=ctl_num,json=ctlNum" json:"ctl_num,omitempty"`
}

func (x *MdpCmdReleaseBwFtraceEvent) Reset() {
	*x = MdpCmdReleaseBwFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCmdReleaseBwFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCmdReleaseBwFtraceEvent) ProtoMessage() {}

func (x *MdpCmdReleaseBwFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCmdReleaseBwFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCmdReleaseBwFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{320}
}

func (x *MdpCmdReleaseBwFtraceEvent) GetCtlNum() uint32 {
	if x != nil && x.CtlNum != nil {
		return *x.CtlNum
	}
	return 0
}

type MdpMixerUpdateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MixerNum *uint32 `protobuf:"varint,1,opt,name=mixer_num,json=mixerNum" json:"mixer_num,omitempty"`
}

func (x *MdpMixerUpdateFtraceEvent) Reset() {
	*x = MdpMixerUpdateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpMixerUpdateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpMixerUpdateFtraceEvent) ProtoMessage() {}

func (x *MdpMixerUpdateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpMixerUpdateFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpMixerUpdateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{321}
}

func (x *MdpMixerUpdateFtraceEvent) GetMixerNum() uint32 {
	if x != nil && x.MixerNum != nil {
		return *x.MixerNum
	}
	return 0
}

type MdpPerfSetWmLevelsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pnum          *uint32 `protobuf:"varint,1,opt,name=pnum" json:"pnum,omitempty"`
	UseSpace      *uint32 `protobuf:"varint,2,opt,name=use_space,json=useSpace" json:"use_space,omitempty"`
	PriorityBytes *uint32 `protobuf:"varint,3,opt,name=priority_bytes,json=priorityBytes" json:"priority_bytes,omitempty"`
	Wm0           *uint32 `protobuf:"varint,4,opt,name=wm0" json:"wm0,omitempty"`
	Wm1           *uint32 `protobuf:"varint,5,opt,name=wm1" json:"wm1,omitempty"`
	Wm2           *uint32 `protobuf:"varint,6,opt,name=wm2" json:"wm2,omitempty"`
	MbCnt         *uint32 `protobuf:"varint,7,opt,name=mb_cnt,json=mbCnt" json:"mb_cnt,omitempty"`
	MbSize        *uint32 `protobuf:"varint,8,opt,name=mb_size,json=mbSize" json:"mb_size,omitempty"`
}

func (x *MdpPerfSetWmLevelsFtraceEvent) Reset() {
	*x = MdpPerfSetWmLevelsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpPerfSetWmLevelsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpPerfSetWmLevelsFtraceEvent) ProtoMessage() {}

func (x *MdpPerfSetWmLevelsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpPerfSetWmLevelsFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpPerfSetWmLevelsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{322}
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetPnum() uint32 {
	if x != nil && x.Pnum != nil {
		return *x.Pnum
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetUseSpace() uint32 {
	if x != nil && x.UseSpace != nil {
		return *x.UseSpace
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetPriorityBytes() uint32 {
	if x != nil && x.PriorityBytes != nil {
		return *x.PriorityBytes
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetWm0() uint32 {
	if x != nil && x.Wm0 != nil {
		return *x.Wm0
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetWm1() uint32 {
	if x != nil && x.Wm1 != nil {
		return *x.Wm1
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetWm2() uint32 {
	if x != nil && x.Wm2 != nil {
		return *x.Wm2
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetMbCnt() uint32 {
	if x != nil && x.MbCnt != nil {
		return *x.MbCnt
	}
	return 0
}

func (x *MdpPerfSetWmLevelsFtraceEvent) GetMbSize() uint32 {
	if x != nil && x.MbSize != nil {
		return *x.MbSize
	}
	return 0
}

type MdpVideoUnderrunDoneFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlNum      *uint32 `protobuf:"varint,1,opt,name=ctl_num,json=ctlNum" json:"ctl_num,omitempty"`
	UnderrunCnt *uint32 `protobuf:"varint,2,opt,name=underrun_cnt,json=underrunCnt" json:"underrun_cnt,omitempty"`
}

func (x *MdpVideoUnderrunDoneFtraceEvent) Reset() {
	*x = MdpVideoUnderrunDoneFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpVideoUnderrunDoneFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpVideoUnderrunDoneFtraceEvent) ProtoMessage() {}

func (x *MdpVideoUnderrunDoneFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpVideoUnderrunDoneFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpVideoUnderrunDoneFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{323}
}

func (x *MdpVideoUnderrunDoneFtraceEvent) GetCtlNum() uint32 {
	if x != nil && x.CtlNum != nil {
		return *x.CtlNum
	}
	return 0
}

func (x *MdpVideoUnderrunDoneFtraceEvent) GetUnderrunCnt() uint32 {
	if x != nil && x.UnderrunCnt != nil {
		return *x.UnderrunCnt
	}
	return 0
}

type MdpCmdWaitPingpongFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CtlNum     *uint32 `protobuf:"varint,1,opt,name=ctl_num,json=ctlNum" json:"ctl_num,omitempty"`
	KickoffCnt *int32  `protobuf:"varint,2,opt,name=kickoff_cnt,json=kickoffCnt" json:"kickoff_cnt,omitempty"`
}

func (x *MdpCmdWaitPingpongFtraceEvent) Reset() {
	*x = MdpCmdWaitPingpongFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpCmdWaitPingpongFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpCmdWaitPingpongFtraceEvent) ProtoMessage() {}

func (x *MdpCmdWaitPingpongFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpCmdWaitPingpongFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpCmdWaitPingpongFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{324}
}

func (x *MdpCmdWaitPingpongFtraceEvent) GetCtlNum() uint32 {
	if x != nil && x.CtlNum != nil {
		return *x.CtlNum
	}
	return 0
}

func (x *MdpCmdWaitPingpongFtraceEvent) GetKickoffCnt() int32 {
	if x != nil && x.KickoffCnt != nil {
		return *x.KickoffCnt
	}
	return 0
}

type MdpPerfPrefillCalcFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pnum         *uint32 `protobuf:"varint,1,opt,name=pnum" json:"pnum,omitempty"`
	LatencyBuf   *uint32 `protobuf:"varint,2,opt,name=latency_buf,json=latencyBuf" json:"latency_buf,omitempty"`
	Ot           *uint32 `protobuf:"varint,3,opt,name=ot" json:"ot,omitempty"`
	YBuf         *uint32 `protobuf:"varint,4,opt,name=y_buf,json=yBuf" json:"y_buf,omitempty"`
	YScaler      *uint32 `protobuf:"varint,5,opt,name=y_scaler,json=yScaler" json:"y_scaler,omitempty"`
	PpLines      *uint32 `protobuf:"varint,6,opt,name=pp_lines,json=ppLines" json:"pp_lines,omitempty"`
	PpBytes      *uint32 `protobuf:"varint,7,opt,name=pp_bytes,json=ppBytes" json:"pp_bytes,omitempty"`
	PostSc       *uint32 `protobuf:"varint,8,opt,name=post_sc,json=postSc" json:"post_sc,omitempty"`
	FbcBytes     *uint32 `protobuf:"varint,9,opt,name=fbc_bytes,json=fbcBytes" json:"fbc_bytes,omitempty"`
	PrefillBytes *uint32 `protobuf:"varint,10,opt,name=prefill_bytes,json=prefillBytes" json:"prefill_bytes,omitempty"`
}

func (x *MdpPerfPrefillCalcFtraceEvent) Reset() {
	*x = MdpPerfPrefillCalcFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpPerfPrefillCalcFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpPerfPrefillCalcFtraceEvent) ProtoMessage() {}

func (x *MdpPerfPrefillCalcFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpPerfPrefillCalcFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpPerfPrefillCalcFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{325}
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetPnum() uint32 {
	if x != nil && x.Pnum != nil {
		return *x.Pnum
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetLatencyBuf() uint32 {
	if x != nil && x.LatencyBuf != nil {
		return *x.LatencyBuf
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetOt() uint32 {
	if x != nil && x.Ot != nil {
		return *x.Ot
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetYBuf() uint32 {
	if x != nil && x.YBuf != nil {
		return *x.YBuf
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetYScaler() uint32 {
	if x != nil && x.YScaler != nil {
		return *x.YScaler
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetPpLines() uint32 {
	if x != nil && x.PpLines != nil {
		return *x.PpLines
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetPpBytes() uint32 {
	if x != nil && x.PpBytes != nil {
		return *x.PpBytes
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetPostSc() uint32 {
	if x != nil && x.PostSc != nil {
		return *x.PostSc
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetFbcBytes() uint32 {
	if x != nil && x.FbcBytes != nil {
		return *x.FbcBytes
	}
	return 0
}

func (x *MdpPerfPrefillCalcFtraceEvent) GetPrefillBytes() uint32 {
	if x != nil && x.PrefillBytes != nil {
		return *x.PrefillBytes
	}
	return 0
}

type MdpPerfUpdateBusFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client  *int32  `protobuf:"varint,1,opt,name=client" json:"client,omitempty"`
	AbQuota *uint64 `protobuf:"varint,2,opt,name=ab_quota,json=abQuota" json:"ab_quota,omitempty"`
	IbQuota *uint64 `protobuf:"varint,3,opt,name=ib_quota,json=ibQuota" json:"ib_quota,omitempty"`
}

func (x *MdpPerfUpdateBusFtraceEvent) Reset() {
	*x = MdpPerfUpdateBusFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MdpPerfUpdateBusFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdpPerfUpdateBusFtraceEvent) ProtoMessage() {}

func (x *MdpPerfUpdateBusFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdpPerfUpdateBusFtraceEvent.ProtoReflect.Descriptor instead.
func (*MdpPerfUpdateBusFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{326}
}

func (x *MdpPerfUpdateBusFtraceEvent) GetClient() int32 {
	if x != nil && x.Client != nil {
		return *x.Client
	}
	return 0
}

func (x *MdpPerfUpdateBusFtraceEvent) GetAbQuota() uint64 {
	if x != nil && x.AbQuota != nil {
		return *x.AbQuota
	}
	return 0
}

func (x *MdpPerfUpdateBusFtraceEvent) GetIbQuota() uint64 {
	if x != nil && x.IbQuota != nil {
		return *x.IbQuota
	}
	return 0
}

type RotatorBwAoAsContextFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
}

func (x *RotatorBwAoAsContextFtraceEvent) Reset() {
	*x = RotatorBwAoAsContextFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotatorBwAoAsContextFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotatorBwAoAsContextFtraceEvent) ProtoMessage() {}

func (x *RotatorBwAoAsContextFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotatorBwAoAsContextFtraceEvent.ProtoReflect.Descriptor instead.
func (*RotatorBwAoAsContextFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{327}
}

func (x *RotatorBwAoAsContextFtraceEvent) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type MmEventRecordFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvgLat *uint32 `protobuf:"varint,1,opt,name=avg_lat,json=avgLat" json:"avg_lat,omitempty"`
	Count  *uint32 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	MaxLat *uint32 `protobuf:"varint,3,opt,name=max_lat,json=maxLat" json:"max_lat,omitempty"`
	Type   *uint32 `protobuf:"varint,4,opt,name=type" json:"type,omitempty"`
}

func (x *MmEventRecordFtraceEvent) Reset() {
	*x = MmEventRecordFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmEventRecordFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmEventRecordFtraceEvent) ProtoMessage() {}

func (x *MmEventRecordFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmEventRecordFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmEventRecordFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{328}
}

func (x *MmEventRecordFtraceEvent) GetAvgLat() uint32 {
	if x != nil && x.AvgLat != nil {
		return *x.AvgLat
	}
	return 0
}

func (x *MmEventRecordFtraceEvent) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *MmEventRecordFtraceEvent) GetMaxLat() uint32 {
	if x != nil && x.MaxLat != nil {
		return *x.MaxLat
	}
	return 0
}

func (x *MmEventRecordFtraceEvent) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

type OomScoreAdjUpdateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm        *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	OomScoreAdj *int32  `protobuf:"varint,2,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
	Pid         *int32  `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
}

func (x *OomScoreAdjUpdateFtraceEvent) Reset() {
	*x = OomScoreAdjUpdateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OomScoreAdjUpdateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OomScoreAdjUpdateFtraceEvent) ProtoMessage() {}

func (x *OomScoreAdjUpdateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OomScoreAdjUpdateFtraceEvent.ProtoReflect.Descriptor instead.
func (*OomScoreAdjUpdateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{329}
}

func (x *OomScoreAdjUpdateFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *OomScoreAdjUpdateFtraceEvent) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *OomScoreAdjUpdateFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

type MarkVictimFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid *int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
}

func (x *MarkVictimFtraceEvent) Reset() {
	*x = MarkVictimFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkVictimFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkVictimFtraceEvent) ProtoMessage() {}

func (x *MarkVictimFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkVictimFtraceEvent.ProtoReflect.Descriptor instead.
func (*MarkVictimFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{330}
}

func (x *MarkVictimFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

type CpuFrequencyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	CpuId *uint32 `protobuf:"varint,2,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (x *CpuFrequencyFtraceEvent) Reset() {
	*x = CpuFrequencyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuFrequencyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuFrequencyFtraceEvent) ProtoMessage() {}

func (x *CpuFrequencyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuFrequencyFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuFrequencyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{331}
}

func (x *CpuFrequencyFtraceEvent) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CpuFrequencyFtraceEvent) GetCpuId() uint32 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

type CpuFrequencyLimitsFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinFreq *uint32 `protobuf:"varint,1,opt,name=min_freq,json=minFreq" json:"min_freq,omitempty"`
	MaxFreq *uint32 `protobuf:"varint,2,opt,name=max_freq,json=maxFreq" json:"max_freq,omitempty"`
	CpuId   *uint32 `protobuf:"varint,3,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (x *CpuFrequencyLimitsFtraceEvent) Reset() {
	*x = CpuFrequencyLimitsFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[332]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuFrequencyLimitsFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuFrequencyLimitsFtraceEvent) ProtoMessage() {}

func (x *CpuFrequencyLimitsFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[332]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuFrequencyLimitsFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuFrequencyLimitsFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{332}
}

func (x *CpuFrequencyLimitsFtraceEvent) GetMinFreq() uint32 {
	if x != nil && x.MinFreq != nil {
		return *x.MinFreq
	}
	return 0
}

func (x *CpuFrequencyLimitsFtraceEvent) GetMaxFreq() uint32 {
	if x != nil && x.MaxFreq != nil {
		return *x.MaxFreq
	}
	return 0
}

func (x *CpuFrequencyLimitsFtraceEvent) GetCpuId() uint32 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

type CpuIdleFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *uint32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
	CpuId *uint32 `protobuf:"varint,2,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (x *CpuIdleFtraceEvent) Reset() {
	*x = CpuIdleFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[333]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuIdleFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuIdleFtraceEvent) ProtoMessage() {}

func (x *CpuIdleFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[333]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuIdleFtraceEvent.ProtoReflect.Descriptor instead.
func (*CpuIdleFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{333}
}

func (x *CpuIdleFtraceEvent) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *CpuIdleFtraceEvent) GetCpuId() uint32 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

type ClockEnableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State *uint64 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	CpuId *uint64 `protobuf:"varint,3,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (x *ClockEnableFtraceEvent) Reset() {
	*x = ClockEnableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockEnableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockEnableFtraceEvent) ProtoMessage() {}

func (x *ClockEnableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockEnableFtraceEvent.ProtoReflect.Descriptor instead.
func (*ClockEnableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{334}
}

func (x *ClockEnableFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClockEnableFtraceEvent) GetState() uint64 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *ClockEnableFtraceEvent) GetCpuId() uint64 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

type ClockDisableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State *uint64 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	CpuId *uint64 `protobuf:"varint,3,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (x *ClockDisableFtraceEvent) Reset() {
	*x = ClockDisableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[335]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockDisableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockDisableFtraceEvent) ProtoMessage() {}

func (x *ClockDisableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[335]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockDisableFtraceEvent.ProtoReflect.Descriptor instead.
func (*ClockDisableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{335}
}

func (x *ClockDisableFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClockDisableFtraceEvent) GetState() uint64 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *ClockDisableFtraceEvent) GetCpuId() uint64 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

type ClockSetRateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	State *uint64 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
	CpuId *uint64 `protobuf:"varint,3,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
}

func (x *ClockSetRateFtraceEvent) Reset() {
	*x = ClockSetRateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[336]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockSetRateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockSetRateFtraceEvent) ProtoMessage() {}

func (x *ClockSetRateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[336]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockSetRateFtraceEvent.ProtoReflect.Descriptor instead.
func (*ClockSetRateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{336}
}

func (x *ClockSetRateFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ClockSetRateFtraceEvent) GetState() uint64 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *ClockSetRateFtraceEvent) GetCpuId() uint64 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

type SuspendResumeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Val    *int32  `protobuf:"varint,2,opt,name=val" json:"val,omitempty"`
	Start  *uint32 `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
}

func (x *SuspendResumeFtraceEvent) Reset() {
	*x = SuspendResumeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[337]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendResumeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendResumeFtraceEvent) ProtoMessage() {}

func (x *SuspendResumeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[337]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendResumeFtraceEvent.ProtoReflect.Descriptor instead.
func (*SuspendResumeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{337}
}

func (x *SuspendResumeFtraceEvent) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *SuspendResumeFtraceEvent) GetVal() int32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

func (x *SuspendResumeFtraceEvent) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

type GpuFrequencyFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuId *uint32 `protobuf:"varint,1,opt,name=gpu_id,json=gpuId" json:"gpu_id,omitempty"`
	State *uint32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (x *GpuFrequencyFtraceEvent) Reset() {
	*x = GpuFrequencyFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[338]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuFrequencyFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuFrequencyFtraceEvent) ProtoMessage() {}

func (x *GpuFrequencyFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[338]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuFrequencyFtraceEvent.ProtoReflect.Descriptor instead.
func (*GpuFrequencyFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{338}
}

func (x *GpuFrequencyFtraceEvent) GetGpuId() uint32 {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return 0
}

func (x *GpuFrequencyFtraceEvent) GetState() uint32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

type SysEnterFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (x *SysEnterFtraceEvent) Reset() {
	*x = SysEnterFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[339]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysEnterFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysEnterFtraceEvent) ProtoMessage() {}

func (x *SysEnterFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[339]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysEnterFtraceEvent.ProtoReflect.Descriptor instead.
func (*SysEnterFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{339}
}

func (x *SysEnterFtraceEvent) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type SysExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ret *int64 `protobuf:"varint,2,opt,name=ret" json:"ret,omitempty"`
}

func (x *SysExitFtraceEvent) Reset() {
	*x = SysExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[340]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysExitFtraceEvent) ProtoMessage() {}

func (x *SysExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[340]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*SysExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{340}
}

func (x *SysExitFtraceEvent) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *SysExitFtraceEvent) GetRet() int64 {
	if x != nil && x.Ret != nil {
		return *x.Ret
	}
	return 0
}

type RegulatorDisableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *RegulatorDisableFtraceEvent) Reset() {
	*x = RegulatorDisableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[341]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorDisableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorDisableFtraceEvent) ProtoMessage() {}

func (x *RegulatorDisableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[341]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorDisableFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorDisableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{341}
}

func (x *RegulatorDisableFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RegulatorDisableCompleteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *RegulatorDisableCompleteFtraceEvent) Reset() {
	*x = RegulatorDisableCompleteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorDisableCompleteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorDisableCompleteFtraceEvent) ProtoMessage() {}

func (x *RegulatorDisableCompleteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorDisableCompleteFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorDisableCompleteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{342}
}

func (x *RegulatorDisableCompleteFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RegulatorEnableFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *RegulatorEnableFtraceEvent) Reset() {
	*x = RegulatorEnableFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[343]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEnableFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEnableFtraceEvent) ProtoMessage() {}

func (x *RegulatorEnableFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[343]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEnableFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorEnableFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{343}
}

func (x *RegulatorEnableFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RegulatorEnableCompleteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *RegulatorEnableCompleteFtraceEvent) Reset() {
	*x = RegulatorEnableCompleteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEnableCompleteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEnableCompleteFtraceEvent) ProtoMessage() {}

func (x *RegulatorEnableCompleteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEnableCompleteFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorEnableCompleteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{344}
}

func (x *RegulatorEnableCompleteFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RegulatorEnableDelayFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *RegulatorEnableDelayFtraceEvent) Reset() {
	*x = RegulatorEnableDelayFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorEnableDelayFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorEnableDelayFtraceEvent) ProtoMessage() {}

func (x *RegulatorEnableDelayFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorEnableDelayFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorEnableDelayFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{345}
}

func (x *RegulatorEnableDelayFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type RegulatorSetVoltageFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Min  *int32  `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
	Max  *int32  `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
}

func (x *RegulatorSetVoltageFtraceEvent) Reset() {
	*x = RegulatorSetVoltageFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[346]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorSetVoltageFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorSetVoltageFtraceEvent) ProtoMessage() {}

func (x *RegulatorSetVoltageFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[346]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorSetVoltageFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorSetVoltageFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{346}
}

func (x *RegulatorSetVoltageFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RegulatorSetVoltageFtraceEvent) GetMin() int32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *RegulatorSetVoltageFtraceEvent) GetMax() int32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type RegulatorSetVoltageCompleteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Val  *uint32 `protobuf:"varint,2,opt,name=val" json:"val,omitempty"`
}

func (x *RegulatorSetVoltageCompleteFtraceEvent) Reset() {
	*x = RegulatorSetVoltageCompleteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[347]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegulatorSetVoltageCompleteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatorSetVoltageCompleteFtraceEvent) ProtoMessage() {}

func (x *RegulatorSetVoltageCompleteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[347]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatorSetVoltageCompleteFtraceEvent.ProtoReflect.Descriptor instead.
func (*RegulatorSetVoltageCompleteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{347}
}

func (x *RegulatorSetVoltageCompleteFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RegulatorSetVoltageCompleteFtraceEvent) GetVal() uint32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

type SchedSwitchFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevComm  *string `protobuf:"bytes,1,opt,name=prev_comm,json=prevComm" json:"prev_comm,omitempty"`
	PrevPid   *int32  `protobuf:"varint,2,opt,name=prev_pid,json=prevPid" json:"prev_pid,omitempty"`
	PrevPrio  *int32  `protobuf:"varint,3,opt,name=prev_prio,json=prevPrio" json:"prev_prio,omitempty"`
	PrevState *int64  `protobuf:"varint,4,opt,name=prev_state,json=prevState" json:"prev_state,omitempty"`
	NextComm  *string `protobuf:"bytes,5,opt,name=next_comm,json=nextComm" json:"next_comm,omitempty"`
	NextPid   *int32  `protobuf:"varint,6,opt,name=next_pid,json=nextPid" json:"next_pid,omitempty"`
	NextPrio  *int32  `protobuf:"varint,7,opt,name=next_prio,json=nextPrio" json:"next_prio,omitempty"`
}

func (x *SchedSwitchFtraceEvent) Reset() {
	*x = SchedSwitchFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedSwitchFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedSwitchFtraceEvent) ProtoMessage() {}

func (x *SchedSwitchFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedSwitchFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedSwitchFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{348}
}

func (x *SchedSwitchFtraceEvent) GetPrevComm() string {
	if x != nil && x.PrevComm != nil {
		return *x.PrevComm
	}
	return ""
}

func (x *SchedSwitchFtraceEvent) GetPrevPid() int32 {
	if x != nil && x.PrevPid != nil {
		return *x.PrevPid
	}
	return 0
}

func (x *SchedSwitchFtraceEvent) GetPrevPrio() int32 {
	if x != nil && x.PrevPrio != nil {
		return *x.PrevPrio
	}
	return 0
}

func (x *SchedSwitchFtraceEvent) GetPrevState() int64 {
	if x != nil && x.PrevState != nil {
		return *x.PrevState
	}
	return 0
}

func (x *SchedSwitchFtraceEvent) GetNextComm() string {
	if x != nil && x.NextComm != nil {
		return *x.NextComm
	}
	return ""
}

func (x *SchedSwitchFtraceEvent) GetNextPid() int32 {
	if x != nil && x.NextPid != nil {
		return *x.NextPid
	}
	return 0
}

func (x *SchedSwitchFtraceEvent) GetNextPrio() int32 {
	if x != nil && x.NextPrio != nil {
		return *x.NextPrio
	}
	return 0
}

type SchedWakeupFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm      *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid       *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Prio      *int32  `protobuf:"varint,3,opt,name=prio" json:"prio,omitempty"`
	Success   *int32  `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	TargetCpu *int32  `protobuf:"varint,5,opt,name=target_cpu,json=targetCpu" json:"target_cpu,omitempty"`
}

func (x *SchedWakeupFtraceEvent) Reset() {
	*x = SchedWakeupFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[349]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedWakeupFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedWakeupFtraceEvent) ProtoMessage() {}

func (x *SchedWakeupFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[349]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedWakeupFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedWakeupFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{349}
}

func (x *SchedWakeupFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedWakeupFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedWakeupFtraceEvent) GetPrio() int32 {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return 0
}

func (x *SchedWakeupFtraceEvent) GetSuccess() int32 {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return 0
}

func (x *SchedWakeupFtraceEvent) GetTargetCpu() int32 {
	if x != nil && x.TargetCpu != nil {
		return *x.TargetCpu
	}
	return 0
}

type SchedBlockedReasonFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid    *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Caller *uint64 `protobuf:"varint,2,opt,name=caller" json:"caller,omitempty"`
	IoWait *uint32 `protobuf:"varint,3,opt,name=io_wait,json=ioWait" json:"io_wait,omitempty"`
}

func (x *SchedBlockedReasonFtraceEvent) Reset() {
	*x = SchedBlockedReasonFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedBlockedReasonFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedBlockedReasonFtraceEvent) ProtoMessage() {}

func (x *SchedBlockedReasonFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedBlockedReasonFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedBlockedReasonFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{350}
}

func (x *SchedBlockedReasonFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedBlockedReasonFtraceEvent) GetCaller() uint64 {
	if x != nil && x.Caller != nil {
		return *x.Caller
	}
	return 0
}

func (x *SchedBlockedReasonFtraceEvent) GetIoWait() uint32 {
	if x != nil && x.IoWait != nil {
		return *x.IoWait
	}
	return 0
}

type SchedCpuHotplugFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedCpu *int32 `protobuf:"varint,1,opt,name=affected_cpu,json=affectedCpu" json:"affected_cpu,omitempty"`
	Error       *int32 `protobuf:"varint,2,opt,name=error" json:"error,omitempty"`
	Status      *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (x *SchedCpuHotplugFtraceEvent) Reset() {
	*x = SchedCpuHotplugFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[351]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedCpuHotplugFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedCpuHotplugFtraceEvent) ProtoMessage() {}

func (x *SchedCpuHotplugFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[351]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedCpuHotplugFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedCpuHotplugFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{351}
}

func (x *SchedCpuHotplugFtraceEvent) GetAffectedCpu() int32 {
	if x != nil && x.AffectedCpu != nil {
		return *x.AffectedCpu
	}
	return 0
}

func (x *SchedCpuHotplugFtraceEvent) GetError() int32 {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return 0
}

func (x *SchedCpuHotplugFtraceEvent) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

type SchedWakingFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm      *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid       *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Prio      *int32  `protobuf:"varint,3,opt,name=prio" json:"prio,omitempty"`
	Success   *int32  `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	TargetCpu *int32  `protobuf:"varint,5,opt,name=target_cpu,json=targetCpu" json:"target_cpu,omitempty"`
}

func (x *SchedWakingFtraceEvent) Reset() {
	*x = SchedWakingFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[352]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedWakingFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedWakingFtraceEvent) ProtoMessage() {}

func (x *SchedWakingFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[352]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedWakingFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedWakingFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{352}
}

func (x *SchedWakingFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedWakingFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedWakingFtraceEvent) GetPrio() int32 {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return 0
}

func (x *SchedWakingFtraceEvent) GetSuccess() int32 {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return 0
}

func (x *SchedWakingFtraceEvent) GetTargetCpu() int32 {
	if x != nil && x.TargetCpu != nil {
		return *x.TargetCpu
	}
	return 0
}

type SchedWakeupNewFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm      *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid       *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Prio      *int32  `protobuf:"varint,3,opt,name=prio" json:"prio,omitempty"`
	Success   *int32  `protobuf:"varint,4,opt,name=success" json:"success,omitempty"`
	TargetCpu *int32  `protobuf:"varint,5,opt,name=target_cpu,json=targetCpu" json:"target_cpu,omitempty"`
}

func (x *SchedWakeupNewFtraceEvent) Reset() {
	*x = SchedWakeupNewFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedWakeupNewFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedWakeupNewFtraceEvent) ProtoMessage() {}

func (x *SchedWakeupNewFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedWakeupNewFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedWakeupNewFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{353}
}

func (x *SchedWakeupNewFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedWakeupNewFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedWakeupNewFtraceEvent) GetPrio() int32 {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return 0
}

func (x *SchedWakeupNewFtraceEvent) GetSuccess() int32 {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return 0
}

func (x *SchedWakeupNewFtraceEvent) GetTargetCpu() int32 {
	if x != nil && x.TargetCpu != nil {
		return *x.TargetCpu
	}
	return 0
}

type SchedProcessExecFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Pid      *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	OldPid   *int32  `protobuf:"varint,3,opt,name=old_pid,json=oldPid" json:"old_pid,omitempty"`
}

func (x *SchedProcessExecFtraceEvent) Reset() {
	*x = SchedProcessExecFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[354]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedProcessExecFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedProcessExecFtraceEvent) ProtoMessage() {}

func (x *SchedProcessExecFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[354]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedProcessExecFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedProcessExecFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{354}
}

func (x *SchedProcessExecFtraceEvent) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *SchedProcessExecFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedProcessExecFtraceEvent) GetOldPid() int32 {
	if x != nil && x.OldPid != nil {
		return *x.OldPid
	}
	return 0
}

type SchedProcessExitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid  *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Tgid *int32  `protobuf:"varint,3,opt,name=tgid" json:"tgid,omitempty"`
	Prio *int32  `protobuf:"varint,4,opt,name=prio" json:"prio,omitempty"`
}

func (x *SchedProcessExitFtraceEvent) Reset() {
	*x = SchedProcessExitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedProcessExitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedProcessExitFtraceEvent) ProtoMessage() {}

func (x *SchedProcessExitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedProcessExitFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedProcessExitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{355}
}

func (x *SchedProcessExitFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedProcessExitFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedProcessExitFtraceEvent) GetTgid() int32 {
	if x != nil && x.Tgid != nil {
		return *x.Tgid
	}
	return 0
}

func (x *SchedProcessExitFtraceEvent) GetPrio() int32 {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return 0
}

type SchedProcessForkFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentComm *string `protobuf:"bytes,1,opt,name=parent_comm,json=parentComm" json:"parent_comm,omitempty"`
	ParentPid  *int32  `protobuf:"varint,2,opt,name=parent_pid,json=parentPid" json:"parent_pid,omitempty"`
	ChildComm  *string `protobuf:"bytes,3,opt,name=child_comm,json=childComm" json:"child_comm,omitempty"`
	ChildPid   *int32  `protobuf:"varint,4,opt,name=child_pid,json=childPid" json:"child_pid,omitempty"`
}

func (x *SchedProcessForkFtraceEvent) Reset() {
	*x = SchedProcessForkFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[356]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedProcessForkFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedProcessForkFtraceEvent) ProtoMessage() {}

func (x *SchedProcessForkFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[356]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedProcessForkFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedProcessForkFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{356}
}

func (x *SchedProcessForkFtraceEvent) GetParentComm() string {
	if x != nil && x.ParentComm != nil {
		return *x.ParentComm
	}
	return ""
}

func (x *SchedProcessForkFtraceEvent) GetParentPid() int32 {
	if x != nil && x.ParentPid != nil {
		return *x.ParentPid
	}
	return 0
}

func (x *SchedProcessForkFtraceEvent) GetChildComm() string {
	if x != nil && x.ChildComm != nil {
		return *x.ChildComm
	}
	return ""
}

func (x *SchedProcessForkFtraceEvent) GetChildPid() int32 {
	if x != nil && x.ChildPid != nil {
		return *x.ChildPid
	}
	return 0
}

type SchedProcessFreeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid  *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Prio *int32  `protobuf:"varint,3,opt,name=prio" json:"prio,omitempty"`
}

func (x *SchedProcessFreeFtraceEvent) Reset() {
	*x = SchedProcessFreeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[357]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedProcessFreeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedProcessFreeFtraceEvent) ProtoMessage() {}

func (x *SchedProcessFreeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[357]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedProcessFreeFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedProcessFreeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{357}
}

func (x *SchedProcessFreeFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedProcessFreeFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedProcessFreeFtraceEvent) GetPrio() int32 {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return 0
}

type SchedProcessHangFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid  *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
}

func (x *SchedProcessHangFtraceEvent) Reset() {
	*x = SchedProcessHangFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[358]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedProcessHangFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedProcessHangFtraceEvent) ProtoMessage() {}

func (x *SchedProcessHangFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[358]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedProcessHangFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedProcessHangFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{358}
}

func (x *SchedProcessHangFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedProcessHangFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

type SchedProcessWaitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comm *string `protobuf:"bytes,1,opt,name=comm" json:"comm,omitempty"`
	Pid  *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Prio *int32  `protobuf:"varint,3,opt,name=prio" json:"prio,omitempty"`
}

func (x *SchedProcessWaitFtraceEvent) Reset() {
	*x = SchedProcessWaitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedProcessWaitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedProcessWaitFtraceEvent) ProtoMessage() {}

func (x *SchedProcessWaitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedProcessWaitFtraceEvent.ProtoReflect.Descriptor instead.
func (*SchedProcessWaitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{359}
}

func (x *SchedProcessWaitFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SchedProcessWaitFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SchedProcessWaitFtraceEvent) GetPrio() int32 {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return 0
}

type ScmCallStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arginfo *uint32 `protobuf:"varint,1,opt,name=arginfo" json:"arginfo,omitempty"`
	X0      *uint64 `protobuf:"varint,2,opt,name=x0" json:"x0,omitempty"`
	X5      *uint64 `protobuf:"varint,3,opt,name=x5" json:"x5,omitempty"`
}

func (x *ScmCallStartFtraceEvent) Reset() {
	*x = ScmCallStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[360]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScmCallStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScmCallStartFtraceEvent) ProtoMessage() {}

func (x *ScmCallStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[360]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScmCallStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*ScmCallStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{360}
}

func (x *ScmCallStartFtraceEvent) GetArginfo() uint32 {
	if x != nil && x.Arginfo != nil {
		return *x.Arginfo
	}
	return 0
}

func (x *ScmCallStartFtraceEvent) GetX0() uint64 {
	if x != nil && x.X0 != nil {
		return *x.X0
	}
	return 0
}

func (x *ScmCallStartFtraceEvent) GetX5() uint64 {
	if x != nil && x.X5 != nil {
		return *x.X5
	}
	return 0
}

type ScmCallEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ScmCallEndFtraceEvent) Reset() {
	*x = ScmCallEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScmCallEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScmCallEndFtraceEvent) ProtoMessage() {}

func (x *ScmCallEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScmCallEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*ScmCallEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{361}
}

type SdeTracingMarkWriteFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid        *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	TraceName  *string `protobuf:"bytes,2,opt,name=trace_name,json=traceName" json:"trace_name,omitempty"`
	TraceType  *uint32 `protobuf:"varint,3,opt,name=trace_type,json=traceType" json:"trace_type,omitempty"`
	Value      *int32  `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
	TraceBegin *uint32 `protobuf:"varint,5,opt,name=trace_begin,json=traceBegin" json:"trace_begin,omitempty"`
}

func (x *SdeTracingMarkWriteFtraceEvent) Reset() {
	*x = SdeTracingMarkWriteFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdeTracingMarkWriteFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdeTracingMarkWriteFtraceEvent) ProtoMessage() {}

func (x *SdeTracingMarkWriteFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdeTracingMarkWriteFtraceEvent.ProtoReflect.Descriptor instead.
func (*SdeTracingMarkWriteFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{362}
}

func (x *SdeTracingMarkWriteFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SdeTracingMarkWriteFtraceEvent) GetTraceName() string {
	if x != nil && x.TraceName != nil {
		return *x.TraceName
	}
	return ""
}

func (x *SdeTracingMarkWriteFtraceEvent) GetTraceType() uint32 {
	if x != nil && x.TraceType != nil {
		return *x.TraceType
	}
	return 0
}

func (x *SdeTracingMarkWriteFtraceEvent) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *SdeTracingMarkWriteFtraceEvent) GetTraceBegin() uint32 {
	if x != nil && x.TraceBegin != nil {
		return *x.TraceBegin
	}
	return 0
}

type SignalDeliverFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    *int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	SaFlags *uint64 `protobuf:"varint,2,opt,name=sa_flags,json=saFlags" json:"sa_flags,omitempty"`
	Sig     *int32  `protobuf:"varint,3,opt,name=sig" json:"sig,omitempty"`
}

func (x *SignalDeliverFtraceEvent) Reset() {
	*x = SignalDeliverFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalDeliverFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalDeliverFtraceEvent) ProtoMessage() {}

func (x *SignalDeliverFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalDeliverFtraceEvent.ProtoReflect.Descriptor instead.
func (*SignalDeliverFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{363}
}

func (x *SignalDeliverFtraceEvent) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *SignalDeliverFtraceEvent) GetSaFlags() uint64 {
	if x != nil && x.SaFlags != nil {
		return *x.SaFlags
	}
	return 0
}

func (x *SignalDeliverFtraceEvent) GetSig() int32 {
	if x != nil && x.Sig != nil {
		return *x.Sig
	}
	return 0
}

type SignalGenerateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   *int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Comm   *string `protobuf:"bytes,2,opt,name=comm" json:"comm,omitempty"`
	Group  *int32  `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
	Pid    *int32  `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	Result *int32  `protobuf:"varint,5,opt,name=result" json:"result,omitempty"`
	Sig    *int32  `protobuf:"varint,6,opt,name=sig" json:"sig,omitempty"`
}

func (x *SignalGenerateFtraceEvent) Reset() {
	*x = SignalGenerateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGenerateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGenerateFtraceEvent) ProtoMessage() {}

func (x *SignalGenerateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGenerateFtraceEvent.ProtoReflect.Descriptor instead.
func (*SignalGenerateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{364}
}

func (x *SignalGenerateFtraceEvent) GetCode() int32 {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return 0
}

func (x *SignalGenerateFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *SignalGenerateFtraceEvent) GetGroup() int32 {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return 0
}

func (x *SignalGenerateFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SignalGenerateFtraceEvent) GetResult() int32 {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return 0
}

func (x *SignalGenerateFtraceEvent) GetSig() int32 {
	if x != nil && x.Sig != nil {
		return *x.Sig
	}
	return 0
}

type SyncPtFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeline *string `protobuf:"bytes,1,opt,name=timeline" json:"timeline,omitempty"`
	Value    *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *SyncPtFtraceEvent) Reset() {
	*x = SyncPtFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPtFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPtFtraceEvent) ProtoMessage() {}

func (x *SyncPtFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPtFtraceEvent.ProtoReflect.Descriptor instead.
func (*SyncPtFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{365}
}

func (x *SyncPtFtraceEvent) GetTimeline() string {
	if x != nil && x.Timeline != nil {
		return *x.Timeline
	}
	return ""
}

func (x *SyncPtFtraceEvent) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SyncTimelineFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *SyncTimelineFtraceEvent) Reset() {
	*x = SyncTimelineFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncTimelineFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncTimelineFtraceEvent) ProtoMessage() {}

func (x *SyncTimelineFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncTimelineFtraceEvent.ProtoReflect.Descriptor instead.
func (*SyncTimelineFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{366}
}

func (x *SyncTimelineFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SyncTimelineFtraceEvent) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SyncWaitFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Status *int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	Begin  *uint32 `protobuf:"varint,3,opt,name=begin" json:"begin,omitempty"`
}

func (x *SyncWaitFtraceEvent) Reset() {
	*x = SyncWaitFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncWaitFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncWaitFtraceEvent) ProtoMessage() {}

func (x *SyncWaitFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncWaitFtraceEvent.ProtoReflect.Descriptor instead.
func (*SyncWaitFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{367}
}

func (x *SyncWaitFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SyncWaitFtraceEvent) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *SyncWaitFtraceEvent) GetBegin() uint32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

type ZeroFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag  *int32  `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
	Name  *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Pid   *int32  `protobuf:"varint,3,opt,name=pid" json:"pid,omitempty"`
	Value *int64  `protobuf:"varint,4,opt,name=value" json:"value,omitempty"`
}

func (x *ZeroFtraceEvent) Reset() {
	*x = ZeroFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZeroFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZeroFtraceEvent) ProtoMessage() {}

func (x *ZeroFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZeroFtraceEvent.ProtoReflect.Descriptor instead.
func (*ZeroFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{368}
}

func (x *ZeroFtraceEvent) GetFlag() int32 {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return 0
}

func (x *ZeroFtraceEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ZeroFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ZeroFtraceEvent) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TaskNewtaskFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Comm        *string `protobuf:"bytes,2,opt,name=comm" json:"comm,omitempty"`
	CloneFlags  *uint64 `protobuf:"varint,3,opt,name=clone_flags,json=cloneFlags" json:"clone_flags,omitempty"`
	OomScoreAdj *int32  `protobuf:"varint,4,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
}

func (x *TaskNewtaskFtraceEvent) Reset() {
	*x = TaskNewtaskFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskNewtaskFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskNewtaskFtraceEvent) ProtoMessage() {}

func (x *TaskNewtaskFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskNewtaskFtraceEvent.ProtoReflect.Descriptor instead.
func (*TaskNewtaskFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{369}
}

func (x *TaskNewtaskFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *TaskNewtaskFtraceEvent) GetComm() string {
	if x != nil && x.Comm != nil {
		return *x.Comm
	}
	return ""
}

func (x *TaskNewtaskFtraceEvent) GetCloneFlags() uint64 {
	if x != nil && x.CloneFlags != nil {
		return *x.CloneFlags
	}
	return 0
}

func (x *TaskNewtaskFtraceEvent) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

type TaskRenameFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         *int32  `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Oldcomm     *string `protobuf:"bytes,2,opt,name=oldcomm" json:"oldcomm,omitempty"`
	Newcomm     *string `protobuf:"bytes,3,opt,name=newcomm" json:"newcomm,omitempty"`
	OomScoreAdj *int32  `protobuf:"varint,4,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
}

func (x *TaskRenameFtraceEvent) Reset() {
	*x = TaskRenameFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRenameFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRenameFtraceEvent) ProtoMessage() {}

func (x *TaskRenameFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRenameFtraceEvent.ProtoReflect.Descriptor instead.
func (*TaskRenameFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{370}
}

func (x *TaskRenameFtraceEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *TaskRenameFtraceEvent) GetOldcomm() string {
	if x != nil && x.Oldcomm != nil {
		return *x.Oldcomm
	}
	return ""
}

func (x *TaskRenameFtraceEvent) GetNewcomm() string {
	if x != nil && x.Newcomm != nil {
		return *x.Newcomm
	}
	return ""
}

func (x *TaskRenameFtraceEvent) GetOomScoreAdj() int32 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

type ThermalTemperatureFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Temp        *int32  `protobuf:"varint,2,opt,name=temp" json:"temp,omitempty"`
	TempPrev    *int32  `protobuf:"varint,3,opt,name=temp_prev,json=tempPrev" json:"temp_prev,omitempty"`
	ThermalZone *string `protobuf:"bytes,4,opt,name=thermal_zone,json=thermalZone" json:"thermal_zone,omitempty"`
}

func (x *ThermalTemperatureFtraceEvent) Reset() {
	*x = ThermalTemperatureFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermalTemperatureFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalTemperatureFtraceEvent) ProtoMessage() {}

func (x *ThermalTemperatureFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalTemperatureFtraceEvent.ProtoReflect.Descriptor instead.
func (*ThermalTemperatureFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{371}
}

func (x *ThermalTemperatureFtraceEvent) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ThermalTemperatureFtraceEvent) GetTemp() int32 {
	if x != nil && x.Temp != nil {
		return *x.Temp
	}
	return 0
}

func (x *ThermalTemperatureFtraceEvent) GetTempPrev() int32 {
	if x != nil && x.TempPrev != nil {
		return *x.TempPrev
	}
	return 0
}

func (x *ThermalTemperatureFtraceEvent) GetThermalZone() string {
	if x != nil && x.ThermalZone != nil {
		return *x.ThermalZone
	}
	return ""
}

type CdevUpdateFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *uint64 `protobuf:"varint,1,opt,name=target" json:"target,omitempty"`
	Type   *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (x *CdevUpdateFtraceEvent) Reset() {
	*x = CdevUpdateFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CdevUpdateFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CdevUpdateFtraceEvent) ProtoMessage() {}

func (x *CdevUpdateFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CdevUpdateFtraceEvent.ProtoReflect.Descriptor instead.
func (*CdevUpdateFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{372}
}

func (x *CdevUpdateFtraceEvent) GetTarget() uint64 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

func (x *CdevUpdateFtraceEvent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

type MmVmscanDirectReclaimBeginFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order        *int32  `protobuf:"varint,1,opt,name=order" json:"order,omitempty"`
	MayWritepage *int32  `protobuf:"varint,2,opt,name=may_writepage,json=mayWritepage" json:"may_writepage,omitempty"`
	GfpFlags     *uint32 `protobuf:"varint,3,opt,name=gfp_flags,json=gfpFlags" json:"gfp_flags,omitempty"`
}

func (x *MmVmscanDirectReclaimBeginFtraceEvent) Reset() {
	*x = MmVmscanDirectReclaimBeginFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmVmscanDirectReclaimBeginFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmVmscanDirectReclaimBeginFtraceEvent) ProtoMessage() {}

func (x *MmVmscanDirectReclaimBeginFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmVmscanDirectReclaimBeginFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmVmscanDirectReclaimBeginFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{373}
}

func (x *MmVmscanDirectReclaimBeginFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *MmVmscanDirectReclaimBeginFtraceEvent) GetMayWritepage() int32 {
	if x != nil && x.MayWritepage != nil {
		return *x.MayWritepage
	}
	return 0
}

func (x *MmVmscanDirectReclaimBeginFtraceEvent) GetGfpFlags() uint32 {
	if x != nil && x.GfpFlags != nil {
		return *x.GfpFlags
	}
	return 0
}

type MmVmscanDirectReclaimEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NrReclaimed *uint64 `protobuf:"varint,1,opt,name=nr_reclaimed,json=nrReclaimed" json:"nr_reclaimed,omitempty"`
}

func (x *MmVmscanDirectReclaimEndFtraceEvent) Reset() {
	*x = MmVmscanDirectReclaimEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmVmscanDirectReclaimEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmVmscanDirectReclaimEndFtraceEvent) ProtoMessage() {}

func (x *MmVmscanDirectReclaimEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmVmscanDirectReclaimEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmVmscanDirectReclaimEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{374}
}

func (x *MmVmscanDirectReclaimEndFtraceEvent) GetNrReclaimed() uint64 {
	if x != nil && x.NrReclaimed != nil {
		return *x.NrReclaimed
	}
	return 0
}

type MmVmscanKswapdWakeFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid   *int32 `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
	Order *int32 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
}

func (x *MmVmscanKswapdWakeFtraceEvent) Reset() {
	*x = MmVmscanKswapdWakeFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmVmscanKswapdWakeFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmVmscanKswapdWakeFtraceEvent) ProtoMessage() {}

func (x *MmVmscanKswapdWakeFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmVmscanKswapdWakeFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmVmscanKswapdWakeFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{375}
}

func (x *MmVmscanKswapdWakeFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

func (x *MmVmscanKswapdWakeFtraceEvent) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

type MmVmscanKswapdSleepFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nid *int32 `protobuf:"varint,1,opt,name=nid" json:"nid,omitempty"`
}

func (x *MmVmscanKswapdSleepFtraceEvent) Reset() {
	*x = MmVmscanKswapdSleepFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MmVmscanKswapdSleepFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MmVmscanKswapdSleepFtraceEvent) ProtoMessage() {}

func (x *MmVmscanKswapdSleepFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MmVmscanKswapdSleepFtraceEvent.ProtoReflect.Descriptor instead.
func (*MmVmscanKswapdSleepFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{376}
}

func (x *MmVmscanKswapdSleepFtraceEvent) GetNid() int32 {
	if x != nil && x.Nid != nil {
		return *x.Nid
	}
	return 0
}

type WorkqueueActivateWorkFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work *uint64 `protobuf:"varint,1,opt,name=work" json:"work,omitempty"`
}

func (x *WorkqueueActivateWorkFtraceEvent) Reset() {
	*x = WorkqueueActivateWorkFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkqueueActivateWorkFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkqueueActivateWorkFtraceEvent) ProtoMessage() {}

func (x *WorkqueueActivateWorkFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkqueueActivateWorkFtraceEvent.ProtoReflect.Descriptor instead.
func (*WorkqueueActivateWorkFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{377}
}

func (x *WorkqueueActivateWorkFtraceEvent) GetWork() uint64 {
	if x != nil && x.Work != nil {
		return *x.Work
	}
	return 0
}

type WorkqueueExecuteEndFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work *uint64 `protobuf:"varint,1,opt,name=work" json:"work,omitempty"`
}

func (x *WorkqueueExecuteEndFtraceEvent) Reset() {
	*x = WorkqueueExecuteEndFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkqueueExecuteEndFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkqueueExecuteEndFtraceEvent) ProtoMessage() {}

func (x *WorkqueueExecuteEndFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkqueueExecuteEndFtraceEvent.ProtoReflect.Descriptor instead.
func (*WorkqueueExecuteEndFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{378}
}

func (x *WorkqueueExecuteEndFtraceEvent) GetWork() uint64 {
	if x != nil && x.Work != nil {
		return *x.Work
	}
	return 0
}

type WorkqueueExecuteStartFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work     *uint64 `protobuf:"varint,1,opt,name=work" json:"work,omitempty"`
	Function *uint64 `protobuf:"varint,2,opt,name=function" json:"function,omitempty"`
}

func (x *WorkqueueExecuteStartFtraceEvent) Reset() {
	*x = WorkqueueExecuteStartFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkqueueExecuteStartFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkqueueExecuteStartFtraceEvent) ProtoMessage() {}

func (x *WorkqueueExecuteStartFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkqueueExecuteStartFtraceEvent.ProtoReflect.Descriptor instead.
func (*WorkqueueExecuteStartFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{379}
}

func (x *WorkqueueExecuteStartFtraceEvent) GetWork() uint64 {
	if x != nil && x.Work != nil {
		return *x.Work
	}
	return 0
}

func (x *WorkqueueExecuteStartFtraceEvent) GetFunction() uint64 {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return 0
}

type WorkqueueQueueWorkFtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Work      *uint64 `protobuf:"varint,1,opt,name=work" json:"work,omitempty"`
	Function  *uint64 `protobuf:"varint,2,opt,name=function" json:"function,omitempty"`
	Workqueue *uint64 `protobuf:"varint,3,opt,name=workqueue" json:"workqueue,omitempty"`
	ReqCpu    *uint32 `protobuf:"varint,4,opt,name=req_cpu,json=reqCpu" json:"req_cpu,omitempty"`
	Cpu       *uint32 `protobuf:"varint,5,opt,name=cpu" json:"cpu,omitempty"`
}

func (x *WorkqueueQueueWorkFtraceEvent) Reset() {
	*x = WorkqueueQueueWorkFtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkqueueQueueWorkFtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkqueueQueueWorkFtraceEvent) ProtoMessage() {}

func (x *WorkqueueQueueWorkFtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkqueueQueueWorkFtraceEvent.ProtoReflect.Descriptor instead.
func (*WorkqueueQueueWorkFtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{380}
}

func (x *WorkqueueQueueWorkFtraceEvent) GetWork() uint64 {
	if x != nil && x.Work != nil {
		return *x.Work
	}
	return 0
}

func (x *WorkqueueQueueWorkFtraceEvent) GetFunction() uint64 {
	if x != nil && x.Function != nil {
		return *x.Function
	}
	return 0
}

func (x *WorkqueueQueueWorkFtraceEvent) GetWorkqueue() uint64 {
	if x != nil && x.Workqueue != nil {
		return *x.Workqueue
	}
	return 0
}

func (x *WorkqueueQueueWorkFtraceEvent) GetReqCpu() uint32 {
	if x != nil && x.ReqCpu != nil {
		return *x.ReqCpu
	}
	return 0
}

func (x *WorkqueueQueueWorkFtraceEvent) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

type FtraceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Nanoseconds since an epoch.
	// Epoch is configurable by writing into trace_clock.
	// By default this timestamp is CPU local.
	// TODO: Figure out a story for reconciling the various clocks.
	Timestamp *uint64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Kernel pid (do not confuse with userspace pid aka tgid)
	Pid *uint32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	// Types that are assignable to Event:
	//	*FtraceEvent_Print
	//	*FtraceEvent_SchedSwitch
	//	*FtraceEvent_CpuFrequency
	//	*FtraceEvent_CpuFrequencyLimits
	//	*FtraceEvent_CpuIdle
	//	*FtraceEvent_ClockEnable
	//	*FtraceEvent_ClockDisable
	//	*FtraceEvent_ClockSetRate
	//	*FtraceEvent_SchedWakeup
	//	*FtraceEvent_SchedBlockedReason
	//	*FtraceEvent_SchedCpuHotplug
	//	*FtraceEvent_SchedWaking
	//	*FtraceEvent_IpiEntry
	//	*FtraceEvent_IpiExit
	//	*FtraceEvent_IpiRaise
	//	*FtraceEvent_SoftirqEntry
	//	*FtraceEvent_SoftirqExit
	//	*FtraceEvent_SoftirqRaise
	//	*FtraceEvent_I2CRead
	//	*FtraceEvent_I2CWrite
	//	*FtraceEvent_I2CResult
	//	*FtraceEvent_I2CReply
	//	*FtraceEvent_SmbusRead
	//	*FtraceEvent_SmbusWrite
	//	*FtraceEvent_SmbusResult
	//	*FtraceEvent_SmbusReply
	//	*FtraceEvent_LowmemoryKill
	//	*FtraceEvent_IrqHandlerEntry
	//	*FtraceEvent_IrqHandlerExit
	//	*FtraceEvent_SyncPt
	//	*FtraceEvent_SyncTimeline
	//	*FtraceEvent_SyncWait
	//	*FtraceEvent_Ext4DaWriteBegin
	//	*FtraceEvent_Ext4DaWriteEnd
	//	*FtraceEvent_Ext4SyncFileEnter
	//	*FtraceEvent_Ext4SyncFileExit
	//	*FtraceEvent_BlockRqIssue
	//	*FtraceEvent_MmVmscanDirectReclaimBegin
	//	*FtraceEvent_MmVmscanDirectReclaimEnd
	//	*FtraceEvent_MmVmscanKswapdWake
	//	*FtraceEvent_MmVmscanKswapdSleep
	//	*FtraceEvent_BinderTransaction
	//	*FtraceEvent_BinderTransactionReceived
	//	*FtraceEvent_BinderSetPriority
	//	*FtraceEvent_BinderLock
	//	*FtraceEvent_BinderLocked
	//	*FtraceEvent_BinderUnlock
	//	*FtraceEvent_WorkqueueActivateWork
	//	*FtraceEvent_WorkqueueExecuteEnd
	//	*FtraceEvent_WorkqueueExecuteStart
	//	*FtraceEvent_WorkqueueQueueWork
	//	*FtraceEvent_RegulatorDisable
	//	*FtraceEvent_RegulatorDisableComplete
	//	*FtraceEvent_RegulatorEnable
	//	*FtraceEvent_RegulatorEnableComplete
	//	*FtraceEvent_RegulatorEnableDelay
	//	*FtraceEvent_RegulatorSetVoltage
	//	*FtraceEvent_RegulatorSetVoltageComplete
	//	*FtraceEvent_CgroupAttachTask
	//	*FtraceEvent_CgroupMkdir
	//	*FtraceEvent_CgroupRemount
	//	*FtraceEvent_CgroupRmdir
	//	*FtraceEvent_CgroupTransferTasks
	//	*FtraceEvent_CgroupDestroyRoot
	//	*FtraceEvent_CgroupRelease
	//	*FtraceEvent_CgroupRename
	//	*FtraceEvent_CgroupSetupRoot
	//	*FtraceEvent_MdpCmdKickoff
	//	*FtraceEvent_MdpCommit
	//	*FtraceEvent_MdpPerfSetOt
	//	*FtraceEvent_MdpSsppChange
	//	*FtraceEvent_TracingMarkWrite
	//	*FtraceEvent_MdpCmdPingpongDone
	//	*FtraceEvent_MdpCompareBw
	//	*FtraceEvent_MdpPerfSetPanicLuts
	//	*FtraceEvent_MdpSsppSet
	//	*FtraceEvent_MdpCmdReadptrDone
	//	*FtraceEvent_MdpMisrCrc
	//	*FtraceEvent_MdpPerfSetQosLuts
	//	*FtraceEvent_MdpTraceCounter
	//	*FtraceEvent_MdpCmdReleaseBw
	//	*FtraceEvent_MdpMixerUpdate
	//	*FtraceEvent_MdpPerfSetWmLevels
	//	*FtraceEvent_MdpVideoUnderrunDone
	//	*FtraceEvent_MdpCmdWaitPingpong
	//	*FtraceEvent_MdpPerfPrefillCalc
	//	*FtraceEvent_MdpPerfUpdateBus
	//	*FtraceEvent_RotatorBwAoAsContext
	//	*FtraceEvent_MmFilemapAddToPageCache
	//	*FtraceEvent_MmFilemapDeleteFromPageCache
	//	*FtraceEvent_MmCompactionBegin
	//	*FtraceEvent_MmCompactionDeferCompaction
	//	*FtraceEvent_MmCompactionDeferred
	//	*FtraceEvent_MmCompactionDeferReset
	//	*FtraceEvent_MmCompactionEnd
	//	*FtraceEvent_MmCompactionFinished
	//	*FtraceEvent_MmCompactionIsolateFreepages
	//	*FtraceEvent_MmCompactionIsolateMigratepages
	//	*FtraceEvent_MmCompactionKcompactdSleep
	//	*FtraceEvent_MmCompactionKcompactdWake
	//	*FtraceEvent_MmCompactionMigratepages
	//	*FtraceEvent_MmCompactionSuitable
	//	*FtraceEvent_MmCompactionTryToCompactPages
	//	*FtraceEvent_MmCompactionWakeupKcompactd
	//	*FtraceEvent_SuspendResume
	//	*FtraceEvent_SchedWakeupNew
	//	*FtraceEvent_BlockBioBackmerge
	//	*FtraceEvent_BlockBioBounce
	//	*FtraceEvent_BlockBioComplete
	//	*FtraceEvent_BlockBioFrontmerge
	//	*FtraceEvent_BlockBioQueue
	//	*FtraceEvent_BlockBioRemap
	//	*FtraceEvent_BlockDirtyBuffer
	//	*FtraceEvent_BlockGetrq
	//	*FtraceEvent_BlockPlug
	//	*FtraceEvent_BlockRqAbort
	//	*FtraceEvent_BlockRqComplete
	//	*FtraceEvent_BlockRqInsert
	//	*FtraceEvent_BlockRqRemap
	//	*FtraceEvent_BlockRqRequeue
	//	*FtraceEvent_BlockSleeprq
	//	*FtraceEvent_BlockSplit
	//	*FtraceEvent_BlockTouchBuffer
	//	*FtraceEvent_BlockUnplug
	//	*FtraceEvent_Ext4AllocDaBlocks
	//	*FtraceEvent_Ext4AllocateBlocks
	//	*FtraceEvent_Ext4AllocateInode
	//	*FtraceEvent_Ext4BeginOrderedTruncate
	//	*FtraceEvent_Ext4CollapseRange
	//	*FtraceEvent_Ext4DaReleaseSpace
	//	*FtraceEvent_Ext4DaReserveSpace
	//	*FtraceEvent_Ext4DaUpdateReserveSpace
	//	*FtraceEvent_Ext4DaWritePages
	//	*FtraceEvent_Ext4DaWritePagesExtent
	//	*FtraceEvent_Ext4Direct_IOEnter
	//	*FtraceEvent_Ext4Direct_IOExit
	//	*FtraceEvent_Ext4DiscardBlocks
	//	*FtraceEvent_Ext4DiscardPreallocations
	//	*FtraceEvent_Ext4DropInode
	//	*FtraceEvent_Ext4EsCacheExtent
	//	*FtraceEvent_Ext4EsFindDelayedExtentRangeEnter
	//	*FtraceEvent_Ext4EsFindDelayedExtentRangeExit
	//	*FtraceEvent_Ext4EsInsertExtent
	//	*FtraceEvent_Ext4EsLookupExtentEnter
	//	*FtraceEvent_Ext4EsLookupExtentExit
	//	*FtraceEvent_Ext4EsRemoveExtent
	//	*FtraceEvent_Ext4EsShrink
	//	*FtraceEvent_Ext4EsShrinkCount
	//	*FtraceEvent_Ext4EsShrinkScanEnter
	//	*FtraceEvent_Ext4EsShrinkScanExit
	//	*FtraceEvent_Ext4EvictInode
	//	*FtraceEvent_Ext4ExtConvertToInitializedEnter
	//	*FtraceEvent_Ext4ExtConvertToInitializedFastpath
	//	*FtraceEvent_Ext4ExtHandleUnwrittenExtents
	//	*FtraceEvent_Ext4ExtInCache
	//	*FtraceEvent_Ext4ExtLoadExtent
	//	*FtraceEvent_Ext4ExtMapBlocksEnter
	//	*FtraceEvent_Ext4ExtMapBlocksExit
	//	*FtraceEvent_Ext4ExtPutInCache
	//	*FtraceEvent_Ext4ExtRemoveSpace
	//	*FtraceEvent_Ext4ExtRemoveSpaceDone
	//	*FtraceEvent_Ext4ExtRmIdx
	//	*FtraceEvent_Ext4ExtRmLeaf
	//	*FtraceEvent_Ext4ExtShowExtent
	//	*FtraceEvent_Ext4FallocateEnter
	//	*FtraceEvent_Ext4FallocateExit
	//	*FtraceEvent_Ext4FindDelallocRange
	//	*FtraceEvent_Ext4Forget
	//	*FtraceEvent_Ext4FreeBlocks
	//	*FtraceEvent_Ext4FreeInode
	//	*FtraceEvent_Ext4GetImpliedClusterAllocExit
	//	*FtraceEvent_Ext4GetReservedClusterAlloc
	//	*FtraceEvent_Ext4IndMapBlocksEnter
	//	*FtraceEvent_Ext4IndMapBlocksExit
	//	*FtraceEvent_Ext4InsertRange
	//	*FtraceEvent_Ext4Invalidatepage
	//	*FtraceEvent_Ext4JournalStart
	//	*FtraceEvent_Ext4JournalStartReserved
	//	*FtraceEvent_Ext4JournalledInvalidatepage
	//	*FtraceEvent_Ext4JournalledWriteEnd
	//	*FtraceEvent_Ext4LoadInode
	//	*FtraceEvent_Ext4LoadInodeBitmap
	//	*FtraceEvent_Ext4MarkInodeDirty
	//	*FtraceEvent_Ext4MbBitmapLoad
	//	*FtraceEvent_Ext4MbBuddyBitmapLoad
	//	*FtraceEvent_Ext4MbDiscardPreallocations
	//	*FtraceEvent_Ext4MbNewGroupPa
	//	*FtraceEvent_Ext4MbNewInodePa
	//	*FtraceEvent_Ext4MbReleaseGroupPa
	//	*FtraceEvent_Ext4MbReleaseInodePa
	//	*FtraceEvent_Ext4MballocAlloc
	//	*FtraceEvent_Ext4MballocDiscard
	//	*FtraceEvent_Ext4MballocFree
	//	*FtraceEvent_Ext4MballocPrealloc
	//	*FtraceEvent_Ext4OtherInodeUpdateTime
	//	*FtraceEvent_Ext4PunchHole
	//	*FtraceEvent_Ext4ReadBlockBitmapLoad
	//	*FtraceEvent_Ext4Readpage
	//	*FtraceEvent_Ext4Releasepage
	//	*FtraceEvent_Ext4RemoveBlocks
	//	*FtraceEvent_Ext4RequestBlocks
	//	*FtraceEvent_Ext4RequestInode
	//	*FtraceEvent_Ext4SyncFs
	//	*FtraceEvent_Ext4TrimAllFree
	//	*FtraceEvent_Ext4TrimExtent
	//	*FtraceEvent_Ext4TruncateEnter
	//	*FtraceEvent_Ext4TruncateExit
	//	*FtraceEvent_Ext4UnlinkEnter
	//	*FtraceEvent_Ext4UnlinkExit
	//	*FtraceEvent_Ext4WriteBegin
	//	*FtraceEvent_Ext4WriteEnd
	//	*FtraceEvent_Ext4Writepage
	//	*FtraceEvent_Ext4Writepages
	//	*FtraceEvent_Ext4WritepagesResult
	//	*FtraceEvent_Ext4ZeroRange
	//	*FtraceEvent_TaskNewtask
	//	*FtraceEvent_TaskRename
	//	*FtraceEvent_SchedProcessExec
	//	*FtraceEvent_SchedProcessExit
	//	*FtraceEvent_SchedProcessFork
	//	*FtraceEvent_SchedProcessFree
	//	*FtraceEvent_SchedProcessHang
	//	*FtraceEvent_SchedProcessWait
	//	*FtraceEvent_F2FsDoSubmitBio
	//	*FtraceEvent_F2FsEvictInode
	//	*FtraceEvent_F2FsFallocate
	//	*FtraceEvent_F2FsGetDataBlock
	//	*FtraceEvent_F2FsGetVictim
	//	*FtraceEvent_F2FsIget
	//	*FtraceEvent_F2FsIgetExit
	//	*FtraceEvent_F2FsNewInode
	//	*FtraceEvent_F2FsReadpage
	//	*FtraceEvent_F2FsReserveNewBlock
	//	*FtraceEvent_F2FsSetPageDirty
	//	*FtraceEvent_F2FsSubmitWritePage
	//	*FtraceEvent_F2FsSyncFileEnter
	//	*FtraceEvent_F2FsSyncFileExit
	//	*FtraceEvent_F2FsSyncFs
	//	*FtraceEvent_F2FsTruncate
	//	*FtraceEvent_F2FsTruncateBlocksEnter
	//	*FtraceEvent_F2FsTruncateBlocksExit
	//	*FtraceEvent_F2FsTruncateDataBlocksRange
	//	*FtraceEvent_F2FsTruncateInodeBlocksEnter
	//	*FtraceEvent_F2FsTruncateInodeBlocksExit
	//	*FtraceEvent_F2FsTruncateNode
	//	*FtraceEvent_F2FsTruncateNodesEnter
	//	*FtraceEvent_F2FsTruncateNodesExit
	//	*FtraceEvent_F2FsTruncatePartialNodes
	//	*FtraceEvent_F2FsUnlinkEnter
	//	*FtraceEvent_F2FsUnlinkExit
	//	*FtraceEvent_F2FsVmPageMkwrite
	//	*FtraceEvent_F2FsWriteBegin
	//	*FtraceEvent_F2FsWriteCheckpoint
	//	*FtraceEvent_F2FsWriteEnd
	//	*FtraceEvent_AllocPagesIommuEnd
	//	*FtraceEvent_AllocPagesIommuFail
	//	*FtraceEvent_AllocPagesIommuStart
	//	*FtraceEvent_AllocPagesSysEnd
	//	*FtraceEvent_AllocPagesSysFail
	//	*FtraceEvent_AllocPagesSysStart
	//	*FtraceEvent_DmaAllocContiguousRetry
	//	*FtraceEvent_IommuMapRange
	//	*FtraceEvent_IommuSecPtblMapRangeEnd
	//	*FtraceEvent_IommuSecPtblMapRangeStart
	//	*FtraceEvent_IonAllocBufferEnd
	//	*FtraceEvent_IonAllocBufferFail
	//	*FtraceEvent_IonAllocBufferFallback
	//	*FtraceEvent_IonAllocBufferStart
	//	*FtraceEvent_IonCpAllocRetry
	//	*FtraceEvent_IonCpSecureBufferEnd
	//	*FtraceEvent_IonCpSecureBufferStart
	//	*FtraceEvent_IonPrefetching
	//	*FtraceEvent_IonSecureCmaAddToPoolEnd
	//	*FtraceEvent_IonSecureCmaAddToPoolStart
	//	*FtraceEvent_IonSecureCmaAllocateEnd
	//	*FtraceEvent_IonSecureCmaAllocateStart
	//	*FtraceEvent_IonSecureCmaShrinkPoolEnd
	//	*FtraceEvent_IonSecureCmaShrinkPoolStart
	//	*FtraceEvent_Kfree
	//	*FtraceEvent_Kmalloc
	//	*FtraceEvent_KmallocNode
	//	*FtraceEvent_KmemCacheAlloc
	//	*FtraceEvent_KmemCacheAllocNode
	//	*FtraceEvent_KmemCacheFree
	//	*FtraceEvent_MigratePagesEnd
	//	*FtraceEvent_MigratePagesStart
	//	*FtraceEvent_MigrateRetry
	//	*FtraceEvent_MmPageAlloc
	//	*FtraceEvent_MmPageAllocExtfrag
	//	*FtraceEvent_MmPageAllocZoneLocked
	//	*FtraceEvent_MmPageFree
	//	*FtraceEvent_MmPageFreeBatched
	//	*FtraceEvent_MmPagePcpuDrain
	//	*FtraceEvent_RssStat
	//	*FtraceEvent_IonHeapShrink
	//	*FtraceEvent_IonHeapGrow
	//	*FtraceEvent_FenceInit
	//	*FtraceEvent_FenceDestroy
	//	*FtraceEvent_FenceEnableSignal
	//	*FtraceEvent_FenceSignaled
	//	*FtraceEvent_ClkEnable
	//	*FtraceEvent_ClkDisable
	//	*FtraceEvent_ClkSetRate
	//	*FtraceEvent_BinderTransactionAllocBuf
	//	*FtraceEvent_SignalDeliver
	//	*FtraceEvent_SignalGenerate
	//	*FtraceEvent_OomScoreAdjUpdate
	//	*FtraceEvent_Generic
	//	*FtraceEvent_MmEventRecord
	//	*FtraceEvent_SysEnter
	//	*FtraceEvent_SysExit
	//	*FtraceEvent_Zero
	//	*FtraceEvent_GpuFrequency
	//	*FtraceEvent_SdeTracingMarkWrite
	//	*FtraceEvent_MarkVictim
	//	*FtraceEvent_IonStat
	//	*FtraceEvent_IonBufferCreate
	//	*FtraceEvent_IonBufferDestroy
	//	*FtraceEvent_ScmCallStart
	//	*FtraceEvent_ScmCallEnd
	//	*FtraceEvent_GpuMemTotal
	//	*FtraceEvent_ThermalTemperature
	//	*FtraceEvent_CdevUpdate
	//	*FtraceEvent_CpuhpExit
	//	*FtraceEvent_CpuhpMultiEnter
	//	*FtraceEvent_CpuhpEnter
	//	*FtraceEvent_CpuhpLatency
	//	*FtraceEvent_FastrpcDmaStat
	//	*FtraceEvent_DpuTracingMarkWrite
	//	*FtraceEvent_G2DTracingMarkWrite
	Event isFtraceEvent_Event `protobuf_oneof:"event"`
}

func (x *FtraceEvent) Reset() {
	*x = FtraceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[381]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceEvent) ProtoMessage() {}

func (x *FtraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[381]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceEvent.ProtoReflect.Descriptor instead.
func (*FtraceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{381}
}

func (x *FtraceEvent) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *FtraceEvent) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (m *FtraceEvent) GetEvent() isFtraceEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *FtraceEvent) GetPrint() *PrintFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Print); ok {
		return x.Print
	}
	return nil
}

func (x *FtraceEvent) GetSchedSwitch() *SchedSwitchFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedSwitch); ok {
		return x.SchedSwitch
	}
	return nil
}

func (x *FtraceEvent) GetCpuFrequency() *CpuFrequencyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuFrequency); ok {
		return x.CpuFrequency
	}
	return nil
}

func (x *FtraceEvent) GetCpuFrequencyLimits() *CpuFrequencyLimitsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuFrequencyLimits); ok {
		return x.CpuFrequencyLimits
	}
	return nil
}

func (x *FtraceEvent) GetCpuIdle() *CpuIdleFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuIdle); ok {
		return x.CpuIdle
	}
	return nil
}

func (x *FtraceEvent) GetClockEnable() *ClockEnableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ClockEnable); ok {
		return x.ClockEnable
	}
	return nil
}

func (x *FtraceEvent) GetClockDisable() *ClockDisableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ClockDisable); ok {
		return x.ClockDisable
	}
	return nil
}

func (x *FtraceEvent) GetClockSetRate() *ClockSetRateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ClockSetRate); ok {
		return x.ClockSetRate
	}
	return nil
}

func (x *FtraceEvent) GetSchedWakeup() *SchedWakeupFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedWakeup); ok {
		return x.SchedWakeup
	}
	return nil
}

func (x *FtraceEvent) GetSchedBlockedReason() *SchedBlockedReasonFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedBlockedReason); ok {
		return x.SchedBlockedReason
	}
	return nil
}

func (x *FtraceEvent) GetSchedCpuHotplug() *SchedCpuHotplugFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedCpuHotplug); ok {
		return x.SchedCpuHotplug
	}
	return nil
}

func (x *FtraceEvent) GetSchedWaking() *SchedWakingFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedWaking); ok {
		return x.SchedWaking
	}
	return nil
}

func (x *FtraceEvent) GetIpiEntry() *IpiEntryFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IpiEntry); ok {
		return x.IpiEntry
	}
	return nil
}

func (x *FtraceEvent) GetIpiExit() *IpiExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IpiExit); ok {
		return x.IpiExit
	}
	return nil
}

func (x *FtraceEvent) GetIpiRaise() *IpiRaiseFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IpiRaise); ok {
		return x.IpiRaise
	}
	return nil
}

func (x *FtraceEvent) GetSoftirqEntry() *SoftirqEntryFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SoftirqEntry); ok {
		return x.SoftirqEntry
	}
	return nil
}

func (x *FtraceEvent) GetSoftirqExit() *SoftirqExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SoftirqExit); ok {
		return x.SoftirqExit
	}
	return nil
}

func (x *FtraceEvent) GetSoftirqRaise() *SoftirqRaiseFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SoftirqRaise); ok {
		return x.SoftirqRaise
	}
	return nil
}

func (x *FtraceEvent) GetI2CRead() *I2CReadFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_I2CRead); ok {
		return x.I2CRead
	}
	return nil
}

func (x *FtraceEvent) GetI2CWrite() *I2CWriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_I2CWrite); ok {
		return x.I2CWrite
	}
	return nil
}

func (x *FtraceEvent) GetI2CResult() *I2CResultFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_I2CResult); ok {
		return x.I2CResult
	}
	return nil
}

func (x *FtraceEvent) GetI2CReply() *I2CReplyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_I2CReply); ok {
		return x.I2CReply
	}
	return nil
}

func (x *FtraceEvent) GetSmbusRead() *SmbusReadFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SmbusRead); ok {
		return x.SmbusRead
	}
	return nil
}

func (x *FtraceEvent) GetSmbusWrite() *SmbusWriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SmbusWrite); ok {
		return x.SmbusWrite
	}
	return nil
}

func (x *FtraceEvent) GetSmbusResult() *SmbusResultFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SmbusResult); ok {
		return x.SmbusResult
	}
	return nil
}

func (x *FtraceEvent) GetSmbusReply() *SmbusReplyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SmbusReply); ok {
		return x.SmbusReply
	}
	return nil
}

func (x *FtraceEvent) GetLowmemoryKill() *LowmemoryKillFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_LowmemoryKill); ok {
		return x.LowmemoryKill
	}
	return nil
}

func (x *FtraceEvent) GetIrqHandlerEntry() *IrqHandlerEntryFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IrqHandlerEntry); ok {
		return x.IrqHandlerEntry
	}
	return nil
}

func (x *FtraceEvent) GetIrqHandlerExit() *IrqHandlerExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IrqHandlerExit); ok {
		return x.IrqHandlerExit
	}
	return nil
}

func (x *FtraceEvent) GetSyncPt() *SyncPtFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SyncPt); ok {
		return x.SyncPt
	}
	return nil
}

func (x *FtraceEvent) GetSyncTimeline() *SyncTimelineFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SyncTimeline); ok {
		return x.SyncTimeline
	}
	return nil
}

func (x *FtraceEvent) GetSyncWait() *SyncWaitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SyncWait); ok {
		return x.SyncWait
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaWriteBegin() *Ext4DaWriteBeginFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaWriteBegin); ok {
		return x.Ext4DaWriteBegin
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaWriteEnd() *Ext4DaWriteEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaWriteEnd); ok {
		return x.Ext4DaWriteEnd
	}
	return nil
}

func (x *FtraceEvent) GetExt4SyncFileEnter() *Ext4SyncFileEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4SyncFileEnter); ok {
		return x.Ext4SyncFileEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4SyncFileExit() *Ext4SyncFileExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4SyncFileExit); ok {
		return x.Ext4SyncFileExit
	}
	return nil
}

func (x *FtraceEvent) GetBlockRqIssue() *BlockRqIssueFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockRqIssue); ok {
		return x.BlockRqIssue
	}
	return nil
}

func (x *FtraceEvent) GetMmVmscanDirectReclaimBegin() *MmVmscanDirectReclaimBeginFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmVmscanDirectReclaimBegin); ok {
		return x.MmVmscanDirectReclaimBegin
	}
	return nil
}

func (x *FtraceEvent) GetMmVmscanDirectReclaimEnd() *MmVmscanDirectReclaimEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmVmscanDirectReclaimEnd); ok {
		return x.MmVmscanDirectReclaimEnd
	}
	return nil
}

func (x *FtraceEvent) GetMmVmscanKswapdWake() *MmVmscanKswapdWakeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmVmscanKswapdWake); ok {
		return x.MmVmscanKswapdWake
	}
	return nil
}

func (x *FtraceEvent) GetMmVmscanKswapdSleep() *MmVmscanKswapdSleepFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmVmscanKswapdSleep); ok {
		return x.MmVmscanKswapdSleep
	}
	return nil
}

func (x *FtraceEvent) GetBinderTransaction() *BinderTransactionFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderTransaction); ok {
		return x.BinderTransaction
	}
	return nil
}

func (x *FtraceEvent) GetBinderTransactionReceived() *BinderTransactionReceivedFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderTransactionReceived); ok {
		return x.BinderTransactionReceived
	}
	return nil
}

func (x *FtraceEvent) GetBinderSetPriority() *BinderSetPriorityFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderSetPriority); ok {
		return x.BinderSetPriority
	}
	return nil
}

func (x *FtraceEvent) GetBinderLock() *BinderLockFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderLock); ok {
		return x.BinderLock
	}
	return nil
}

func (x *FtraceEvent) GetBinderLocked() *BinderLockedFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderLocked); ok {
		return x.BinderLocked
	}
	return nil
}

func (x *FtraceEvent) GetBinderUnlock() *BinderUnlockFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderUnlock); ok {
		return x.BinderUnlock
	}
	return nil
}

func (x *FtraceEvent) GetWorkqueueActivateWork() *WorkqueueActivateWorkFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_WorkqueueActivateWork); ok {
		return x.WorkqueueActivateWork
	}
	return nil
}

func (x *FtraceEvent) GetWorkqueueExecuteEnd() *WorkqueueExecuteEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_WorkqueueExecuteEnd); ok {
		return x.WorkqueueExecuteEnd
	}
	return nil
}

func (x *FtraceEvent) GetWorkqueueExecuteStart() *WorkqueueExecuteStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_WorkqueueExecuteStart); ok {
		return x.WorkqueueExecuteStart
	}
	return nil
}

func (x *FtraceEvent) GetWorkqueueQueueWork() *WorkqueueQueueWorkFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_WorkqueueQueueWork); ok {
		return x.WorkqueueQueueWork
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorDisable() *RegulatorDisableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorDisable); ok {
		return x.RegulatorDisable
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorDisableComplete() *RegulatorDisableCompleteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorDisableComplete); ok {
		return x.RegulatorDisableComplete
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorEnable() *RegulatorEnableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorEnable); ok {
		return x.RegulatorEnable
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorEnableComplete() *RegulatorEnableCompleteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorEnableComplete); ok {
		return x.RegulatorEnableComplete
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorEnableDelay() *RegulatorEnableDelayFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorEnableDelay); ok {
		return x.RegulatorEnableDelay
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorSetVoltage() *RegulatorSetVoltageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorSetVoltage); ok {
		return x.RegulatorSetVoltage
	}
	return nil
}

func (x *FtraceEvent) GetRegulatorSetVoltageComplete() *RegulatorSetVoltageCompleteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RegulatorSetVoltageComplete); ok {
		return x.RegulatorSetVoltageComplete
	}
	return nil
}

func (x *FtraceEvent) GetCgroupAttachTask() *CgroupAttachTaskFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupAttachTask); ok {
		return x.CgroupAttachTask
	}
	return nil
}

func (x *FtraceEvent) GetCgroupMkdir() *CgroupMkdirFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupMkdir); ok {
		return x.CgroupMkdir
	}
	return nil
}

func (x *FtraceEvent) GetCgroupRemount() *CgroupRemountFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupRemount); ok {
		return x.CgroupRemount
	}
	return nil
}

func (x *FtraceEvent) GetCgroupRmdir() *CgroupRmdirFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupRmdir); ok {
		return x.CgroupRmdir
	}
	return nil
}

func (x *FtraceEvent) GetCgroupTransferTasks() *CgroupTransferTasksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupTransferTasks); ok {
		return x.CgroupTransferTasks
	}
	return nil
}

func (x *FtraceEvent) GetCgroupDestroyRoot() *CgroupDestroyRootFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupDestroyRoot); ok {
		return x.CgroupDestroyRoot
	}
	return nil
}

func (x *FtraceEvent) GetCgroupRelease() *CgroupReleaseFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupRelease); ok {
		return x.CgroupRelease
	}
	return nil
}

func (x *FtraceEvent) GetCgroupRename() *CgroupRenameFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupRename); ok {
		return x.CgroupRename
	}
	return nil
}

func (x *FtraceEvent) GetCgroupSetupRoot() *CgroupSetupRootFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CgroupSetupRoot); ok {
		return x.CgroupSetupRoot
	}
	return nil
}

func (x *FtraceEvent) GetMdpCmdKickoff() *MdpCmdKickoffFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCmdKickoff); ok {
		return x.MdpCmdKickoff
	}
	return nil
}

func (x *FtraceEvent) GetMdpCommit() *MdpCommitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCommit); ok {
		return x.MdpCommit
	}
	return nil
}

func (x *FtraceEvent) GetMdpPerfSetOt() *MdpPerfSetOtFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpPerfSetOt); ok {
		return x.MdpPerfSetOt
	}
	return nil
}

func (x *FtraceEvent) GetMdpSsppChange() *MdpSsppChangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpSsppChange); ok {
		return x.MdpSsppChange
	}
	return nil
}

func (x *FtraceEvent) GetTracingMarkWrite() *TracingMarkWriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_TracingMarkWrite); ok {
		return x.TracingMarkWrite
	}
	return nil
}

func (x *FtraceEvent) GetMdpCmdPingpongDone() *MdpCmdPingpongDoneFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCmdPingpongDone); ok {
		return x.MdpCmdPingpongDone
	}
	return nil
}

func (x *FtraceEvent) GetMdpCompareBw() *MdpCompareBwFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCompareBw); ok {
		return x.MdpCompareBw
	}
	return nil
}

func (x *FtraceEvent) GetMdpPerfSetPanicLuts() *MdpPerfSetPanicLutsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpPerfSetPanicLuts); ok {
		return x.MdpPerfSetPanicLuts
	}
	return nil
}

func (x *FtraceEvent) GetMdpSsppSet() *MdpSsppSetFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpSsppSet); ok {
		return x.MdpSsppSet
	}
	return nil
}

func (x *FtraceEvent) GetMdpCmdReadptrDone() *MdpCmdReadptrDoneFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCmdReadptrDone); ok {
		return x.MdpCmdReadptrDone
	}
	return nil
}

func (x *FtraceEvent) GetMdpMisrCrc() *MdpMisrCrcFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpMisrCrc); ok {
		return x.MdpMisrCrc
	}
	return nil
}

func (x *FtraceEvent) GetMdpPerfSetQosLuts() *MdpPerfSetQosLutsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpPerfSetQosLuts); ok {
		return x.MdpPerfSetQosLuts
	}
	return nil
}

func (x *FtraceEvent) GetMdpTraceCounter() *MdpTraceCounterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpTraceCounter); ok {
		return x.MdpTraceCounter
	}
	return nil
}

func (x *FtraceEvent) GetMdpCmdReleaseBw() *MdpCmdReleaseBwFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCmdReleaseBw); ok {
		return x.MdpCmdReleaseBw
	}
	return nil
}

func (x *FtraceEvent) GetMdpMixerUpdate() *MdpMixerUpdateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpMixerUpdate); ok {
		return x.MdpMixerUpdate
	}
	return nil
}

func (x *FtraceEvent) GetMdpPerfSetWmLevels() *MdpPerfSetWmLevelsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpPerfSetWmLevels); ok {
		return x.MdpPerfSetWmLevels
	}
	return nil
}

func (x *FtraceEvent) GetMdpVideoUnderrunDone() *MdpVideoUnderrunDoneFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpVideoUnderrunDone); ok {
		return x.MdpVideoUnderrunDone
	}
	return nil
}

func (x *FtraceEvent) GetMdpCmdWaitPingpong() *MdpCmdWaitPingpongFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpCmdWaitPingpong); ok {
		return x.MdpCmdWaitPingpong
	}
	return nil
}

func (x *FtraceEvent) GetMdpPerfPrefillCalc() *MdpPerfPrefillCalcFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpPerfPrefillCalc); ok {
		return x.MdpPerfPrefillCalc
	}
	return nil
}

func (x *FtraceEvent) GetMdpPerfUpdateBus() *MdpPerfUpdateBusFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MdpPerfUpdateBus); ok {
		return x.MdpPerfUpdateBus
	}
	return nil
}

func (x *FtraceEvent) GetRotatorBwAoAsContext() *RotatorBwAoAsContextFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RotatorBwAoAsContext); ok {
		return x.RotatorBwAoAsContext
	}
	return nil
}

func (x *FtraceEvent) GetMmFilemapAddToPageCache() *MmFilemapAddToPageCacheFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmFilemapAddToPageCache); ok {
		return x.MmFilemapAddToPageCache
	}
	return nil
}

func (x *FtraceEvent) GetMmFilemapDeleteFromPageCache() *MmFilemapDeleteFromPageCacheFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmFilemapDeleteFromPageCache); ok {
		return x.MmFilemapDeleteFromPageCache
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionBegin() *MmCompactionBeginFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionBegin); ok {
		return x.MmCompactionBegin
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionDeferCompaction() *MmCompactionDeferCompactionFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionDeferCompaction); ok {
		return x.MmCompactionDeferCompaction
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionDeferred() *MmCompactionDeferredFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionDeferred); ok {
		return x.MmCompactionDeferred
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionDeferReset() *MmCompactionDeferResetFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionDeferReset); ok {
		return x.MmCompactionDeferReset
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionEnd() *MmCompactionEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionEnd); ok {
		return x.MmCompactionEnd
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionFinished() *MmCompactionFinishedFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionFinished); ok {
		return x.MmCompactionFinished
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionIsolateFreepages() *MmCompactionIsolateFreepagesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionIsolateFreepages); ok {
		return x.MmCompactionIsolateFreepages
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionIsolateMigratepages() *MmCompactionIsolateMigratepagesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionIsolateMigratepages); ok {
		return x.MmCompactionIsolateMigratepages
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionKcompactdSleep() *MmCompactionKcompactdSleepFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionKcompactdSleep); ok {
		return x.MmCompactionKcompactdSleep
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionKcompactdWake() *MmCompactionKcompactdWakeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionKcompactdWake); ok {
		return x.MmCompactionKcompactdWake
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionMigratepages() *MmCompactionMigratepagesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionMigratepages); ok {
		return x.MmCompactionMigratepages
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionSuitable() *MmCompactionSuitableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionSuitable); ok {
		return x.MmCompactionSuitable
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionTryToCompactPages() *MmCompactionTryToCompactPagesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionTryToCompactPages); ok {
		return x.MmCompactionTryToCompactPages
	}
	return nil
}

func (x *FtraceEvent) GetMmCompactionWakeupKcompactd() *MmCompactionWakeupKcompactdFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmCompactionWakeupKcompactd); ok {
		return x.MmCompactionWakeupKcompactd
	}
	return nil
}

func (x *FtraceEvent) GetSuspendResume() *SuspendResumeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SuspendResume); ok {
		return x.SuspendResume
	}
	return nil
}

func (x *FtraceEvent) GetSchedWakeupNew() *SchedWakeupNewFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedWakeupNew); ok {
		return x.SchedWakeupNew
	}
	return nil
}

func (x *FtraceEvent) GetBlockBioBackmerge() *BlockBioBackmergeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockBioBackmerge); ok {
		return x.BlockBioBackmerge
	}
	return nil
}

func (x *FtraceEvent) GetBlockBioBounce() *BlockBioBounceFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockBioBounce); ok {
		return x.BlockBioBounce
	}
	return nil
}

func (x *FtraceEvent) GetBlockBioComplete() *BlockBioCompleteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockBioComplete); ok {
		return x.BlockBioComplete
	}
	return nil
}

func (x *FtraceEvent) GetBlockBioFrontmerge() *BlockBioFrontmergeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockBioFrontmerge); ok {
		return x.BlockBioFrontmerge
	}
	return nil
}

func (x *FtraceEvent) GetBlockBioQueue() *BlockBioQueueFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockBioQueue); ok {
		return x.BlockBioQueue
	}
	return nil
}

func (x *FtraceEvent) GetBlockBioRemap() *BlockBioRemapFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockBioRemap); ok {
		return x.BlockBioRemap
	}
	return nil
}

func (x *FtraceEvent) GetBlockDirtyBuffer() *BlockDirtyBufferFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockDirtyBuffer); ok {
		return x.BlockDirtyBuffer
	}
	return nil
}

func (x *FtraceEvent) GetBlockGetrq() *BlockGetrqFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockGetrq); ok {
		return x.BlockGetrq
	}
	return nil
}

func (x *FtraceEvent) GetBlockPlug() *BlockPlugFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockPlug); ok {
		return x.BlockPlug
	}
	return nil
}

func (x *FtraceEvent) GetBlockRqAbort() *BlockRqAbortFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockRqAbort); ok {
		return x.BlockRqAbort
	}
	return nil
}

func (x *FtraceEvent) GetBlockRqComplete() *BlockRqCompleteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockRqComplete); ok {
		return x.BlockRqComplete
	}
	return nil
}

func (x *FtraceEvent) GetBlockRqInsert() *BlockRqInsertFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockRqInsert); ok {
		return x.BlockRqInsert
	}
	return nil
}

func (x *FtraceEvent) GetBlockRqRemap() *BlockRqRemapFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockRqRemap); ok {
		return x.BlockRqRemap
	}
	return nil
}

func (x *FtraceEvent) GetBlockRqRequeue() *BlockRqRequeueFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockRqRequeue); ok {
		return x.BlockRqRequeue
	}
	return nil
}

func (x *FtraceEvent) GetBlockSleeprq() *BlockSleeprqFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockSleeprq); ok {
		return x.BlockSleeprq
	}
	return nil
}

func (x *FtraceEvent) GetBlockSplit() *BlockSplitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockSplit); ok {
		return x.BlockSplit
	}
	return nil
}

func (x *FtraceEvent) GetBlockTouchBuffer() *BlockTouchBufferFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockTouchBuffer); ok {
		return x.BlockTouchBuffer
	}
	return nil
}

func (x *FtraceEvent) GetBlockUnplug() *BlockUnplugFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BlockUnplug); ok {
		return x.BlockUnplug
	}
	return nil
}

func (x *FtraceEvent) GetExt4AllocDaBlocks() *Ext4AllocDaBlocksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4AllocDaBlocks); ok {
		return x.Ext4AllocDaBlocks
	}
	return nil
}

func (x *FtraceEvent) GetExt4AllocateBlocks() *Ext4AllocateBlocksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4AllocateBlocks); ok {
		return x.Ext4AllocateBlocks
	}
	return nil
}

func (x *FtraceEvent) GetExt4AllocateInode() *Ext4AllocateInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4AllocateInode); ok {
		return x.Ext4AllocateInode
	}
	return nil
}

func (x *FtraceEvent) GetExt4BeginOrderedTruncate() *Ext4BeginOrderedTruncateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4BeginOrderedTruncate); ok {
		return x.Ext4BeginOrderedTruncate
	}
	return nil
}

func (x *FtraceEvent) GetExt4CollapseRange() *Ext4CollapseRangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4CollapseRange); ok {
		return x.Ext4CollapseRange
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaReleaseSpace() *Ext4DaReleaseSpaceFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaReleaseSpace); ok {
		return x.Ext4DaReleaseSpace
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaReserveSpace() *Ext4DaReserveSpaceFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaReserveSpace); ok {
		return x.Ext4DaReserveSpace
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaUpdateReserveSpace() *Ext4DaUpdateReserveSpaceFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaUpdateReserveSpace); ok {
		return x.Ext4DaUpdateReserveSpace
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaWritePages() *Ext4DaWritePagesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaWritePages); ok {
		return x.Ext4DaWritePages
	}
	return nil
}

func (x *FtraceEvent) GetExt4DaWritePagesExtent() *Ext4DaWritePagesExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DaWritePagesExtent); ok {
		return x.Ext4DaWritePagesExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4Direct_IOEnter() *Ext4DirectIOEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Direct_IOEnter); ok {
		return x.Ext4Direct_IOEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4Direct_IOExit() *Ext4DirectIOExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Direct_IOExit); ok {
		return x.Ext4Direct_IOExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4DiscardBlocks() *Ext4DiscardBlocksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DiscardBlocks); ok {
		return x.Ext4DiscardBlocks
	}
	return nil
}

func (x *FtraceEvent) GetExt4DiscardPreallocations() *Ext4DiscardPreallocationsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DiscardPreallocations); ok {
		return x.Ext4DiscardPreallocations
	}
	return nil
}

func (x *FtraceEvent) GetExt4DropInode() *Ext4DropInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4DropInode); ok {
		return x.Ext4DropInode
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsCacheExtent() *Ext4EsCacheExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsCacheExtent); ok {
		return x.Ext4EsCacheExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsFindDelayedExtentRangeEnter() *Ext4EsFindDelayedExtentRangeEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsFindDelayedExtentRangeEnter); ok {
		return x.Ext4EsFindDelayedExtentRangeEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsFindDelayedExtentRangeExit() *Ext4EsFindDelayedExtentRangeExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsFindDelayedExtentRangeExit); ok {
		return x.Ext4EsFindDelayedExtentRangeExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsInsertExtent() *Ext4EsInsertExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsInsertExtent); ok {
		return x.Ext4EsInsertExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsLookupExtentEnter() *Ext4EsLookupExtentEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsLookupExtentEnter); ok {
		return x.Ext4EsLookupExtentEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsLookupExtentExit() *Ext4EsLookupExtentExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsLookupExtentExit); ok {
		return x.Ext4EsLookupExtentExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsRemoveExtent() *Ext4EsRemoveExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsRemoveExtent); ok {
		return x.Ext4EsRemoveExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsShrink() *Ext4EsShrinkFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsShrink); ok {
		return x.Ext4EsShrink
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsShrinkCount() *Ext4EsShrinkCountFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsShrinkCount); ok {
		return x.Ext4EsShrinkCount
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsShrinkScanEnter() *Ext4EsShrinkScanEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsShrinkScanEnter); ok {
		return x.Ext4EsShrinkScanEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4EsShrinkScanExit() *Ext4EsShrinkScanExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EsShrinkScanExit); ok {
		return x.Ext4EsShrinkScanExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4EvictInode() *Ext4EvictInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4EvictInode); ok {
		return x.Ext4EvictInode
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtConvertToInitializedEnter() *Ext4ExtConvertToInitializedEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtConvertToInitializedEnter); ok {
		return x.Ext4ExtConvertToInitializedEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtConvertToInitializedFastpath() *Ext4ExtConvertToInitializedFastpathFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtConvertToInitializedFastpath); ok {
		return x.Ext4ExtConvertToInitializedFastpath
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtHandleUnwrittenExtents() *Ext4ExtHandleUnwrittenExtentsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtHandleUnwrittenExtents); ok {
		return x.Ext4ExtHandleUnwrittenExtents
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtInCache() *Ext4ExtInCacheFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtInCache); ok {
		return x.Ext4ExtInCache
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtLoadExtent() *Ext4ExtLoadExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtLoadExtent); ok {
		return x.Ext4ExtLoadExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtMapBlocksEnter() *Ext4ExtMapBlocksEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtMapBlocksEnter); ok {
		return x.Ext4ExtMapBlocksEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtMapBlocksExit() *Ext4ExtMapBlocksExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtMapBlocksExit); ok {
		return x.Ext4ExtMapBlocksExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtPutInCache() *Ext4ExtPutInCacheFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtPutInCache); ok {
		return x.Ext4ExtPutInCache
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtRemoveSpace() *Ext4ExtRemoveSpaceFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtRemoveSpace); ok {
		return x.Ext4ExtRemoveSpace
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtRemoveSpaceDone() *Ext4ExtRemoveSpaceDoneFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtRemoveSpaceDone); ok {
		return x.Ext4ExtRemoveSpaceDone
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtRmIdx() *Ext4ExtRmIdxFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtRmIdx); ok {
		return x.Ext4ExtRmIdx
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtRmLeaf() *Ext4ExtRmLeafFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtRmLeaf); ok {
		return x.Ext4ExtRmLeaf
	}
	return nil
}

func (x *FtraceEvent) GetExt4ExtShowExtent() *Ext4ExtShowExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ExtShowExtent); ok {
		return x.Ext4ExtShowExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4FallocateEnter() *Ext4FallocateEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4FallocateEnter); ok {
		return x.Ext4FallocateEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4FallocateExit() *Ext4FallocateExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4FallocateExit); ok {
		return x.Ext4FallocateExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4FindDelallocRange() *Ext4FindDelallocRangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4FindDelallocRange); ok {
		return x.Ext4FindDelallocRange
	}
	return nil
}

func (x *FtraceEvent) GetExt4Forget() *Ext4ForgetFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Forget); ok {
		return x.Ext4Forget
	}
	return nil
}

func (x *FtraceEvent) GetExt4FreeBlocks() *Ext4FreeBlocksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4FreeBlocks); ok {
		return x.Ext4FreeBlocks
	}
	return nil
}

func (x *FtraceEvent) GetExt4FreeInode() *Ext4FreeInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4FreeInode); ok {
		return x.Ext4FreeInode
	}
	return nil
}

func (x *FtraceEvent) GetExt4GetImpliedClusterAllocExit() *Ext4GetImpliedClusterAllocExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4GetImpliedClusterAllocExit); ok {
		return x.Ext4GetImpliedClusterAllocExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4GetReservedClusterAlloc() *Ext4GetReservedClusterAllocFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4GetReservedClusterAlloc); ok {
		return x.Ext4GetReservedClusterAlloc
	}
	return nil
}

func (x *FtraceEvent) GetExt4IndMapBlocksEnter() *Ext4IndMapBlocksEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4IndMapBlocksEnter); ok {
		return x.Ext4IndMapBlocksEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4IndMapBlocksExit() *Ext4IndMapBlocksExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4IndMapBlocksExit); ok {
		return x.Ext4IndMapBlocksExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4InsertRange() *Ext4InsertRangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4InsertRange); ok {
		return x.Ext4InsertRange
	}
	return nil
}

func (x *FtraceEvent) GetExt4Invalidatepage() *Ext4InvalidatepageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Invalidatepage); ok {
		return x.Ext4Invalidatepage
	}
	return nil
}

func (x *FtraceEvent) GetExt4JournalStart() *Ext4JournalStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4JournalStart); ok {
		return x.Ext4JournalStart
	}
	return nil
}

func (x *FtraceEvent) GetExt4JournalStartReserved() *Ext4JournalStartReservedFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4JournalStartReserved); ok {
		return x.Ext4JournalStartReserved
	}
	return nil
}

func (x *FtraceEvent) GetExt4JournalledInvalidatepage() *Ext4JournalledInvalidatepageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4JournalledInvalidatepage); ok {
		return x.Ext4JournalledInvalidatepage
	}
	return nil
}

func (x *FtraceEvent) GetExt4JournalledWriteEnd() *Ext4JournalledWriteEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4JournalledWriteEnd); ok {
		return x.Ext4JournalledWriteEnd
	}
	return nil
}

func (x *FtraceEvent) GetExt4LoadInode() *Ext4LoadInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4LoadInode); ok {
		return x.Ext4LoadInode
	}
	return nil
}

func (x *FtraceEvent) GetExt4LoadInodeBitmap() *Ext4LoadInodeBitmapFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4LoadInodeBitmap); ok {
		return x.Ext4LoadInodeBitmap
	}
	return nil
}

func (x *FtraceEvent) GetExt4MarkInodeDirty() *Ext4MarkInodeDirtyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MarkInodeDirty); ok {
		return x.Ext4MarkInodeDirty
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbBitmapLoad() *Ext4MbBitmapLoadFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbBitmapLoad); ok {
		return x.Ext4MbBitmapLoad
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbBuddyBitmapLoad() *Ext4MbBuddyBitmapLoadFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbBuddyBitmapLoad); ok {
		return x.Ext4MbBuddyBitmapLoad
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbDiscardPreallocations() *Ext4MbDiscardPreallocationsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbDiscardPreallocations); ok {
		return x.Ext4MbDiscardPreallocations
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbNewGroupPa() *Ext4MbNewGroupPaFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbNewGroupPa); ok {
		return x.Ext4MbNewGroupPa
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbNewInodePa() *Ext4MbNewInodePaFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbNewInodePa); ok {
		return x.Ext4MbNewInodePa
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbReleaseGroupPa() *Ext4MbReleaseGroupPaFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbReleaseGroupPa); ok {
		return x.Ext4MbReleaseGroupPa
	}
	return nil
}

func (x *FtraceEvent) GetExt4MbReleaseInodePa() *Ext4MbReleaseInodePaFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MbReleaseInodePa); ok {
		return x.Ext4MbReleaseInodePa
	}
	return nil
}

func (x *FtraceEvent) GetExt4MballocAlloc() *Ext4MballocAllocFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MballocAlloc); ok {
		return x.Ext4MballocAlloc
	}
	return nil
}

func (x *FtraceEvent) GetExt4MballocDiscard() *Ext4MballocDiscardFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MballocDiscard); ok {
		return x.Ext4MballocDiscard
	}
	return nil
}

func (x *FtraceEvent) GetExt4MballocFree() *Ext4MballocFreeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MballocFree); ok {
		return x.Ext4MballocFree
	}
	return nil
}

func (x *FtraceEvent) GetExt4MballocPrealloc() *Ext4MballocPreallocFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4MballocPrealloc); ok {
		return x.Ext4MballocPrealloc
	}
	return nil
}

func (x *FtraceEvent) GetExt4OtherInodeUpdateTime() *Ext4OtherInodeUpdateTimeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4OtherInodeUpdateTime); ok {
		return x.Ext4OtherInodeUpdateTime
	}
	return nil
}

func (x *FtraceEvent) GetExt4PunchHole() *Ext4PunchHoleFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4PunchHole); ok {
		return x.Ext4PunchHole
	}
	return nil
}

func (x *FtraceEvent) GetExt4ReadBlockBitmapLoad() *Ext4ReadBlockBitmapLoadFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ReadBlockBitmapLoad); ok {
		return x.Ext4ReadBlockBitmapLoad
	}
	return nil
}

func (x *FtraceEvent) GetExt4Readpage() *Ext4ReadpageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Readpage); ok {
		return x.Ext4Readpage
	}
	return nil
}

func (x *FtraceEvent) GetExt4Releasepage() *Ext4ReleasepageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Releasepage); ok {
		return x.Ext4Releasepage
	}
	return nil
}

func (x *FtraceEvent) GetExt4RemoveBlocks() *Ext4RemoveBlocksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4RemoveBlocks); ok {
		return x.Ext4RemoveBlocks
	}
	return nil
}

func (x *FtraceEvent) GetExt4RequestBlocks() *Ext4RequestBlocksFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4RequestBlocks); ok {
		return x.Ext4RequestBlocks
	}
	return nil
}

func (x *FtraceEvent) GetExt4RequestInode() *Ext4RequestInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4RequestInode); ok {
		return x.Ext4RequestInode
	}
	return nil
}

func (x *FtraceEvent) GetExt4SyncFs() *Ext4SyncFsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4SyncFs); ok {
		return x.Ext4SyncFs
	}
	return nil
}

func (x *FtraceEvent) GetExt4TrimAllFree() *Ext4TrimAllFreeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4TrimAllFree); ok {
		return x.Ext4TrimAllFree
	}
	return nil
}

func (x *FtraceEvent) GetExt4TrimExtent() *Ext4TrimExtentFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4TrimExtent); ok {
		return x.Ext4TrimExtent
	}
	return nil
}

func (x *FtraceEvent) GetExt4TruncateEnter() *Ext4TruncateEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4TruncateEnter); ok {
		return x.Ext4TruncateEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4TruncateExit() *Ext4TruncateExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4TruncateExit); ok {
		return x.Ext4TruncateExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4UnlinkEnter() *Ext4UnlinkEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4UnlinkEnter); ok {
		return x.Ext4UnlinkEnter
	}
	return nil
}

func (x *FtraceEvent) GetExt4UnlinkExit() *Ext4UnlinkExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4UnlinkExit); ok {
		return x.Ext4UnlinkExit
	}
	return nil
}

func (x *FtraceEvent) GetExt4WriteBegin() *Ext4WriteBeginFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4WriteBegin); ok {
		return x.Ext4WriteBegin
	}
	return nil
}

func (x *FtraceEvent) GetExt4WriteEnd() *Ext4WriteEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4WriteEnd); ok {
		return x.Ext4WriteEnd
	}
	return nil
}

func (x *FtraceEvent) GetExt4Writepage() *Ext4WritepageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Writepage); ok {
		return x.Ext4Writepage
	}
	return nil
}

func (x *FtraceEvent) GetExt4Writepages() *Ext4WritepagesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4Writepages); ok {
		return x.Ext4Writepages
	}
	return nil
}

func (x *FtraceEvent) GetExt4WritepagesResult() *Ext4WritepagesResultFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4WritepagesResult); ok {
		return x.Ext4WritepagesResult
	}
	return nil
}

func (x *FtraceEvent) GetExt4ZeroRange() *Ext4ZeroRangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Ext4ZeroRange); ok {
		return x.Ext4ZeroRange
	}
	return nil
}

func (x *FtraceEvent) GetTaskNewtask() *TaskNewtaskFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_TaskNewtask); ok {
		return x.TaskNewtask
	}
	return nil
}

func (x *FtraceEvent) GetTaskRename() *TaskRenameFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_TaskRename); ok {
		return x.TaskRename
	}
	return nil
}

func (x *FtraceEvent) GetSchedProcessExec() *SchedProcessExecFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedProcessExec); ok {
		return x.SchedProcessExec
	}
	return nil
}

func (x *FtraceEvent) GetSchedProcessExit() *SchedProcessExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedProcessExit); ok {
		return x.SchedProcessExit
	}
	return nil
}

func (x *FtraceEvent) GetSchedProcessFork() *SchedProcessForkFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedProcessFork); ok {
		return x.SchedProcessFork
	}
	return nil
}

func (x *FtraceEvent) GetSchedProcessFree() *SchedProcessFreeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedProcessFree); ok {
		return x.SchedProcessFree
	}
	return nil
}

func (x *FtraceEvent) GetSchedProcessHang() *SchedProcessHangFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedProcessHang); ok {
		return x.SchedProcessHang
	}
	return nil
}

func (x *FtraceEvent) GetSchedProcessWait() *SchedProcessWaitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SchedProcessWait); ok {
		return x.SchedProcessWait
	}
	return nil
}

func (x *FtraceEvent) GetF2FsDoSubmitBio() *F2FsDoSubmitBioFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsDoSubmitBio); ok {
		return x.F2FsDoSubmitBio
	}
	return nil
}

func (x *FtraceEvent) GetF2FsEvictInode() *F2FsEvictInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsEvictInode); ok {
		return x.F2FsEvictInode
	}
	return nil
}

func (x *FtraceEvent) GetF2FsFallocate() *F2FsFallocateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsFallocate); ok {
		return x.F2FsFallocate
	}
	return nil
}

func (x *FtraceEvent) GetF2FsGetDataBlock() *F2FsGetDataBlockFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsGetDataBlock); ok {
		return x.F2FsGetDataBlock
	}
	return nil
}

func (x *FtraceEvent) GetF2FsGetVictim() *F2FsGetVictimFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsGetVictim); ok {
		return x.F2FsGetVictim
	}
	return nil
}

func (x *FtraceEvent) GetF2FsIget() *F2FsIgetFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsIget); ok {
		return x.F2FsIget
	}
	return nil
}

func (x *FtraceEvent) GetF2FsIgetExit() *F2FsIgetExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsIgetExit); ok {
		return x.F2FsIgetExit
	}
	return nil
}

func (x *FtraceEvent) GetF2FsNewInode() *F2FsNewInodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsNewInode); ok {
		return x.F2FsNewInode
	}
	return nil
}

func (x *FtraceEvent) GetF2FsReadpage() *F2FsReadpageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsReadpage); ok {
		return x.F2FsReadpage
	}
	return nil
}

func (x *FtraceEvent) GetF2FsReserveNewBlock() *F2FsReserveNewBlockFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsReserveNewBlock); ok {
		return x.F2FsReserveNewBlock
	}
	return nil
}

func (x *FtraceEvent) GetF2FsSetPageDirty() *F2FsSetPageDirtyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsSetPageDirty); ok {
		return x.F2FsSetPageDirty
	}
	return nil
}

func (x *FtraceEvent) GetF2FsSubmitWritePage() *F2FsSubmitWritePageFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsSubmitWritePage); ok {
		return x.F2FsSubmitWritePage
	}
	return nil
}

func (x *FtraceEvent) GetF2FsSyncFileEnter() *F2FsSyncFileEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsSyncFileEnter); ok {
		return x.F2FsSyncFileEnter
	}
	return nil
}

func (x *FtraceEvent) GetF2FsSyncFileExit() *F2FsSyncFileExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsSyncFileExit); ok {
		return x.F2FsSyncFileExit
	}
	return nil
}

func (x *FtraceEvent) GetF2FsSyncFs() *F2FsSyncFsFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsSyncFs); ok {
		return x.F2FsSyncFs
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncate() *F2FsTruncateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncate); ok {
		return x.F2FsTruncate
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateBlocksEnter() *F2FsTruncateBlocksEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateBlocksEnter); ok {
		return x.F2FsTruncateBlocksEnter
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateBlocksExit() *F2FsTruncateBlocksExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateBlocksExit); ok {
		return x.F2FsTruncateBlocksExit
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateDataBlocksRange() *F2FsTruncateDataBlocksRangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateDataBlocksRange); ok {
		return x.F2FsTruncateDataBlocksRange
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateInodeBlocksEnter() *F2FsTruncateInodeBlocksEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateInodeBlocksEnter); ok {
		return x.F2FsTruncateInodeBlocksEnter
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateInodeBlocksExit() *F2FsTruncateInodeBlocksExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateInodeBlocksExit); ok {
		return x.F2FsTruncateInodeBlocksExit
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateNode() *F2FsTruncateNodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateNode); ok {
		return x.F2FsTruncateNode
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateNodesEnter() *F2FsTruncateNodesEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateNodesEnter); ok {
		return x.F2FsTruncateNodesEnter
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncateNodesExit() *F2FsTruncateNodesExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncateNodesExit); ok {
		return x.F2FsTruncateNodesExit
	}
	return nil
}

func (x *FtraceEvent) GetF2FsTruncatePartialNodes() *F2FsTruncatePartialNodesFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsTruncatePartialNodes); ok {
		return x.F2FsTruncatePartialNodes
	}
	return nil
}

func (x *FtraceEvent) GetF2FsUnlinkEnter() *F2FsUnlinkEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsUnlinkEnter); ok {
		return x.F2FsUnlinkEnter
	}
	return nil
}

func (x *FtraceEvent) GetF2FsUnlinkExit() *F2FsUnlinkExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsUnlinkExit); ok {
		return x.F2FsUnlinkExit
	}
	return nil
}

func (x *FtraceEvent) GetF2FsVmPageMkwrite() *F2FsVmPageMkwriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsVmPageMkwrite); ok {
		return x.F2FsVmPageMkwrite
	}
	return nil
}

func (x *FtraceEvent) GetF2FsWriteBegin() *F2FsWriteBeginFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsWriteBegin); ok {
		return x.F2FsWriteBegin
	}
	return nil
}

func (x *FtraceEvent) GetF2FsWriteCheckpoint() *F2FsWriteCheckpointFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsWriteCheckpoint); ok {
		return x.F2FsWriteCheckpoint
	}
	return nil
}

func (x *FtraceEvent) GetF2FsWriteEnd() *F2FsWriteEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_F2FsWriteEnd); ok {
		return x.F2FsWriteEnd
	}
	return nil
}

func (x *FtraceEvent) GetAllocPagesIommuEnd() *AllocPagesIommuEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_AllocPagesIommuEnd); ok {
		return x.AllocPagesIommuEnd
	}
	return nil
}

func (x *FtraceEvent) GetAllocPagesIommuFail() *AllocPagesIommuFailFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_AllocPagesIommuFail); ok {
		return x.AllocPagesIommuFail
	}
	return nil
}

func (x *FtraceEvent) GetAllocPagesIommuStart() *AllocPagesIommuStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_AllocPagesIommuStart); ok {
		return x.AllocPagesIommuStart
	}
	return nil
}

func (x *FtraceEvent) GetAllocPagesSysEnd() *AllocPagesSysEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_AllocPagesSysEnd); ok {
		return x.AllocPagesSysEnd
	}
	return nil
}

func (x *FtraceEvent) GetAllocPagesSysFail() *AllocPagesSysFailFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_AllocPagesSysFail); ok {
		return x.AllocPagesSysFail
	}
	return nil
}

func (x *FtraceEvent) GetAllocPagesSysStart() *AllocPagesSysStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_AllocPagesSysStart); ok {
		return x.AllocPagesSysStart
	}
	return nil
}

func (x *FtraceEvent) GetDmaAllocContiguousRetry() *DmaAllocContiguousRetryFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_DmaAllocContiguousRetry); ok {
		return x.DmaAllocContiguousRetry
	}
	return nil
}

func (x *FtraceEvent) GetIommuMapRange() *IommuMapRangeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IommuMapRange); ok {
		return x.IommuMapRange
	}
	return nil
}

func (x *FtraceEvent) GetIommuSecPtblMapRangeEnd() *IommuSecPtblMapRangeEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IommuSecPtblMapRangeEnd); ok {
		return x.IommuSecPtblMapRangeEnd
	}
	return nil
}

func (x *FtraceEvent) GetIommuSecPtblMapRangeStart() *IommuSecPtblMapRangeStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IommuSecPtblMapRangeStart); ok {
		return x.IommuSecPtblMapRangeStart
	}
	return nil
}

func (x *FtraceEvent) GetIonAllocBufferEnd() *IonAllocBufferEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonAllocBufferEnd); ok {
		return x.IonAllocBufferEnd
	}
	return nil
}

func (x *FtraceEvent) GetIonAllocBufferFail() *IonAllocBufferFailFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonAllocBufferFail); ok {
		return x.IonAllocBufferFail
	}
	return nil
}

func (x *FtraceEvent) GetIonAllocBufferFallback() *IonAllocBufferFallbackFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonAllocBufferFallback); ok {
		return x.IonAllocBufferFallback
	}
	return nil
}

func (x *FtraceEvent) GetIonAllocBufferStart() *IonAllocBufferStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonAllocBufferStart); ok {
		return x.IonAllocBufferStart
	}
	return nil
}

func (x *FtraceEvent) GetIonCpAllocRetry() *IonCpAllocRetryFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonCpAllocRetry); ok {
		return x.IonCpAllocRetry
	}
	return nil
}

func (x *FtraceEvent) GetIonCpSecureBufferEnd() *IonCpSecureBufferEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonCpSecureBufferEnd); ok {
		return x.IonCpSecureBufferEnd
	}
	return nil
}

func (x *FtraceEvent) GetIonCpSecureBufferStart() *IonCpSecureBufferStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonCpSecureBufferStart); ok {
		return x.IonCpSecureBufferStart
	}
	return nil
}

func (x *FtraceEvent) GetIonPrefetching() *IonPrefetchingFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonPrefetching); ok {
		return x.IonPrefetching
	}
	return nil
}

func (x *FtraceEvent) GetIonSecureCmaAddToPoolEnd() *IonSecureCmaAddToPoolEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonSecureCmaAddToPoolEnd); ok {
		return x.IonSecureCmaAddToPoolEnd
	}
	return nil
}

func (x *FtraceEvent) GetIonSecureCmaAddToPoolStart() *IonSecureCmaAddToPoolStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonSecureCmaAddToPoolStart); ok {
		return x.IonSecureCmaAddToPoolStart
	}
	return nil
}

func (x *FtraceEvent) GetIonSecureCmaAllocateEnd() *IonSecureCmaAllocateEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonSecureCmaAllocateEnd); ok {
		return x.IonSecureCmaAllocateEnd
	}
	return nil
}

func (x *FtraceEvent) GetIonSecureCmaAllocateStart() *IonSecureCmaAllocateStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonSecureCmaAllocateStart); ok {
		return x.IonSecureCmaAllocateStart
	}
	return nil
}

func (x *FtraceEvent) GetIonSecureCmaShrinkPoolEnd() *IonSecureCmaShrinkPoolEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonSecureCmaShrinkPoolEnd); ok {
		return x.IonSecureCmaShrinkPoolEnd
	}
	return nil
}

func (x *FtraceEvent) GetIonSecureCmaShrinkPoolStart() *IonSecureCmaShrinkPoolStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonSecureCmaShrinkPoolStart); ok {
		return x.IonSecureCmaShrinkPoolStart
	}
	return nil
}

func (x *FtraceEvent) GetKfree() *KfreeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Kfree); ok {
		return x.Kfree
	}
	return nil
}

func (x *FtraceEvent) GetKmalloc() *KmallocFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Kmalloc); ok {
		return x.Kmalloc
	}
	return nil
}

func (x *FtraceEvent) GetKmallocNode() *KmallocNodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_KmallocNode); ok {
		return x.KmallocNode
	}
	return nil
}

func (x *FtraceEvent) GetKmemCacheAlloc() *KmemCacheAllocFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_KmemCacheAlloc); ok {
		return x.KmemCacheAlloc
	}
	return nil
}

func (x *FtraceEvent) GetKmemCacheAllocNode() *KmemCacheAllocNodeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_KmemCacheAllocNode); ok {
		return x.KmemCacheAllocNode
	}
	return nil
}

func (x *FtraceEvent) GetKmemCacheFree() *KmemCacheFreeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_KmemCacheFree); ok {
		return x.KmemCacheFree
	}
	return nil
}

func (x *FtraceEvent) GetMigratePagesEnd() *MigratePagesEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MigratePagesEnd); ok {
		return x.MigratePagesEnd
	}
	return nil
}

func (x *FtraceEvent) GetMigratePagesStart() *MigratePagesStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MigratePagesStart); ok {
		return x.MigratePagesStart
	}
	return nil
}

func (x *FtraceEvent) GetMigrateRetry() *MigrateRetryFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MigrateRetry); ok {
		return x.MigrateRetry
	}
	return nil
}

func (x *FtraceEvent) GetMmPageAlloc() *MmPageAllocFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmPageAlloc); ok {
		return x.MmPageAlloc
	}
	return nil
}

func (x *FtraceEvent) GetMmPageAllocExtfrag() *MmPageAllocExtfragFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmPageAllocExtfrag); ok {
		return x.MmPageAllocExtfrag
	}
	return nil
}

func (x *FtraceEvent) GetMmPageAllocZoneLocked() *MmPageAllocZoneLockedFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmPageAllocZoneLocked); ok {
		return x.MmPageAllocZoneLocked
	}
	return nil
}

func (x *FtraceEvent) GetMmPageFree() *MmPageFreeFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmPageFree); ok {
		return x.MmPageFree
	}
	return nil
}

func (x *FtraceEvent) GetMmPageFreeBatched() *MmPageFreeBatchedFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmPageFreeBatched); ok {
		return x.MmPageFreeBatched
	}
	return nil
}

func (x *FtraceEvent) GetMmPagePcpuDrain() *MmPagePcpuDrainFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmPagePcpuDrain); ok {
		return x.MmPagePcpuDrain
	}
	return nil
}

func (x *FtraceEvent) GetRssStat() *RssStatFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_RssStat); ok {
		return x.RssStat
	}
	return nil
}

func (x *FtraceEvent) GetIonHeapShrink() *IonHeapShrinkFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonHeapShrink); ok {
		return x.IonHeapShrink
	}
	return nil
}

func (x *FtraceEvent) GetIonHeapGrow() *IonHeapGrowFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonHeapGrow); ok {
		return x.IonHeapGrow
	}
	return nil
}

func (x *FtraceEvent) GetFenceInit() *FenceInitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_FenceInit); ok {
		return x.FenceInit
	}
	return nil
}

func (x *FtraceEvent) GetFenceDestroy() *FenceDestroyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_FenceDestroy); ok {
		return x.FenceDestroy
	}
	return nil
}

func (x *FtraceEvent) GetFenceEnableSignal() *FenceEnableSignalFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_FenceEnableSignal); ok {
		return x.FenceEnableSignal
	}
	return nil
}

func (x *FtraceEvent) GetFenceSignaled() *FenceSignaledFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_FenceSignaled); ok {
		return x.FenceSignaled
	}
	return nil
}

func (x *FtraceEvent) GetClkEnable() *ClkEnableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ClkEnable); ok {
		return x.ClkEnable
	}
	return nil
}

func (x *FtraceEvent) GetClkDisable() *ClkDisableFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ClkDisable); ok {
		return x.ClkDisable
	}
	return nil
}

func (x *FtraceEvent) GetClkSetRate() *ClkSetRateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ClkSetRate); ok {
		return x.ClkSetRate
	}
	return nil
}

func (x *FtraceEvent) GetBinderTransactionAllocBuf() *BinderTransactionAllocBufFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_BinderTransactionAllocBuf); ok {
		return x.BinderTransactionAllocBuf
	}
	return nil
}

func (x *FtraceEvent) GetSignalDeliver() *SignalDeliverFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SignalDeliver); ok {
		return x.SignalDeliver
	}
	return nil
}

func (x *FtraceEvent) GetSignalGenerate() *SignalGenerateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SignalGenerate); ok {
		return x.SignalGenerate
	}
	return nil
}

func (x *FtraceEvent) GetOomScoreAdjUpdate() *OomScoreAdjUpdateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_OomScoreAdjUpdate); ok {
		return x.OomScoreAdjUpdate
	}
	return nil
}

func (x *FtraceEvent) GetGeneric() *GenericFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *FtraceEvent) GetMmEventRecord() *MmEventRecordFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MmEventRecord); ok {
		return x.MmEventRecord
	}
	return nil
}

func (x *FtraceEvent) GetSysEnter() *SysEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SysEnter); ok {
		return x.SysEnter
	}
	return nil
}

func (x *FtraceEvent) GetSysExit() *SysExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SysExit); ok {
		return x.SysExit
	}
	return nil
}

func (x *FtraceEvent) GetZero() *ZeroFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_Zero); ok {
		return x.Zero
	}
	return nil
}

func (x *FtraceEvent) GetGpuFrequency() *GpuFrequencyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_GpuFrequency); ok {
		return x.GpuFrequency
	}
	return nil
}

func (x *FtraceEvent) GetSdeTracingMarkWrite() *SdeTracingMarkWriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_SdeTracingMarkWrite); ok {
		return x.SdeTracingMarkWrite
	}
	return nil
}

func (x *FtraceEvent) GetMarkVictim() *MarkVictimFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_MarkVictim); ok {
		return x.MarkVictim
	}
	return nil
}

func (x *FtraceEvent) GetIonStat() *IonStatFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonStat); ok {
		return x.IonStat
	}
	return nil
}

func (x *FtraceEvent) GetIonBufferCreate() *IonBufferCreateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonBufferCreate); ok {
		return x.IonBufferCreate
	}
	return nil
}

func (x *FtraceEvent) GetIonBufferDestroy() *IonBufferDestroyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_IonBufferDestroy); ok {
		return x.IonBufferDestroy
	}
	return nil
}

func (x *FtraceEvent) GetScmCallStart() *ScmCallStartFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ScmCallStart); ok {
		return x.ScmCallStart
	}
	return nil
}

func (x *FtraceEvent) GetScmCallEnd() *ScmCallEndFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ScmCallEnd); ok {
		return x.ScmCallEnd
	}
	return nil
}

func (x *FtraceEvent) GetGpuMemTotal() *GpuMemTotalFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_GpuMemTotal); ok {
		return x.GpuMemTotal
	}
	return nil
}

func (x *FtraceEvent) GetThermalTemperature() *ThermalTemperatureFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_ThermalTemperature); ok {
		return x.ThermalTemperature
	}
	return nil
}

func (x *FtraceEvent) GetCdevUpdate() *CdevUpdateFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CdevUpdate); ok {
		return x.CdevUpdate
	}
	return nil
}

func (x *FtraceEvent) GetCpuhpExit() *CpuhpExitFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuhpExit); ok {
		return x.CpuhpExit
	}
	return nil
}

func (x *FtraceEvent) GetCpuhpMultiEnter() *CpuhpMultiEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuhpMultiEnter); ok {
		return x.CpuhpMultiEnter
	}
	return nil
}

func (x *FtraceEvent) GetCpuhpEnter() *CpuhpEnterFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuhpEnter); ok {
		return x.CpuhpEnter
	}
	return nil
}

func (x *FtraceEvent) GetCpuhpLatency() *CpuhpLatencyFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_CpuhpLatency); ok {
		return x.CpuhpLatency
	}
	return nil
}

func (x *FtraceEvent) GetFastrpcDmaStat() *FastrpcDmaStatFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_FastrpcDmaStat); ok {
		return x.FastrpcDmaStat
	}
	return nil
}

func (x *FtraceEvent) GetDpuTracingMarkWrite() *DpuTracingMarkWriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_DpuTracingMarkWrite); ok {
		return x.DpuTracingMarkWrite
	}
	return nil
}

func (x *FtraceEvent) GetG2DTracingMarkWrite() *G2DTracingMarkWriteFtraceEvent {
	if x, ok := x.GetEvent().(*FtraceEvent_G2DTracingMarkWrite); ok {
		return x.G2DTracingMarkWrite
	}
	return nil
}

type isFtraceEvent_Event interface {
	isFtraceEvent_Event()
}

type FtraceEvent_Print struct {
	Print *PrintFtraceEvent `protobuf:"bytes,3,opt,name=print,oneof"`
}

type FtraceEvent_SchedSwitch struct {
	SchedSwitch *SchedSwitchFtraceEvent `protobuf:"bytes,4,opt,name=sched_switch,json=schedSwitch,oneof"`
}

type FtraceEvent_CpuFrequency struct {
	// removed field with id 5;
	// removed field with id 6;
	// removed field with id 7;
	// removed field with id 8;
	// removed field with id 9;
	// removed field with id 10;
	CpuFrequency *CpuFrequencyFtraceEvent `protobuf:"bytes,11,opt,name=cpu_frequency,json=cpuFrequency,oneof"`
}

type FtraceEvent_CpuFrequencyLimits struct {
	CpuFrequencyLimits *CpuFrequencyLimitsFtraceEvent `protobuf:"bytes,12,opt,name=cpu_frequency_limits,json=cpuFrequencyLimits,oneof"`
}

type FtraceEvent_CpuIdle struct {
	CpuIdle *CpuIdleFtraceEvent `protobuf:"bytes,13,opt,name=cpu_idle,json=cpuIdle,oneof"`
}

type FtraceEvent_ClockEnable struct {
	ClockEnable *ClockEnableFtraceEvent `protobuf:"bytes,14,opt,name=clock_enable,json=clockEnable,oneof"`
}

type FtraceEvent_ClockDisable struct {
	ClockDisable *ClockDisableFtraceEvent `protobuf:"bytes,15,opt,name=clock_disable,json=clockDisable,oneof"`
}

type FtraceEvent_ClockSetRate struct {
	ClockSetRate *ClockSetRateFtraceEvent `protobuf:"bytes,16,opt,name=clock_set_rate,json=clockSetRate,oneof"`
}

type FtraceEvent_SchedWakeup struct {
	SchedWakeup *SchedWakeupFtraceEvent `protobuf:"bytes,17,opt,name=sched_wakeup,json=schedWakeup,oneof"`
}

type FtraceEvent_SchedBlockedReason struct {
	SchedBlockedReason *SchedBlockedReasonFtraceEvent `protobuf:"bytes,18,opt,name=sched_blocked_reason,json=schedBlockedReason,oneof"`
}

type FtraceEvent_SchedCpuHotplug struct {
	SchedCpuHotplug *SchedCpuHotplugFtraceEvent `protobuf:"bytes,19,opt,name=sched_cpu_hotplug,json=schedCpuHotplug,oneof"`
}

type FtraceEvent_SchedWaking struct {
	SchedWaking *SchedWakingFtraceEvent `protobuf:"bytes,20,opt,name=sched_waking,json=schedWaking,oneof"`
}

type FtraceEvent_IpiEntry struct {
	IpiEntry *IpiEntryFtraceEvent `protobuf:"bytes,21,opt,name=ipi_entry,json=ipiEntry,oneof"`
}

type FtraceEvent_IpiExit struct {
	IpiExit *IpiExitFtraceEvent `protobuf:"bytes,22,opt,name=ipi_exit,json=ipiExit,oneof"`
}

type FtraceEvent_IpiRaise struct {
	IpiRaise *IpiRaiseFtraceEvent `protobuf:"bytes,23,opt,name=ipi_raise,json=ipiRaise,oneof"`
}

type FtraceEvent_SoftirqEntry struct {
	SoftirqEntry *SoftirqEntryFtraceEvent `protobuf:"bytes,24,opt,name=softirq_entry,json=softirqEntry,oneof"`
}

type FtraceEvent_SoftirqExit struct {
	SoftirqExit *SoftirqExitFtraceEvent `protobuf:"bytes,25,opt,name=softirq_exit,json=softirqExit,oneof"`
}

type FtraceEvent_SoftirqRaise struct {
	SoftirqRaise *SoftirqRaiseFtraceEvent `protobuf:"bytes,26,opt,name=softirq_raise,json=softirqRaise,oneof"`
}

type FtraceEvent_I2CRead struct {
	I2CRead *I2CReadFtraceEvent `protobuf:"bytes,27,opt,name=i2c_read,json=i2cRead,oneof"`
}

type FtraceEvent_I2CWrite struct {
	I2CWrite *I2CWriteFtraceEvent `protobuf:"bytes,28,opt,name=i2c_write,json=i2cWrite,oneof"`
}

type FtraceEvent_I2CResult struct {
	I2CResult *I2CResultFtraceEvent `protobuf:"bytes,29,opt,name=i2c_result,json=i2cResult,oneof"`
}

type FtraceEvent_I2CReply struct {
	I2CReply *I2CReplyFtraceEvent `protobuf:"bytes,30,opt,name=i2c_reply,json=i2cReply,oneof"`
}

type FtraceEvent_SmbusRead struct {
	SmbusRead *SmbusReadFtraceEvent `protobuf:"bytes,31,opt,name=smbus_read,json=smbusRead,oneof"`
}

type FtraceEvent_SmbusWrite struct {
	SmbusWrite *SmbusWriteFtraceEvent `protobuf:"bytes,32,opt,name=smbus_write,json=smbusWrite,oneof"`
}

type FtraceEvent_SmbusResult struct {
	SmbusResult *SmbusResultFtraceEvent `protobuf:"bytes,33,opt,name=smbus_result,json=smbusResult,oneof"`
}

type FtraceEvent_SmbusReply struct {
	SmbusReply *SmbusReplyFtraceEvent `protobuf:"bytes,34,opt,name=smbus_reply,json=smbusReply,oneof"`
}

type FtraceEvent_LowmemoryKill struct {
	LowmemoryKill *LowmemoryKillFtraceEvent `protobuf:"bytes,35,opt,name=lowmemory_kill,json=lowmemoryKill,oneof"`
}

type FtraceEvent_IrqHandlerEntry struct {
	IrqHandlerEntry *IrqHandlerEntryFtraceEvent `protobuf:"bytes,36,opt,name=irq_handler_entry,json=irqHandlerEntry,oneof"`
}

type FtraceEvent_IrqHandlerExit struct {
	IrqHandlerExit *IrqHandlerExitFtraceEvent `protobuf:"bytes,37,opt,name=irq_handler_exit,json=irqHandlerExit,oneof"`
}

type FtraceEvent_SyncPt struct {
	SyncPt *SyncPtFtraceEvent `protobuf:"bytes,38,opt,name=sync_pt,json=syncPt,oneof"`
}

type FtraceEvent_SyncTimeline struct {
	SyncTimeline *SyncTimelineFtraceEvent `protobuf:"bytes,39,opt,name=sync_timeline,json=syncTimeline,oneof"`
}

type FtraceEvent_SyncWait struct {
	SyncWait *SyncWaitFtraceEvent `protobuf:"bytes,40,opt,name=sync_wait,json=syncWait,oneof"`
}

type FtraceEvent_Ext4DaWriteBegin struct {
	Ext4DaWriteBegin *Ext4DaWriteBeginFtraceEvent `protobuf:"bytes,41,opt,name=ext4_da_write_begin,json=ext4DaWriteBegin,oneof"`
}

type FtraceEvent_Ext4DaWriteEnd struct {
	Ext4DaWriteEnd *Ext4DaWriteEndFtraceEvent `protobuf:"bytes,42,opt,name=ext4_da_write_end,json=ext4DaWriteEnd,oneof"`
}

type FtraceEvent_Ext4SyncFileEnter struct {
	Ext4SyncFileEnter *Ext4SyncFileEnterFtraceEvent `protobuf:"bytes,43,opt,name=ext4_sync_file_enter,json=ext4SyncFileEnter,oneof"`
}

type FtraceEvent_Ext4SyncFileExit struct {
	Ext4SyncFileExit *Ext4SyncFileExitFtraceEvent `protobuf:"bytes,44,opt,name=ext4_sync_file_exit,json=ext4SyncFileExit,oneof"`
}

type FtraceEvent_BlockRqIssue struct {
	BlockRqIssue *BlockRqIssueFtraceEvent `protobuf:"bytes,45,opt,name=block_rq_issue,json=blockRqIssue,oneof"`
}

type FtraceEvent_MmVmscanDirectReclaimBegin struct {
	MmVmscanDirectReclaimBegin *MmVmscanDirectReclaimBeginFtraceEvent `protobuf:"bytes,46,opt,name=mm_vmscan_direct_reclaim_begin,json=mmVmscanDirectReclaimBegin,oneof"`
}

type FtraceEvent_MmVmscanDirectReclaimEnd struct {
	MmVmscanDirectReclaimEnd *MmVmscanDirectReclaimEndFtraceEvent `protobuf:"bytes,47,opt,name=mm_vmscan_direct_reclaim_end,json=mmVmscanDirectReclaimEnd,oneof"`
}

type FtraceEvent_MmVmscanKswapdWake struct {
	MmVmscanKswapdWake *MmVmscanKswapdWakeFtraceEvent `protobuf:"bytes,48,opt,name=mm_vmscan_kswapd_wake,json=mmVmscanKswapdWake,oneof"`
}

type FtraceEvent_MmVmscanKswapdSleep struct {
	MmVmscanKswapdSleep *MmVmscanKswapdSleepFtraceEvent `protobuf:"bytes,49,opt,name=mm_vmscan_kswapd_sleep,json=mmVmscanKswapdSleep,oneof"`
}

type FtraceEvent_BinderTransaction struct {
	BinderTransaction *BinderTransactionFtraceEvent `protobuf:"bytes,50,opt,name=binder_transaction,json=binderTransaction,oneof"`
}

type FtraceEvent_BinderTransactionReceived struct {
	BinderTransactionReceived *BinderTransactionReceivedFtraceEvent `protobuf:"bytes,51,opt,name=binder_transaction_received,json=binderTransactionReceived,oneof"`
}

type FtraceEvent_BinderSetPriority struct {
	BinderSetPriority *BinderSetPriorityFtraceEvent `protobuf:"bytes,52,opt,name=binder_set_priority,json=binderSetPriority,oneof"`
}

type FtraceEvent_BinderLock struct {
	BinderLock *BinderLockFtraceEvent `protobuf:"bytes,53,opt,name=binder_lock,json=binderLock,oneof"`
}

type FtraceEvent_BinderLocked struct {
	BinderLocked *BinderLockedFtraceEvent `protobuf:"bytes,54,opt,name=binder_locked,json=binderLocked,oneof"`
}

type FtraceEvent_BinderUnlock struct {
	BinderUnlock *BinderUnlockFtraceEvent `protobuf:"bytes,55,opt,name=binder_unlock,json=binderUnlock,oneof"`
}

type FtraceEvent_WorkqueueActivateWork struct {
	WorkqueueActivateWork *WorkqueueActivateWorkFtraceEvent `protobuf:"bytes,56,opt,name=workqueue_activate_work,json=workqueueActivateWork,oneof"`
}

type FtraceEvent_WorkqueueExecuteEnd struct {
	WorkqueueExecuteEnd *WorkqueueExecuteEndFtraceEvent `protobuf:"bytes,57,opt,name=workqueue_execute_end,json=workqueueExecuteEnd,oneof"`
}

type FtraceEvent_WorkqueueExecuteStart struct {
	WorkqueueExecuteStart *WorkqueueExecuteStartFtraceEvent `protobuf:"bytes,58,opt,name=workqueue_execute_start,json=workqueueExecuteStart,oneof"`
}

type FtraceEvent_WorkqueueQueueWork struct {
	WorkqueueQueueWork *WorkqueueQueueWorkFtraceEvent `protobuf:"bytes,59,opt,name=workqueue_queue_work,json=workqueueQueueWork,oneof"`
}

type FtraceEvent_RegulatorDisable struct {
	RegulatorDisable *RegulatorDisableFtraceEvent `protobuf:"bytes,60,opt,name=regulator_disable,json=regulatorDisable,oneof"`
}

type FtraceEvent_RegulatorDisableComplete struct {
	RegulatorDisableComplete *RegulatorDisableCompleteFtraceEvent `protobuf:"bytes,61,opt,name=regulator_disable_complete,json=regulatorDisableComplete,oneof"`
}

type FtraceEvent_RegulatorEnable struct {
	RegulatorEnable *RegulatorEnableFtraceEvent `protobuf:"bytes,62,opt,name=regulator_enable,json=regulatorEnable,oneof"`
}

type FtraceEvent_RegulatorEnableComplete struct {
	RegulatorEnableComplete *RegulatorEnableCompleteFtraceEvent `protobuf:"bytes,63,opt,name=regulator_enable_complete,json=regulatorEnableComplete,oneof"`
}

type FtraceEvent_RegulatorEnableDelay struct {
	RegulatorEnableDelay *RegulatorEnableDelayFtraceEvent `protobuf:"bytes,64,opt,name=regulator_enable_delay,json=regulatorEnableDelay,oneof"`
}

type FtraceEvent_RegulatorSetVoltage struct {
	RegulatorSetVoltage *RegulatorSetVoltageFtraceEvent `protobuf:"bytes,65,opt,name=regulator_set_voltage,json=regulatorSetVoltage,oneof"`
}

type FtraceEvent_RegulatorSetVoltageComplete struct {
	RegulatorSetVoltageComplete *RegulatorSetVoltageCompleteFtraceEvent `protobuf:"bytes,66,opt,name=regulator_set_voltage_complete,json=regulatorSetVoltageComplete,oneof"`
}

type FtraceEvent_CgroupAttachTask struct {
	CgroupAttachTask *CgroupAttachTaskFtraceEvent `protobuf:"bytes,67,opt,name=cgroup_attach_task,json=cgroupAttachTask,oneof"`
}

type FtraceEvent_CgroupMkdir struct {
	CgroupMkdir *CgroupMkdirFtraceEvent `protobuf:"bytes,68,opt,name=cgroup_mkdir,json=cgroupMkdir,oneof"`
}

type FtraceEvent_CgroupRemount struct {
	CgroupRemount *CgroupRemountFtraceEvent `protobuf:"bytes,69,opt,name=cgroup_remount,json=cgroupRemount,oneof"`
}

type FtraceEvent_CgroupRmdir struct {
	CgroupRmdir *CgroupRmdirFtraceEvent `protobuf:"bytes,70,opt,name=cgroup_rmdir,json=cgroupRmdir,oneof"`
}

type FtraceEvent_CgroupTransferTasks struct {
	CgroupTransferTasks *CgroupTransferTasksFtraceEvent `protobuf:"bytes,71,opt,name=cgroup_transfer_tasks,json=cgroupTransferTasks,oneof"`
}

type FtraceEvent_CgroupDestroyRoot struct {
	CgroupDestroyRoot *CgroupDestroyRootFtraceEvent `protobuf:"bytes,72,opt,name=cgroup_destroy_root,json=cgroupDestroyRoot,oneof"`
}

type FtraceEvent_CgroupRelease struct {
	CgroupRelease *CgroupReleaseFtraceEvent `protobuf:"bytes,73,opt,name=cgroup_release,json=cgroupRelease,oneof"`
}

type FtraceEvent_CgroupRename struct {
	CgroupRename *CgroupRenameFtraceEvent `protobuf:"bytes,74,opt,name=cgroup_rename,json=cgroupRename,oneof"`
}

type FtraceEvent_CgroupSetupRoot struct {
	CgroupSetupRoot *CgroupSetupRootFtraceEvent `protobuf:"bytes,75,opt,name=cgroup_setup_root,json=cgroupSetupRoot,oneof"`
}

type FtraceEvent_MdpCmdKickoff struct {
	MdpCmdKickoff *MdpCmdKickoffFtraceEvent `protobuf:"bytes,76,opt,name=mdp_cmd_kickoff,json=mdpCmdKickoff,oneof"`
}

type FtraceEvent_MdpCommit struct {
	MdpCommit *MdpCommitFtraceEvent `protobuf:"bytes,77,opt,name=mdp_commit,json=mdpCommit,oneof"`
}

type FtraceEvent_MdpPerfSetOt struct {
	MdpPerfSetOt *MdpPerfSetOtFtraceEvent `protobuf:"bytes,78,opt,name=mdp_perf_set_ot,json=mdpPerfSetOt,oneof"`
}

type FtraceEvent_MdpSsppChange struct {
	MdpSsppChange *MdpSsppChangeFtraceEvent `protobuf:"bytes,79,opt,name=mdp_sspp_change,json=mdpSsppChange,oneof"`
}

type FtraceEvent_TracingMarkWrite struct {
	TracingMarkWrite *TracingMarkWriteFtraceEvent `protobuf:"bytes,80,opt,name=tracing_mark_write,json=tracingMarkWrite,oneof"`
}

type FtraceEvent_MdpCmdPingpongDone struct {
	MdpCmdPingpongDone *MdpCmdPingpongDoneFtraceEvent `protobuf:"bytes,81,opt,name=mdp_cmd_pingpong_done,json=mdpCmdPingpongDone,oneof"`
}

type FtraceEvent_MdpCompareBw struct {
	MdpCompareBw *MdpCompareBwFtraceEvent `protobuf:"bytes,82,opt,name=mdp_compare_bw,json=mdpCompareBw,oneof"`
}

type FtraceEvent_MdpPerfSetPanicLuts struct {
	MdpPerfSetPanicLuts *MdpPerfSetPanicLutsFtraceEvent `protobuf:"bytes,83,opt,name=mdp_perf_set_panic_luts,json=mdpPerfSetPanicLuts,oneof"`
}

type FtraceEvent_MdpSsppSet struct {
	MdpSsppSet *MdpSsppSetFtraceEvent `protobuf:"bytes,84,opt,name=mdp_sspp_set,json=mdpSsppSet,oneof"`
}

type FtraceEvent_MdpCmdReadptrDone struct {
	MdpCmdReadptrDone *MdpCmdReadptrDoneFtraceEvent `protobuf:"bytes,85,opt,name=mdp_cmd_readptr_done,json=mdpCmdReadptrDone,oneof"`
}

type FtraceEvent_MdpMisrCrc struct {
	MdpMisrCrc *MdpMisrCrcFtraceEvent `protobuf:"bytes,86,opt,name=mdp_misr_crc,json=mdpMisrCrc,oneof"`
}

type FtraceEvent_MdpPerfSetQosLuts struct {
	MdpPerfSetQosLuts *MdpPerfSetQosLutsFtraceEvent `protobuf:"bytes,87,opt,name=mdp_perf_set_qos_luts,json=mdpPerfSetQosLuts,oneof"`
}

type FtraceEvent_MdpTraceCounter struct {
	MdpTraceCounter *MdpTraceCounterFtraceEvent `protobuf:"bytes,88,opt,name=mdp_trace_counter,json=mdpTraceCounter,oneof"`
}

type FtraceEvent_MdpCmdReleaseBw struct {
	MdpCmdReleaseBw *MdpCmdReleaseBwFtraceEvent `protobuf:"bytes,89,opt,name=mdp_cmd_release_bw,json=mdpCmdReleaseBw,oneof"`
}

type FtraceEvent_MdpMixerUpdate struct {
	MdpMixerUpdate *MdpMixerUpdateFtraceEvent `protobuf:"bytes,90,opt,name=mdp_mixer_update,json=mdpMixerUpdate,oneof"`
}

type FtraceEvent_MdpPerfSetWmLevels struct {
	MdpPerfSetWmLevels *MdpPerfSetWmLevelsFtraceEvent `protobuf:"bytes,91,opt,name=mdp_perf_set_wm_levels,json=mdpPerfSetWmLevels,oneof"`
}

type FtraceEvent_MdpVideoUnderrunDone struct {
	MdpVideoUnderrunDone *MdpVideoUnderrunDoneFtraceEvent `protobuf:"bytes,92,opt,name=mdp_video_underrun_done,json=mdpVideoUnderrunDone,oneof"`
}

type FtraceEvent_MdpCmdWaitPingpong struct {
	MdpCmdWaitPingpong *MdpCmdWaitPingpongFtraceEvent `protobuf:"bytes,93,opt,name=mdp_cmd_wait_pingpong,json=mdpCmdWaitPingpong,oneof"`
}

type FtraceEvent_MdpPerfPrefillCalc struct {
	MdpPerfPrefillCalc *MdpPerfPrefillCalcFtraceEvent `protobuf:"bytes,94,opt,name=mdp_perf_prefill_calc,json=mdpPerfPrefillCalc,oneof"`
}

type FtraceEvent_MdpPerfUpdateBus struct {
	MdpPerfUpdateBus *MdpPerfUpdateBusFtraceEvent `protobuf:"bytes,95,opt,name=mdp_perf_update_bus,json=mdpPerfUpdateBus,oneof"`
}

type FtraceEvent_RotatorBwAoAsContext struct {
	RotatorBwAoAsContext *RotatorBwAoAsContextFtraceEvent `protobuf:"bytes,96,opt,name=rotator_bw_ao_as_context,json=rotatorBwAoAsContext,oneof"`
}

type FtraceEvent_MmFilemapAddToPageCache struct {
	MmFilemapAddToPageCache *MmFilemapAddToPageCacheFtraceEvent `protobuf:"bytes,97,opt,name=mm_filemap_add_to_page_cache,json=mmFilemapAddToPageCache,oneof"`
}

type FtraceEvent_MmFilemapDeleteFromPageCache struct {
	MmFilemapDeleteFromPageCache *MmFilemapDeleteFromPageCacheFtraceEvent `protobuf:"bytes,98,opt,name=mm_filemap_delete_from_page_cache,json=mmFilemapDeleteFromPageCache,oneof"`
}

type FtraceEvent_MmCompactionBegin struct {
	MmCompactionBegin *MmCompactionBeginFtraceEvent `protobuf:"bytes,99,opt,name=mm_compaction_begin,json=mmCompactionBegin,oneof"`
}

type FtraceEvent_MmCompactionDeferCompaction struct {
	MmCompactionDeferCompaction *MmCompactionDeferCompactionFtraceEvent `protobuf:"bytes,100,opt,name=mm_compaction_defer_compaction,json=mmCompactionDeferCompaction,oneof"`
}

type FtraceEvent_MmCompactionDeferred struct {
	MmCompactionDeferred *MmCompactionDeferredFtraceEvent `protobuf:"bytes,101,opt,name=mm_compaction_deferred,json=mmCompactionDeferred,oneof"`
}

type FtraceEvent_MmCompactionDeferReset struct {
	MmCompactionDeferReset *MmCompactionDeferResetFtraceEvent `protobuf:"bytes,102,opt,name=mm_compaction_defer_reset,json=mmCompactionDeferReset,oneof"`
}

type FtraceEvent_MmCompactionEnd struct {
	MmCompactionEnd *MmCompactionEndFtraceEvent `protobuf:"bytes,103,opt,name=mm_compaction_end,json=mmCompactionEnd,oneof"`
}

type FtraceEvent_MmCompactionFinished struct {
	MmCompactionFinished *MmCompactionFinishedFtraceEvent `protobuf:"bytes,104,opt,name=mm_compaction_finished,json=mmCompactionFinished,oneof"`
}

type FtraceEvent_MmCompactionIsolateFreepages struct {
	MmCompactionIsolateFreepages *MmCompactionIsolateFreepagesFtraceEvent `protobuf:"bytes,105,opt,name=mm_compaction_isolate_freepages,json=mmCompactionIsolateFreepages,oneof"`
}

type FtraceEvent_MmCompactionIsolateMigratepages struct {
	MmCompactionIsolateMigratepages *MmCompactionIsolateMigratepagesFtraceEvent `protobuf:"bytes,106,opt,name=mm_compaction_isolate_migratepages,json=mmCompactionIsolateMigratepages,oneof"`
}

type FtraceEvent_MmCompactionKcompactdSleep struct {
	MmCompactionKcompactdSleep *MmCompactionKcompactdSleepFtraceEvent `protobuf:"bytes,107,opt,name=mm_compaction_kcompactd_sleep,json=mmCompactionKcompactdSleep,oneof"`
}

type FtraceEvent_MmCompactionKcompactdWake struct {
	MmCompactionKcompactdWake *MmCompactionKcompactdWakeFtraceEvent `protobuf:"bytes,108,opt,name=mm_compaction_kcompactd_wake,json=mmCompactionKcompactdWake,oneof"`
}

type FtraceEvent_MmCompactionMigratepages struct {
	MmCompactionMigratepages *MmCompactionMigratepagesFtraceEvent `protobuf:"bytes,109,opt,name=mm_compaction_migratepages,json=mmCompactionMigratepages,oneof"`
}

type FtraceEvent_MmCompactionSuitable struct {
	MmCompactionSuitable *MmCompactionSuitableFtraceEvent `protobuf:"bytes,110,opt,name=mm_compaction_suitable,json=mmCompactionSuitable,oneof"`
}

type FtraceEvent_MmCompactionTryToCompactPages struct {
	MmCompactionTryToCompactPages *MmCompactionTryToCompactPagesFtraceEvent `protobuf:"bytes,111,opt,name=mm_compaction_try_to_compact_pages,json=mmCompactionTryToCompactPages,oneof"`
}

type FtraceEvent_MmCompactionWakeupKcompactd struct {
	MmCompactionWakeupKcompactd *MmCompactionWakeupKcompactdFtraceEvent `protobuf:"bytes,112,opt,name=mm_compaction_wakeup_kcompactd,json=mmCompactionWakeupKcompactd,oneof"`
}

type FtraceEvent_SuspendResume struct {
	SuspendResume *SuspendResumeFtraceEvent `protobuf:"bytes,113,opt,name=suspend_resume,json=suspendResume,oneof"`
}

type FtraceEvent_SchedWakeupNew struct {
	SchedWakeupNew *SchedWakeupNewFtraceEvent `protobuf:"bytes,114,opt,name=sched_wakeup_new,json=schedWakeupNew,oneof"`
}

type FtraceEvent_BlockBioBackmerge struct {
	BlockBioBackmerge *BlockBioBackmergeFtraceEvent `protobuf:"bytes,115,opt,name=block_bio_backmerge,json=blockBioBackmerge,oneof"`
}

type FtraceEvent_BlockBioBounce struct {
	BlockBioBounce *BlockBioBounceFtraceEvent `protobuf:"bytes,116,opt,name=block_bio_bounce,json=blockBioBounce,oneof"`
}

type FtraceEvent_BlockBioComplete struct {
	BlockBioComplete *BlockBioCompleteFtraceEvent `protobuf:"bytes,117,opt,name=block_bio_complete,json=blockBioComplete,oneof"`
}

type FtraceEvent_BlockBioFrontmerge struct {
	BlockBioFrontmerge *BlockBioFrontmergeFtraceEvent `protobuf:"bytes,118,opt,name=block_bio_frontmerge,json=blockBioFrontmerge,oneof"`
}

type FtraceEvent_BlockBioQueue struct {
	BlockBioQueue *BlockBioQueueFtraceEvent `protobuf:"bytes,119,opt,name=block_bio_queue,json=blockBioQueue,oneof"`
}

type FtraceEvent_BlockBioRemap struct {
	BlockBioRemap *BlockBioRemapFtraceEvent `protobuf:"bytes,120,opt,name=block_bio_remap,json=blockBioRemap,oneof"`
}

type FtraceEvent_BlockDirtyBuffer struct {
	BlockDirtyBuffer *BlockDirtyBufferFtraceEvent `protobuf:"bytes,121,opt,name=block_dirty_buffer,json=blockDirtyBuffer,oneof"`
}

type FtraceEvent_BlockGetrq struct {
	BlockGetrq *BlockGetrqFtraceEvent `protobuf:"bytes,122,opt,name=block_getrq,json=blockGetrq,oneof"`
}

type FtraceEvent_BlockPlug struct {
	BlockPlug *BlockPlugFtraceEvent `protobuf:"bytes,123,opt,name=block_plug,json=blockPlug,oneof"`
}

type FtraceEvent_BlockRqAbort struct {
	BlockRqAbort *BlockRqAbortFtraceEvent `protobuf:"bytes,124,opt,name=block_rq_abort,json=blockRqAbort,oneof"`
}

type FtraceEvent_BlockRqComplete struct {
	BlockRqComplete *BlockRqCompleteFtraceEvent `protobuf:"bytes,125,opt,name=block_rq_complete,json=blockRqComplete,oneof"`
}

type FtraceEvent_BlockRqInsert struct {
	BlockRqInsert *BlockRqInsertFtraceEvent `protobuf:"bytes,126,opt,name=block_rq_insert,json=blockRqInsert,oneof"`
}

type FtraceEvent_BlockRqRemap struct {
	// removed field with id 127;
	BlockRqRemap *BlockRqRemapFtraceEvent `protobuf:"bytes,128,opt,name=block_rq_remap,json=blockRqRemap,oneof"`
}

type FtraceEvent_BlockRqRequeue struct {
	BlockRqRequeue *BlockRqRequeueFtraceEvent `protobuf:"bytes,129,opt,name=block_rq_requeue,json=blockRqRequeue,oneof"`
}

type FtraceEvent_BlockSleeprq struct {
	BlockSleeprq *BlockSleeprqFtraceEvent `protobuf:"bytes,130,opt,name=block_sleeprq,json=blockSleeprq,oneof"`
}

type FtraceEvent_BlockSplit struct {
	BlockSplit *BlockSplitFtraceEvent `protobuf:"bytes,131,opt,name=block_split,json=blockSplit,oneof"`
}

type FtraceEvent_BlockTouchBuffer struct {
	BlockTouchBuffer *BlockTouchBufferFtraceEvent `protobuf:"bytes,132,opt,name=block_touch_buffer,json=blockTouchBuffer,oneof"`
}

type FtraceEvent_BlockUnplug struct {
	BlockUnplug *BlockUnplugFtraceEvent `protobuf:"bytes,133,opt,name=block_unplug,json=blockUnplug,oneof"`
}

type FtraceEvent_Ext4AllocDaBlocks struct {
	Ext4AllocDaBlocks *Ext4AllocDaBlocksFtraceEvent `protobuf:"bytes,134,opt,name=ext4_alloc_da_blocks,json=ext4AllocDaBlocks,oneof"`
}

type FtraceEvent_Ext4AllocateBlocks struct {
	Ext4AllocateBlocks *Ext4AllocateBlocksFtraceEvent `protobuf:"bytes,135,opt,name=ext4_allocate_blocks,json=ext4AllocateBlocks,oneof"`
}

type FtraceEvent_Ext4AllocateInode struct {
	Ext4AllocateInode *Ext4AllocateInodeFtraceEvent `protobuf:"bytes,136,opt,name=ext4_allocate_inode,json=ext4AllocateInode,oneof"`
}

type FtraceEvent_Ext4BeginOrderedTruncate struct {
	Ext4BeginOrderedTruncate *Ext4BeginOrderedTruncateFtraceEvent `protobuf:"bytes,137,opt,name=ext4_begin_ordered_truncate,json=ext4BeginOrderedTruncate,oneof"`
}

type FtraceEvent_Ext4CollapseRange struct {
	Ext4CollapseRange *Ext4CollapseRangeFtraceEvent `protobuf:"bytes,138,opt,name=ext4_collapse_range,json=ext4CollapseRange,oneof"`
}

type FtraceEvent_Ext4DaReleaseSpace struct {
	Ext4DaReleaseSpace *Ext4DaReleaseSpaceFtraceEvent `protobuf:"bytes,139,opt,name=ext4_da_release_space,json=ext4DaReleaseSpace,oneof"`
}

type FtraceEvent_Ext4DaReserveSpace struct {
	Ext4DaReserveSpace *Ext4DaReserveSpaceFtraceEvent `protobuf:"bytes,140,opt,name=ext4_da_reserve_space,json=ext4DaReserveSpace,oneof"`
}

type FtraceEvent_Ext4DaUpdateReserveSpace struct {
	Ext4DaUpdateReserveSpace *Ext4DaUpdateReserveSpaceFtraceEvent `protobuf:"bytes,141,opt,name=ext4_da_update_reserve_space,json=ext4DaUpdateReserveSpace,oneof"`
}

type FtraceEvent_Ext4DaWritePages struct {
	Ext4DaWritePages *Ext4DaWritePagesFtraceEvent `protobuf:"bytes,142,opt,name=ext4_da_write_pages,json=ext4DaWritePages,oneof"`
}

type FtraceEvent_Ext4DaWritePagesExtent struct {
	Ext4DaWritePagesExtent *Ext4DaWritePagesExtentFtraceEvent `protobuf:"bytes,143,opt,name=ext4_da_write_pages_extent,json=ext4DaWritePagesExtent,oneof"`
}

type FtraceEvent_Ext4Direct_IOEnter struct {
	Ext4Direct_IOEnter *Ext4DirectIOEnterFtraceEvent `protobuf:"bytes,144,opt,name=ext4_direct_IO_enter,json=ext4DirectIOEnter,oneof"`
}

type FtraceEvent_Ext4Direct_IOExit struct {
	Ext4Direct_IOExit *Ext4DirectIOExitFtraceEvent `protobuf:"bytes,145,opt,name=ext4_direct_IO_exit,json=ext4DirectIOExit,oneof"`
}

type FtraceEvent_Ext4DiscardBlocks struct {
	Ext4DiscardBlocks *Ext4DiscardBlocksFtraceEvent `protobuf:"bytes,146,opt,name=ext4_discard_blocks,json=ext4DiscardBlocks,oneof"`
}

type FtraceEvent_Ext4DiscardPreallocations struct {
	Ext4DiscardPreallocations *Ext4DiscardPreallocationsFtraceEvent `protobuf:"bytes,147,opt,name=ext4_discard_preallocations,json=ext4DiscardPreallocations,oneof"`
}

type FtraceEvent_Ext4DropInode struct {
	Ext4DropInode *Ext4DropInodeFtraceEvent `protobuf:"bytes,148,opt,name=ext4_drop_inode,json=ext4DropInode,oneof"`
}

type FtraceEvent_Ext4EsCacheExtent struct {
	Ext4EsCacheExtent *Ext4EsCacheExtentFtraceEvent `protobuf:"bytes,149,opt,name=ext4_es_cache_extent,json=ext4EsCacheExtent,oneof"`
}

type FtraceEvent_Ext4EsFindDelayedExtentRangeEnter struct {
	Ext4EsFindDelayedExtentRangeEnter *Ext4EsFindDelayedExtentRangeEnterFtraceEvent `protobuf:"bytes,150,opt,name=ext4_es_find_delayed_extent_range_enter,json=ext4EsFindDelayedExtentRangeEnter,oneof"`
}

type FtraceEvent_Ext4EsFindDelayedExtentRangeExit struct {
	Ext4EsFindDelayedExtentRangeExit *Ext4EsFindDelayedExtentRangeExitFtraceEvent `protobuf:"bytes,151,opt,name=ext4_es_find_delayed_extent_range_exit,json=ext4EsFindDelayedExtentRangeExit,oneof"`
}

type FtraceEvent_Ext4EsInsertExtent struct {
	Ext4EsInsertExtent *Ext4EsInsertExtentFtraceEvent `protobuf:"bytes,152,opt,name=ext4_es_insert_extent,json=ext4EsInsertExtent,oneof"`
}

type FtraceEvent_Ext4EsLookupExtentEnter struct {
	Ext4EsLookupExtentEnter *Ext4EsLookupExtentEnterFtraceEvent `protobuf:"bytes,153,opt,name=ext4_es_lookup_extent_enter,json=ext4EsLookupExtentEnter,oneof"`
}

type FtraceEvent_Ext4EsLookupExtentExit struct {
	Ext4EsLookupExtentExit *Ext4EsLookupExtentExitFtraceEvent `protobuf:"bytes,154,opt,name=ext4_es_lookup_extent_exit,json=ext4EsLookupExtentExit,oneof"`
}

type FtraceEvent_Ext4EsRemoveExtent struct {
	Ext4EsRemoveExtent *Ext4EsRemoveExtentFtraceEvent `protobuf:"bytes,155,opt,name=ext4_es_remove_extent,json=ext4EsRemoveExtent,oneof"`
}

type FtraceEvent_Ext4EsShrink struct {
	Ext4EsShrink *Ext4EsShrinkFtraceEvent `protobuf:"bytes,156,opt,name=ext4_es_shrink,json=ext4EsShrink,oneof"`
}

type FtraceEvent_Ext4EsShrinkCount struct {
	Ext4EsShrinkCount *Ext4EsShrinkCountFtraceEvent `protobuf:"bytes,157,opt,name=ext4_es_shrink_count,json=ext4EsShrinkCount,oneof"`
}

type FtraceEvent_Ext4EsShrinkScanEnter struct {
	Ext4EsShrinkScanEnter *Ext4EsShrinkScanEnterFtraceEvent `protobuf:"bytes,158,opt,name=ext4_es_shrink_scan_enter,json=ext4EsShrinkScanEnter,oneof"`
}

type FtraceEvent_Ext4EsShrinkScanExit struct {
	Ext4EsShrinkScanExit *Ext4EsShrinkScanExitFtraceEvent `protobuf:"bytes,159,opt,name=ext4_es_shrink_scan_exit,json=ext4EsShrinkScanExit,oneof"`
}

type FtraceEvent_Ext4EvictInode struct {
	Ext4EvictInode *Ext4EvictInodeFtraceEvent `protobuf:"bytes,160,opt,name=ext4_evict_inode,json=ext4EvictInode,oneof"`
}

type FtraceEvent_Ext4ExtConvertToInitializedEnter struct {
	Ext4ExtConvertToInitializedEnter *Ext4ExtConvertToInitializedEnterFtraceEvent `protobuf:"bytes,161,opt,name=ext4_ext_convert_to_initialized_enter,json=ext4ExtConvertToInitializedEnter,oneof"`
}

type FtraceEvent_Ext4ExtConvertToInitializedFastpath struct {
	Ext4ExtConvertToInitializedFastpath *Ext4ExtConvertToInitializedFastpathFtraceEvent `protobuf:"bytes,162,opt,name=ext4_ext_convert_to_initialized_fastpath,json=ext4ExtConvertToInitializedFastpath,oneof"`
}

type FtraceEvent_Ext4ExtHandleUnwrittenExtents struct {
	Ext4ExtHandleUnwrittenExtents *Ext4ExtHandleUnwrittenExtentsFtraceEvent `protobuf:"bytes,163,opt,name=ext4_ext_handle_unwritten_extents,json=ext4ExtHandleUnwrittenExtents,oneof"`
}

type FtraceEvent_Ext4ExtInCache struct {
	Ext4ExtInCache *Ext4ExtInCacheFtraceEvent `protobuf:"bytes,164,opt,name=ext4_ext_in_cache,json=ext4ExtInCache,oneof"`
}

type FtraceEvent_Ext4ExtLoadExtent struct {
	Ext4ExtLoadExtent *Ext4ExtLoadExtentFtraceEvent `protobuf:"bytes,165,opt,name=ext4_ext_load_extent,json=ext4ExtLoadExtent,oneof"`
}

type FtraceEvent_Ext4ExtMapBlocksEnter struct {
	Ext4ExtMapBlocksEnter *Ext4ExtMapBlocksEnterFtraceEvent `protobuf:"bytes,166,opt,name=ext4_ext_map_blocks_enter,json=ext4ExtMapBlocksEnter,oneof"`
}

type FtraceEvent_Ext4ExtMapBlocksExit struct {
	Ext4ExtMapBlocksExit *Ext4ExtMapBlocksExitFtraceEvent `protobuf:"bytes,167,opt,name=ext4_ext_map_blocks_exit,json=ext4ExtMapBlocksExit,oneof"`
}

type FtraceEvent_Ext4ExtPutInCache struct {
	Ext4ExtPutInCache *Ext4ExtPutInCacheFtraceEvent `protobuf:"bytes,168,opt,name=ext4_ext_put_in_cache,json=ext4ExtPutInCache,oneof"`
}

type FtraceEvent_Ext4ExtRemoveSpace struct {
	Ext4ExtRemoveSpace *Ext4ExtRemoveSpaceFtraceEvent `protobuf:"bytes,169,opt,name=ext4_ext_remove_space,json=ext4ExtRemoveSpace,oneof"`
}

type FtraceEvent_Ext4ExtRemoveSpaceDone struct {
	Ext4ExtRemoveSpaceDone *Ext4ExtRemoveSpaceDoneFtraceEvent `protobuf:"bytes,170,opt,name=ext4_ext_remove_space_done,json=ext4ExtRemoveSpaceDone,oneof"`
}

type FtraceEvent_Ext4ExtRmIdx struct {
	Ext4ExtRmIdx *Ext4ExtRmIdxFtraceEvent `protobuf:"bytes,171,opt,name=ext4_ext_rm_idx,json=ext4ExtRmIdx,oneof"`
}

type FtraceEvent_Ext4ExtRmLeaf struct {
	Ext4ExtRmLeaf *Ext4ExtRmLeafFtraceEvent `protobuf:"bytes,172,opt,name=ext4_ext_rm_leaf,json=ext4ExtRmLeaf,oneof"`
}

type FtraceEvent_Ext4ExtShowExtent struct {
	Ext4ExtShowExtent *Ext4ExtShowExtentFtraceEvent `protobuf:"bytes,173,opt,name=ext4_ext_show_extent,json=ext4ExtShowExtent,oneof"`
}

type FtraceEvent_Ext4FallocateEnter struct {
	Ext4FallocateEnter *Ext4FallocateEnterFtraceEvent `protobuf:"bytes,174,opt,name=ext4_fallocate_enter,json=ext4FallocateEnter,oneof"`
}

type FtraceEvent_Ext4FallocateExit struct {
	Ext4FallocateExit *Ext4FallocateExitFtraceEvent `protobuf:"bytes,175,opt,name=ext4_fallocate_exit,json=ext4FallocateExit,oneof"`
}

type FtraceEvent_Ext4FindDelallocRange struct {
	Ext4FindDelallocRange *Ext4FindDelallocRangeFtraceEvent `protobuf:"bytes,176,opt,name=ext4_find_delalloc_range,json=ext4FindDelallocRange,oneof"`
}

type FtraceEvent_Ext4Forget struct {
	Ext4Forget *Ext4ForgetFtraceEvent `protobuf:"bytes,177,opt,name=ext4_forget,json=ext4Forget,oneof"`
}

type FtraceEvent_Ext4FreeBlocks struct {
	Ext4FreeBlocks *Ext4FreeBlocksFtraceEvent `protobuf:"bytes,178,opt,name=ext4_free_blocks,json=ext4FreeBlocks,oneof"`
}

type FtraceEvent_Ext4FreeInode struct {
	Ext4FreeInode *Ext4FreeInodeFtraceEvent `protobuf:"bytes,179,opt,name=ext4_free_inode,json=ext4FreeInode,oneof"`
}

type FtraceEvent_Ext4GetImpliedClusterAllocExit struct {
	Ext4GetImpliedClusterAllocExit *Ext4GetImpliedClusterAllocExitFtraceEvent `protobuf:"bytes,180,opt,name=ext4_get_implied_cluster_alloc_exit,json=ext4GetImpliedClusterAllocExit,oneof"`
}

type FtraceEvent_Ext4GetReservedClusterAlloc struct {
	Ext4GetReservedClusterAlloc *Ext4GetReservedClusterAllocFtraceEvent `protobuf:"bytes,181,opt,name=ext4_get_reserved_cluster_alloc,json=ext4GetReservedClusterAlloc,oneof"`
}

type FtraceEvent_Ext4IndMapBlocksEnter struct {
	Ext4IndMapBlocksEnter *Ext4IndMapBlocksEnterFtraceEvent `protobuf:"bytes,182,opt,name=ext4_ind_map_blocks_enter,json=ext4IndMapBlocksEnter,oneof"`
}

type FtraceEvent_Ext4IndMapBlocksExit struct {
	Ext4IndMapBlocksExit *Ext4IndMapBlocksExitFtraceEvent `protobuf:"bytes,183,opt,name=ext4_ind_map_blocks_exit,json=ext4IndMapBlocksExit,oneof"`
}

type FtraceEvent_Ext4InsertRange struct {
	Ext4InsertRange *Ext4InsertRangeFtraceEvent `protobuf:"bytes,184,opt,name=ext4_insert_range,json=ext4InsertRange,oneof"`
}

type FtraceEvent_Ext4Invalidatepage struct {
	Ext4Invalidatepage *Ext4InvalidatepageFtraceEvent `protobuf:"bytes,185,opt,name=ext4_invalidatepage,json=ext4Invalidatepage,oneof"`
}

type FtraceEvent_Ext4JournalStart struct {
	Ext4JournalStart *Ext4JournalStartFtraceEvent `protobuf:"bytes,186,opt,name=ext4_journal_start,json=ext4JournalStart,oneof"`
}

type FtraceEvent_Ext4JournalStartReserved struct {
	Ext4JournalStartReserved *Ext4JournalStartReservedFtraceEvent `protobuf:"bytes,187,opt,name=ext4_journal_start_reserved,json=ext4JournalStartReserved,oneof"`
}

type FtraceEvent_Ext4JournalledInvalidatepage struct {
	Ext4JournalledInvalidatepage *Ext4JournalledInvalidatepageFtraceEvent `protobuf:"bytes,188,opt,name=ext4_journalled_invalidatepage,json=ext4JournalledInvalidatepage,oneof"`
}

type FtraceEvent_Ext4JournalledWriteEnd struct {
	Ext4JournalledWriteEnd *Ext4JournalledWriteEndFtraceEvent `protobuf:"bytes,189,opt,name=ext4_journalled_write_end,json=ext4JournalledWriteEnd,oneof"`
}

type FtraceEvent_Ext4LoadInode struct {
	Ext4LoadInode *Ext4LoadInodeFtraceEvent `protobuf:"bytes,190,opt,name=ext4_load_inode,json=ext4LoadInode,oneof"`
}

type FtraceEvent_Ext4LoadInodeBitmap struct {
	Ext4LoadInodeBitmap *Ext4LoadInodeBitmapFtraceEvent `protobuf:"bytes,191,opt,name=ext4_load_inode_bitmap,json=ext4LoadInodeBitmap,oneof"`
}

type FtraceEvent_Ext4MarkInodeDirty struct {
	Ext4MarkInodeDirty *Ext4MarkInodeDirtyFtraceEvent `protobuf:"bytes,192,opt,name=ext4_mark_inode_dirty,json=ext4MarkInodeDirty,oneof"`
}

type FtraceEvent_Ext4MbBitmapLoad struct {
	Ext4MbBitmapLoad *Ext4MbBitmapLoadFtraceEvent `protobuf:"bytes,193,opt,name=ext4_mb_bitmap_load,json=ext4MbBitmapLoad,oneof"`
}

type FtraceEvent_Ext4MbBuddyBitmapLoad struct {
	Ext4MbBuddyBitmapLoad *Ext4MbBuddyBitmapLoadFtraceEvent `protobuf:"bytes,194,opt,name=ext4_mb_buddy_bitmap_load,json=ext4MbBuddyBitmapLoad,oneof"`
}

type FtraceEvent_Ext4MbDiscardPreallocations struct {
	Ext4MbDiscardPreallocations *Ext4MbDiscardPreallocationsFtraceEvent `protobuf:"bytes,195,opt,name=ext4_mb_discard_preallocations,json=ext4MbDiscardPreallocations,oneof"`
}

type FtraceEvent_Ext4MbNewGroupPa struct {
	Ext4MbNewGroupPa *Ext4MbNewGroupPaFtraceEvent `protobuf:"bytes,196,opt,name=ext4_mb_new_group_pa,json=ext4MbNewGroupPa,oneof"`
}

type FtraceEvent_Ext4MbNewInodePa struct {
	Ext4MbNewInodePa *Ext4MbNewInodePaFtraceEvent `protobuf:"bytes,197,opt,name=ext4_mb_new_inode_pa,json=ext4MbNewInodePa,oneof"`
}

type FtraceEvent_Ext4MbReleaseGroupPa struct {
	Ext4MbReleaseGroupPa *Ext4MbReleaseGroupPaFtraceEvent `protobuf:"bytes,198,opt,name=ext4_mb_release_group_pa,json=ext4MbReleaseGroupPa,oneof"`
}

type FtraceEvent_Ext4MbReleaseInodePa struct {
	Ext4MbReleaseInodePa *Ext4MbReleaseInodePaFtraceEvent `protobuf:"bytes,199,opt,name=ext4_mb_release_inode_pa,json=ext4MbReleaseInodePa,oneof"`
}

type FtraceEvent_Ext4MballocAlloc struct {
	Ext4MballocAlloc *Ext4MballocAllocFtraceEvent `protobuf:"bytes,200,opt,name=ext4_mballoc_alloc,json=ext4MballocAlloc,oneof"`
}

type FtraceEvent_Ext4MballocDiscard struct {
	Ext4MballocDiscard *Ext4MballocDiscardFtraceEvent `protobuf:"bytes,201,opt,name=ext4_mballoc_discard,json=ext4MballocDiscard,oneof"`
}

type FtraceEvent_Ext4MballocFree struct {
	Ext4MballocFree *Ext4MballocFreeFtraceEvent `protobuf:"bytes,202,opt,name=ext4_mballoc_free,json=ext4MballocFree,oneof"`
}

type FtraceEvent_Ext4MballocPrealloc struct {
	Ext4MballocPrealloc *Ext4MballocPreallocFtraceEvent `protobuf:"bytes,203,opt,name=ext4_mballoc_prealloc,json=ext4MballocPrealloc,oneof"`
}

type FtraceEvent_Ext4OtherInodeUpdateTime struct {
	Ext4OtherInodeUpdateTime *Ext4OtherInodeUpdateTimeFtraceEvent `protobuf:"bytes,204,opt,name=ext4_other_inode_update_time,json=ext4OtherInodeUpdateTime,oneof"`
}

type FtraceEvent_Ext4PunchHole struct {
	Ext4PunchHole *Ext4PunchHoleFtraceEvent `protobuf:"bytes,205,opt,name=ext4_punch_hole,json=ext4PunchHole,oneof"`
}

type FtraceEvent_Ext4ReadBlockBitmapLoad struct {
	Ext4ReadBlockBitmapLoad *Ext4ReadBlockBitmapLoadFtraceEvent `protobuf:"bytes,206,opt,name=ext4_read_block_bitmap_load,json=ext4ReadBlockBitmapLoad,oneof"`
}

type FtraceEvent_Ext4Readpage struct {
	Ext4Readpage *Ext4ReadpageFtraceEvent `protobuf:"bytes,207,opt,name=ext4_readpage,json=ext4Readpage,oneof"`
}

type FtraceEvent_Ext4Releasepage struct {
	Ext4Releasepage *Ext4ReleasepageFtraceEvent `protobuf:"bytes,208,opt,name=ext4_releasepage,json=ext4Releasepage,oneof"`
}

type FtraceEvent_Ext4RemoveBlocks struct {
	Ext4RemoveBlocks *Ext4RemoveBlocksFtraceEvent `protobuf:"bytes,209,opt,name=ext4_remove_blocks,json=ext4RemoveBlocks,oneof"`
}

type FtraceEvent_Ext4RequestBlocks struct {
	Ext4RequestBlocks *Ext4RequestBlocksFtraceEvent `protobuf:"bytes,210,opt,name=ext4_request_blocks,json=ext4RequestBlocks,oneof"`
}

type FtraceEvent_Ext4RequestInode struct {
	Ext4RequestInode *Ext4RequestInodeFtraceEvent `protobuf:"bytes,211,opt,name=ext4_request_inode,json=ext4RequestInode,oneof"`
}

type FtraceEvent_Ext4SyncFs struct {
	Ext4SyncFs *Ext4SyncFsFtraceEvent `protobuf:"bytes,212,opt,name=ext4_sync_fs,json=ext4SyncFs,oneof"`
}

type FtraceEvent_Ext4TrimAllFree struct {
	Ext4TrimAllFree *Ext4TrimAllFreeFtraceEvent `protobuf:"bytes,213,opt,name=ext4_trim_all_free,json=ext4TrimAllFree,oneof"`
}

type FtraceEvent_Ext4TrimExtent struct {
	Ext4TrimExtent *Ext4TrimExtentFtraceEvent `protobuf:"bytes,214,opt,name=ext4_trim_extent,json=ext4TrimExtent,oneof"`
}

type FtraceEvent_Ext4TruncateEnter struct {
	Ext4TruncateEnter *Ext4TruncateEnterFtraceEvent `protobuf:"bytes,215,opt,name=ext4_truncate_enter,json=ext4TruncateEnter,oneof"`
}

type FtraceEvent_Ext4TruncateExit struct {
	Ext4TruncateExit *Ext4TruncateExitFtraceEvent `protobuf:"bytes,216,opt,name=ext4_truncate_exit,json=ext4TruncateExit,oneof"`
}

type FtraceEvent_Ext4UnlinkEnter struct {
	Ext4UnlinkEnter *Ext4UnlinkEnterFtraceEvent `protobuf:"bytes,217,opt,name=ext4_unlink_enter,json=ext4UnlinkEnter,oneof"`
}

type FtraceEvent_Ext4UnlinkExit struct {
	Ext4UnlinkExit *Ext4UnlinkExitFtraceEvent `protobuf:"bytes,218,opt,name=ext4_unlink_exit,json=ext4UnlinkExit,oneof"`
}

type FtraceEvent_Ext4WriteBegin struct {
	Ext4WriteBegin *Ext4WriteBeginFtraceEvent `protobuf:"bytes,219,opt,name=ext4_write_begin,json=ext4WriteBegin,oneof"`
}

type FtraceEvent_Ext4WriteEnd struct {
	// removed field with id 220;
	// removed field with id 221;
	// removed field with id 222;
	// removed field with id 223;
	// removed field with id 224;
	// removed field with id 225;
	// removed field with id 226;
	// removed field with id 227;
	// removed field with id 228;
	// removed field with id 229;
	Ext4WriteEnd *Ext4WriteEndFtraceEvent `protobuf:"bytes,230,opt,name=ext4_write_end,json=ext4WriteEnd,oneof"`
}

type FtraceEvent_Ext4Writepage struct {
	Ext4Writepage *Ext4WritepageFtraceEvent `protobuf:"bytes,231,opt,name=ext4_writepage,json=ext4Writepage,oneof"`
}

type FtraceEvent_Ext4Writepages struct {
	Ext4Writepages *Ext4WritepagesFtraceEvent `protobuf:"bytes,232,opt,name=ext4_writepages,json=ext4Writepages,oneof"`
}

type FtraceEvent_Ext4WritepagesResult struct {
	Ext4WritepagesResult *Ext4WritepagesResultFtraceEvent `protobuf:"bytes,233,opt,name=ext4_writepages_result,json=ext4WritepagesResult,oneof"`
}

type FtraceEvent_Ext4ZeroRange struct {
	Ext4ZeroRange *Ext4ZeroRangeFtraceEvent `protobuf:"bytes,234,opt,name=ext4_zero_range,json=ext4ZeroRange,oneof"`
}

type FtraceEvent_TaskNewtask struct {
	TaskNewtask *TaskNewtaskFtraceEvent `protobuf:"bytes,235,opt,name=task_newtask,json=taskNewtask,oneof"`
}

type FtraceEvent_TaskRename struct {
	TaskRename *TaskRenameFtraceEvent `protobuf:"bytes,236,opt,name=task_rename,json=taskRename,oneof"`
}

type FtraceEvent_SchedProcessExec struct {
	SchedProcessExec *SchedProcessExecFtraceEvent `protobuf:"bytes,237,opt,name=sched_process_exec,json=schedProcessExec,oneof"`
}

type FtraceEvent_SchedProcessExit struct {
	SchedProcessExit *SchedProcessExitFtraceEvent `protobuf:"bytes,238,opt,name=sched_process_exit,json=schedProcessExit,oneof"`
}

type FtraceEvent_SchedProcessFork struct {
	SchedProcessFork *SchedProcessForkFtraceEvent `protobuf:"bytes,239,opt,name=sched_process_fork,json=schedProcessFork,oneof"`
}

type FtraceEvent_SchedProcessFree struct {
	SchedProcessFree *SchedProcessFreeFtraceEvent `protobuf:"bytes,240,opt,name=sched_process_free,json=schedProcessFree,oneof"`
}

type FtraceEvent_SchedProcessHang struct {
	SchedProcessHang *SchedProcessHangFtraceEvent `protobuf:"bytes,241,opt,name=sched_process_hang,json=schedProcessHang,oneof"`
}

type FtraceEvent_SchedProcessWait struct {
	SchedProcessWait *SchedProcessWaitFtraceEvent `protobuf:"bytes,242,opt,name=sched_process_wait,json=schedProcessWait,oneof"`
}

type FtraceEvent_F2FsDoSubmitBio struct {
	F2FsDoSubmitBio *F2FsDoSubmitBioFtraceEvent `protobuf:"bytes,243,opt,name=f2fs_do_submit_bio,json=f2fsDoSubmitBio,oneof"`
}

type FtraceEvent_F2FsEvictInode struct {
	F2FsEvictInode *F2FsEvictInodeFtraceEvent `protobuf:"bytes,244,opt,name=f2fs_evict_inode,json=f2fsEvictInode,oneof"`
}

type FtraceEvent_F2FsFallocate struct {
	F2FsFallocate *F2FsFallocateFtraceEvent `protobuf:"bytes,245,opt,name=f2fs_fallocate,json=f2fsFallocate,oneof"`
}

type FtraceEvent_F2FsGetDataBlock struct {
	F2FsGetDataBlock *F2FsGetDataBlockFtraceEvent `protobuf:"bytes,246,opt,name=f2fs_get_data_block,json=f2fsGetDataBlock,oneof"`
}

type FtraceEvent_F2FsGetVictim struct {
	F2FsGetVictim *F2FsGetVictimFtraceEvent `protobuf:"bytes,247,opt,name=f2fs_get_victim,json=f2fsGetVictim,oneof"`
}

type FtraceEvent_F2FsIget struct {
	F2FsIget *F2FsIgetFtraceEvent `protobuf:"bytes,248,opt,name=f2fs_iget,json=f2fsIget,oneof"`
}

type FtraceEvent_F2FsIgetExit struct {
	F2FsIgetExit *F2FsIgetExitFtraceEvent `protobuf:"bytes,249,opt,name=f2fs_iget_exit,json=f2fsIgetExit,oneof"`
}

type FtraceEvent_F2FsNewInode struct {
	F2FsNewInode *F2FsNewInodeFtraceEvent `protobuf:"bytes,250,opt,name=f2fs_new_inode,json=f2fsNewInode,oneof"`
}

type FtraceEvent_F2FsReadpage struct {
	F2FsReadpage *F2FsReadpageFtraceEvent `protobuf:"bytes,251,opt,name=f2fs_readpage,json=f2fsReadpage,oneof"`
}

type FtraceEvent_F2FsReserveNewBlock struct {
	F2FsReserveNewBlock *F2FsReserveNewBlockFtraceEvent `protobuf:"bytes,252,opt,name=f2fs_reserve_new_block,json=f2fsReserveNewBlock,oneof"`
}

type FtraceEvent_F2FsSetPageDirty struct {
	F2FsSetPageDirty *F2FsSetPageDirtyFtraceEvent `protobuf:"bytes,253,opt,name=f2fs_set_page_dirty,json=f2fsSetPageDirty,oneof"`
}

type FtraceEvent_F2FsSubmitWritePage struct {
	F2FsSubmitWritePage *F2FsSubmitWritePageFtraceEvent `protobuf:"bytes,254,opt,name=f2fs_submit_write_page,json=f2fsSubmitWritePage,oneof"`
}

type FtraceEvent_F2FsSyncFileEnter struct {
	F2FsSyncFileEnter *F2FsSyncFileEnterFtraceEvent `protobuf:"bytes,255,opt,name=f2fs_sync_file_enter,json=f2fsSyncFileEnter,oneof"`
}

type FtraceEvent_F2FsSyncFileExit struct {
	F2FsSyncFileExit *F2FsSyncFileExitFtraceEvent `protobuf:"bytes,256,opt,name=f2fs_sync_file_exit,json=f2fsSyncFileExit,oneof"`
}

type FtraceEvent_F2FsSyncFs struct {
	F2FsSyncFs *F2FsSyncFsFtraceEvent `protobuf:"bytes,257,opt,name=f2fs_sync_fs,json=f2fsSyncFs,oneof"`
}

type FtraceEvent_F2FsTruncate struct {
	F2FsTruncate *F2FsTruncateFtraceEvent `protobuf:"bytes,258,opt,name=f2fs_truncate,json=f2fsTruncate,oneof"`
}

type FtraceEvent_F2FsTruncateBlocksEnter struct {
	F2FsTruncateBlocksEnter *F2FsTruncateBlocksEnterFtraceEvent `protobuf:"bytes,259,opt,name=f2fs_truncate_blocks_enter,json=f2fsTruncateBlocksEnter,oneof"`
}

type FtraceEvent_F2FsTruncateBlocksExit struct {
	F2FsTruncateBlocksExit *F2FsTruncateBlocksExitFtraceEvent `protobuf:"bytes,260,opt,name=f2fs_truncate_blocks_exit,json=f2fsTruncateBlocksExit,oneof"`
}

type FtraceEvent_F2FsTruncateDataBlocksRange struct {
	F2FsTruncateDataBlocksRange *F2FsTruncateDataBlocksRangeFtraceEvent `protobuf:"bytes,261,opt,name=f2fs_truncate_data_blocks_range,json=f2fsTruncateDataBlocksRange,oneof"`
}

type FtraceEvent_F2FsTruncateInodeBlocksEnter struct {
	F2FsTruncateInodeBlocksEnter *F2FsTruncateInodeBlocksEnterFtraceEvent `protobuf:"bytes,262,opt,name=f2fs_truncate_inode_blocks_enter,json=f2fsTruncateInodeBlocksEnter,oneof"`
}

type FtraceEvent_F2FsTruncateInodeBlocksExit struct {
	F2FsTruncateInodeBlocksExit *F2FsTruncateInodeBlocksExitFtraceEvent `protobuf:"bytes,263,opt,name=f2fs_truncate_inode_blocks_exit,json=f2fsTruncateInodeBlocksExit,oneof"`
}

type FtraceEvent_F2FsTruncateNode struct {
	F2FsTruncateNode *F2FsTruncateNodeFtraceEvent `protobuf:"bytes,264,opt,name=f2fs_truncate_node,json=f2fsTruncateNode,oneof"`
}

type FtraceEvent_F2FsTruncateNodesEnter struct {
	F2FsTruncateNodesEnter *F2FsTruncateNodesEnterFtraceEvent `protobuf:"bytes,265,opt,name=f2fs_truncate_nodes_enter,json=f2fsTruncateNodesEnter,oneof"`
}

type FtraceEvent_F2FsTruncateNodesExit struct {
	F2FsTruncateNodesExit *F2FsTruncateNodesExitFtraceEvent `protobuf:"bytes,266,opt,name=f2fs_truncate_nodes_exit,json=f2fsTruncateNodesExit,oneof"`
}

type FtraceEvent_F2FsTruncatePartialNodes struct {
	F2FsTruncatePartialNodes *F2FsTruncatePartialNodesFtraceEvent `protobuf:"bytes,267,opt,name=f2fs_truncate_partial_nodes,json=f2fsTruncatePartialNodes,oneof"`
}

type FtraceEvent_F2FsUnlinkEnter struct {
	F2FsUnlinkEnter *F2FsUnlinkEnterFtraceEvent `protobuf:"bytes,268,opt,name=f2fs_unlink_enter,json=f2fsUnlinkEnter,oneof"`
}

type FtraceEvent_F2FsUnlinkExit struct {
	F2FsUnlinkExit *F2FsUnlinkExitFtraceEvent `protobuf:"bytes,269,opt,name=f2fs_unlink_exit,json=f2fsUnlinkExit,oneof"`
}

type FtraceEvent_F2FsVmPageMkwrite struct {
	F2FsVmPageMkwrite *F2FsVmPageMkwriteFtraceEvent `protobuf:"bytes,270,opt,name=f2fs_vm_page_mkwrite,json=f2fsVmPageMkwrite,oneof"`
}

type FtraceEvent_F2FsWriteBegin struct {
	F2FsWriteBegin *F2FsWriteBeginFtraceEvent `protobuf:"bytes,271,opt,name=f2fs_write_begin,json=f2fsWriteBegin,oneof"`
}

type FtraceEvent_F2FsWriteCheckpoint struct {
	F2FsWriteCheckpoint *F2FsWriteCheckpointFtraceEvent `protobuf:"bytes,272,opt,name=f2fs_write_checkpoint,json=f2fsWriteCheckpoint,oneof"`
}

type FtraceEvent_F2FsWriteEnd struct {
	F2FsWriteEnd *F2FsWriteEndFtraceEvent `protobuf:"bytes,273,opt,name=f2fs_write_end,json=f2fsWriteEnd,oneof"`
}

type FtraceEvent_AllocPagesIommuEnd struct {
	AllocPagesIommuEnd *AllocPagesIommuEndFtraceEvent `protobuf:"bytes,274,opt,name=alloc_pages_iommu_end,json=allocPagesIommuEnd,oneof"`
}

type FtraceEvent_AllocPagesIommuFail struct {
	AllocPagesIommuFail *AllocPagesIommuFailFtraceEvent `protobuf:"bytes,275,opt,name=alloc_pages_iommu_fail,json=allocPagesIommuFail,oneof"`
}

type FtraceEvent_AllocPagesIommuStart struct {
	AllocPagesIommuStart *AllocPagesIommuStartFtraceEvent `protobuf:"bytes,276,opt,name=alloc_pages_iommu_start,json=allocPagesIommuStart,oneof"`
}

type FtraceEvent_AllocPagesSysEnd struct {
	AllocPagesSysEnd *AllocPagesSysEndFtraceEvent `protobuf:"bytes,277,opt,name=alloc_pages_sys_end,json=allocPagesSysEnd,oneof"`
}

type FtraceEvent_AllocPagesSysFail struct {
	AllocPagesSysFail *AllocPagesSysFailFtraceEvent `protobuf:"bytes,278,opt,name=alloc_pages_sys_fail,json=allocPagesSysFail,oneof"`
}

type FtraceEvent_AllocPagesSysStart struct {
	AllocPagesSysStart *AllocPagesSysStartFtraceEvent `protobuf:"bytes,279,opt,name=alloc_pages_sys_start,json=allocPagesSysStart,oneof"`
}

type FtraceEvent_DmaAllocContiguousRetry struct {
	DmaAllocContiguousRetry *DmaAllocContiguousRetryFtraceEvent `protobuf:"bytes,280,opt,name=dma_alloc_contiguous_retry,json=dmaAllocContiguousRetry,oneof"`
}

type FtraceEvent_IommuMapRange struct {
	IommuMapRange *IommuMapRangeFtraceEvent `protobuf:"bytes,281,opt,name=iommu_map_range,json=iommuMapRange,oneof"`
}

type FtraceEvent_IommuSecPtblMapRangeEnd struct {
	IommuSecPtblMapRangeEnd *IommuSecPtblMapRangeEndFtraceEvent `protobuf:"bytes,282,opt,name=iommu_sec_ptbl_map_range_end,json=iommuSecPtblMapRangeEnd,oneof"`
}

type FtraceEvent_IommuSecPtblMapRangeStart struct {
	IommuSecPtblMapRangeStart *IommuSecPtblMapRangeStartFtraceEvent `protobuf:"bytes,283,opt,name=iommu_sec_ptbl_map_range_start,json=iommuSecPtblMapRangeStart,oneof"`
}

type FtraceEvent_IonAllocBufferEnd struct {
	IonAllocBufferEnd *IonAllocBufferEndFtraceEvent `protobuf:"bytes,284,opt,name=ion_alloc_buffer_end,json=ionAllocBufferEnd,oneof"`
}

type FtraceEvent_IonAllocBufferFail struct {
	IonAllocBufferFail *IonAllocBufferFailFtraceEvent `protobuf:"bytes,285,opt,name=ion_alloc_buffer_fail,json=ionAllocBufferFail,oneof"`
}

type FtraceEvent_IonAllocBufferFallback struct {
	IonAllocBufferFallback *IonAllocBufferFallbackFtraceEvent `protobuf:"bytes,286,opt,name=ion_alloc_buffer_fallback,json=ionAllocBufferFallback,oneof"`
}

type FtraceEvent_IonAllocBufferStart struct {
	IonAllocBufferStart *IonAllocBufferStartFtraceEvent `protobuf:"bytes,287,opt,name=ion_alloc_buffer_start,json=ionAllocBufferStart,oneof"`
}

type FtraceEvent_IonCpAllocRetry struct {
	IonCpAllocRetry *IonCpAllocRetryFtraceEvent `protobuf:"bytes,288,opt,name=ion_cp_alloc_retry,json=ionCpAllocRetry,oneof"`
}

type FtraceEvent_IonCpSecureBufferEnd struct {
	IonCpSecureBufferEnd *IonCpSecureBufferEndFtraceEvent `protobuf:"bytes,289,opt,name=ion_cp_secure_buffer_end,json=ionCpSecureBufferEnd,oneof"`
}

type FtraceEvent_IonCpSecureBufferStart struct {
	IonCpSecureBufferStart *IonCpSecureBufferStartFtraceEvent `protobuf:"bytes,290,opt,name=ion_cp_secure_buffer_start,json=ionCpSecureBufferStart,oneof"`
}

type FtraceEvent_IonPrefetching struct {
	IonPrefetching *IonPrefetchingFtraceEvent `protobuf:"bytes,291,opt,name=ion_prefetching,json=ionPrefetching,oneof"`
}

type FtraceEvent_IonSecureCmaAddToPoolEnd struct {
	IonSecureCmaAddToPoolEnd *IonSecureCmaAddToPoolEndFtraceEvent `protobuf:"bytes,292,opt,name=ion_secure_cma_add_to_pool_end,json=ionSecureCmaAddToPoolEnd,oneof"`
}

type FtraceEvent_IonSecureCmaAddToPoolStart struct {
	IonSecureCmaAddToPoolStart *IonSecureCmaAddToPoolStartFtraceEvent `protobuf:"bytes,293,opt,name=ion_secure_cma_add_to_pool_start,json=ionSecureCmaAddToPoolStart,oneof"`
}

type FtraceEvent_IonSecureCmaAllocateEnd struct {
	IonSecureCmaAllocateEnd *IonSecureCmaAllocateEndFtraceEvent `protobuf:"bytes,294,opt,name=ion_secure_cma_allocate_end,json=ionSecureCmaAllocateEnd,oneof"`
}

type FtraceEvent_IonSecureCmaAllocateStart struct {
	IonSecureCmaAllocateStart *IonSecureCmaAllocateStartFtraceEvent `protobuf:"bytes,295,opt,name=ion_secure_cma_allocate_start,json=ionSecureCmaAllocateStart,oneof"`
}

type FtraceEvent_IonSecureCmaShrinkPoolEnd struct {
	IonSecureCmaShrinkPoolEnd *IonSecureCmaShrinkPoolEndFtraceEvent `protobuf:"bytes,296,opt,name=ion_secure_cma_shrink_pool_end,json=ionSecureCmaShrinkPoolEnd,oneof"`
}

type FtraceEvent_IonSecureCmaShrinkPoolStart struct {
	IonSecureCmaShrinkPoolStart *IonSecureCmaShrinkPoolStartFtraceEvent `protobuf:"bytes,297,opt,name=ion_secure_cma_shrink_pool_start,json=ionSecureCmaShrinkPoolStart,oneof"`
}

type FtraceEvent_Kfree struct {
	Kfree *KfreeFtraceEvent `protobuf:"bytes,298,opt,name=kfree,oneof"`
}

type FtraceEvent_Kmalloc struct {
	Kmalloc *KmallocFtraceEvent `protobuf:"bytes,299,opt,name=kmalloc,oneof"`
}

type FtraceEvent_KmallocNode struct {
	KmallocNode *KmallocNodeFtraceEvent `protobuf:"bytes,300,opt,name=kmalloc_node,json=kmallocNode,oneof"`
}

type FtraceEvent_KmemCacheAlloc struct {
	KmemCacheAlloc *KmemCacheAllocFtraceEvent `protobuf:"bytes,301,opt,name=kmem_cache_alloc,json=kmemCacheAlloc,oneof"`
}

type FtraceEvent_KmemCacheAllocNode struct {
	KmemCacheAllocNode *KmemCacheAllocNodeFtraceEvent `protobuf:"bytes,302,opt,name=kmem_cache_alloc_node,json=kmemCacheAllocNode,oneof"`
}

type FtraceEvent_KmemCacheFree struct {
	KmemCacheFree *KmemCacheFreeFtraceEvent `protobuf:"bytes,303,opt,name=kmem_cache_free,json=kmemCacheFree,oneof"`
}

type FtraceEvent_MigratePagesEnd struct {
	MigratePagesEnd *MigratePagesEndFtraceEvent `protobuf:"bytes,304,opt,name=migrate_pages_end,json=migratePagesEnd,oneof"`
}

type FtraceEvent_MigratePagesStart struct {
	MigratePagesStart *MigratePagesStartFtraceEvent `protobuf:"bytes,305,opt,name=migrate_pages_start,json=migratePagesStart,oneof"`
}

type FtraceEvent_MigrateRetry struct {
	MigrateRetry *MigrateRetryFtraceEvent `protobuf:"bytes,306,opt,name=migrate_retry,json=migrateRetry,oneof"`
}

type FtraceEvent_MmPageAlloc struct {
	MmPageAlloc *MmPageAllocFtraceEvent `protobuf:"bytes,307,opt,name=mm_page_alloc,json=mmPageAlloc,oneof"`
}

type FtraceEvent_MmPageAllocExtfrag struct {
	MmPageAllocExtfrag *MmPageAllocExtfragFtraceEvent `protobuf:"bytes,308,opt,name=mm_page_alloc_extfrag,json=mmPageAllocExtfrag,oneof"`
}

type FtraceEvent_MmPageAllocZoneLocked struct {
	MmPageAllocZoneLocked *MmPageAllocZoneLockedFtraceEvent `protobuf:"bytes,309,opt,name=mm_page_alloc_zone_locked,json=mmPageAllocZoneLocked,oneof"`
}

type FtraceEvent_MmPageFree struct {
	MmPageFree *MmPageFreeFtraceEvent `protobuf:"bytes,310,opt,name=mm_page_free,json=mmPageFree,oneof"`
}

type FtraceEvent_MmPageFreeBatched struct {
	MmPageFreeBatched *MmPageFreeBatchedFtraceEvent `protobuf:"bytes,311,opt,name=mm_page_free_batched,json=mmPageFreeBatched,oneof"`
}

type FtraceEvent_MmPagePcpuDrain struct {
	MmPagePcpuDrain *MmPagePcpuDrainFtraceEvent `protobuf:"bytes,312,opt,name=mm_page_pcpu_drain,json=mmPagePcpuDrain,oneof"`
}

type FtraceEvent_RssStat struct {
	RssStat *RssStatFtraceEvent `protobuf:"bytes,313,opt,name=rss_stat,json=rssStat,oneof"`
}

type FtraceEvent_IonHeapShrink struct {
	IonHeapShrink *IonHeapShrinkFtraceEvent `protobuf:"bytes,314,opt,name=ion_heap_shrink,json=ionHeapShrink,oneof"`
}

type FtraceEvent_IonHeapGrow struct {
	IonHeapGrow *IonHeapGrowFtraceEvent `protobuf:"bytes,315,opt,name=ion_heap_grow,json=ionHeapGrow,oneof"`
}

type FtraceEvent_FenceInit struct {
	FenceInit *FenceInitFtraceEvent `protobuf:"bytes,316,opt,name=fence_init,json=fenceInit,oneof"`
}

type FtraceEvent_FenceDestroy struct {
	FenceDestroy *FenceDestroyFtraceEvent `protobuf:"bytes,317,opt,name=fence_destroy,json=fenceDestroy,oneof"`
}

type FtraceEvent_FenceEnableSignal struct {
	FenceEnableSignal *FenceEnableSignalFtraceEvent `protobuf:"bytes,318,opt,name=fence_enable_signal,json=fenceEnableSignal,oneof"`
}

type FtraceEvent_FenceSignaled struct {
	FenceSignaled *FenceSignaledFtraceEvent `protobuf:"bytes,319,opt,name=fence_signaled,json=fenceSignaled,oneof"`
}

type FtraceEvent_ClkEnable struct {
	ClkEnable *ClkEnableFtraceEvent `protobuf:"bytes,320,opt,name=clk_enable,json=clkEnable,oneof"`
}

type FtraceEvent_ClkDisable struct {
	ClkDisable *ClkDisableFtraceEvent `protobuf:"bytes,321,opt,name=clk_disable,json=clkDisable,oneof"`
}

type FtraceEvent_ClkSetRate struct {
	ClkSetRate *ClkSetRateFtraceEvent `protobuf:"bytes,322,opt,name=clk_set_rate,json=clkSetRate,oneof"`
}

type FtraceEvent_BinderTransactionAllocBuf struct {
	BinderTransactionAllocBuf *BinderTransactionAllocBufFtraceEvent `protobuf:"bytes,323,opt,name=binder_transaction_alloc_buf,json=binderTransactionAllocBuf,oneof"`
}

type FtraceEvent_SignalDeliver struct {
	SignalDeliver *SignalDeliverFtraceEvent `protobuf:"bytes,324,opt,name=signal_deliver,json=signalDeliver,oneof"`
}

type FtraceEvent_SignalGenerate struct {
	SignalGenerate *SignalGenerateFtraceEvent `protobuf:"bytes,325,opt,name=signal_generate,json=signalGenerate,oneof"`
}

type FtraceEvent_OomScoreAdjUpdate struct {
	OomScoreAdjUpdate *OomScoreAdjUpdateFtraceEvent `protobuf:"bytes,326,opt,name=oom_score_adj_update,json=oomScoreAdjUpdate,oneof"`
}

type FtraceEvent_Generic struct {
	Generic *GenericFtraceEvent `protobuf:"bytes,327,opt,name=generic,oneof"`
}

type FtraceEvent_MmEventRecord struct {
	MmEventRecord *MmEventRecordFtraceEvent `protobuf:"bytes,328,opt,name=mm_event_record,json=mmEventRecord,oneof"`
}

type FtraceEvent_SysEnter struct {
	SysEnter *SysEnterFtraceEvent `protobuf:"bytes,329,opt,name=sys_enter,json=sysEnter,oneof"`
}

type FtraceEvent_SysExit struct {
	SysExit *SysExitFtraceEvent `protobuf:"bytes,330,opt,name=sys_exit,json=sysExit,oneof"`
}

type FtraceEvent_Zero struct {
	Zero *ZeroFtraceEvent `protobuf:"bytes,331,opt,name=zero,oneof"`
}

type FtraceEvent_GpuFrequency struct {
	GpuFrequency *GpuFrequencyFtraceEvent `protobuf:"bytes,332,opt,name=gpu_frequency,json=gpuFrequency,oneof"`
}

type FtraceEvent_SdeTracingMarkWrite struct {
	SdeTracingMarkWrite *SdeTracingMarkWriteFtraceEvent `protobuf:"bytes,333,opt,name=sde_tracing_mark_write,json=sdeTracingMarkWrite,oneof"`
}

type FtraceEvent_MarkVictim struct {
	MarkVictim *MarkVictimFtraceEvent `protobuf:"bytes,334,opt,name=mark_victim,json=markVictim,oneof"`
}

type FtraceEvent_IonStat struct {
	IonStat *IonStatFtraceEvent `protobuf:"bytes,335,opt,name=ion_stat,json=ionStat,oneof"`
}

type FtraceEvent_IonBufferCreate struct {
	IonBufferCreate *IonBufferCreateFtraceEvent `protobuf:"bytes,336,opt,name=ion_buffer_create,json=ionBufferCreate,oneof"`
}

type FtraceEvent_IonBufferDestroy struct {
	IonBufferDestroy *IonBufferDestroyFtraceEvent `protobuf:"bytes,337,opt,name=ion_buffer_destroy,json=ionBufferDestroy,oneof"`
}

type FtraceEvent_ScmCallStart struct {
	ScmCallStart *ScmCallStartFtraceEvent `protobuf:"bytes,338,opt,name=scm_call_start,json=scmCallStart,oneof"`
}

type FtraceEvent_ScmCallEnd struct {
	ScmCallEnd *ScmCallEndFtraceEvent `protobuf:"bytes,339,opt,name=scm_call_end,json=scmCallEnd,oneof"`
}

type FtraceEvent_GpuMemTotal struct {
	GpuMemTotal *GpuMemTotalFtraceEvent `protobuf:"bytes,340,opt,name=gpu_mem_total,json=gpuMemTotal,oneof"`
}

type FtraceEvent_ThermalTemperature struct {
	ThermalTemperature *ThermalTemperatureFtraceEvent `protobuf:"bytes,341,opt,name=thermal_temperature,json=thermalTemperature,oneof"`
}

type FtraceEvent_CdevUpdate struct {
	CdevUpdate *CdevUpdateFtraceEvent `protobuf:"bytes,342,opt,name=cdev_update,json=cdevUpdate,oneof"`
}

type FtraceEvent_CpuhpExit struct {
	CpuhpExit *CpuhpExitFtraceEvent `protobuf:"bytes,343,opt,name=cpuhp_exit,json=cpuhpExit,oneof"`
}

type FtraceEvent_CpuhpMultiEnter struct {
	CpuhpMultiEnter *CpuhpMultiEnterFtraceEvent `protobuf:"bytes,344,opt,name=cpuhp_multi_enter,json=cpuhpMultiEnter,oneof"`
}

type FtraceEvent_CpuhpEnter struct {
	CpuhpEnter *CpuhpEnterFtraceEvent `protobuf:"bytes,345,opt,name=cpuhp_enter,json=cpuhpEnter,oneof"`
}

type FtraceEvent_CpuhpLatency struct {
	CpuhpLatency *CpuhpLatencyFtraceEvent `protobuf:"bytes,346,opt,name=cpuhp_latency,json=cpuhpLatency,oneof"`
}

type FtraceEvent_FastrpcDmaStat struct {
	FastrpcDmaStat *FastrpcDmaStatFtraceEvent `protobuf:"bytes,347,opt,name=fastrpc_dma_stat,json=fastrpcDmaStat,oneof"`
}

type FtraceEvent_DpuTracingMarkWrite struct {
	DpuTracingMarkWrite *DpuTracingMarkWriteFtraceEvent `protobuf:"bytes,348,opt,name=dpu_tracing_mark_write,json=dpuTracingMarkWrite,oneof"`
}

type FtraceEvent_G2DTracingMarkWrite struct {
	G2DTracingMarkWrite *G2DTracingMarkWriteFtraceEvent `protobuf:"bytes,349,opt,name=g2d_tracing_mark_write,json=g2dTracingMarkWrite,oneof"`
}

func (*FtraceEvent_Print) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedSwitch) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuFrequency) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuFrequencyLimits) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuIdle) isFtraceEvent_Event() {}

func (*FtraceEvent_ClockEnable) isFtraceEvent_Event() {}

func (*FtraceEvent_ClockDisable) isFtraceEvent_Event() {}

func (*FtraceEvent_ClockSetRate) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedWakeup) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedBlockedReason) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedCpuHotplug) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedWaking) isFtraceEvent_Event() {}

func (*FtraceEvent_IpiEntry) isFtraceEvent_Event() {}

func (*FtraceEvent_IpiExit) isFtraceEvent_Event() {}

func (*FtraceEvent_IpiRaise) isFtraceEvent_Event() {}

func (*FtraceEvent_SoftirqEntry) isFtraceEvent_Event() {}

func (*FtraceEvent_SoftirqExit) isFtraceEvent_Event() {}

func (*FtraceEvent_SoftirqRaise) isFtraceEvent_Event() {}

func (*FtraceEvent_I2CRead) isFtraceEvent_Event() {}

func (*FtraceEvent_I2CWrite) isFtraceEvent_Event() {}

func (*FtraceEvent_I2CResult) isFtraceEvent_Event() {}

func (*FtraceEvent_I2CReply) isFtraceEvent_Event() {}

func (*FtraceEvent_SmbusRead) isFtraceEvent_Event() {}

func (*FtraceEvent_SmbusWrite) isFtraceEvent_Event() {}

func (*FtraceEvent_SmbusResult) isFtraceEvent_Event() {}

func (*FtraceEvent_SmbusReply) isFtraceEvent_Event() {}

func (*FtraceEvent_LowmemoryKill) isFtraceEvent_Event() {}

func (*FtraceEvent_IrqHandlerEntry) isFtraceEvent_Event() {}

func (*FtraceEvent_IrqHandlerExit) isFtraceEvent_Event() {}

func (*FtraceEvent_SyncPt) isFtraceEvent_Event() {}

func (*FtraceEvent_SyncTimeline) isFtraceEvent_Event() {}

func (*FtraceEvent_SyncWait) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaWriteBegin) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaWriteEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4SyncFileEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4SyncFileExit) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockRqIssue) isFtraceEvent_Event() {}

func (*FtraceEvent_MmVmscanDirectReclaimBegin) isFtraceEvent_Event() {}

func (*FtraceEvent_MmVmscanDirectReclaimEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_MmVmscanKswapdWake) isFtraceEvent_Event() {}

func (*FtraceEvent_MmVmscanKswapdSleep) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderTransaction) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderTransactionReceived) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderSetPriority) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderLock) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderLocked) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderUnlock) isFtraceEvent_Event() {}

func (*FtraceEvent_WorkqueueActivateWork) isFtraceEvent_Event() {}

func (*FtraceEvent_WorkqueueExecuteEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_WorkqueueExecuteStart) isFtraceEvent_Event() {}

func (*FtraceEvent_WorkqueueQueueWork) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorDisable) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorDisableComplete) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorEnable) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorEnableComplete) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorEnableDelay) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorSetVoltage) isFtraceEvent_Event() {}

func (*FtraceEvent_RegulatorSetVoltageComplete) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupAttachTask) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupMkdir) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupRemount) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupRmdir) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupTransferTasks) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupDestroyRoot) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupRelease) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupRename) isFtraceEvent_Event() {}

func (*FtraceEvent_CgroupSetupRoot) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCmdKickoff) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCommit) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpPerfSetOt) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpSsppChange) isFtraceEvent_Event() {}

func (*FtraceEvent_TracingMarkWrite) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCmdPingpongDone) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCompareBw) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpPerfSetPanicLuts) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpSsppSet) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCmdReadptrDone) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpMisrCrc) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpPerfSetQosLuts) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpTraceCounter) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCmdReleaseBw) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpMixerUpdate) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpPerfSetWmLevels) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpVideoUnderrunDone) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpCmdWaitPingpong) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpPerfPrefillCalc) isFtraceEvent_Event() {}

func (*FtraceEvent_MdpPerfUpdateBus) isFtraceEvent_Event() {}

func (*FtraceEvent_RotatorBwAoAsContext) isFtraceEvent_Event() {}

func (*FtraceEvent_MmFilemapAddToPageCache) isFtraceEvent_Event() {}

func (*FtraceEvent_MmFilemapDeleteFromPageCache) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionBegin) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionDeferCompaction) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionDeferred) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionDeferReset) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionFinished) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionIsolateFreepages) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionIsolateMigratepages) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionKcompactdSleep) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionKcompactdWake) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionMigratepages) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionSuitable) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionTryToCompactPages) isFtraceEvent_Event() {}

func (*FtraceEvent_MmCompactionWakeupKcompactd) isFtraceEvent_Event() {}

func (*FtraceEvent_SuspendResume) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedWakeupNew) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockBioBackmerge) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockBioBounce) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockBioComplete) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockBioFrontmerge) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockBioQueue) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockBioRemap) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockDirtyBuffer) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockGetrq) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockPlug) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockRqAbort) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockRqComplete) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockRqInsert) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockRqRemap) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockRqRequeue) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockSleeprq) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockSplit) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockTouchBuffer) isFtraceEvent_Event() {}

func (*FtraceEvent_BlockUnplug) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4AllocDaBlocks) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4AllocateBlocks) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4AllocateInode) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4BeginOrderedTruncate) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4CollapseRange) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaReleaseSpace) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaReserveSpace) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaUpdateReserveSpace) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaWritePages) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DaWritePagesExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Direct_IOEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Direct_IOExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DiscardBlocks) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DiscardPreallocations) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4DropInode) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsCacheExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsFindDelayedExtentRangeEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsFindDelayedExtentRangeExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsInsertExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsLookupExtentEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsLookupExtentExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsRemoveExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsShrink) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsShrinkCount) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsShrinkScanEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EsShrinkScanExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4EvictInode) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtConvertToInitializedEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtConvertToInitializedFastpath) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtHandleUnwrittenExtents) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtInCache) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtLoadExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtMapBlocksEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtMapBlocksExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtPutInCache) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtRemoveSpace) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtRemoveSpaceDone) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtRmIdx) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtRmLeaf) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ExtShowExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4FallocateEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4FallocateExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4FindDelallocRange) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Forget) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4FreeBlocks) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4FreeInode) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4GetImpliedClusterAllocExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4GetReservedClusterAlloc) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4IndMapBlocksEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4IndMapBlocksExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4InsertRange) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Invalidatepage) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4JournalStart) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4JournalStartReserved) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4JournalledInvalidatepage) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4JournalledWriteEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4LoadInode) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4LoadInodeBitmap) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MarkInodeDirty) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbBitmapLoad) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbBuddyBitmapLoad) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbDiscardPreallocations) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbNewGroupPa) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbNewInodePa) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbReleaseGroupPa) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MbReleaseInodePa) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MballocAlloc) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MballocDiscard) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MballocFree) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4MballocPrealloc) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4OtherInodeUpdateTime) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4PunchHole) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ReadBlockBitmapLoad) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Readpage) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Releasepage) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4RemoveBlocks) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4RequestBlocks) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4RequestInode) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4SyncFs) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4TrimAllFree) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4TrimExtent) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4TruncateEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4TruncateExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4UnlinkEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4UnlinkExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4WriteBegin) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4WriteEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Writepage) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4Writepages) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4WritepagesResult) isFtraceEvent_Event() {}

func (*FtraceEvent_Ext4ZeroRange) isFtraceEvent_Event() {}

func (*FtraceEvent_TaskNewtask) isFtraceEvent_Event() {}

func (*FtraceEvent_TaskRename) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedProcessExec) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedProcessExit) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedProcessFork) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedProcessFree) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedProcessHang) isFtraceEvent_Event() {}

func (*FtraceEvent_SchedProcessWait) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsDoSubmitBio) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsEvictInode) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsFallocate) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsGetDataBlock) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsGetVictim) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsIget) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsIgetExit) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsNewInode) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsReadpage) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsReserveNewBlock) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsSetPageDirty) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsSubmitWritePage) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsSyncFileEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsSyncFileExit) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsSyncFs) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncate) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateBlocksEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateBlocksExit) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateDataBlocksRange) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateInodeBlocksEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateInodeBlocksExit) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateNode) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateNodesEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncateNodesExit) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsTruncatePartialNodes) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsUnlinkEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsUnlinkExit) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsVmPageMkwrite) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsWriteBegin) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsWriteCheckpoint) isFtraceEvent_Event() {}

func (*FtraceEvent_F2FsWriteEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_AllocPagesIommuEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_AllocPagesIommuFail) isFtraceEvent_Event() {}

func (*FtraceEvent_AllocPagesIommuStart) isFtraceEvent_Event() {}

func (*FtraceEvent_AllocPagesSysEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_AllocPagesSysFail) isFtraceEvent_Event() {}

func (*FtraceEvent_AllocPagesSysStart) isFtraceEvent_Event() {}

func (*FtraceEvent_DmaAllocContiguousRetry) isFtraceEvent_Event() {}

func (*FtraceEvent_IommuMapRange) isFtraceEvent_Event() {}

func (*FtraceEvent_IommuSecPtblMapRangeEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_IommuSecPtblMapRangeStart) isFtraceEvent_Event() {}

func (*FtraceEvent_IonAllocBufferEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_IonAllocBufferFail) isFtraceEvent_Event() {}

func (*FtraceEvent_IonAllocBufferFallback) isFtraceEvent_Event() {}

func (*FtraceEvent_IonAllocBufferStart) isFtraceEvent_Event() {}

func (*FtraceEvent_IonCpAllocRetry) isFtraceEvent_Event() {}

func (*FtraceEvent_IonCpSecureBufferEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_IonCpSecureBufferStart) isFtraceEvent_Event() {}

func (*FtraceEvent_IonPrefetching) isFtraceEvent_Event() {}

func (*FtraceEvent_IonSecureCmaAddToPoolEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_IonSecureCmaAddToPoolStart) isFtraceEvent_Event() {}

func (*FtraceEvent_IonSecureCmaAllocateEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_IonSecureCmaAllocateStart) isFtraceEvent_Event() {}

func (*FtraceEvent_IonSecureCmaShrinkPoolEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_IonSecureCmaShrinkPoolStart) isFtraceEvent_Event() {}

func (*FtraceEvent_Kfree) isFtraceEvent_Event() {}

func (*FtraceEvent_Kmalloc) isFtraceEvent_Event() {}

func (*FtraceEvent_KmallocNode) isFtraceEvent_Event() {}

func (*FtraceEvent_KmemCacheAlloc) isFtraceEvent_Event() {}

func (*FtraceEvent_KmemCacheAllocNode) isFtraceEvent_Event() {}

func (*FtraceEvent_KmemCacheFree) isFtraceEvent_Event() {}

func (*FtraceEvent_MigratePagesEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_MigratePagesStart) isFtraceEvent_Event() {}

func (*FtraceEvent_MigrateRetry) isFtraceEvent_Event() {}

func (*FtraceEvent_MmPageAlloc) isFtraceEvent_Event() {}

func (*FtraceEvent_MmPageAllocExtfrag) isFtraceEvent_Event() {}

func (*FtraceEvent_MmPageAllocZoneLocked) isFtraceEvent_Event() {}

func (*FtraceEvent_MmPageFree) isFtraceEvent_Event() {}

func (*FtraceEvent_MmPageFreeBatched) isFtraceEvent_Event() {}

func (*FtraceEvent_MmPagePcpuDrain) isFtraceEvent_Event() {}

func (*FtraceEvent_RssStat) isFtraceEvent_Event() {}

func (*FtraceEvent_IonHeapShrink) isFtraceEvent_Event() {}

func (*FtraceEvent_IonHeapGrow) isFtraceEvent_Event() {}

func (*FtraceEvent_FenceInit) isFtraceEvent_Event() {}

func (*FtraceEvent_FenceDestroy) isFtraceEvent_Event() {}

func (*FtraceEvent_FenceEnableSignal) isFtraceEvent_Event() {}

func (*FtraceEvent_FenceSignaled) isFtraceEvent_Event() {}

func (*FtraceEvent_ClkEnable) isFtraceEvent_Event() {}

func (*FtraceEvent_ClkDisable) isFtraceEvent_Event() {}

func (*FtraceEvent_ClkSetRate) isFtraceEvent_Event() {}

func (*FtraceEvent_BinderTransactionAllocBuf) isFtraceEvent_Event() {}

func (*FtraceEvent_SignalDeliver) isFtraceEvent_Event() {}

func (*FtraceEvent_SignalGenerate) isFtraceEvent_Event() {}

func (*FtraceEvent_OomScoreAdjUpdate) isFtraceEvent_Event() {}

func (*FtraceEvent_Generic) isFtraceEvent_Event() {}

func (*FtraceEvent_MmEventRecord) isFtraceEvent_Event() {}

func (*FtraceEvent_SysEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_SysExit) isFtraceEvent_Event() {}

func (*FtraceEvent_Zero) isFtraceEvent_Event() {}

func (*FtraceEvent_GpuFrequency) isFtraceEvent_Event() {}

func (*FtraceEvent_SdeTracingMarkWrite) isFtraceEvent_Event() {}

func (*FtraceEvent_MarkVictim) isFtraceEvent_Event() {}

func (*FtraceEvent_IonStat) isFtraceEvent_Event() {}

func (*FtraceEvent_IonBufferCreate) isFtraceEvent_Event() {}

func (*FtraceEvent_IonBufferDestroy) isFtraceEvent_Event() {}

func (*FtraceEvent_ScmCallStart) isFtraceEvent_Event() {}

func (*FtraceEvent_ScmCallEnd) isFtraceEvent_Event() {}

func (*FtraceEvent_GpuMemTotal) isFtraceEvent_Event() {}

func (*FtraceEvent_ThermalTemperature) isFtraceEvent_Event() {}

func (*FtraceEvent_CdevUpdate) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuhpExit) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuhpMultiEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuhpEnter) isFtraceEvent_Event() {}

func (*FtraceEvent_CpuhpLatency) isFtraceEvent_Event() {}

func (*FtraceEvent_FastrpcDmaStat) isFtraceEvent_Event() {}

func (*FtraceEvent_DpuTracingMarkWrite) isFtraceEvent_Event() {}

func (*FtraceEvent_G2DTracingMarkWrite) isFtraceEvent_Event() {}

// The result of tracing one or more ftrace data pages from a single per-cpu
// kernel ring buffer. If collating multiple pages' worth of events, all of
// them come from contiguous pages, with no kernel data loss in between.
type FtraceEventBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu   *uint32        `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Event []*FtraceEvent `protobuf:"bytes,2,rep,name=event" json:"event,omitempty"`
	// Set to true if there was data loss between the last time we've read from
	// the corresponding per-cpu kernel buffer, and the earliest event recorded
	// in this bundle.
	LostEvents   *bool                           `protobuf:"varint,3,opt,name=lost_events,json=lostEvents" json:"lost_events,omitempty"`
	CompactSched *FtraceEventBundle_CompactSched `protobuf:"bytes,4,opt,name=compact_sched,json=compactSched" json:"compact_sched,omitempty"`
}

func (x *FtraceEventBundle) Reset() {
	*x = FtraceEventBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[382]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceEventBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceEventBundle) ProtoMessage() {}

func (x *FtraceEventBundle) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[382]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceEventBundle.ProtoReflect.Descriptor instead.
func (*FtraceEventBundle) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{382}
}

func (x *FtraceEventBundle) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *FtraceEventBundle) GetEvent() []*FtraceEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *FtraceEventBundle) GetLostEvents() bool {
	if x != nil && x.LostEvents != nil {
		return *x.LostEvents
	}
	return false
}

func (x *FtraceEventBundle) GetCompactSched() *FtraceEventBundle_CompactSched {
	if x != nil {
		return x.CompactSched
	}
	return nil
}

// Per-CPU stats for the ftrace data source gathered from the kernel from
// /sys/kernel/debug/tracing/per_cpu/cpuX/stats.
type FtraceCpuStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU index.
	Cpu *uint64 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	// Number of entries still in the kernel buffer. Ideally this should be close
	// to zero, as events are consumed regularly and moved into the userspace
	// buffers (or file).
	Entries *uint64 `protobuf:"varint,2,opt,name=entries" json:"entries,omitempty"`
	// Number of events lost in kernel buffers due to overwriting of old events
	// before userspace had a chance to drain them.
	Overrun *uint64 `protobuf:"varint,3,opt,name=overrun" json:"overrun,omitempty"`
	// This should always be zero. If not the buffer size is way too small or
	// something went wrong with the tracer.
	CommitOverrun *uint64 `protobuf:"varint,4,opt,name=commit_overrun,json=commitOverrun" json:"commit_overrun,omitempty"`
	// Bytes actually read (not overwritten).
	BytesRead *uint64 `protobuf:"varint,5,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	// The timestamp for the oldest event still in the ring buffer.
	OldestEventTs *float64 `protobuf:"fixed64,6,opt,name=oldest_event_ts,json=oldestEventTs" json:"oldest_event_ts,omitempty"`
	// The current timestamp.
	NowTs *float64 `protobuf:"fixed64,7,opt,name=now_ts,json=nowTs" json:"now_ts,omitempty"`
	// If the kernel buffer has overwrite mode disabled, this will show the number
	// of new events that were lost because the buffer was full. This is similar
	// to |overrun| but only for the overwrite=false case.
	DroppedEvents *uint64 `protobuf:"varint,8,opt,name=dropped_events,json=droppedEvents" json:"dropped_events,omitempty"`
	// The number of events read.
	ReadEvents *uint64 `protobuf:"varint,9,opt,name=read_events,json=readEvents" json:"read_events,omitempty"`
}

func (x *FtraceCpuStats) Reset() {
	*x = FtraceCpuStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[383]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceCpuStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceCpuStats) ProtoMessage() {}

func (x *FtraceCpuStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[383]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceCpuStats.ProtoReflect.Descriptor instead.
func (*FtraceCpuStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{383}
}

func (x *FtraceCpuStats) GetCpu() uint64 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *FtraceCpuStats) GetEntries() uint64 {
	if x != nil && x.Entries != nil {
		return *x.Entries
	}
	return 0
}

func (x *FtraceCpuStats) GetOverrun() uint64 {
	if x != nil && x.Overrun != nil {
		return *x.Overrun
	}
	return 0
}

func (x *FtraceCpuStats) GetCommitOverrun() uint64 {
	if x != nil && x.CommitOverrun != nil {
		return *x.CommitOverrun
	}
	return 0
}

func (x *FtraceCpuStats) GetBytesRead() uint64 {
	if x != nil && x.BytesRead != nil {
		return *x.BytesRead
	}
	return 0
}

func (x *FtraceCpuStats) GetOldestEventTs() float64 {
	if x != nil && x.OldestEventTs != nil {
		return *x.OldestEventTs
	}
	return 0
}

func (x *FtraceCpuStats) GetNowTs() float64 {
	if x != nil && x.NowTs != nil {
		return *x.NowTs
	}
	return 0
}

func (x *FtraceCpuStats) GetDroppedEvents() uint64 {
	if x != nil && x.DroppedEvents != nil {
		return *x.DroppedEvents
	}
	return 0
}

func (x *FtraceCpuStats) GetReadEvents() uint64 {
	if x != nil && x.ReadEvents != nil {
		return *x.ReadEvents
	}
	return 0
}

// Ftrace stats for all CPUs.
type FtraceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tells when stats were sampled. There should be one sample at the beginning
	// of the trace and one sample at the end.
	Phase *FtraceStats_Phase `protobuf:"varint,1,opt,name=phase,enum=perfetto.protos.FtraceStats_Phase" json:"phase,omitempty"`
	// Per-CPU stats (one entry for each CPU).
	CpuStats []*FtraceCpuStats `protobuf:"bytes,2,rep,name=cpu_stats,json=cpuStats" json:"cpu_stats,omitempty"`
	// When FtraceConfig.symbolize_ksyms = true, this records the number of
	// symbols parsed from /proc/kallsyms, whether they have been seen in the
	// trace or not. It can be used to debug kptr_restrict or security-related
	// errors.
	// Note: this will be valid only when phase = END_OF_TRACE. The symbolizer is
	// initialized. When START_OF_TRACE is emitted it is not ready yet.
	KernelSymbolsParsed *uint32 `protobuf:"varint,3,opt,name=kernel_symbols_parsed,json=kernelSymbolsParsed" json:"kernel_symbols_parsed,omitempty"`
	// The memory used by the kernel symbolizer (KernelSymbolMap.size_bytes()).
	KernelSymbolsMemKb *uint32 `protobuf:"varint,4,opt,name=kernel_symbols_mem_kb,json=kernelSymbolsMemKb" json:"kernel_symbols_mem_kb,omitempty"`
}

func (x *FtraceStats) Reset() {
	*x = FtraceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[384]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceStats) ProtoMessage() {}

func (x *FtraceStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[384]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceStats.ProtoReflect.Descriptor instead.
func (*FtraceStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{384}
}

func (x *FtraceStats) GetPhase() FtraceStats_Phase {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return FtraceStats_UNSPECIFIED
}

func (x *FtraceStats) GetCpuStats() []*FtraceCpuStats {
	if x != nil {
		return x.CpuStats
	}
	return nil
}

func (x *FtraceStats) GetKernelSymbolsParsed() uint32 {
	if x != nil && x.KernelSymbolsParsed != nil {
		return *x.KernelSymbolsParsed
	}
	return 0
}

func (x *FtraceStats) GetKernelSymbolsMemKb() uint32 {
	if x != nil && x.KernelSymbolsMemKb != nil {
		return *x.KernelSymbolsMemKb
	}
	return 0
}

type GpuCounterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first trace packet of each session should include counter_spec.
	CounterDescriptor *GpuCounterDescriptor         `protobuf:"bytes,1,opt,name=counter_descriptor,json=counterDescriptor" json:"counter_descriptor,omitempty"`
	Counters          []*GpuCounterEvent_GpuCounter `protobuf:"bytes,2,rep,name=counters" json:"counters,omitempty"`
	// optional. Identifier for GPU in a multi-gpu device.
	GpuId *int32 `protobuf:"varint,3,opt,name=gpu_id,json=gpuId" json:"gpu_id,omitempty"`
}

func (x *GpuCounterEvent) Reset() {
	*x = GpuCounterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[385]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuCounterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuCounterEvent) ProtoMessage() {}

func (x *GpuCounterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[385]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuCounterEvent.ProtoReflect.Descriptor instead.
func (*GpuCounterEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{385}
}

func (x *GpuCounterEvent) GetCounterDescriptor() *GpuCounterDescriptor {
	if x != nil {
		return x.CounterDescriptor
	}
	return nil
}

func (x *GpuCounterEvent) GetCounters() []*GpuCounterEvent_GpuCounter {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *GpuCounterEvent) GetGpuId() int32 {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return 0
}

// Message for logging events GPU data producer.
type GpuLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity   *GpuLog_Severity `protobuf:"varint,1,opt,name=severity,enum=perfetto.protos.GpuLog_Severity" json:"severity,omitempty"`
	Tag        *string          `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	LogMessage *string          `protobuf:"bytes,3,opt,name=log_message,json=logMessage" json:"log_message,omitempty"`
}

func (x *GpuLog) Reset() {
	*x = GpuLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[386]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuLog) ProtoMessage() {}

func (x *GpuLog) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[386]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuLog.ProtoReflect.Descriptor instead.
func (*GpuLog) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{386}
}

func (x *GpuLog) GetSeverity() GpuLog_Severity {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return GpuLog_LOG_SEVERITY_UNSPECIFIED
}

func (x *GpuLog) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *GpuLog) GetLogMessage() string {
	if x != nil && x.LogMessage != nil {
		return *x.LogMessage
	}
	return ""
}

// next id: 15
type GpuRenderStageEvent struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// required. Unique ID for the event.
	EventId *uint64 `protobuf:"varint,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
	// optional. Duration of the event in nanoseconds. If unset, this is a
	// single time point event.
	Duration *uint64 `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	// required. ID to a hardware queue description in the specifications.
	// InternedGpuRenderStageSpecification
	HwQueueIid *uint64 `protobuf:"varint,13,opt,name=hw_queue_iid,json=hwQueueIid" json:"hw_queue_iid,omitempty"`
	// required. ID to a render stage description in the specifications.
	// InternedGpuRenderStageSpecification
	StageIid *uint64 `protobuf:"varint,14,opt,name=stage_iid,json=stageIid" json:"stage_iid,omitempty"`
	// optional. Identifier for GPU in a multi-gpu device.
	GpuId *int32 `protobuf:"varint,11,opt,name=gpu_id,json=gpuId" json:"gpu_id,omitempty"`
	// required. Graphics context for the event.
	// For OpenGL, this is the GL context.
	// For Vulkan, this is the VkDevice.
	Context *uint64 `protobuf:"varint,5,opt,name=context" json:"context,omitempty"`
	// optional. The render target for this event.
	// For OpenGL, this is the GL frame buffer handle.
	// For Vulkan, this is the VkFrameBuffer handle.
	RenderTargetHandle *uint64 `protobuf:"varint,8,opt,name=render_target_handle,json=renderTargetHandle" json:"render_target_handle,omitempty"`
	// optional. Submission ID generated by the UMD.
	// For OpenGL, the ID should map to an API submission (e.g., glFlush,
	// glFinish, eglSwapBufffers) event.  The set of submissions to the HW due
	// to a single API submission should share the same ID.
	// For Vulkan, it should map 1:1 with a vkQueueSubmit.
	SubmissionId *uint32                          `protobuf:"varint,10,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
	ExtraData    []*GpuRenderStageEvent_ExtraData `protobuf:"bytes,6,rep,name=extra_data,json=extraData" json:"extra_data,omitempty"`
	// optional. The Vulkan render pass handle.
	RenderPassHandle *uint64 `protobuf:"varint,9,opt,name=render_pass_handle,json=renderPassHandle" json:"render_pass_handle,omitempty"`
	// optional. A bit mask representing which render subpasses contributed to
	// this render stage event.  Subpass index 0 is represented by setting the
	// LSB of the mask.  Additional mask can be added for subpass index greater
	// than 63.
	RenderSubpassIndexMask []uint64 `protobuf:"varint,15,rep,name=render_subpass_index_mask,json=renderSubpassIndexMask" json:"render_subpass_index_mask,omitempty"`
	// optional. The Vulkan command buffer handle.
	CommandBufferHandle *uint64 `protobuf:"varint,12,opt,name=command_buffer_handle,json=commandBufferHandle" json:"command_buffer_handle,omitempty"`
	// Deprecated.  Use hw_queue_iid and stage_iid to refer to
	// InternedGpuRenderStageSpecification instead.
	//
	// Deprecated: Do not use.
	Specifications *GpuRenderStageEvent_Specifications `protobuf:"bytes,7,opt,name=specifications" json:"specifications,omitempty"`
	// Deprecated. Use hw_queue_iid instead;
	//
	// Deprecated: Do not use.
	HwQueueId *int32 `protobuf:"varint,3,opt,name=hw_queue_id,json=hwQueueId" json:"hw_queue_id,omitempty"`
	// Deprecated. Use stage_iid instead;
	//
	// Deprecated: Do not use.
	StageId *int32 `protobuf:"varint,4,opt,name=stage_id,json=stageId" json:"stage_id,omitempty"`
}

func (x *GpuRenderStageEvent) Reset() {
	*x = GpuRenderStageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[387]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuRenderStageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuRenderStageEvent) ProtoMessage() {}

func (x *GpuRenderStageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[387]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuRenderStageEvent.ProtoReflect.Descriptor instead.
func (*GpuRenderStageEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{387}
}

var extRange_GpuRenderStageEvent = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 100},
}

// Deprecated: Use GpuRenderStageEvent.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*GpuRenderStageEvent) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_GpuRenderStageEvent
}

func (x *GpuRenderStageEvent) GetEventId() uint64 {
	if x != nil && x.EventId != nil {
		return *x.EventId
	}
	return 0
}

func (x *GpuRenderStageEvent) GetDuration() uint64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *GpuRenderStageEvent) GetHwQueueIid() uint64 {
	if x != nil && x.HwQueueIid != nil {
		return *x.HwQueueIid
	}
	return 0
}

func (x *GpuRenderStageEvent) GetStageIid() uint64 {
	if x != nil && x.StageIid != nil {
		return *x.StageIid
	}
	return 0
}

func (x *GpuRenderStageEvent) GetGpuId() int32 {
	if x != nil && x.GpuId != nil {
		return *x.GpuId
	}
	return 0
}

func (x *GpuRenderStageEvent) GetContext() uint64 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *GpuRenderStageEvent) GetRenderTargetHandle() uint64 {
	if x != nil && x.RenderTargetHandle != nil {
		return *x.RenderTargetHandle
	}
	return 0
}

func (x *GpuRenderStageEvent) GetSubmissionId() uint32 {
	if x != nil && x.SubmissionId != nil {
		return *x.SubmissionId
	}
	return 0
}

func (x *GpuRenderStageEvent) GetExtraData() []*GpuRenderStageEvent_ExtraData {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *GpuRenderStageEvent) GetRenderPassHandle() uint64 {
	if x != nil && x.RenderPassHandle != nil {
		return *x.RenderPassHandle
	}
	return 0
}

func (x *GpuRenderStageEvent) GetRenderSubpassIndexMask() []uint64 {
	if x != nil {
		return x.RenderSubpassIndexMask
	}
	return nil
}

func (x *GpuRenderStageEvent) GetCommandBufferHandle() uint64 {
	if x != nil && x.CommandBufferHandle != nil {
		return *x.CommandBufferHandle
	}
	return 0
}

// Deprecated: Do not use.
func (x *GpuRenderStageEvent) GetSpecifications() *GpuRenderStageEvent_Specifications {
	if x != nil {
		return x.Specifications
	}
	return nil
}

// Deprecated: Do not use.
func (x *GpuRenderStageEvent) GetHwQueueId() int32 {
	if x != nil && x.HwQueueId != nil {
		return *x.HwQueueId
	}
	return 0
}

// Deprecated: Do not use.
func (x *GpuRenderStageEvent) GetStageId() int32 {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return 0
}

// The iid is the numeric value of either the GL Context or the VkDevice
// handle.
type InternedGraphicsContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid *uint64                      `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Pid *int32                       `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Api *InternedGraphicsContext_Api `protobuf:"varint,3,opt,name=api,enum=perfetto.protos.InternedGraphicsContext_Api" json:"api,omitempty"`
}

func (x *InternedGraphicsContext) Reset() {
	*x = InternedGraphicsContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[388]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternedGraphicsContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedGraphicsContext) ProtoMessage() {}

func (x *InternedGraphicsContext) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[388]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedGraphicsContext.ProtoReflect.Descriptor instead.
func (*InternedGraphicsContext) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{388}
}

func (x *InternedGraphicsContext) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *InternedGraphicsContext) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *InternedGraphicsContext) GetApi() InternedGraphicsContext_Api {
	if x != nil && x.Api != nil {
		return *x.Api
	}
	return InternedGraphicsContext_UNDEFINED
}

type InternedGpuRenderStageSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid         *uint64                                                  `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Name        *string                                                  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description *string                                                  `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Category    *InternedGpuRenderStageSpecification_RenderStageCategory `protobuf:"varint,4,opt,name=category,enum=perfetto.protos.InternedGpuRenderStageSpecification_RenderStageCategory" json:"category,omitempty"`
}

func (x *InternedGpuRenderStageSpecification) Reset() {
	*x = InternedGpuRenderStageSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[389]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternedGpuRenderStageSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedGpuRenderStageSpecification) ProtoMessage() {}

func (x *InternedGpuRenderStageSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[389]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedGpuRenderStageSpecification.ProtoReflect.Descriptor instead.
func (*InternedGpuRenderStageSpecification) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{389}
}

func (x *InternedGpuRenderStageSpecification) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *InternedGpuRenderStageSpecification) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InternedGpuRenderStageSpecification) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *InternedGpuRenderStageSpecification) GetCategory() InternedGpuRenderStageSpecification_RenderStageCategory {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return InternedGpuRenderStageSpecification_OTHER
}

// Message for recording the Vulkan call.
type VulkanApiEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*VulkanApiEvent_VkDebugUtilsObjectName_
	//	*VulkanApiEvent_VkQueueSubmit_
	Event isVulkanApiEvent_Event `protobuf_oneof:"event"`
}

func (x *VulkanApiEvent) Reset() {
	*x = VulkanApiEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[390]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulkanApiEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulkanApiEvent) ProtoMessage() {}

func (x *VulkanApiEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[390]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulkanApiEvent.ProtoReflect.Descriptor instead.
func (*VulkanApiEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{390}
}

func (m *VulkanApiEvent) GetEvent() isVulkanApiEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *VulkanApiEvent) GetVkDebugUtilsObjectName() *VulkanApiEvent_VkDebugUtilsObjectName {
	if x, ok := x.GetEvent().(*VulkanApiEvent_VkDebugUtilsObjectName_); ok {
		return x.VkDebugUtilsObjectName
	}
	return nil
}

func (x *VulkanApiEvent) GetVkQueueSubmit() *VulkanApiEvent_VkQueueSubmit {
	if x, ok := x.GetEvent().(*VulkanApiEvent_VkQueueSubmit_); ok {
		return x.VkQueueSubmit
	}
	return nil
}

type isVulkanApiEvent_Event interface {
	isVulkanApiEvent_Event()
}

type VulkanApiEvent_VkDebugUtilsObjectName_ struct {
	VkDebugUtilsObjectName *VulkanApiEvent_VkDebugUtilsObjectName `protobuf:"bytes,1,opt,name=vk_debug_utils_object_name,json=vkDebugUtilsObjectName,oneof"`
}

type VulkanApiEvent_VkQueueSubmit_ struct {
	VkQueueSubmit *VulkanApiEvent_VkQueueSubmit `protobuf:"bytes,2,opt,name=vk_queue_submit,json=vkQueueSubmit,oneof"`
}

func (*VulkanApiEvent_VkDebugUtilsObjectName_) isVulkanApiEvent_Event() {}

func (*VulkanApiEvent_VkQueueSubmit_) isVulkanApiEvent_Event() {}

// All the information that cannot be sent within a VulkanMemoryEvent message,
// are sent as annotations to the main memory event. One example is the
// properties of the object that consumes the allocated memory, for example, a
// buffer or an image.
// key_iid and string_iid are both interned strings. Original string value is
// stored in vulkan_memory_keys from
// protos/perfetto/trace/interned_data/interned_data.proto.
type VulkanMemoryEventAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyIid *uint64 `protobuf:"varint,1,opt,name=key_iid,json=keyIid" json:"key_iid,omitempty"`
	// Types that are assignable to Value:
	//	*VulkanMemoryEventAnnotation_IntValue
	//	*VulkanMemoryEventAnnotation_DoubleValue
	//	*VulkanMemoryEventAnnotation_StringIid
	Value isVulkanMemoryEventAnnotation_Value `protobuf_oneof:"value"`
}

func (x *VulkanMemoryEventAnnotation) Reset() {
	*x = VulkanMemoryEventAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[391]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulkanMemoryEventAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulkanMemoryEventAnnotation) ProtoMessage() {}

func (x *VulkanMemoryEventAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[391]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulkanMemoryEventAnnotation.ProtoReflect.Descriptor instead.
func (*VulkanMemoryEventAnnotation) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{391}
}

func (x *VulkanMemoryEventAnnotation) GetKeyIid() uint64 {
	if x != nil && x.KeyIid != nil {
		return *x.KeyIid
	}
	return 0
}

func (m *VulkanMemoryEventAnnotation) GetValue() isVulkanMemoryEventAnnotation_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *VulkanMemoryEventAnnotation) GetIntValue() int64 {
	if x, ok := x.GetValue().(*VulkanMemoryEventAnnotation_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *VulkanMemoryEventAnnotation) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*VulkanMemoryEventAnnotation_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *VulkanMemoryEventAnnotation) GetStringIid() uint64 {
	if x, ok := x.GetValue().(*VulkanMemoryEventAnnotation_StringIid); ok {
		return x.StringIid
	}
	return 0
}

type isVulkanMemoryEventAnnotation_Value interface {
	isVulkanMemoryEventAnnotation_Value()
}

type VulkanMemoryEventAnnotation_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type VulkanMemoryEventAnnotation_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}

type VulkanMemoryEventAnnotation_StringIid struct {
	StringIid uint64 `protobuf:"varint,4,opt,name=string_iid,json=stringIid,oneof"`
}

func (*VulkanMemoryEventAnnotation_IntValue) isVulkanMemoryEventAnnotation_Value() {}

func (*VulkanMemoryEventAnnotation_DoubleValue) isVulkanMemoryEventAnnotation_Value() {}

func (*VulkanMemoryEventAnnotation_StringIid) isVulkanMemoryEventAnnotation_Value() {}

// Each VulkanMemoryEvent encompasses information regarding one single function
// call that results in reserving, binding or freeing host or GPU memory. There
// is a special message type, ANNOTATIONS, which is used to communicate
// information that are not directly related to a memory event, nonetheless are
// essential to understand the memory usage. An example is the size and memory
// types of the memory heaps.
//
// Next reserved id: 10 (up to 15).
// Next id: 21.
type VulkanMemoryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source        *VulkanMemoryEvent_Source    `protobuf:"varint,1,opt,name=source,enum=perfetto.protos.VulkanMemoryEvent_Source" json:"source,omitempty"`
	Operation     *VulkanMemoryEvent_Operation `protobuf:"varint,2,opt,name=operation,enum=perfetto.protos.VulkanMemoryEvent_Operation" json:"operation,omitempty"`
	Timestamp     *int64                       `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Pid           *uint32                      `protobuf:"varint,4,opt,name=pid" json:"pid,omitempty"`
	MemoryAddress *uint64                      `protobuf:"fixed64,5,opt,name=memory_address,json=memoryAddress" json:"memory_address,omitempty"`
	MemorySize    *uint64                      `protobuf:"varint,6,opt,name=memory_size,json=memorySize" json:"memory_size,omitempty"`
	// Interned string. Original string value is stored in function_names from
	// protos/perfetto/trace/interned_data/interned_data.proto.
	CallerIid       *uint64                            `protobuf:"varint,7,opt,name=caller_iid,json=callerIid" json:"caller_iid,omitempty"`
	AllocationScope *VulkanMemoryEvent_AllocationScope `protobuf:"varint,8,opt,name=allocation_scope,json=allocationScope,enum=perfetto.protos.VulkanMemoryEvent_AllocationScope" json:"allocation_scope,omitempty"`
	// Extra related information, e.g., create configs, etc.
	Annotations []*VulkanMemoryEventAnnotation `protobuf:"bytes,9,rep,name=annotations" json:"annotations,omitempty"`
	// Field IDs used for device memory (low sampling rate)
	Device       *uint64 `protobuf:"fixed64,16,opt,name=device" json:"device,omitempty"`
	DeviceMemory *uint64 `protobuf:"fixed64,17,opt,name=device_memory,json=deviceMemory" json:"device_memory,omitempty"`
	MemoryType   *uint32 `protobuf:"varint,18,opt,name=memory_type,json=memoryType" json:"memory_type,omitempty"`
	Heap         *uint32 `protobuf:"varint,19,opt,name=heap" json:"heap,omitempty"`
	ObjectHandle *uint64 `protobuf:"fixed64,20,opt,name=object_handle,json=objectHandle" json:"object_handle,omitempty"`
}

func (x *VulkanMemoryEvent) Reset() {
	*x = VulkanMemoryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[392]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulkanMemoryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulkanMemoryEvent) ProtoMessage() {}

func (x *VulkanMemoryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[392]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulkanMemoryEvent.ProtoReflect.Descriptor instead.
func (*VulkanMemoryEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{392}
}

func (x *VulkanMemoryEvent) GetSource() VulkanMemoryEvent_Source {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return VulkanMemoryEvent_SOURCE_UNSPECIFIED
}

func (x *VulkanMemoryEvent) GetOperation() VulkanMemoryEvent_Operation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return VulkanMemoryEvent_OP_UNSPECIFIED
}

func (x *VulkanMemoryEvent) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *VulkanMemoryEvent) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *VulkanMemoryEvent) GetMemoryAddress() uint64 {
	if x != nil && x.MemoryAddress != nil {
		return *x.MemoryAddress
	}
	return 0
}

func (x *VulkanMemoryEvent) GetMemorySize() uint64 {
	if x != nil && x.MemorySize != nil {
		return *x.MemorySize
	}
	return 0
}

func (x *VulkanMemoryEvent) GetCallerIid() uint64 {
	if x != nil && x.CallerIid != nil {
		return *x.CallerIid
	}
	return 0
}

func (x *VulkanMemoryEvent) GetAllocationScope() VulkanMemoryEvent_AllocationScope {
	if x != nil && x.AllocationScope != nil {
		return *x.AllocationScope
	}
	return VulkanMemoryEvent_SCOPE_UNSPECIFIED
}

func (x *VulkanMemoryEvent) GetAnnotations() []*VulkanMemoryEventAnnotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *VulkanMemoryEvent) GetDevice() uint64 {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return 0
}

func (x *VulkanMemoryEvent) GetDeviceMemory() uint64 {
	if x != nil && x.DeviceMemory != nil {
		return *x.DeviceMemory
	}
	return 0
}

func (x *VulkanMemoryEvent) GetMemoryType() uint32 {
	if x != nil && x.MemoryType != nil {
		return *x.MemoryType
	}
	return 0
}

func (x *VulkanMemoryEvent) GetHeap() uint32 {
	if x != nil && x.Heap != nil {
		return *x.Heap
	}
	return 0
}

func (x *VulkanMemoryEvent) GetObjectHandle() uint64 {
	if x != nil && x.ObjectHandle != nil {
		return *x.ObjectHandle
	}
	return 0
}

// The interning fields in this file can refer to 2 different intern tables,
// depending on the message they are used in. If the interned fields are present
// in ProfilePacket proto, then the intern tables included in the ProfilePacket
// should be used. If the intered fields are present in the
// StreamingProfilePacket proto, then the intern tables included in all of the
// previous InternedData message with same sequence ID should be used.
// TODO(fmayer): Move to the intern tables to a common location.
type InternedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Str []byte  `protobuf:"bytes,2,opt,name=str" json:"str,omitempty"`
}

func (x *InternedString) Reset() {
	*x = InternedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[393]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedString) ProtoMessage() {}

func (x *InternedString) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[393]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedString.ProtoReflect.Descriptor instead.
func (*InternedString) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{393}
}

func (x *InternedString) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *InternedString) GetStr() []byte {
	if x != nil {
		return x.Str
	}
	return nil
}

// A symbol field that is emitted after the trace is written. These tables would
// be appended as the last packets in the trace that the profiler will use, so
// that the actual trace need not be rewritten to symbolize the profiles.
type ProfiledFrameSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use the frame id as the interning key for the symbols.
	FrameIid *uint64 `protobuf:"varint,1,opt,name=frame_iid,json=frameIid" json:"frame_iid,omitempty"`
	// key to InternedString
	FunctionNameId []uint64 `protobuf:"varint,2,rep,name=function_name_id,json=functionNameId" json:"function_name_id,omitempty"`
	// key to InternedString
	FileNameId []uint64 `protobuf:"varint,3,rep,name=file_name_id,json=fileNameId" json:"file_name_id,omitempty"`
	LineNumber []uint32 `protobuf:"varint,4,rep,name=line_number,json=lineNumber" json:"line_number,omitempty"`
}

func (x *ProfiledFrameSymbols) Reset() {
	*x = ProfiledFrameSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[394]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfiledFrameSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfiledFrameSymbols) ProtoMessage() {}

func (x *ProfiledFrameSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[394]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfiledFrameSymbols.ProtoReflect.Descriptor instead.
func (*ProfiledFrameSymbols) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{394}
}

func (x *ProfiledFrameSymbols) GetFrameIid() uint64 {
	if x != nil && x.FrameIid != nil {
		return *x.FrameIid
	}
	return 0
}

func (x *ProfiledFrameSymbols) GetFunctionNameId() []uint64 {
	if x != nil {
		return x.FunctionNameId
	}
	return nil
}

func (x *ProfiledFrameSymbols) GetFileNameId() []uint64 {
	if x != nil {
		return x.FileNameId
	}
	return nil
}

func (x *ProfiledFrameSymbols) GetLineNumber() []uint32 {
	if x != nil {
		return x.LineNumber
	}
	return nil
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionName   *string `protobuf:"bytes,1,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	SourceFileName *string `protobuf:"bytes,2,opt,name=source_file_name,json=sourceFileName" json:"source_file_name,omitempty"`
	LineNumber     *uint32 `protobuf:"varint,3,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[395]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[395]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{395}
}

func (x *Line) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *Line) GetSourceFileName() string {
	if x != nil && x.SourceFileName != nil {
		return *x.SourceFileName
	}
	return ""
}

func (x *Line) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

// Symbols for a given address in a module.
type AddressSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *uint64 `protobuf:"varint,1,opt,name=address" json:"address,omitempty"`
	// Source lines that correspond to this address.
	//
	// These are repeated because when inlining happens, multiple functions'
	// frames can be at a single address. Imagine function Foo calling the
	// std::vector<int> constructor, which gets inlined at 0xf00. We then get
	// both Foo and the std::vector<int> constructor when we symbolize the
	// address.
	Lines []*Line `protobuf:"bytes,2,rep,name=lines" json:"lines,omitempty"`
}

func (x *AddressSymbols) Reset() {
	*x = AddressSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[396]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressSymbols) ProtoMessage() {}

func (x *AddressSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[396]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressSymbols.ProtoReflect.Descriptor instead.
func (*AddressSymbols) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{396}
}

func (x *AddressSymbols) GetAddress() uint64 {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return 0
}

func (x *AddressSymbols) GetLines() []*Line {
	if x != nil {
		return x.Lines
	}
	return nil
}

// Symbols for addresses seen in a module.
type ModuleSymbols struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fully qualified path to the mapping.
	// E.g. /system/lib64/libc.so.
	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// .note.gnu.build-id on Linux (not hex encoded).
	// uuid on MacOS.
	// Module GUID on Windows.
	BuildId        *string           `protobuf:"bytes,2,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	AddressSymbols []*AddressSymbols `protobuf:"bytes,3,rep,name=address_symbols,json=addressSymbols" json:"address_symbols,omitempty"`
}

func (x *ModuleSymbols) Reset() {
	*x = ModuleSymbols{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[397]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleSymbols) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleSymbols) ProtoMessage() {}

func (x *ModuleSymbols) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[397]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleSymbols.ProtoReflect.Descriptor instead.
func (*ModuleSymbols) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{397}
}

func (x *ModuleSymbols) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *ModuleSymbols) GetBuildId() string {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return ""
}

func (x *ModuleSymbols) GetAddressSymbols() []*AddressSymbols {
	if x != nil {
		return x.AddressSymbols
	}
	return nil
}

type Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interning key.
	Iid *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	// Interning key.
	BuildId *uint64 `protobuf:"varint,2,opt,name=build_id,json=buildId" json:"build_id,omitempty"`
	// This is not set on Android 10.
	ExactOffset *uint64 `protobuf:"varint,8,opt,name=exact_offset,json=exactOffset" json:"exact_offset,omitempty"`
	StartOffset *uint64 `protobuf:"varint,3,opt,name=start_offset,json=startOffset" json:"start_offset,omitempty"`
	Start       *uint64 `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	End         *uint64 `protobuf:"varint,5,opt,name=end" json:"end,omitempty"`
	LoadBias    *uint64 `protobuf:"varint,6,opt,name=load_bias,json=loadBias" json:"load_bias,omitempty"`
	// E.g. ["system", "lib64", "libc.so"]
	// id of string.
	PathStringIds []uint64 `protobuf:"varint,7,rep,name=path_string_ids,json=pathStringIds" json:"path_string_ids,omitempty"`
}

func (x *Mapping) Reset() {
	*x = Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[398]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mapping) ProtoMessage() {}

func (x *Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[398]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mapping.ProtoReflect.Descriptor instead.
func (*Mapping) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{398}
}

func (x *Mapping) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *Mapping) GetBuildId() uint64 {
	if x != nil && x.BuildId != nil {
		return *x.BuildId
	}
	return 0
}

func (x *Mapping) GetExactOffset() uint64 {
	if x != nil && x.ExactOffset != nil {
		return *x.ExactOffset
	}
	return 0
}

func (x *Mapping) GetStartOffset() uint64 {
	if x != nil && x.StartOffset != nil {
		return *x.StartOffset
	}
	return 0
}

func (x *Mapping) GetStart() uint64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Mapping) GetEnd() uint64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *Mapping) GetLoadBias() uint64 {
	if x != nil && x.LoadBias != nil {
		return *x.LoadBias
	}
	return 0
}

func (x *Mapping) GetPathStringIds() []uint64 {
	if x != nil {
		return x.PathStringIds
	}
	return nil
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interning key
	Iid *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	// E.g. "fopen"
	// id of string.
	FunctionNameId *uint64 `protobuf:"varint,2,opt,name=function_name_id,json=functionNameId" json:"function_name_id,omitempty"`
	MappingId      *uint64 `protobuf:"varint,3,opt,name=mapping_id,json=mappingId" json:"mapping_id,omitempty"`
	RelPc          *uint64 `protobuf:"varint,4,opt,name=rel_pc,json=relPc" json:"rel_pc,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[399]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[399]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{399}
}

func (x *Frame) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *Frame) GetFunctionNameId() uint64 {
	if x != nil && x.FunctionNameId != nil {
		return *x.FunctionNameId
	}
	return 0
}

func (x *Frame) GetMappingId() uint64 {
	if x != nil && x.MappingId != nil {
		return *x.MappingId
	}
	return 0
}

func (x *Frame) GetRelPc() uint64 {
	if x != nil && x.RelPc != nil {
		return *x.RelPc
	}
	return 0
}

type Callstack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	// Frames of this callstack. Bottom frame first.
	FrameIds []uint64 `protobuf:"varint,2,rep,name=frame_ids,json=frameIds" json:"frame_ids,omitempty"`
}

func (x *Callstack) Reset() {
	*x = Callstack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[400]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Callstack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Callstack) ProtoMessage() {}

func (x *Callstack) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[400]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Callstack.ProtoReflect.Descriptor instead.
func (*Callstack) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{400}
}

func (x *Callstack) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *Callstack) GetFrameIds() []uint64 {
	if x != nil {
		return x.FrameIds
	}
	return nil
}

type HistogramName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid  *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *HistogramName) Reset() {
	*x = HistogramName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[401]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistogramName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistogramName) ProtoMessage() {}

func (x *HistogramName) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[401]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistogramName.ProtoReflect.Descriptor instead.
func (*HistogramName) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{401}
}

func (x *HistogramName) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *HistogramName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// An individual histogram sample logged via Chrome's UMA metrics system.
type ChromeHistogramSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MD5 hash of the metric name. Either |name_hash| or |name|/|name_iid| or
	// both must be present.
	NameHash *uint64 `protobuf:"varint,1,opt,name=name_hash,json=nameHash" json:"name_hash,omitempty"`
	Name     *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Sample   *int64  `protobuf:"varint,3,opt,name=sample" json:"sample,omitempty"`
	// Interned HistogramName. Only one of |name|, |name_iid| can be set.
	NameIid *uint64 `protobuf:"varint,4,opt,name=name_iid,json=nameIid" json:"name_iid,omitempty"`
}

func (x *ChromeHistogramSample) Reset() {
	*x = ChromeHistogramSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[402]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeHistogramSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeHistogramSample) ProtoMessage() {}

func (x *ChromeHistogramSample) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[402]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeHistogramSample.ProtoReflect.Descriptor instead.
func (*ChromeHistogramSample) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{402}
}

func (x *ChromeHistogramSample) GetNameHash() uint64 {
	if x != nil && x.NameHash != nil {
		return *x.NameHash
	}
	return 0
}

func (x *ChromeHistogramSample) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ChromeHistogramSample) GetSample() int64 {
	if x != nil && x.Sample != nil {
		return *x.Sample
	}
	return 0
}

func (x *ChromeHistogramSample) GetNameIid() uint64 {
	if x != nil && x.NameIid != nil {
		return *x.NameIid
	}
	return 0
}

// Key/value annotations provided in untyped TRACE_EVENT macros. These
// annotations are intended for debug use and are not considered a stable API
// surface. As such, they should not be relied upon to implement (new) metrics.
//
// Next ID: 10.
type DebugAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NameField:
	//	*DebugAnnotation_NameIid
	//	*DebugAnnotation_Name
	NameField isDebugAnnotation_NameField `protobuf_oneof:"name_field"`
	// Types that are assignable to Value:
	//	*DebugAnnotation_BoolValue
	//	*DebugAnnotation_UintValue
	//	*DebugAnnotation_IntValue
	//	*DebugAnnotation_DoubleValue
	//	*DebugAnnotation_StringValue
	//	*DebugAnnotation_PointerValue
	//	*DebugAnnotation_NestedValue_
	//	*DebugAnnotation_LegacyJsonValue
	Value isDebugAnnotation_Value `protobuf_oneof:"value"`
}

func (x *DebugAnnotation) Reset() {
	*x = DebugAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[403]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAnnotation) ProtoMessage() {}

func (x *DebugAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[403]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAnnotation.ProtoReflect.Descriptor instead.
func (*DebugAnnotation) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{403}
}

func (m *DebugAnnotation) GetNameField() isDebugAnnotation_NameField {
	if m != nil {
		return m.NameField
	}
	return nil
}

func (x *DebugAnnotation) GetNameIid() uint64 {
	if x, ok := x.GetNameField().(*DebugAnnotation_NameIid); ok {
		return x.NameIid
	}
	return 0
}

func (x *DebugAnnotation) GetName() string {
	if x, ok := x.GetNameField().(*DebugAnnotation_Name); ok {
		return x.Name
	}
	return ""
}

func (m *DebugAnnotation) GetValue() isDebugAnnotation_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DebugAnnotation) GetBoolValue() bool {
	if x, ok := x.GetValue().(*DebugAnnotation_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *DebugAnnotation) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*DebugAnnotation_UintValue); ok {
		return x.UintValue
	}
	return 0
}

func (x *DebugAnnotation) GetIntValue() int64 {
	if x, ok := x.GetValue().(*DebugAnnotation_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *DebugAnnotation) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*DebugAnnotation_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *DebugAnnotation) GetStringValue() string {
	if x, ok := x.GetValue().(*DebugAnnotation_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *DebugAnnotation) GetPointerValue() uint64 {
	if x, ok := x.GetValue().(*DebugAnnotation_PointerValue); ok {
		return x.PointerValue
	}
	return 0
}

func (x *DebugAnnotation) GetNestedValue() *DebugAnnotation_NestedValue {
	if x, ok := x.GetValue().(*DebugAnnotation_NestedValue_); ok {
		return x.NestedValue
	}
	return nil
}

func (x *DebugAnnotation) GetLegacyJsonValue() string {
	if x, ok := x.GetValue().(*DebugAnnotation_LegacyJsonValue); ok {
		return x.LegacyJsonValue
	}
	return ""
}

type isDebugAnnotation_NameField interface {
	isDebugAnnotation_NameField()
}

type DebugAnnotation_NameIid struct {
	// interned DebugAnnotationName.
	NameIid uint64 `protobuf:"varint,1,opt,name=name_iid,json=nameIid,oneof"`
}

type DebugAnnotation_Name struct {
	// non-interned variant.
	Name string `protobuf:"bytes,10,opt,name=name,oneof"`
}

func (*DebugAnnotation_NameIid) isDebugAnnotation_NameField() {}

func (*DebugAnnotation_Name) isDebugAnnotation_NameField() {}

type isDebugAnnotation_Value interface {
	isDebugAnnotation_Value()
}

type DebugAnnotation_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,oneof"`
}

type DebugAnnotation_UintValue struct {
	UintValue uint64 `protobuf:"varint,3,opt,name=uint_value,json=uintValue,oneof"`
}

type DebugAnnotation_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}

type DebugAnnotation_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,oneof"`
}

type DebugAnnotation_StringValue struct {
	StringValue string `protobuf:"bytes,6,opt,name=string_value,json=stringValue,oneof"`
}

type DebugAnnotation_PointerValue struct {
	// Pointers are stored in a separate type as the JSON output treats them
	// differently from other uint64 values.
	PointerValue uint64 `protobuf:"varint,7,opt,name=pointer_value,json=pointerValue,oneof"`
}

type DebugAnnotation_NestedValue_ struct {
	NestedValue *DebugAnnotation_NestedValue `protobuf:"bytes,8,opt,name=nested_value,json=nestedValue,oneof"`
}

type DebugAnnotation_LegacyJsonValue struct {
	// Legacy instrumentation may not support conversion of nested data to
	// NestedValue yet.
	LegacyJsonValue string `protobuf:"bytes,9,opt,name=legacy_json_value,json=legacyJsonValue,oneof"`
}

func (*DebugAnnotation_BoolValue) isDebugAnnotation_Value() {}

func (*DebugAnnotation_UintValue) isDebugAnnotation_Value() {}

func (*DebugAnnotation_IntValue) isDebugAnnotation_Value() {}

func (*DebugAnnotation_DoubleValue) isDebugAnnotation_Value() {}

func (*DebugAnnotation_StringValue) isDebugAnnotation_Value() {}

func (*DebugAnnotation_PointerValue) isDebugAnnotation_Value() {}

func (*DebugAnnotation_NestedValue_) isDebugAnnotation_Value() {}

func (*DebugAnnotation_LegacyJsonValue) isDebugAnnotation_Value() {}

type DebugAnnotationName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid  *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *DebugAnnotationName) Reset() {
	*x = DebugAnnotationName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[404]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugAnnotationName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAnnotationName) ProtoMessage() {}

func (x *DebugAnnotationName) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[404]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAnnotationName.ProtoReflect.Descriptor instead.
func (*DebugAnnotationName) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{404}
}

func (x *DebugAnnotationName) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *DebugAnnotationName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interned SourceLocation.
	SourceLocationIid *uint64 `protobuf:"varint,1,opt,name=source_location_iid,json=sourceLocationIid" json:"source_location_iid,omitempty"`
	// interned LogMessageBody.
	BodyIid *uint64 `protobuf:"varint,2,opt,name=body_iid,json=bodyIid" json:"body_iid,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[405]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[405]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{405}
}

func (x *LogMessage) GetSourceLocationIid() uint64 {
	if x != nil && x.SourceLocationIid != nil {
		return *x.SourceLocationIid
	}
	return 0
}

func (x *LogMessage) GetBodyIid() uint64 {
	if x != nil && x.BodyIid != nil {
		return *x.BodyIid
	}
	return 0
}

type LogMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid  *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Body *string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (x *LogMessageBody) Reset() {
	*x = LogMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[406]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessageBody) ProtoMessage() {}

func (x *LogMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[406]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessageBody.ProtoReflect.Descriptor instead.
func (*LogMessageBody) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{406}
}

func (x *LogMessageBody) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *LogMessageBody) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

type SourceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	// We intend to add a binary symbol version of this in the future.
	FileName     *string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	FunctionName *string `protobuf:"bytes,3,opt,name=function_name,json=functionName" json:"function_name,omitempty"`
	LineNumber   *uint32 `protobuf:"varint,4,opt,name=line_number,json=lineNumber" json:"line_number,omitempty"`
}

func (x *SourceLocation) Reset() {
	*x = SourceLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[407]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceLocation) ProtoMessage() {}

func (x *SourceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[407]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceLocation.ProtoReflect.Descriptor instead.
func (*SourceLocation) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{407}
}

func (x *SourceLocation) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *SourceLocation) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *SourceLocation) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *SourceLocation) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

// Trace event arguments for application state changes.
type ChromeApplicationStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationState *ChromeApplicationStateInfo_ChromeApplicationState `protobuf:"varint,1,opt,name=application_state,json=applicationState,enum=perfetto.protos.ChromeApplicationStateInfo_ChromeApplicationState" json:"application_state,omitempty"`
}

func (x *ChromeApplicationStateInfo) Reset() {
	*x = ChromeApplicationStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[408]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeApplicationStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeApplicationStateInfo) ProtoMessage() {}

func (x *ChromeApplicationStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[408]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeApplicationStateInfo.ProtoReflect.Descriptor instead.
func (*ChromeApplicationStateInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{408}
}

func (x *ChromeApplicationStateInfo) GetApplicationState() ChromeApplicationStateInfo_ChromeApplicationState {
	if x != nil && x.ApplicationState != nil {
		return *x.ApplicationState
	}
	return ChromeApplicationStateInfo_APPLICATION_STATE_UNKNOWN
}

// Next id: 18
type ChromeCompositorSchedulerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateMachine                           *ChromeCompositorStateMachine                              `protobuf:"bytes,1,opt,name=state_machine,json=stateMachine" json:"state_machine,omitempty"`
	ObservingBeginFrameSource              *bool                                                      `protobuf:"varint,2,opt,name=observing_begin_frame_source,json=observingBeginFrameSource" json:"observing_begin_frame_source,omitempty"`
	BeginImplFrameDeadlineTask             *bool                                                      `protobuf:"varint,3,opt,name=begin_impl_frame_deadline_task,json=beginImplFrameDeadlineTask" json:"begin_impl_frame_deadline_task,omitempty"`
	PendingBeginFrameTask                  *bool                                                      `protobuf:"varint,4,opt,name=pending_begin_frame_task,json=pendingBeginFrameTask" json:"pending_begin_frame_task,omitempty"`
	SkippedLastFrameMissedExceededDeadline *bool                                                      `protobuf:"varint,5,opt,name=skipped_last_frame_missed_exceeded_deadline,json=skippedLastFrameMissedExceededDeadline" json:"skipped_last_frame_missed_exceeded_deadline,omitempty"`
	SkippedLastFrameToReduceLatency        *bool                                                      `protobuf:"varint,6,opt,name=skipped_last_frame_to_reduce_latency,json=skippedLastFrameToReduceLatency" json:"skipped_last_frame_to_reduce_latency,omitempty"`
	InsideAction                           *ChromeCompositorSchedulerAction                           `protobuf:"varint,7,opt,name=inside_action,json=insideAction,enum=perfetto.protos.ChromeCompositorSchedulerAction" json:"inside_action,omitempty"`
	DeadlineMode                           *ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode `protobuf:"varint,8,opt,name=deadline_mode,json=deadlineMode,enum=perfetto.protos.ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode" json:"deadline_mode,omitempty"`
	DeadlineUs                             *int64                                                     `protobuf:"varint,9,opt,name=deadline_us,json=deadlineUs" json:"deadline_us,omitempty"`
	DeadlineScheduledAtUs                  *int64                                                     `protobuf:"varint,10,opt,name=deadline_scheduled_at_us,json=deadlineScheduledAtUs" json:"deadline_scheduled_at_us,omitempty"`
	NowUs                                  *int64                                                     `protobuf:"varint,11,opt,name=now_us,json=nowUs" json:"now_us,omitempty"`
	NowToDeadlineDeltaUs                   *int64                                                     `protobuf:"varint,12,opt,name=now_to_deadline_delta_us,json=nowToDeadlineDeltaUs" json:"now_to_deadline_delta_us,omitempty"`
	NowToDeadlineScheduledAtDeltaUs        *int64                                                     `protobuf:"varint,13,opt,name=now_to_deadline_scheduled_at_delta_us,json=nowToDeadlineScheduledAtDeltaUs" json:"now_to_deadline_scheduled_at_delta_us,omitempty"`
	BeginImplFrameArgs                     *BeginImplFrameArgs                                        `protobuf:"bytes,14,opt,name=begin_impl_frame_args,json=beginImplFrameArgs" json:"begin_impl_frame_args,omitempty"`
	BeginFrameObserverState                *BeginFrameObserverState                                   `protobuf:"bytes,15,opt,name=begin_frame_observer_state,json=beginFrameObserverState" json:"begin_frame_observer_state,omitempty"`
	BeginFrameSourceState                  *BeginFrameSourceState                                     `protobuf:"bytes,16,opt,name=begin_frame_source_state,json=beginFrameSourceState" json:"begin_frame_source_state,omitempty"`
	CompositorTimingHistory                *CompositorTimingHistory                                   `protobuf:"bytes,17,opt,name=compositor_timing_history,json=compositorTimingHistory" json:"compositor_timing_history,omitempty"`
}

func (x *ChromeCompositorSchedulerState) Reset() {
	*x = ChromeCompositorSchedulerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[409]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeCompositorSchedulerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeCompositorSchedulerState) ProtoMessage() {}

func (x *ChromeCompositorSchedulerState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[409]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeCompositorSchedulerState.ProtoReflect.Descriptor instead.
func (*ChromeCompositorSchedulerState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{409}
}

func (x *ChromeCompositorSchedulerState) GetStateMachine() *ChromeCompositorStateMachine {
	if x != nil {
		return x.StateMachine
	}
	return nil
}

func (x *ChromeCompositorSchedulerState) GetObservingBeginFrameSource() bool {
	if x != nil && x.ObservingBeginFrameSource != nil {
		return *x.ObservingBeginFrameSource
	}
	return false
}

func (x *ChromeCompositorSchedulerState) GetBeginImplFrameDeadlineTask() bool {
	if x != nil && x.BeginImplFrameDeadlineTask != nil {
		return *x.BeginImplFrameDeadlineTask
	}
	return false
}

func (x *ChromeCompositorSchedulerState) GetPendingBeginFrameTask() bool {
	if x != nil && x.PendingBeginFrameTask != nil {
		return *x.PendingBeginFrameTask
	}
	return false
}

func (x *ChromeCompositorSchedulerState) GetSkippedLastFrameMissedExceededDeadline() bool {
	if x != nil && x.SkippedLastFrameMissedExceededDeadline != nil {
		return *x.SkippedLastFrameMissedExceededDeadline
	}
	return false
}

func (x *ChromeCompositorSchedulerState) GetSkippedLastFrameToReduceLatency() bool {
	if x != nil && x.SkippedLastFrameToReduceLatency != nil {
		return *x.SkippedLastFrameToReduceLatency
	}
	return false
}

func (x *ChromeCompositorSchedulerState) GetInsideAction() ChromeCompositorSchedulerAction {
	if x != nil && x.InsideAction != nil {
		return *x.InsideAction
	}
	return ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_UNSPECIFIED
}

func (x *ChromeCompositorSchedulerState) GetDeadlineMode() ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode {
	if x != nil && x.DeadlineMode != nil {
		return *x.DeadlineMode
	}
	return ChromeCompositorSchedulerState_DEADLINE_MODE_UNSPECIFIED
}

func (x *ChromeCompositorSchedulerState) GetDeadlineUs() int64 {
	if x != nil && x.DeadlineUs != nil {
		return *x.DeadlineUs
	}
	return 0
}

func (x *ChromeCompositorSchedulerState) GetDeadlineScheduledAtUs() int64 {
	if x != nil && x.DeadlineScheduledAtUs != nil {
		return *x.DeadlineScheduledAtUs
	}
	return 0
}

func (x *ChromeCompositorSchedulerState) GetNowUs() int64 {
	if x != nil && x.NowUs != nil {
		return *x.NowUs
	}
	return 0
}

func (x *ChromeCompositorSchedulerState) GetNowToDeadlineDeltaUs() int64 {
	if x != nil && x.NowToDeadlineDeltaUs != nil {
		return *x.NowToDeadlineDeltaUs
	}
	return 0
}

func (x *ChromeCompositorSchedulerState) GetNowToDeadlineScheduledAtDeltaUs() int64 {
	if x != nil && x.NowToDeadlineScheduledAtDeltaUs != nil {
		return *x.NowToDeadlineScheduledAtDeltaUs
	}
	return 0
}

func (x *ChromeCompositorSchedulerState) GetBeginImplFrameArgs() *BeginImplFrameArgs {
	if x != nil {
		return x.BeginImplFrameArgs
	}
	return nil
}

func (x *ChromeCompositorSchedulerState) GetBeginFrameObserverState() *BeginFrameObserverState {
	if x != nil {
		return x.BeginFrameObserverState
	}
	return nil
}

func (x *ChromeCompositorSchedulerState) GetBeginFrameSourceState() *BeginFrameSourceState {
	if x != nil {
		return x.BeginFrameSourceState
	}
	return nil
}

func (x *ChromeCompositorSchedulerState) GetCompositorTimingHistory() *CompositorTimingHistory {
	if x != nil {
		return x.CompositorTimingHistory
	}
	return nil
}

// Describes the current values stored in the Chrome Compositor state machine.
// Next id: 3
type ChromeCompositorStateMachine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorState *ChromeCompositorStateMachine_MajorState `protobuf:"bytes,1,opt,name=major_state,json=majorState" json:"major_state,omitempty"`
	MinorState *ChromeCompositorStateMachine_MinorState `protobuf:"bytes,2,opt,name=minor_state,json=minorState" json:"minor_state,omitempty"`
}

func (x *ChromeCompositorStateMachine) Reset() {
	*x = ChromeCompositorStateMachine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[410]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeCompositorStateMachine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeCompositorStateMachine) ProtoMessage() {}

func (x *ChromeCompositorStateMachine) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[410]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeCompositorStateMachine.ProtoReflect.Descriptor instead.
func (*ChromeCompositorStateMachine) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410}
}

func (x *ChromeCompositorStateMachine) GetMajorState() *ChromeCompositorStateMachine_MajorState {
	if x != nil {
		return x.MajorState
	}
	return nil
}

func (x *ChromeCompositorStateMachine) GetMinorState() *ChromeCompositorStateMachine_MinorState {
	if x != nil {
		return x.MinorState
	}
	return nil
}

// Next id: 12
type BeginFrameArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            *BeginFrameArgs_BeginFrameArgsType `protobuf:"varint,1,opt,name=type,enum=perfetto.protos.BeginFrameArgs_BeginFrameArgsType" json:"type,omitempty"`
	SourceId        *uint64                            `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	SequenceNumber  *uint64                            `protobuf:"varint,3,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	FrameTimeUs     *int64                             `protobuf:"varint,4,opt,name=frame_time_us,json=frameTimeUs" json:"frame_time_us,omitempty"`
	DeadlineUs      *int64                             `protobuf:"varint,5,opt,name=deadline_us,json=deadlineUs" json:"deadline_us,omitempty"`
	IntervalDeltaUs *int64                             `protobuf:"varint,6,opt,name=interval_delta_us,json=intervalDeltaUs" json:"interval_delta_us,omitempty"`
	OnCriticalPath  *bool                              `protobuf:"varint,7,opt,name=on_critical_path,json=onCriticalPath" json:"on_critical_path,omitempty"`
	AnimateOnly     *bool                              `protobuf:"varint,8,opt,name=animate_only,json=animateOnly" json:"animate_only,omitempty"`
	// Types that are assignable to CreatedFrom:
	//	*BeginFrameArgs_SourceLocationIid
	//	*BeginFrameArgs_SourceLocation
	CreatedFrom isBeginFrameArgs_CreatedFrom `protobuf_oneof:"created_from"`
}

func (x *BeginFrameArgs) Reset() {
	*x = BeginFrameArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[411]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginFrameArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginFrameArgs) ProtoMessage() {}

func (x *BeginFrameArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[411]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginFrameArgs.ProtoReflect.Descriptor instead.
func (*BeginFrameArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{411}
}

func (x *BeginFrameArgs) GetType() BeginFrameArgs_BeginFrameArgsType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BeginFrameArgs_BEGIN_FRAME_ARGS_TYPE_UNSPECIFIED
}

func (x *BeginFrameArgs) GetSourceId() uint64 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *BeginFrameArgs) GetSequenceNumber() uint64 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *BeginFrameArgs) GetFrameTimeUs() int64 {
	if x != nil && x.FrameTimeUs != nil {
		return *x.FrameTimeUs
	}
	return 0
}

func (x *BeginFrameArgs) GetDeadlineUs() int64 {
	if x != nil && x.DeadlineUs != nil {
		return *x.DeadlineUs
	}
	return 0
}

func (x *BeginFrameArgs) GetIntervalDeltaUs() int64 {
	if x != nil && x.IntervalDeltaUs != nil {
		return *x.IntervalDeltaUs
	}
	return 0
}

func (x *BeginFrameArgs) GetOnCriticalPath() bool {
	if x != nil && x.OnCriticalPath != nil {
		return *x.OnCriticalPath
	}
	return false
}

func (x *BeginFrameArgs) GetAnimateOnly() bool {
	if x != nil && x.AnimateOnly != nil {
		return *x.AnimateOnly
	}
	return false
}

func (m *BeginFrameArgs) GetCreatedFrom() isBeginFrameArgs_CreatedFrom {
	if m != nil {
		return m.CreatedFrom
	}
	return nil
}

func (x *BeginFrameArgs) GetSourceLocationIid() uint64 {
	if x, ok := x.GetCreatedFrom().(*BeginFrameArgs_SourceLocationIid); ok {
		return x.SourceLocationIid
	}
	return 0
}

func (x *BeginFrameArgs) GetSourceLocation() *SourceLocation {
	if x, ok := x.GetCreatedFrom().(*BeginFrameArgs_SourceLocation); ok {
		return x.SourceLocation
	}
	return nil
}

type isBeginFrameArgs_CreatedFrom interface {
	isBeginFrameArgs_CreatedFrom()
}

type BeginFrameArgs_SourceLocationIid struct {
	// The interned SourceLocation.
	SourceLocationIid uint64 `protobuf:"varint,9,opt,name=source_location_iid,json=sourceLocationIid,oneof"`
}

type BeginFrameArgs_SourceLocation struct {
	// The SourceLocation that this args was created from.
	// TODO(nuskos): Eventually we will support interning inside of
	// TypedArgument TraceEvents and then we shouldn't need this SourceLocation
	// since we can emit it as part of the InternedData message. When we can
	// remove this |source_location|.
	SourceLocation *SourceLocation `protobuf:"bytes,10,opt,name=source_location,json=sourceLocation,oneof"`
}

func (*BeginFrameArgs_SourceLocationIid) isBeginFrameArgs_CreatedFrom() {}

func (*BeginFrameArgs_SourceLocation) isBeginFrameArgs_CreatedFrom() {}

// Next id: 7
type BeginImplFrameArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedAtUs  *int64                    `protobuf:"varint,1,opt,name=updated_at_us,json=updatedAtUs" json:"updated_at_us,omitempty"`
	FinishedAtUs *int64                    `protobuf:"varint,2,opt,name=finished_at_us,json=finishedAtUs" json:"finished_at_us,omitempty"`
	State        *BeginImplFrameArgs_State `protobuf:"varint,3,opt,name=state,enum=perfetto.protos.BeginImplFrameArgs_State" json:"state,omitempty"`
	// Types that are assignable to Args:
	//	*BeginImplFrameArgs_CurrentArgs
	//	*BeginImplFrameArgs_LastArgs
	Args           isBeginImplFrameArgs_Args          `protobuf_oneof:"args"`
	TimestampsInUs *BeginImplFrameArgs_TimestampsInUs `protobuf:"bytes,6,opt,name=timestamps_in_us,json=timestampsInUs" json:"timestamps_in_us,omitempty"`
}

func (x *BeginImplFrameArgs) Reset() {
	*x = BeginImplFrameArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[412]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginImplFrameArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginImplFrameArgs) ProtoMessage() {}

func (x *BeginImplFrameArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[412]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginImplFrameArgs.ProtoReflect.Descriptor instead.
func (*BeginImplFrameArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{412}
}

func (x *BeginImplFrameArgs) GetUpdatedAtUs() int64 {
	if x != nil && x.UpdatedAtUs != nil {
		return *x.UpdatedAtUs
	}
	return 0
}

func (x *BeginImplFrameArgs) GetFinishedAtUs() int64 {
	if x != nil && x.FinishedAtUs != nil {
		return *x.FinishedAtUs
	}
	return 0
}

func (x *BeginImplFrameArgs) GetState() BeginImplFrameArgs_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return BeginImplFrameArgs_BEGIN_FRAME_FINISHED
}

func (m *BeginImplFrameArgs) GetArgs() isBeginImplFrameArgs_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *BeginImplFrameArgs) GetCurrentArgs() *BeginFrameArgs {
	if x, ok := x.GetArgs().(*BeginImplFrameArgs_CurrentArgs); ok {
		return x.CurrentArgs
	}
	return nil
}

func (x *BeginImplFrameArgs) GetLastArgs() *BeginFrameArgs {
	if x, ok := x.GetArgs().(*BeginImplFrameArgs_LastArgs); ok {
		return x.LastArgs
	}
	return nil
}

func (x *BeginImplFrameArgs) GetTimestampsInUs() *BeginImplFrameArgs_TimestampsInUs {
	if x != nil {
		return x.TimestampsInUs
	}
	return nil
}

type isBeginImplFrameArgs_Args interface {
	isBeginImplFrameArgs_Args()
}

type BeginImplFrameArgs_CurrentArgs struct {
	// Only set if |state| is BEGIN_FRAME_FINISHED.
	CurrentArgs *BeginFrameArgs `protobuf:"bytes,4,opt,name=current_args,json=currentArgs,oneof"`
}

type BeginImplFrameArgs_LastArgs struct {
	// Only set if |state| is BEGIN_FRAME_USING.
	LastArgs *BeginFrameArgs `protobuf:"bytes,5,opt,name=last_args,json=lastArgs,oneof"`
}

func (*BeginImplFrameArgs_CurrentArgs) isBeginImplFrameArgs_Args() {}

func (*BeginImplFrameArgs_LastArgs) isBeginImplFrameArgs_Args() {}

type BeginFrameObserverState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DroppedBeginFrameArgs *int64          `protobuf:"varint,1,opt,name=dropped_begin_frame_args,json=droppedBeginFrameArgs" json:"dropped_begin_frame_args,omitempty"`
	LastBeginFrameArgs    *BeginFrameArgs `protobuf:"bytes,2,opt,name=last_begin_frame_args,json=lastBeginFrameArgs" json:"last_begin_frame_args,omitempty"`
}

func (x *BeginFrameObserverState) Reset() {
	*x = BeginFrameObserverState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[413]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginFrameObserverState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginFrameObserverState) ProtoMessage() {}

func (x *BeginFrameObserverState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[413]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginFrameObserverState.ProtoReflect.Descriptor instead.
func (*BeginFrameObserverState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{413}
}

func (x *BeginFrameObserverState) GetDroppedBeginFrameArgs() int64 {
	if x != nil && x.DroppedBeginFrameArgs != nil {
		return *x.DroppedBeginFrameArgs
	}
	return 0
}

func (x *BeginFrameObserverState) GetLastBeginFrameArgs() *BeginFrameArgs {
	if x != nil {
		return x.LastBeginFrameArgs
	}
	return nil
}

type BeginFrameSourceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId           *uint32         `protobuf:"varint,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Paused             *bool           `protobuf:"varint,2,opt,name=paused" json:"paused,omitempty"`
	NumObservers       *uint32         `protobuf:"varint,3,opt,name=num_observers,json=numObservers" json:"num_observers,omitempty"`
	LastBeginFrameArgs *BeginFrameArgs `protobuf:"bytes,4,opt,name=last_begin_frame_args,json=lastBeginFrameArgs" json:"last_begin_frame_args,omitempty"`
}

func (x *BeginFrameSourceState) Reset() {
	*x = BeginFrameSourceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[414]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginFrameSourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginFrameSourceState) ProtoMessage() {}

func (x *BeginFrameSourceState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[414]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginFrameSourceState.ProtoReflect.Descriptor instead.
func (*BeginFrameSourceState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{414}
}

func (x *BeginFrameSourceState) GetSourceId() uint32 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *BeginFrameSourceState) GetPaused() bool {
	if x != nil && x.Paused != nil {
		return *x.Paused
	}
	return false
}

func (x *BeginFrameSourceState) GetNumObservers() uint32 {
	if x != nil && x.NumObservers != nil {
		return *x.NumObservers
	}
	return 0
}

func (x *BeginFrameSourceState) GetLastBeginFrameArgs() *BeginFrameArgs {
	if x != nil {
		return x.LastBeginFrameArgs
	}
	return nil
}

type CompositorTimingHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginMainFrameQueueCriticalEstimateDeltaUs        *int64 `protobuf:"varint,1,opt,name=begin_main_frame_queue_critical_estimate_delta_us,json=beginMainFrameQueueCriticalEstimateDeltaUs" json:"begin_main_frame_queue_critical_estimate_delta_us,omitempty"`
	BeginMainFrameQueueNotCriticalEstimateDeltaUs     *int64 `protobuf:"varint,2,opt,name=begin_main_frame_queue_not_critical_estimate_delta_us,json=beginMainFrameQueueNotCriticalEstimateDeltaUs" json:"begin_main_frame_queue_not_critical_estimate_delta_us,omitempty"`
	BeginMainFrameStartToReadyToCommitEstimateDeltaUs *int64 `protobuf:"varint,3,opt,name=begin_main_frame_start_to_ready_to_commit_estimate_delta_us,json=beginMainFrameStartToReadyToCommitEstimateDeltaUs" json:"begin_main_frame_start_to_ready_to_commit_estimate_delta_us,omitempty"`
	CommitToReadyToActivateEstimateDeltaUs            *int64 `protobuf:"varint,4,opt,name=commit_to_ready_to_activate_estimate_delta_us,json=commitToReadyToActivateEstimateDeltaUs" json:"commit_to_ready_to_activate_estimate_delta_us,omitempty"`
	PrepareTilesEstimateDeltaUs                       *int64 `protobuf:"varint,5,opt,name=prepare_tiles_estimate_delta_us,json=prepareTilesEstimateDeltaUs" json:"prepare_tiles_estimate_delta_us,omitempty"`
	ActivateEstimateDeltaUs                           *int64 `protobuf:"varint,6,opt,name=activate_estimate_delta_us,json=activateEstimateDeltaUs" json:"activate_estimate_delta_us,omitempty"`
	DrawEstimateDeltaUs                               *int64 `protobuf:"varint,7,opt,name=draw_estimate_delta_us,json=drawEstimateDeltaUs" json:"draw_estimate_delta_us,omitempty"`
}

func (x *CompositorTimingHistory) Reset() {
	*x = CompositorTimingHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[415]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositorTimingHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositorTimingHistory) ProtoMessage() {}

func (x *CompositorTimingHistory) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[415]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositorTimingHistory.ProtoReflect.Descriptor instead.
func (*CompositorTimingHistory) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{415}
}

func (x *CompositorTimingHistory) GetBeginMainFrameQueueCriticalEstimateDeltaUs() int64 {
	if x != nil && x.BeginMainFrameQueueCriticalEstimateDeltaUs != nil {
		return *x.BeginMainFrameQueueCriticalEstimateDeltaUs
	}
	return 0
}

func (x *CompositorTimingHistory) GetBeginMainFrameQueueNotCriticalEstimateDeltaUs() int64 {
	if x != nil && x.BeginMainFrameQueueNotCriticalEstimateDeltaUs != nil {
		return *x.BeginMainFrameQueueNotCriticalEstimateDeltaUs
	}
	return 0
}

func (x *CompositorTimingHistory) GetBeginMainFrameStartToReadyToCommitEstimateDeltaUs() int64 {
	if x != nil && x.BeginMainFrameStartToReadyToCommitEstimateDeltaUs != nil {
		return *x.BeginMainFrameStartToReadyToCommitEstimateDeltaUs
	}
	return 0
}

func (x *CompositorTimingHistory) GetCommitToReadyToActivateEstimateDeltaUs() int64 {
	if x != nil && x.CommitToReadyToActivateEstimateDeltaUs != nil {
		return *x.CommitToReadyToActivateEstimateDeltaUs
	}
	return 0
}

func (x *CompositorTimingHistory) GetPrepareTilesEstimateDeltaUs() int64 {
	if x != nil && x.PrepareTilesEstimateDeltaUs != nil {
		return *x.PrepareTilesEstimateDeltaUs
	}
	return 0
}

func (x *CompositorTimingHistory) GetActivateEstimateDeltaUs() int64 {
	if x != nil && x.ActivateEstimateDeltaUs != nil {
		return *x.ActivateEstimateDeltaUs
	}
	return 0
}

func (x *CompositorTimingHistory) GetDrawEstimateDeltaUs() int64 {
	if x != nil && x.DrawEstimateDeltaUs != nil {
		return *x.DrawEstimateDeltaUs
	}
	return 0
}

type ChromeFrameReporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *ChromeFrameReporter_State `protobuf:"varint,1,opt,name=state,enum=perfetto.protos.ChromeFrameReporter_State" json:"state,omitempty"`
	// The reason is set only if |state| is not |STATE_UPDATED_ALL|.
	Reason        *ChromeFrameReporter_FrameDropReason `protobuf:"varint,2,opt,name=reason,enum=perfetto.protos.ChromeFrameReporter_FrameDropReason" json:"reason,omitempty"`
	FrameSource   *uint64                              `protobuf:"varint,3,opt,name=frame_source,json=frameSource" json:"frame_source,omitempty"`
	FrameSequence *uint64                              `protobuf:"varint,4,opt,name=frame_sequence,json=frameSequence" json:"frame_sequence,omitempty"`
	// If this is a droped frame (i.e. if |state| is set to |STATE_DROPPED| or
	// |STATE_PRESENTED_PARTIAL|), then indicates whether this frame impacts
	// smoothness.
	AffectsSmoothness *bool `protobuf:"varint,5,opt,name=affects_smoothness,json=affectsSmoothness" json:"affects_smoothness,omitempty"`
}

func (x *ChromeFrameReporter) Reset() {
	*x = ChromeFrameReporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[416]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeFrameReporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeFrameReporter) ProtoMessage() {}

func (x *ChromeFrameReporter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[416]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeFrameReporter.ProtoReflect.Descriptor instead.
func (*ChromeFrameReporter) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{416}
}

func (x *ChromeFrameReporter) GetState() ChromeFrameReporter_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ChromeFrameReporter_STATE_NO_UPDATE_DESIRED
}

func (x *ChromeFrameReporter) GetReason() ChromeFrameReporter_FrameDropReason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ChromeFrameReporter_REASON_UNSPECIFIED
}

func (x *ChromeFrameReporter) GetFrameSource() uint64 {
	if x != nil && x.FrameSource != nil {
		return *x.FrameSource
	}
	return 0
}

func (x *ChromeFrameReporter) GetFrameSequence() uint64 {
	if x != nil && x.FrameSequence != nil {
		return *x.FrameSequence
	}
	return 0
}

func (x *ChromeFrameReporter) GetAffectsSmoothness() bool {
	if x != nil && x.AffectsSmoothness != nil {
		return *x.AffectsSmoothness
	}
	return false
}

// Details about one of Chrome's keyed services associated with the event.
type ChromeKeyedService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service, e.g. "MediaRouter", "PreviewsService", etc. (in
	// Chrome, these are static strings known at compile time).
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *ChromeKeyedService) Reset() {
	*x = ChromeKeyedService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[417]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeKeyedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeKeyedService) ProtoMessage() {}

func (x *ChromeKeyedService) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[417]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeKeyedService.ProtoReflect.Descriptor instead.
func (*ChromeKeyedService) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{417}
}

func (x *ChromeKeyedService) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ChromeLatencyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId         *int64                             `protobuf:"varint,1,opt,name=trace_id,json=traceId" json:"trace_id,omitempty"`
	Step            *ChromeLatencyInfo_Step            `protobuf:"varint,2,opt,name=step,enum=perfetto.protos.ChromeLatencyInfo_Step" json:"step,omitempty"`
	FrameTreeNodeId *int32                             `protobuf:"varint,3,opt,name=frame_tree_node_id,json=frameTreeNodeId" json:"frame_tree_node_id,omitempty"`
	ComponentInfo   []*ChromeLatencyInfo_ComponentInfo `protobuf:"bytes,4,rep,name=component_info,json=componentInfo" json:"component_info,omitempty"`
	IsCoalesced     *bool                              `protobuf:"varint,5,opt,name=is_coalesced,json=isCoalesced" json:"is_coalesced,omitempty"`
	GestureScrollId *int64                             `protobuf:"varint,6,opt,name=gesture_scroll_id,json=gestureScrollId" json:"gesture_scroll_id,omitempty"`
}

func (x *ChromeLatencyInfo) Reset() {
	*x = ChromeLatencyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[418]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeLatencyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeLatencyInfo) ProtoMessage() {}

func (x *ChromeLatencyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[418]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeLatencyInfo.ProtoReflect.Descriptor instead.
func (*ChromeLatencyInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{418}
}

func (x *ChromeLatencyInfo) GetTraceId() int64 {
	if x != nil && x.TraceId != nil {
		return *x.TraceId
	}
	return 0
}

func (x *ChromeLatencyInfo) GetStep() ChromeLatencyInfo_Step {
	if x != nil && x.Step != nil {
		return *x.Step
	}
	return ChromeLatencyInfo_STEP_UNSPECIFIED
}

func (x *ChromeLatencyInfo) GetFrameTreeNodeId() int32 {
	if x != nil && x.FrameTreeNodeId != nil {
		return *x.FrameTreeNodeId
	}
	return 0
}

func (x *ChromeLatencyInfo) GetComponentInfo() []*ChromeLatencyInfo_ComponentInfo {
	if x != nil {
		return x.ComponentInfo
	}
	return nil
}

func (x *ChromeLatencyInfo) GetIsCoalesced() bool {
	if x != nil && x.IsCoalesced != nil {
		return *x.IsCoalesced
	}
	return false
}

func (x *ChromeLatencyInfo) GetGestureScrollId() int64 {
	if x != nil && x.GestureScrollId != nil {
		return *x.GestureScrollId
	}
	return 0
}

// Details about a legacy Chrome IPC message that is either sent by the event.
// TODO(eseckler): Also use this message on the receiving side?
type ChromeLegacyIpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Corresponds to the message class type defined in Chrome's IPCMessageStart
	// enum, e.g. FrameMsgStart,
	MessageClass *ChromeLegacyIpc_MessageClass `protobuf:"varint,1,opt,name=message_class,json=messageClass,enum=perfetto.protos.ChromeLegacyIpc_MessageClass" json:"message_class,omitempty"`
	// Line number of the message definition. See Chrome's IPC_MESSAGE_ID and
	// IPC_MESSAGE_START macros.
	MessageLine *uint32 `protobuf:"varint,2,opt,name=message_line,json=messageLine" json:"message_line,omitempty"`
}

func (x *ChromeLegacyIpc) Reset() {
	*x = ChromeLegacyIpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[419]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeLegacyIpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeLegacyIpc) ProtoMessage() {}

func (x *ChromeLegacyIpc) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[419]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeLegacyIpc.ProtoReflect.Descriptor instead.
func (*ChromeLegacyIpc) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{419}
}

func (x *ChromeLegacyIpc) GetMessageClass() ChromeLegacyIpc_MessageClass {
	if x != nil && x.MessageClass != nil {
		return *x.MessageClass
	}
	return ChromeLegacyIpc_CLASS_UNSPECIFIED
}

func (x *ChromeLegacyIpc) GetMessageLine() uint32 {
	if x != nil && x.MessageLine != nil {
		return *x.MessageLine
	}
	return 0
}

// Details about Chrome message pump events
type ChromeMessagePump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if there are sent messages in the queue.
	SentMessagesInQueue *bool `protobuf:"varint,1,opt,name=sent_messages_in_queue,json=sentMessagesInQueue" json:"sent_messages_in_queue,omitempty"`
}

func (x *ChromeMessagePump) Reset() {
	*x = ChromeMessagePump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[420]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeMessagePump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeMessagePump) ProtoMessage() {}

func (x *ChromeMessagePump) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[420]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeMessagePump.ProtoReflect.Descriptor instead.
func (*ChromeMessagePump) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{420}
}

func (x *ChromeMessagePump) GetSentMessagesInQueue() bool {
	if x != nil && x.SentMessagesInQueue != nil {
		return *x.SentMessagesInQueue
	}
	return false
}

// Contains information to identify mojo handling events. The trace events in
// mojo are common for all mojo interfaces and this information is used to
// identify who is the caller or callee.
type ChromeMojoEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the interface name or the file name of the creator of a mojo
	// handle watcher, recorded when an event if notified to the watcher. The code
	// that runs within the track event belongs to the interface.
	WatcherNotifyInterfaceTag *string `protobuf:"bytes,1,opt,name=watcher_notify_interface_tag,json=watcherNotifyInterfaceTag" json:"watcher_notify_interface_tag,omitempty"`
}

func (x *ChromeMojoEventInfo) Reset() {
	*x = ChromeMojoEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[421]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeMojoEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeMojoEventInfo) ProtoMessage() {}

func (x *ChromeMojoEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[421]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeMojoEventInfo.ProtoReflect.Descriptor instead.
func (*ChromeMojoEventInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{421}
}

func (x *ChromeMojoEventInfo) GetWatcherNotifyInterfaceTag() string {
	if x != nil && x.WatcherNotifyInterfaceTag != nil {
		return *x.WatcherNotifyInterfaceTag
	}
	return ""
}

// Next id: 2
type ChromeRendererSchedulerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RailMode *ChromeRAILMode `protobuf:"varint,1,opt,name=rail_mode,json=railMode,enum=perfetto.protos.ChromeRAILMode" json:"rail_mode,omitempty"`
}

func (x *ChromeRendererSchedulerState) Reset() {
	*x = ChromeRendererSchedulerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[422]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeRendererSchedulerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeRendererSchedulerState) ProtoMessage() {}

func (x *ChromeRendererSchedulerState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[422]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeRendererSchedulerState.ProtoReflect.Descriptor instead.
func (*ChromeRendererSchedulerState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{422}
}

func (x *ChromeRendererSchedulerState) GetRailMode() ChromeRAILMode {
	if x != nil && x.RailMode != nil {
		return *x.RailMode
	}
	return ChromeRAILMode_RAIL_MODE_NONE
}

// Details about a UI interaction initiated by the user, such as opening or
// closing a tab or a context menu.
type ChromeUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the action, e.g. "NewTab", "ShowBookmarkManager", etc. (in
	// Chrome, these are usually static strings known at compile time, or
	// concatenations of multiple such static strings).
	Action *string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	// MD5 hash of the action string.
	ActionHash *uint64 `protobuf:"varint,2,opt,name=action_hash,json=actionHash" json:"action_hash,omitempty"`
}

func (x *ChromeUserEvent) Reset() {
	*x = ChromeUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[423]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeUserEvent) ProtoMessage() {}

func (x *ChromeUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[423]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeUserEvent.ProtoReflect.Descriptor instead.
func (*ChromeUserEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{423}
}

func (x *ChromeUserEvent) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *ChromeUserEvent) GetActionHash() uint64 {
	if x != nil && x.ActionHash != nil {
		return *x.ActionHash
	}
	return 0
}

// Details about HWNDMessageHandler trace events.
type ChromeWindowHandleEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dpi       *uint32 `protobuf:"varint,1,opt,name=dpi" json:"dpi,omitempty"`
	MessageId *uint32 `protobuf:"varint,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (x *ChromeWindowHandleEventInfo) Reset() {
	*x = ChromeWindowHandleEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[424]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeWindowHandleEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeWindowHandleEventInfo) ProtoMessage() {}

func (x *ChromeWindowHandleEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[424]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeWindowHandleEventInfo.ProtoReflect.Descriptor instead.
func (*ChromeWindowHandleEventInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{424}
}

func (x *ChromeWindowHandleEventInfo) GetDpi() uint32 {
	if x != nil && x.Dpi != nil {
		return *x.Dpi
	}
	return 0
}

func (x *ChromeWindowHandleEventInfo) GetMessageId() uint32 {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return 0
}

// TrackEvent arguments describing the execution of a task.
type TaskExecution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source location that the task was posted from.
	// interned SourceLocation.
	PostedFromIid *uint64 `protobuf:"varint,1,opt,name=posted_from_iid,json=postedFromIid" json:"posted_from_iid,omitempty"`
}

func (x *TaskExecution) Reset() {
	*x = TaskExecution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[425]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecution) ProtoMessage() {}

func (x *TaskExecution) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[425]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecution.ProtoReflect.Descriptor instead.
func (*TaskExecution) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{425}
}

func (x *TaskExecution) GetPostedFromIid() uint64 {
	if x != nil && x.PostedFromIid != nil {
		return *x.PostedFromIid
	}
	return 0
}

// Trace events emitted by client instrumentation library (TRACE_EVENT macros),
// which describe activity on a track, such as a thread or asynchronous event
// track. The track is specified using separate TrackDescriptor messages and
// referred to via the track's UUID.
//
// A simple TrackEvent packet specifies a timestamp, category, name and type:
//   trace_packet {
//     timestamp: 1000
//     track_event {
//       categories: ["my_cat"]
//       name: "my_event"
//       type: TYPE_INSTANT
//      }
//    }
//
// To associate an event with a custom track (e.g. a thread), the track is
// defined in a separate packet and referred to from the TrackEvent by its UUID:
//   trace_packet {
//     track_descriptor {
//       track_uuid: 1234
//       name: "my_track"
//
//       // Optionally, associate the track with a thread.
//       thread_descriptor {
//         pid: 10
//         tid: 10
//         ..
//       }
//     }
//   }
//
// A pair of TYPE_SLICE_BEGIN and _END events form a slice on the track:
//   trace_packet {
//     timestamp: 1200
//     track_event {
//       track_uuid: 1234
//       categories: ["my_cat"]
//       name: "my_slice"
//       type: TYPE_SLICE_BEGIN
//     }
//   }
//   trace_packet {
//     timestamp: 1400
//     track_event {
//       track_uuid: 1234
//       type: TYPE_SLICE_END
//     }
//   }
//
// TrackEvents also support optimizations to reduce data repetition and encoded
// data size, e.g. through data interning (names, categories, ...) and delta
// encoding of timestamps/counters. For details, see the InternedData message.
// Further, default values for attributes of events on the same sequence (e.g.
// their default track association) can be emitted as part of a
// TrackEventDefaults message.
//
// Next reserved id: 13 (up to 15). Next id: 43.
type TrackEvent struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Names of categories of the event. In the client library, categories are a
	// way to turn groups of individual events on or off.
	// interned EventCategoryName.
	CategoryIids []uint64 `protobuf:"varint,3,rep,name=category_iids,json=categoryIids" json:"category_iids,omitempty"`
	// non-interned variant.
	Categories []string `protobuf:"bytes,22,rep,name=categories" json:"categories,omitempty"`
	// Optional name of the event for its display in trace viewer. May be left
	// unspecified for events with typed arguments.
	//
	// Note that metrics should not rely on event names, as they are prone to
	// changing. Instead, they should use typed arguments to identify the events
	// they are interested in.
	//
	// Types that are assignable to NameField:
	//	*TrackEvent_NameIid
	//	*TrackEvent_Name
	NameField isTrackEvent_NameField `protobuf_oneof:"name_field"`
	Type      *TrackEvent_Type       `protobuf:"varint,9,opt,name=type,enum=perfetto.protos.TrackEvent_Type" json:"type,omitempty"`
	// Identifies the track of the event. The default value may be overridden
	// using TrackEventDefaults, e.g., to specify the track of the TraceWriter's
	// sequence (in most cases sequence = one thread). If no value is specified
	// here or in TrackEventDefaults, the TrackEvent will be associated with an
	// implicit trace-global track (uuid 0). See TrackDescriptor::uuid.
	TrackUuid *uint64 `protobuf:"varint,11,opt,name=track_uuid,json=trackUuid" json:"track_uuid,omitempty"`
	// A new value for a counter track. |track_uuid| should refer to a track with
	// a CounterDescriptor, and |type| should be TYPE_COUNTER. For a more
	// efficient encoding of counter values that are sampled at the beginning/end
	// of a slice, see |extra_counter_values| and |extra_counter_track_uuids|.
	// Counter values can optionally be encoded in as delta values (positive or
	// negative) on each packet sequence (see CounterIncrementalBase).
	CounterValue *int64 `protobuf:"varint,30,opt,name=counter_value,json=counterValue" json:"counter_value,omitempty"`
	// To encode counter values more efficiently, we support attaching additional
	// counter values to a TrackEvent of any type. All values will share the same
	// timestamp specified in the TracePacket. The value at
	// extra_counter_values[N] is for the counter track referenced by
	// extra_counter_track_uuids[N].
	//
	// |extra_counter_track_uuids| may also be set via TrackEventDefaults. There
	// should always be equal or more uuids than values. It is valid to set more
	// uuids (e.g. via defaults) than values. If uuids are specified in
	// TrackEventDefaults and a TrackEvent, the TrackEvent uuids override the
	// default uuid list.
	//
	// For example, this allows snapshotting the thread time clock at each
	// thread-track BEGIN and END event to capture the cpu time delta of a slice.
	ExtraCounterTrackUuids []uint64 `protobuf:"varint,31,rep,name=extra_counter_track_uuids,json=extraCounterTrackUuids" json:"extra_counter_track_uuids,omitempty"`
	ExtraCounterValues     []int64  `protobuf:"varint,12,rep,name=extra_counter_values,json=extraCounterValues" json:"extra_counter_values,omitempty"`
	// IDs of flows originating, passing through, or ending at this event.
	// Flow IDs are global within a trace.
	//
	// A flow connects a sequence of TrackEvents within or across tracks, e.g.
	// an input event may be handled on one thread but cause another event on
	// a different thread - a flow between the two events can associate them.
	//
	// The direction of the flows between events is inferred from the events'
	// timestamps. The earliest event with the same flow ID becomes the source
	// of the flow. Any events thereafter are intermediate steps of the flow,
	// until the flow terminates at the last event with the flow ID.
	//
	// Flows can also be explicitly terminated (see |terminating_flow_ids|), so
	// that the same ID can later be reused for another flow.
	FlowIds []uint64 `protobuf:"varint,36,rep,name=flow_ids,json=flowIds" json:"flow_ids,omitempty"`
	// List of flow ids which should terminate on this event, otherwise same as
	// |flow_ids|.
	// Any one flow ID should be either listed as part of |flow_ids| OR
	// |terminating_flow_ids|, not both.
	TerminatingFlowIds []uint64 `protobuf:"varint,42,rep,name=terminating_flow_ids,json=terminatingFlowIds" json:"terminating_flow_ids,omitempty"`
	// Unstable key/value annotations shown in the trace viewer but not intended
	// for metrics use.
	DebugAnnotations []*DebugAnnotation `protobuf:"bytes,4,rep,name=debug_annotations,json=debugAnnotations" json:"debug_annotations,omitempty"`
	// Typed event arguments:
	TaskExecution                *TaskExecution                  `protobuf:"bytes,5,opt,name=task_execution,json=taskExecution" json:"task_execution,omitempty"`
	LogMessage                   *LogMessage                     `protobuf:"bytes,21,opt,name=log_message,json=logMessage" json:"log_message,omitempty"`
	CcSchedulerState             *ChromeCompositorSchedulerState `protobuf:"bytes,24,opt,name=cc_scheduler_state,json=ccSchedulerState" json:"cc_scheduler_state,omitempty"`
	ChromeUserEvent              *ChromeUserEvent                `protobuf:"bytes,25,opt,name=chrome_user_event,json=chromeUserEvent" json:"chrome_user_event,omitempty"`
	ChromeKeyedService           *ChromeKeyedService             `protobuf:"bytes,26,opt,name=chrome_keyed_service,json=chromeKeyedService" json:"chrome_keyed_service,omitempty"`
	ChromeLegacyIpc              *ChromeLegacyIpc                `protobuf:"bytes,27,opt,name=chrome_legacy_ipc,json=chromeLegacyIpc" json:"chrome_legacy_ipc,omitempty"`
	ChromeHistogramSample        *ChromeHistogramSample          `protobuf:"bytes,28,opt,name=chrome_histogram_sample,json=chromeHistogramSample" json:"chrome_histogram_sample,omitempty"`
	ChromeLatencyInfo            *ChromeLatencyInfo              `protobuf:"bytes,29,opt,name=chrome_latency_info,json=chromeLatencyInfo" json:"chrome_latency_info,omitempty"`
	ChromeFrameReporter          *ChromeFrameReporter            `protobuf:"bytes,32,opt,name=chrome_frame_reporter,json=chromeFrameReporter" json:"chrome_frame_reporter,omitempty"`
	ChromeApplicationStateInfo   *ChromeApplicationStateInfo     `protobuf:"bytes,39,opt,name=chrome_application_state_info,json=chromeApplicationStateInfo" json:"chrome_application_state_info,omitempty"`
	ChromeRendererSchedulerState *ChromeRendererSchedulerState   `protobuf:"bytes,40,opt,name=chrome_renderer_scheduler_state,json=chromeRendererSchedulerState" json:"chrome_renderer_scheduler_state,omitempty"`
	ChromeWindowHandleEventInfo  *ChromeWindowHandleEventInfo    `protobuf:"bytes,41,opt,name=chrome_window_handle_event_info,json=chromeWindowHandleEventInfo" json:"chrome_window_handle_event_info,omitempty"`
	// This field is used only if the source location represents the function that
	// executes during this event.
	//
	// Types that are assignable to SourceLocationField:
	//	*TrackEvent_SourceLocation
	//	*TrackEvent_SourceLocationIid
	SourceLocationField isTrackEvent_SourceLocationField `protobuf_oneof:"source_location_field"`
	ChromeMessagePump   *ChromeMessagePump               `protobuf:"bytes,35,opt,name=chrome_message_pump,json=chromeMessagePump" json:"chrome_message_pump,omitempty"`
	ChromeMojoEventInfo *ChromeMojoEventInfo             `protobuf:"bytes,38,opt,name=chrome_mojo_event_info,json=chromeMojoEventInfo" json:"chrome_mojo_event_info,omitempty"`
	// Deprecated. Use the |timestamp| and |timestamp_clock_id| fields in
	// TracePacket instead.
	//
	// Timestamp in microseconds (usually CLOCK_MONOTONIC).
	//
	// Types that are assignable to Timestamp:
	//	*TrackEvent_TimestampDeltaUs
	//	*TrackEvent_TimestampAbsoluteUs
	Timestamp isTrackEvent_Timestamp `protobuf_oneof:"timestamp"`
	// Deprecated. Use |extra_counter_values| and |extra_counter_track_uuids| to
	// encode thread time instead.
	//
	// CPU time for the current thread (e.g., CLOCK_THREAD_CPUTIME_ID) in
	// microseconds.
	//
	// Types that are assignable to ThreadTime:
	//	*TrackEvent_ThreadTimeDeltaUs
	//	*TrackEvent_ThreadTimeAbsoluteUs
	ThreadTime isTrackEvent_ThreadTime `protobuf_oneof:"thread_time"`
	// Deprecated. Use |extra_counter_values| and |extra_counter_track_uuids| to
	// encode thread instruction count instead.
	//
	// Value of the instruction counter for the current thread.
	//
	// Types that are assignable to ThreadInstructionCount:
	//	*TrackEvent_ThreadInstructionCountDelta
	//	*TrackEvent_ThreadInstructionCountAbsolute
	ThreadInstructionCount isTrackEvent_ThreadInstructionCount `protobuf_oneof:"thread_instruction_count"`
	LegacyEvent            *TrackEvent_LegacyEvent             `protobuf:"bytes,6,opt,name=legacy_event,json=legacyEvent" json:"legacy_event,omitempty"`
}

func (x *TrackEvent) Reset() {
	*x = TrackEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[426]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEvent) ProtoMessage() {}

func (x *TrackEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[426]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEvent.ProtoReflect.Descriptor instead.
func (*TrackEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{426}
}

var extRange_TrackEvent = []protoiface.ExtensionRangeV1{
	{Start: 1000, End: 9899},
	{Start: 9900, End: 10000},
}

// Deprecated: Use TrackEvent.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*TrackEvent) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_TrackEvent
}

func (x *TrackEvent) GetCategoryIids() []uint64 {
	if x != nil {
		return x.CategoryIids
	}
	return nil
}

func (x *TrackEvent) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (m *TrackEvent) GetNameField() isTrackEvent_NameField {
	if m != nil {
		return m.NameField
	}
	return nil
}

func (x *TrackEvent) GetNameIid() uint64 {
	if x, ok := x.GetNameField().(*TrackEvent_NameIid); ok {
		return x.NameIid
	}
	return 0
}

func (x *TrackEvent) GetName() string {
	if x, ok := x.GetNameField().(*TrackEvent_Name); ok {
		return x.Name
	}
	return ""
}

func (x *TrackEvent) GetType() TrackEvent_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TrackEvent_TYPE_UNSPECIFIED
}

func (x *TrackEvent) GetTrackUuid() uint64 {
	if x != nil && x.TrackUuid != nil {
		return *x.TrackUuid
	}
	return 0
}

func (x *TrackEvent) GetCounterValue() int64 {
	if x != nil && x.CounterValue != nil {
		return *x.CounterValue
	}
	return 0
}

func (x *TrackEvent) GetExtraCounterTrackUuids() []uint64 {
	if x != nil {
		return x.ExtraCounterTrackUuids
	}
	return nil
}

func (x *TrackEvent) GetExtraCounterValues() []int64 {
	if x != nil {
		return x.ExtraCounterValues
	}
	return nil
}

func (x *TrackEvent) GetFlowIds() []uint64 {
	if x != nil {
		return x.FlowIds
	}
	return nil
}

func (x *TrackEvent) GetTerminatingFlowIds() []uint64 {
	if x != nil {
		return x.TerminatingFlowIds
	}
	return nil
}

func (x *TrackEvent) GetDebugAnnotations() []*DebugAnnotation {
	if x != nil {
		return x.DebugAnnotations
	}
	return nil
}

func (x *TrackEvent) GetTaskExecution() *TaskExecution {
	if x != nil {
		return x.TaskExecution
	}
	return nil
}

func (x *TrackEvent) GetLogMessage() *LogMessage {
	if x != nil {
		return x.LogMessage
	}
	return nil
}

func (x *TrackEvent) GetCcSchedulerState() *ChromeCompositorSchedulerState {
	if x != nil {
		return x.CcSchedulerState
	}
	return nil
}

func (x *TrackEvent) GetChromeUserEvent() *ChromeUserEvent {
	if x != nil {
		return x.ChromeUserEvent
	}
	return nil
}

func (x *TrackEvent) GetChromeKeyedService() *ChromeKeyedService {
	if x != nil {
		return x.ChromeKeyedService
	}
	return nil
}

func (x *TrackEvent) GetChromeLegacyIpc() *ChromeLegacyIpc {
	if x != nil {
		return x.ChromeLegacyIpc
	}
	return nil
}

func (x *TrackEvent) GetChromeHistogramSample() *ChromeHistogramSample {
	if x != nil {
		return x.ChromeHistogramSample
	}
	return nil
}

func (x *TrackEvent) GetChromeLatencyInfo() *ChromeLatencyInfo {
	if x != nil {
		return x.ChromeLatencyInfo
	}
	return nil
}

func (x *TrackEvent) GetChromeFrameReporter() *ChromeFrameReporter {
	if x != nil {
		return x.ChromeFrameReporter
	}
	return nil
}

func (x *TrackEvent) GetChromeApplicationStateInfo() *ChromeApplicationStateInfo {
	if x != nil {
		return x.ChromeApplicationStateInfo
	}
	return nil
}

func (x *TrackEvent) GetChromeRendererSchedulerState() *ChromeRendererSchedulerState {
	if x != nil {
		return x.ChromeRendererSchedulerState
	}
	return nil
}

func (x *TrackEvent) GetChromeWindowHandleEventInfo() *ChromeWindowHandleEventInfo {
	if x != nil {
		return x.ChromeWindowHandleEventInfo
	}
	return nil
}

func (m *TrackEvent) GetSourceLocationField() isTrackEvent_SourceLocationField {
	if m != nil {
		return m.SourceLocationField
	}
	return nil
}

func (x *TrackEvent) GetSourceLocation() *SourceLocation {
	if x, ok := x.GetSourceLocationField().(*TrackEvent_SourceLocation); ok {
		return x.SourceLocation
	}
	return nil
}

func (x *TrackEvent) GetSourceLocationIid() uint64 {
	if x, ok := x.GetSourceLocationField().(*TrackEvent_SourceLocationIid); ok {
		return x.SourceLocationIid
	}
	return 0
}

func (x *TrackEvent) GetChromeMessagePump() *ChromeMessagePump {
	if x != nil {
		return x.ChromeMessagePump
	}
	return nil
}

func (x *TrackEvent) GetChromeMojoEventInfo() *ChromeMojoEventInfo {
	if x != nil {
		return x.ChromeMojoEventInfo
	}
	return nil
}

func (m *TrackEvent) GetTimestamp() isTrackEvent_Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (x *TrackEvent) GetTimestampDeltaUs() int64 {
	if x, ok := x.GetTimestamp().(*TrackEvent_TimestampDeltaUs); ok {
		return x.TimestampDeltaUs
	}
	return 0
}

func (x *TrackEvent) GetTimestampAbsoluteUs() int64 {
	if x, ok := x.GetTimestamp().(*TrackEvent_TimestampAbsoluteUs); ok {
		return x.TimestampAbsoluteUs
	}
	return 0
}

func (m *TrackEvent) GetThreadTime() isTrackEvent_ThreadTime {
	if m != nil {
		return m.ThreadTime
	}
	return nil
}

func (x *TrackEvent) GetThreadTimeDeltaUs() int64 {
	if x, ok := x.GetThreadTime().(*TrackEvent_ThreadTimeDeltaUs); ok {
		return x.ThreadTimeDeltaUs
	}
	return 0
}

func (x *TrackEvent) GetThreadTimeAbsoluteUs() int64 {
	if x, ok := x.GetThreadTime().(*TrackEvent_ThreadTimeAbsoluteUs); ok {
		return x.ThreadTimeAbsoluteUs
	}
	return 0
}

func (m *TrackEvent) GetThreadInstructionCount() isTrackEvent_ThreadInstructionCount {
	if m != nil {
		return m.ThreadInstructionCount
	}
	return nil
}

func (x *TrackEvent) GetThreadInstructionCountDelta() int64 {
	if x, ok := x.GetThreadInstructionCount().(*TrackEvent_ThreadInstructionCountDelta); ok {
		return x.ThreadInstructionCountDelta
	}
	return 0
}

func (x *TrackEvent) GetThreadInstructionCountAbsolute() int64 {
	if x, ok := x.GetThreadInstructionCount().(*TrackEvent_ThreadInstructionCountAbsolute); ok {
		return x.ThreadInstructionCountAbsolute
	}
	return 0
}

func (x *TrackEvent) GetLegacyEvent() *TrackEvent_LegacyEvent {
	if x != nil {
		return x.LegacyEvent
	}
	return nil
}

type isTrackEvent_NameField interface {
	isTrackEvent_NameField()
}

type TrackEvent_NameIid struct {
	// interned EventName.
	NameIid uint64 `protobuf:"varint,10,opt,name=name_iid,json=nameIid,oneof"`
}

type TrackEvent_Name struct {
	// non-interned variant.
	Name string `protobuf:"bytes,23,opt,name=name,oneof"`
}

func (*TrackEvent_NameIid) isTrackEvent_NameField() {}

func (*TrackEvent_Name) isTrackEvent_NameField() {}

type isTrackEvent_SourceLocationField interface {
	isTrackEvent_SourceLocationField()
}

type TrackEvent_SourceLocation struct {
	// Non-interned field.
	SourceLocation *SourceLocation `protobuf:"bytes,33,opt,name=source_location,json=sourceLocation,oneof"`
}

type TrackEvent_SourceLocationIid struct {
	// TODO(ssid): The interned source locations are not parsed by trace
	// processor.
	// Interned field.
	SourceLocationIid uint64 `protobuf:"varint,34,opt,name=source_location_iid,json=sourceLocationIid,oneof"`
}

func (*TrackEvent_SourceLocation) isTrackEvent_SourceLocationField() {}

func (*TrackEvent_SourceLocationIid) isTrackEvent_SourceLocationField() {}

type isTrackEvent_Timestamp interface {
	isTrackEvent_Timestamp()
}

type TrackEvent_TimestampDeltaUs struct {
	// Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
	// calculate the absolute timestamp value, sum up all delta values of the
	// preceding TrackEvents since the last ThreadDescriptor and add the sum to
	// the |reference_timestamp| in ThreadDescriptor. This value should always
	// be positive.
	TimestampDeltaUs int64 `protobuf:"varint,1,opt,name=timestamp_delta_us,json=timestampDeltaUs,oneof"`
}

type TrackEvent_TimestampAbsoluteUs struct {
	// Absolute value (e.g. a manually specified timestamp in the macro).
	// This is a one-off value that does not affect delta timestamp computation
	// in subsequent TrackEvents.
	TimestampAbsoluteUs int64 `protobuf:"varint,16,opt,name=timestamp_absolute_us,json=timestampAbsoluteUs,oneof"`
}

func (*TrackEvent_TimestampDeltaUs) isTrackEvent_Timestamp() {}

func (*TrackEvent_TimestampAbsoluteUs) isTrackEvent_Timestamp() {}

type isTrackEvent_ThreadTime interface {
	isTrackEvent_ThreadTime()
}

type TrackEvent_ThreadTimeDeltaUs struct {
	// Delta timestamp value since the last TrackEvent or ThreadDescriptor. To
	// calculate the absolute timestamp value, sum up all delta values of the
	// preceding TrackEvents since the last ThreadDescriptor and add the sum to
	// the |reference_timestamp| in ThreadDescriptor. This value should always
	// be positive.
	ThreadTimeDeltaUs int64 `protobuf:"varint,2,opt,name=thread_time_delta_us,json=threadTimeDeltaUs,oneof"`
}

type TrackEvent_ThreadTimeAbsoluteUs struct {
	// This is a one-off absolute value that does not affect delta timestamp
	// computation in subsequent TrackEvents.
	ThreadTimeAbsoluteUs int64 `protobuf:"varint,17,opt,name=thread_time_absolute_us,json=threadTimeAbsoluteUs,oneof"`
}

func (*TrackEvent_ThreadTimeDeltaUs) isTrackEvent_ThreadTime() {}

func (*TrackEvent_ThreadTimeAbsoluteUs) isTrackEvent_ThreadTime() {}

type isTrackEvent_ThreadInstructionCount interface {
	isTrackEvent_ThreadInstructionCount()
}

type TrackEvent_ThreadInstructionCountDelta struct {
	// Same encoding as |thread_time| field above.
	ThreadInstructionCountDelta int64 `protobuf:"varint,8,opt,name=thread_instruction_count_delta,json=threadInstructionCountDelta,oneof"`
}

type TrackEvent_ThreadInstructionCountAbsolute struct {
	ThreadInstructionCountAbsolute int64 `protobuf:"varint,20,opt,name=thread_instruction_count_absolute,json=threadInstructionCountAbsolute,oneof"`
}

func (*TrackEvent_ThreadInstructionCountDelta) isTrackEvent_ThreadInstructionCount() {}

func (*TrackEvent_ThreadInstructionCountAbsolute) isTrackEvent_ThreadInstructionCount() {}

// Default values for fields of all TrackEvents on the same packet sequence.
// Should be emitted as part of TracePacketDefaults whenever incremental state
// is cleared. It's defined here because field IDs should match those of the
// corresponding fields in TrackEvent.
type TrackEventDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackUuid              *uint64  `protobuf:"varint,11,opt,name=track_uuid,json=trackUuid" json:"track_uuid,omitempty"`
	ExtraCounterTrackUuids []uint64 `protobuf:"varint,31,rep,name=extra_counter_track_uuids,json=extraCounterTrackUuids" json:"extra_counter_track_uuids,omitempty"`
}

func (x *TrackEventDefaults) Reset() {
	*x = TrackEventDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[427]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEventDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEventDefaults) ProtoMessage() {}

func (x *TrackEventDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[427]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEventDefaults.ProtoReflect.Descriptor instead.
func (*TrackEventDefaults) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{427}
}

func (x *TrackEventDefaults) GetTrackUuid() uint64 {
	if x != nil && x.TrackUuid != nil {
		return *x.TrackUuid
	}
	return 0
}

func (x *TrackEventDefaults) GetExtraCounterTrackUuids() []uint64 {
	if x != nil {
		return x.ExtraCounterTrackUuids
	}
	return nil
}

type EventCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid  *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *EventCategory) Reset() {
	*x = EventCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[428]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCategory) ProtoMessage() {}

func (x *EventCategory) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[428]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCategory.ProtoReflect.Descriptor instead.
func (*EventCategory) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{428}
}

func (x *EventCategory) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *EventCategory) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type EventName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iid  *uint64 `protobuf:"varint,1,opt,name=iid" json:"iid,omitempty"`
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *EventName) Reset() {
	*x = EventName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[429]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventName) ProtoMessage() {}

func (x *EventName) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[429]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventName.ProtoReflect.Descriptor instead.
func (*EventName) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{429}
}

func (x *EventName) GetIid() uint64 {
	if x != nil && x.Iid != nil {
		return *x.Iid
	}
	return 0
}

func (x *EventName) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Message that contains new entries for the interning indices of a packet
// sequence.
//
// The writer will usually emit new entries in the same TracePacket that first
// refers to them (since the last reset of interning state). They may also be
// emitted proactively in advance of referring to them in later packets.
//
// Next reserved id: 8 (up to 15).
// Next id: 27.
type InternedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each field's message type needs to specify an |iid| field, which is the ID
	// of the entry in the field's interning index. Each field constructs its own
	// index, thus interning IDs are scoped to the tracing session and field
	// (usually as a counter for efficient var-int encoding). It is illegal to
	// override entries in an index (using the same iid for two different values)
	// within the same tracing session, even after a reset of the emitted
	// interning state.
	EventCategories      []*EventCategory       `protobuf:"bytes,1,rep,name=event_categories,json=eventCategories" json:"event_categories,omitempty"`
	EventNames           []*EventName           `protobuf:"bytes,2,rep,name=event_names,json=eventNames" json:"event_names,omitempty"`
	DebugAnnotationNames []*DebugAnnotationName `protobuf:"bytes,3,rep,name=debug_annotation_names,json=debugAnnotationNames" json:"debug_annotation_names,omitempty"`
	SourceLocations      []*SourceLocation      `protobuf:"bytes,4,rep,name=source_locations,json=sourceLocations" json:"source_locations,omitempty"`
	LogMessageBody       []*LogMessageBody      `protobuf:"bytes,20,rep,name=log_message_body,json=logMessageBody" json:"log_message_body,omitempty"`
	HistogramNames       []*HistogramName       `protobuf:"bytes,25,rep,name=histogram_names,json=histogramNames" json:"histogram_names,omitempty"`
	// Build IDs of exectuable files.
	BuildIds []*InternedString `protobuf:"bytes,16,rep,name=build_ids,json=buildIds" json:"build_ids,omitempty"`
	// Paths to executable files.
	MappingPaths []*InternedString `protobuf:"bytes,17,rep,name=mapping_paths,json=mappingPaths" json:"mapping_paths,omitempty"`
	// Paths to source files.
	SourcePaths []*InternedString `protobuf:"bytes,18,rep,name=source_paths,json=sourcePaths" json:"source_paths,omitempty"`
	// Names of functions used in frames below.
	FunctionNames []*InternedString `protobuf:"bytes,5,rep,name=function_names,json=functionNames" json:"function_names,omitempty"`
	// Symbols that were added to this trace after the fact.
	ProfiledFrameSymbols []*ProfiledFrameSymbols `protobuf:"bytes,21,rep,name=profiled_frame_symbols,json=profiledFrameSymbols" json:"profiled_frame_symbols,omitempty"`
	// Executable files mapped into processes.
	Mappings []*Mapping `protobuf:"bytes,19,rep,name=mappings" json:"mappings,omitempty"`
	// Frames of callstacks of a program.
	Frames []*Frame `protobuf:"bytes,6,rep,name=frames" json:"frames,omitempty"`
	// A callstack of a program.
	Callstacks []*Callstack `protobuf:"bytes,7,rep,name=callstacks" json:"callstacks,omitempty"`
	// Additional Vulkan information sent in a VulkanMemoryEvent message
	VulkanMemoryKeys []*InternedString `protobuf:"bytes,22,rep,name=vulkan_memory_keys,json=vulkanMemoryKeys" json:"vulkan_memory_keys,omitempty"`
	// Graphics context of a render stage event.  This represent the GL
	// context for an OpenGl app or the VkDevice for a Vulkan app.
	GraphicsContexts []*InternedGraphicsContext `protobuf:"bytes,23,rep,name=graphics_contexts,json=graphicsContexts" json:"graphics_contexts,omitempty"`
	// Description of a GPU hardware queue or render stage.
	GpuSpecifications []*InternedGpuRenderStageSpecification `protobuf:"bytes,24,rep,name=gpu_specifications,json=gpuSpecifications" json:"gpu_specifications,omitempty"`
	// This is set when FtraceConfig.symbolize_ksyms = true.
	// The id of each symbol the number that will be reported in ftrace events
	// like sched_block_reason.caller and is obtained from a monotonic counter.
	// The same symbol can have different indexes in different bundles.
	// This is is NOT the real address. This is to avoid disclosing KASLR through
	// traces.
	KernelSymbols []*InternedString `protobuf:"bytes,26,rep,name=kernel_symbols,json=kernelSymbols" json:"kernel_symbols,omitempty"`
}

func (x *InternedData) Reset() {
	*x = InternedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[430]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedData) ProtoMessage() {}

func (x *InternedData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[430]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedData.ProtoReflect.Descriptor instead.
func (*InternedData) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{430}
}

func (x *InternedData) GetEventCategories() []*EventCategory {
	if x != nil {
		return x.EventCategories
	}
	return nil
}

func (x *InternedData) GetEventNames() []*EventName {
	if x != nil {
		return x.EventNames
	}
	return nil
}

func (x *InternedData) GetDebugAnnotationNames() []*DebugAnnotationName {
	if x != nil {
		return x.DebugAnnotationNames
	}
	return nil
}

func (x *InternedData) GetSourceLocations() []*SourceLocation {
	if x != nil {
		return x.SourceLocations
	}
	return nil
}

func (x *InternedData) GetLogMessageBody() []*LogMessageBody {
	if x != nil {
		return x.LogMessageBody
	}
	return nil
}

func (x *InternedData) GetHistogramNames() []*HistogramName {
	if x != nil {
		return x.HistogramNames
	}
	return nil
}

func (x *InternedData) GetBuildIds() []*InternedString {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

func (x *InternedData) GetMappingPaths() []*InternedString {
	if x != nil {
		return x.MappingPaths
	}
	return nil
}

func (x *InternedData) GetSourcePaths() []*InternedString {
	if x != nil {
		return x.SourcePaths
	}
	return nil
}

func (x *InternedData) GetFunctionNames() []*InternedString {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *InternedData) GetProfiledFrameSymbols() []*ProfiledFrameSymbols {
	if x != nil {
		return x.ProfiledFrameSymbols
	}
	return nil
}

func (x *InternedData) GetMappings() []*Mapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *InternedData) GetFrames() []*Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *InternedData) GetCallstacks() []*Callstack {
	if x != nil {
		return x.Callstacks
	}
	return nil
}

func (x *InternedData) GetVulkanMemoryKeys() []*InternedString {
	if x != nil {
		return x.VulkanMemoryKeys
	}
	return nil
}

func (x *InternedData) GetGraphicsContexts() []*InternedGraphicsContext {
	if x != nil {
		return x.GraphicsContexts
	}
	return nil
}

func (x *InternedData) GetGpuSpecifications() []*InternedGpuRenderStageSpecification {
	if x != nil {
		return x.GpuSpecifications
	}
	return nil
}

func (x *InternedData) GetKernelSymbols() []*InternedString {
	if x != nil {
		return x.KernelSymbols
	}
	return nil
}

type MemoryTrackerSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID that represents the global memory dump.
	GlobalDumpId       *uint64                                  `protobuf:"varint,1,opt,name=global_dump_id,json=globalDumpId" json:"global_dump_id,omitempty"`
	LevelOfDetail      *MemoryTrackerSnapshot_LevelOfDetail     `protobuf:"varint,2,opt,name=level_of_detail,json=levelOfDetail,enum=perfetto.protos.MemoryTrackerSnapshot_LevelOfDetail" json:"level_of_detail,omitempty"`
	ProcessMemoryDumps []*MemoryTrackerSnapshot_ProcessSnapshot `protobuf:"bytes,3,rep,name=process_memory_dumps,json=processMemoryDumps" json:"process_memory_dumps,omitempty"`
}

func (x *MemoryTrackerSnapshot) Reset() {
	*x = MemoryTrackerSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[431]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTrackerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTrackerSnapshot) ProtoMessage() {}

func (x *MemoryTrackerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[431]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTrackerSnapshot.ProtoReflect.Descriptor instead.
func (*MemoryTrackerSnapshot) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431}
}

func (x *MemoryTrackerSnapshot) GetGlobalDumpId() uint64 {
	if x != nil && x.GlobalDumpId != nil {
		return *x.GlobalDumpId
	}
	return 0
}

func (x *MemoryTrackerSnapshot) GetLevelOfDetail() MemoryTrackerSnapshot_LevelOfDetail {
	if x != nil && x.LevelOfDetail != nil {
		return *x.LevelOfDetail
	}
	return MemoryTrackerSnapshot_DETAIL_FULL
}

func (x *MemoryTrackerSnapshot) GetProcessMemoryDumps() []*MemoryTrackerSnapshot_ProcessSnapshot {
	if x != nil {
		return x.ProcessMemoryDumps
	}
	return nil
}

// Used to trace the execution of perfetto itself.
type PerfettoMetatrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See base/metatrace_events.h for definitions.
	//
	// Types that are assignable to RecordType:
	//	*PerfettoMetatrace_EventId
	//	*PerfettoMetatrace_CounterId
	//	*PerfettoMetatrace_EventName
	//	*PerfettoMetatrace_CounterName
	RecordType isPerfettoMetatrace_RecordType `protobuf_oneof:"record_type"`
	// Only when using |event_id|.
	EventDurationNs *uint32 `protobuf:"varint,3,opt,name=event_duration_ns,json=eventDurationNs" json:"event_duration_ns,omitempty"`
	// Only when using |counter_id|.
	CounterValue *int32 `protobuf:"varint,4,opt,name=counter_value,json=counterValue" json:"counter_value,omitempty"`
	// ID of the thread that emitted the event.
	ThreadId *uint32 `protobuf:"varint,5,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	// If true the meta-tracing ring buffer had overruns and hence some data is
	// missing from this point.
	HasOverruns *bool `protobuf:"varint,6,opt,name=has_overruns,json=hasOverruns" json:"has_overruns,omitempty"`
	// Args for the event.
	Args []*PerfettoMetatrace_Arg `protobuf:"bytes,7,rep,name=args" json:"args,omitempty"`
}

func (x *PerfettoMetatrace) Reset() {
	*x = PerfettoMetatrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[432]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfettoMetatrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfettoMetatrace) ProtoMessage() {}

func (x *PerfettoMetatrace) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[432]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfettoMetatrace.ProtoReflect.Descriptor instead.
func (*PerfettoMetatrace) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{432}
}

func (m *PerfettoMetatrace) GetRecordType() isPerfettoMetatrace_RecordType {
	if m != nil {
		return m.RecordType
	}
	return nil
}

func (x *PerfettoMetatrace) GetEventId() uint32 {
	if x, ok := x.GetRecordType().(*PerfettoMetatrace_EventId); ok {
		return x.EventId
	}
	return 0
}

func (x *PerfettoMetatrace) GetCounterId() uint32 {
	if x, ok := x.GetRecordType().(*PerfettoMetatrace_CounterId); ok {
		return x.CounterId
	}
	return 0
}

func (x *PerfettoMetatrace) GetEventName() string {
	if x, ok := x.GetRecordType().(*PerfettoMetatrace_EventName); ok {
		return x.EventName
	}
	return ""
}

func (x *PerfettoMetatrace) GetCounterName() string {
	if x, ok := x.GetRecordType().(*PerfettoMetatrace_CounterName); ok {
		return x.CounterName
	}
	return ""
}

func (x *PerfettoMetatrace) GetEventDurationNs() uint32 {
	if x != nil && x.EventDurationNs != nil {
		return *x.EventDurationNs
	}
	return 0
}

func (x *PerfettoMetatrace) GetCounterValue() int32 {
	if x != nil && x.CounterValue != nil {
		return *x.CounterValue
	}
	return 0
}

func (x *PerfettoMetatrace) GetThreadId() uint32 {
	if x != nil && x.ThreadId != nil {
		return *x.ThreadId
	}
	return 0
}

func (x *PerfettoMetatrace) GetHasOverruns() bool {
	if x != nil && x.HasOverruns != nil {
		return *x.HasOverruns
	}
	return false
}

func (x *PerfettoMetatrace) GetArgs() []*PerfettoMetatrace_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

type isPerfettoMetatrace_RecordType interface {
	isPerfettoMetatrace_RecordType()
}

type PerfettoMetatrace_EventId struct {
	EventId uint32 `protobuf:"varint,1,opt,name=event_id,json=eventId,oneof"`
}

type PerfettoMetatrace_CounterId struct {
	CounterId uint32 `protobuf:"varint,2,opt,name=counter_id,json=counterId,oneof"`
}

type PerfettoMetatrace_EventName struct {
	// For trace processor metatracing.
	EventName string `protobuf:"bytes,8,opt,name=event_name,json=eventName,oneof"`
}

type PerfettoMetatrace_CounterName struct {
	CounterName string `protobuf:"bytes,9,opt,name=counter_name,json=counterName,oneof"`
}

func (*PerfettoMetatrace_EventId) isPerfettoMetatrace_RecordType() {}

func (*PerfettoMetatrace_CounterId) isPerfettoMetatrace_RecordType() {}

func (*PerfettoMetatrace_EventName) isPerfettoMetatrace_RecordType() {}

func (*PerfettoMetatrace_CounterName) isPerfettoMetatrace_RecordType() {}

// Events emitted by the tracing service.
type TracingServiceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventType:
	//	*TracingServiceEvent_TracingStarted
	//	*TracingServiceEvent_AllDataSourcesStarted
	//	*TracingServiceEvent_AllDataSourcesFlushed
	//	*TracingServiceEvent_ReadTracingBuffersCompleted
	//	*TracingServiceEvent_TracingDisabled
	EventType isTracingServiceEvent_EventType `protobuf_oneof:"event_type"`
}

func (x *TracingServiceEvent) Reset() {
	*x = TracingServiceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[433]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingServiceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingServiceEvent) ProtoMessage() {}

func (x *TracingServiceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[433]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingServiceEvent.ProtoReflect.Descriptor instead.
func (*TracingServiceEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{433}
}

func (m *TracingServiceEvent) GetEventType() isTracingServiceEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *TracingServiceEvent) GetTracingStarted() bool {
	if x, ok := x.GetEventType().(*TracingServiceEvent_TracingStarted); ok {
		return x.TracingStarted
	}
	return false
}

func (x *TracingServiceEvent) GetAllDataSourcesStarted() bool {
	if x, ok := x.GetEventType().(*TracingServiceEvent_AllDataSourcesStarted); ok {
		return x.AllDataSourcesStarted
	}
	return false
}

func (x *TracingServiceEvent) GetAllDataSourcesFlushed() bool {
	if x, ok := x.GetEventType().(*TracingServiceEvent_AllDataSourcesFlushed); ok {
		return x.AllDataSourcesFlushed
	}
	return false
}

func (x *TracingServiceEvent) GetReadTracingBuffersCompleted() bool {
	if x, ok := x.GetEventType().(*TracingServiceEvent_ReadTracingBuffersCompleted); ok {
		return x.ReadTracingBuffersCompleted
	}
	return false
}

func (x *TracingServiceEvent) GetTracingDisabled() bool {
	if x, ok := x.GetEventType().(*TracingServiceEvent_TracingDisabled); ok {
		return x.TracingDisabled
	}
	return false
}

type isTracingServiceEvent_EventType interface {
	isTracingServiceEvent_EventType()
}

type TracingServiceEvent_TracingStarted struct {
	// Emitted when we start tracing and specifically, this will be before any
	// producer is notified about the existence of this trace. This is always
	// emitted before the all_data_sources_started event. This event is also
	// guaranteed to be seen (byte-offset wise) before any data packets from
	// producers.
	TracingStarted bool `protobuf:"varint,2,opt,name=tracing_started,json=tracingStarted,oneof"`
}

type TracingServiceEvent_AllDataSourcesStarted struct {
	// Emitted after all data sources saw the start event and ACKed it.
	// This identifies the point in time when it's safe to assume that all data
	// sources have been recording events.
	AllDataSourcesStarted bool `protobuf:"varint,1,opt,name=all_data_sources_started,json=allDataSourcesStarted,oneof"`
}

type TracingServiceEvent_AllDataSourcesFlushed struct {
	// Emitted when all data sources have been flushed successfully or with an
	// error (including timeouts). This can generally happen many times over the
	// course of the trace.
	AllDataSourcesFlushed bool `protobuf:"varint,3,opt,name=all_data_sources_flushed,json=allDataSourcesFlushed,oneof"`
}

type TracingServiceEvent_ReadTracingBuffersCompleted struct {
	// Emitted when reading back the central tracing buffers has been completed.
	// If |write_into_file| is specified, this can happen many times over the
	// course of the trace.
	ReadTracingBuffersCompleted bool `protobuf:"varint,4,opt,name=read_tracing_buffers_completed,json=readTracingBuffersCompleted,oneof"`
}

type TracingServiceEvent_TracingDisabled struct {
	// Emitted after tracing has been disabled and specifically, this will be
	// after all packets from producers have been included in the central
	// tracing buffer.
	TracingDisabled bool `protobuf:"varint,5,opt,name=tracing_disabled,json=tracingDisabled,oneof"`
}

func (*TracingServiceEvent_TracingStarted) isTracingServiceEvent_EventType() {}

func (*TracingServiceEvent_AllDataSourcesStarted) isTracingServiceEvent_EventType() {}

func (*TracingServiceEvent_AllDataSourcesFlushed) isTracingServiceEvent_EventType() {}

func (*TracingServiceEvent_ReadTracingBuffersCompleted) isTracingServiceEvent_EventType() {}

func (*TracingServiceEvent_TracingDisabled) isTracingServiceEvent_EventType() {}

type BatteryCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Battery capacity in microampere-hours(µAh). Also known as Coulomb counter.
	ChargeCounterUah *int64 `protobuf:"varint,1,opt,name=charge_counter_uah,json=chargeCounterUah" json:"charge_counter_uah,omitempty"`
	// Remaining battery capacity percentage of total capacity
	CapacityPercent *float32 `protobuf:"fixed32,2,opt,name=capacity_percent,json=capacityPercent" json:"capacity_percent,omitempty"`
	// Instantaneous battery current in microamperes(µA).
	// Positive values indicate net current entering the battery from a charge
	// source, negative values indicate net current discharging from the battery.
	CurrentUa *int64 `protobuf:"varint,3,opt,name=current_ua,json=currentUa" json:"current_ua,omitempty"`
	// Instantaneous battery current in microamperes(µA).
	CurrentAvgUa *int64 `protobuf:"varint,4,opt,name=current_avg_ua,json=currentAvgUa" json:"current_avg_ua,omitempty"`
}

func (x *BatteryCounters) Reset() {
	*x = BatteryCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[434]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryCounters) ProtoMessage() {}

func (x *BatteryCounters) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[434]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryCounters.ProtoReflect.Descriptor instead.
func (*BatteryCounters) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{434}
}

func (x *BatteryCounters) GetChargeCounterUah() int64 {
	if x != nil && x.ChargeCounterUah != nil {
		return *x.ChargeCounterUah
	}
	return 0
}

func (x *BatteryCounters) GetCapacityPercent() float32 {
	if x != nil && x.CapacityPercent != nil {
		return *x.CapacityPercent
	}
	return 0
}

func (x *BatteryCounters) GetCurrentUa() int64 {
	if x != nil && x.CurrentUa != nil {
		return *x.CurrentUa
	}
	return 0
}

func (x *BatteryCounters) GetCurrentAvgUa() int64 {
	if x != nil && x.CurrentAvgUa != nil {
		return *x.CurrentAvgUa
	}
	return 0
}

type PowerRails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is only emitted at the beginning of the trace.
	RailDescriptor []*PowerRails_RailDescriptor `protobuf:"bytes,1,rep,name=rail_descriptor,json=railDescriptor" json:"rail_descriptor,omitempty"`
	EnergyData     []*PowerRails_EnergyData     `protobuf:"bytes,2,rep,name=energy_data,json=energyData" json:"energy_data,omitempty"`
}

func (x *PowerRails) Reset() {
	*x = PowerRails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[435]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRails) ProtoMessage() {}

func (x *PowerRails) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[435]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRails.ProtoReflect.Descriptor instead.
func (*PowerRails) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{435}
}

func (x *PowerRails) GetRailDescriptor() []*PowerRails_RailDescriptor {
	if x != nil {
		return x.RailDescriptor
	}
	return nil
}

func (x *PowerRails) GetEnergyData() []*PowerRails_EnergyData {
	if x != nil {
		return x.EnergyData
	}
	return nil
}

type ObfuscatedMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the obfuscated field name relative to the class containing the
	// ObfuscatedMember.
	ObfuscatedName *string `protobuf:"bytes,1,opt,name=obfuscated_name,json=obfuscatedName" json:"obfuscated_name,omitempty"`
	// If this is fully qualified (i.e. contains a '.') this is the deobfuscated
	// field name including its class. Otherwise, this is this the unqualified
	// deobfuscated field name relative to the class containing this
	// ObfuscatedMember.
	DeobfuscatedName *string `protobuf:"bytes,2,opt,name=deobfuscated_name,json=deobfuscatedName" json:"deobfuscated_name,omitempty"`
}

func (x *ObfuscatedMember) Reset() {
	*x = ObfuscatedMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[436]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObfuscatedMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfuscatedMember) ProtoMessage() {}

func (x *ObfuscatedMember) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[436]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObfuscatedMember.ProtoReflect.Descriptor instead.
func (*ObfuscatedMember) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{436}
}

func (x *ObfuscatedMember) GetObfuscatedName() string {
	if x != nil && x.ObfuscatedName != nil {
		return *x.ObfuscatedName
	}
	return ""
}

func (x *ObfuscatedMember) GetDeobfuscatedName() string {
	if x != nil && x.DeobfuscatedName != nil {
		return *x.DeobfuscatedName
	}
	return ""
}

type ObfuscatedClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObfuscatedName   *string `protobuf:"bytes,1,opt,name=obfuscated_name,json=obfuscatedName" json:"obfuscated_name,omitempty"`
	DeobfuscatedName *string `protobuf:"bytes,2,opt,name=deobfuscated_name,json=deobfuscatedName" json:"deobfuscated_name,omitempty"`
	// fields.
	ObfuscatedMembers []*ObfuscatedMember `protobuf:"bytes,3,rep,name=obfuscated_members,json=obfuscatedMembers" json:"obfuscated_members,omitempty"`
	ObfuscatedMethods []*ObfuscatedMember `protobuf:"bytes,4,rep,name=obfuscated_methods,json=obfuscatedMethods" json:"obfuscated_methods,omitempty"`
}

func (x *ObfuscatedClass) Reset() {
	*x = ObfuscatedClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[437]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObfuscatedClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfuscatedClass) ProtoMessage() {}

func (x *ObfuscatedClass) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[437]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObfuscatedClass.ProtoReflect.Descriptor instead.
func (*ObfuscatedClass) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{437}
}

func (x *ObfuscatedClass) GetObfuscatedName() string {
	if x != nil && x.ObfuscatedName != nil {
		return *x.ObfuscatedName
	}
	return ""
}

func (x *ObfuscatedClass) GetDeobfuscatedName() string {
	if x != nil && x.DeobfuscatedName != nil {
		return *x.DeobfuscatedName
	}
	return ""
}

func (x *ObfuscatedClass) GetObfuscatedMembers() []*ObfuscatedMember {
	if x != nil {
		return x.ObfuscatedMembers
	}
	return nil
}

func (x *ObfuscatedClass) GetObfuscatedMethods() []*ObfuscatedMember {
	if x != nil {
		return x.ObfuscatedMethods
	}
	return nil
}

type DeobfuscationMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageName       *string            `protobuf:"bytes,1,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
	VersionCode       *int64             `protobuf:"varint,2,opt,name=version_code,json=versionCode" json:"version_code,omitempty"`
	ObfuscatedClasses []*ObfuscatedClass `protobuf:"bytes,3,rep,name=obfuscated_classes,json=obfuscatedClasses" json:"obfuscated_classes,omitempty"`
}

func (x *DeobfuscationMapping) Reset() {
	*x = DeobfuscationMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[438]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeobfuscationMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeobfuscationMapping) ProtoMessage() {}

func (x *DeobfuscationMapping) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[438]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeobfuscationMapping.ProtoReflect.Descriptor instead.
func (*DeobfuscationMapping) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{438}
}

func (x *DeobfuscationMapping) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

func (x *DeobfuscationMapping) GetVersionCode() int64 {
	if x != nil && x.VersionCode != nil {
		return *x.VersionCode
	}
	return 0
}

func (x *DeobfuscationMapping) GetObfuscatedClasses() []*ObfuscatedClass {
	if x != nil {
		return x.ObfuscatedClasses
	}
	return nil
}

type HeapGraphRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Objects retained by this root.
	ObjectIds []uint64            `protobuf:"varint,1,rep,packed,name=object_ids,json=objectIds" json:"object_ids,omitempty"`
	RootType  *HeapGraphRoot_Type `protobuf:"varint,2,opt,name=root_type,json=rootType,enum=perfetto.protos.HeapGraphRoot_Type" json:"root_type,omitempty"`
}

func (x *HeapGraphRoot) Reset() {
	*x = HeapGraphRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[439]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapGraphRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapGraphRoot) ProtoMessage() {}

func (x *HeapGraphRoot) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[439]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapGraphRoot.ProtoReflect.Descriptor instead.
func (*HeapGraphRoot) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{439}
}

func (x *HeapGraphRoot) GetObjectIds() []uint64 {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

func (x *HeapGraphRoot) GetRootType() HeapGraphRoot_Type {
	if x != nil && x.RootType != nil {
		return *x.RootType
	}
	return HeapGraphRoot_ROOT_UNKNOWN
}

type HeapGraphType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(fmayer): Consider removing this and using the index in the repeaed
	// field to save space.
	Id         *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LocationId *uint64 `protobuf:"varint,2,opt,name=location_id,json=locationId" json:"location_id,omitempty"`
	ClassName  *string `protobuf:"bytes,3,opt,name=class_name,json=className" json:"class_name,omitempty"`
	// Size of objects of this type.
	ObjectSize   *uint64 `protobuf:"varint,4,opt,name=object_size,json=objectSize" json:"object_size,omitempty"`
	SuperclassId *uint64 `protobuf:"varint,5,opt,name=superclass_id,json=superclassId" json:"superclass_id,omitempty"`
	// Indices for InternedData.field_names for the names of the fields of
	// instances of this class. This does NOT include the fields from
	// superclasses. The consumer of this data needs to walk all super
	// classes to get a full lists of fields. Objects always write the
	// fields in order of most specific class to the furthest up superclass.
	ReferenceFieldId []uint64            `protobuf:"varint,6,rep,packed,name=reference_field_id,json=referenceFieldId" json:"reference_field_id,omitempty"`
	Kind             *HeapGraphType_Kind `protobuf:"varint,7,opt,name=kind,enum=perfetto.protos.HeapGraphType_Kind" json:"kind,omitempty"`
	ClassloaderId    *uint64             `protobuf:"varint,8,opt,name=classloader_id,json=classloaderId" json:"classloader_id,omitempty"`
}

func (x *HeapGraphType) Reset() {
	*x = HeapGraphType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[440]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapGraphType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapGraphType) ProtoMessage() {}

func (x *HeapGraphType) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[440]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapGraphType.ProtoReflect.Descriptor instead.
func (*HeapGraphType) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{440}
}

func (x *HeapGraphType) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *HeapGraphType) GetLocationId() uint64 {
	if x != nil && x.LocationId != nil {
		return *x.LocationId
	}
	return 0
}

func (x *HeapGraphType) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *HeapGraphType) GetObjectSize() uint64 {
	if x != nil && x.ObjectSize != nil {
		return *x.ObjectSize
	}
	return 0
}

func (x *HeapGraphType) GetSuperclassId() uint64 {
	if x != nil && x.SuperclassId != nil {
		return *x.SuperclassId
	}
	return 0
}

func (x *HeapGraphType) GetReferenceFieldId() []uint64 {
	if x != nil {
		return x.ReferenceFieldId
	}
	return nil
}

func (x *HeapGraphType) GetKind() HeapGraphType_Kind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return HeapGraphType_KIND_UNKNOWN
}

func (x *HeapGraphType) GetClassloaderId() uint64 {
	if x != nil && x.ClassloaderId != nil {
		return *x.ClassloaderId
	}
	return 0
}

type HeapGraphObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Index for InternedData.types for the name of the type of this object.
	TypeId *uint64 `protobuf:"varint,2,opt,name=type_id,json=typeId" json:"type_id,omitempty"`
	// Bytes occupied by this objects.
	SelfSize *uint64 `protobuf:"varint,3,opt,name=self_size,json=selfSize" json:"self_size,omitempty"`
	// Add this to all non-zero values in reference_field_id. This is used to
	// get more compact varint encoding.
	ReferenceFieldIdBase *uint64 `protobuf:"varint,6,opt,name=reference_field_id_base,json=referenceFieldIdBase" json:"reference_field_id_base,omitempty"`
	// Indices for InternedData.field_names for the name of the field referring
	// to the object. For Android S+ and for instances of normal classes (e.g.
	// not instances of java.lang.Class or arrays), this is instead set in the
	// corresponding HeapGraphType, and this is left empty.
	ReferenceFieldId []uint64 `protobuf:"varint,4,rep,packed,name=reference_field_id,json=referenceFieldId" json:"reference_field_id,omitempty"`
	// Ids of the Object that is referred to.
	ReferenceObjectId []uint64 `protobuf:"varint,5,rep,packed,name=reference_object_id,json=referenceObjectId" json:"reference_object_id,omitempty"`
}

func (x *HeapGraphObject) Reset() {
	*x = HeapGraphObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[441]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapGraphObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapGraphObject) ProtoMessage() {}

func (x *HeapGraphObject) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[441]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapGraphObject.ProtoReflect.Descriptor instead.
func (*HeapGraphObject) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{441}
}

func (x *HeapGraphObject) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *HeapGraphObject) GetTypeId() uint64 {
	if x != nil && x.TypeId != nil {
		return *x.TypeId
	}
	return 0
}

func (x *HeapGraphObject) GetSelfSize() uint64 {
	if x != nil && x.SelfSize != nil {
		return *x.SelfSize
	}
	return 0
}

func (x *HeapGraphObject) GetReferenceFieldIdBase() uint64 {
	if x != nil && x.ReferenceFieldIdBase != nil {
		return *x.ReferenceFieldIdBase
	}
	return 0
}

func (x *HeapGraphObject) GetReferenceFieldId() []uint64 {
	if x != nil {
		return x.ReferenceFieldId
	}
	return nil
}

func (x *HeapGraphObject) GetReferenceObjectId() []uint64 {
	if x != nil {
		return x.ReferenceObjectId
	}
	return nil
}

type HeapGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid *int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// This contains all objects at the time this dump was taken. Some of these
	// will be live, some of those unreachable (garbage). To find the live
	// objects, the client needs to build the transitive closure of objects
	// reachable from |roots|.
	// All objects not contained within that transitive closure are garbage that
	// has not yet been collected.
	Objects []*HeapGraphObject `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
	// Roots at the time this dump was taken.
	// All live objects are reachable from the roots. All other objects are
	// garbage.
	Roots []*HeapGraphRoot `protobuf:"bytes,7,rep,name=roots" json:"roots,omitempty"`
	// Types used in HeapGraphObjects.
	Types []*HeapGraphType `protobuf:"bytes,9,rep,name=types" json:"types,omitempty"`
	// Field names for references in managed heap graph.
	FieldNames []*InternedString `protobuf:"bytes,4,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	// Paths of files used in managed heap graph.
	LocationNames []*InternedString `protobuf:"bytes,8,rep,name=location_names,json=locationNames" json:"location_names,omitempty"`
	Continued     *bool             `protobuf:"varint,5,opt,name=continued" json:"continued,omitempty"`
	Index         *uint64           `protobuf:"varint,6,opt,name=index" json:"index,omitempty"`
}

func (x *HeapGraph) Reset() {
	*x = HeapGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[442]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapGraph) ProtoMessage() {}

func (x *HeapGraph) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[442]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapGraph.ProtoReflect.Descriptor instead.
func (*HeapGraph) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{442}
}

func (x *HeapGraph) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *HeapGraph) GetObjects() []*HeapGraphObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *HeapGraph) GetRoots() []*HeapGraphRoot {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *HeapGraph) GetTypes() []*HeapGraphType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *HeapGraph) GetFieldNames() []*InternedString {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *HeapGraph) GetLocationNames() []*InternedString {
	if x != nil {
		return x.LocationNames
	}
	return nil
}

func (x *HeapGraph) GetContinued() bool {
	if x != nil && x.Continued != nil {
		return *x.Continued
	}
	return false
}

func (x *HeapGraph) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type ProfilePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The following interning tables are only used in Android version Q.
	// In newer versions, these tables are in InternedData
	// (see protos/perfetto/trace/interned_data) and are shared across
	// multiple ProfilePackets.
	// For backwards compatibility, consumers need to first look up interned
	// data in the tables within the ProfilePacket, and then, if they are empty,
	// look up in the InternedData instead.
	Strings      []*InternedString                   `protobuf:"bytes,1,rep,name=strings" json:"strings,omitempty"`
	Mappings     []*Mapping                          `protobuf:"bytes,4,rep,name=mappings" json:"mappings,omitempty"`
	Frames       []*Frame                            `protobuf:"bytes,2,rep,name=frames" json:"frames,omitempty"`
	Callstacks   []*Callstack                        `protobuf:"bytes,3,rep,name=callstacks" json:"callstacks,omitempty"`
	ProcessDumps []*ProfilePacket_ProcessHeapSamples `protobuf:"bytes,5,rep,name=process_dumps,json=processDumps" json:"process_dumps,omitempty"`
	// If this is true, the next ProfilePacket in this package_sequence_id is a
	// continuation of this one.
	// To get all samples for a process, accummulate its
	// ProcessHeapSamples.samples until you see continued=false.
	Continued *bool `protobuf:"varint,6,opt,name=continued" json:"continued,omitempty"`
	// Index of this ProfilePacket on its package_sequence_id. Can be used
	// to detect dropped data.
	// Verify these are consecutive.
	Index *uint64 `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
}

func (x *ProfilePacket) Reset() {
	*x = ProfilePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[443]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePacket) ProtoMessage() {}

func (x *ProfilePacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[443]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePacket.ProtoReflect.Descriptor instead.
func (*ProfilePacket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{443}
}

func (x *ProfilePacket) GetStrings() []*InternedString {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *ProfilePacket) GetMappings() []*Mapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

func (x *ProfilePacket) GetFrames() []*Frame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *ProfilePacket) GetCallstacks() []*Callstack {
	if x != nil {
		return x.Callstacks
	}
	return nil
}

func (x *ProfilePacket) GetProcessDumps() []*ProfilePacket_ProcessHeapSamples {
	if x != nil {
		return x.ProcessDumps
	}
	return nil
}

func (x *ProfilePacket) GetContinued() bool {
	if x != nil && x.Continued != nil {
		return *x.Continued
	}
	return false
}

func (x *ProfilePacket) GetIndex() uint64 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type StreamingAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(fmayer): Add callstack.
	Address                       []uint64 `protobuf:"varint,1,rep,name=address" json:"address,omitempty"`
	Size                          []uint64 `protobuf:"varint,2,rep,name=size" json:"size,omitempty"`
	SampleSize                    []uint64 `protobuf:"varint,3,rep,name=sample_size,json=sampleSize" json:"sample_size,omitempty"`
	ClockMonotonicCoarseTimestamp []uint64 `protobuf:"varint,4,rep,name=clock_monotonic_coarse_timestamp,json=clockMonotonicCoarseTimestamp" json:"clock_monotonic_coarse_timestamp,omitempty"`
	HeapId                        []uint32 `protobuf:"varint,5,rep,name=heap_id,json=heapId" json:"heap_id,omitempty"`
	SequenceNumber                []uint64 `protobuf:"varint,6,rep,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (x *StreamingAllocation) Reset() {
	*x = StreamingAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[444]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAllocation) ProtoMessage() {}

func (x *StreamingAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[444]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAllocation.ProtoReflect.Descriptor instead.
func (*StreamingAllocation) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{444}
}

func (x *StreamingAllocation) GetAddress() []uint64 {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StreamingAllocation) GetSize() []uint64 {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *StreamingAllocation) GetSampleSize() []uint64 {
	if x != nil {
		return x.SampleSize
	}
	return nil
}

func (x *StreamingAllocation) GetClockMonotonicCoarseTimestamp() []uint64 {
	if x != nil {
		return x.ClockMonotonicCoarseTimestamp
	}
	return nil
}

func (x *StreamingAllocation) GetHeapId() []uint32 {
	if x != nil {
		return x.HeapId
	}
	return nil
}

func (x *StreamingAllocation) GetSequenceNumber() []uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

type StreamingFree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(fmayer): Add callstack.
	Address        []uint64 `protobuf:"varint,1,rep,name=address" json:"address,omitempty"`
	HeapId         []uint32 `protobuf:"varint,2,rep,name=heap_id,json=heapId" json:"heap_id,omitempty"`
	SequenceNumber []uint64 `protobuf:"varint,3,rep,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
}

func (x *StreamingFree) Reset() {
	*x = StreamingFree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[445]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingFree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingFree) ProtoMessage() {}

func (x *StreamingFree) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[445]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingFree.ProtoReflect.Descriptor instead.
func (*StreamingFree) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{445}
}

func (x *StreamingFree) GetAddress() []uint64 {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StreamingFree) GetHeapId() []uint32 {
	if x != nil {
		return x.HeapId
	}
	return nil
}

func (x *StreamingFree) GetSequenceNumber() []uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return nil
}

// Message used to represent individual stack samples sampled at discrete
// points in time, rather than aggregated over an interval.
type StreamingProfilePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index into InternedData.callstacks
	CallstackIid []uint64 `protobuf:"varint,1,rep,name=callstack_iid,json=callstackIid" json:"callstack_iid,omitempty"`
	// TODO(eseckler): ThreadDescriptor-based timestamps are deprecated. Replace
	// this with ClockSnapshot-based delta encoding instead.
	TimestampDeltaUs []int64 `protobuf:"varint,2,rep,name=timestamp_delta_us,json=timestampDeltaUs" json:"timestamp_delta_us,omitempty"`
	ProcessPriority  *int32  `protobuf:"varint,3,opt,name=process_priority,json=processPriority" json:"process_priority,omitempty"`
}

func (x *StreamingProfilePacket) Reset() {
	*x = StreamingProfilePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[446]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingProfilePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingProfilePacket) ProtoMessage() {}

func (x *StreamingProfilePacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[446]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingProfilePacket.ProtoReflect.Descriptor instead.
func (*StreamingProfilePacket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{446}
}

func (x *StreamingProfilePacket) GetCallstackIid() []uint64 {
	if x != nil {
		return x.CallstackIid
	}
	return nil
}

func (x *StreamingProfilePacket) GetTimestampDeltaUs() []int64 {
	if x != nil {
		return x.TimestampDeltaUs
	}
	return nil
}

func (x *StreamingProfilePacket) GetProcessPriority() int32 {
	if x != nil && x.ProcessPriority != nil {
		return *x.ProcessPriority
	}
	return 0
}

// Namespace for the contained enums.
type Profiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Profiling) Reset() {
	*x = Profiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[447]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profiling) ProtoMessage() {}

func (x *Profiling) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[447]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profiling.ProtoReflect.Descriptor instead.
func (*Profiling) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{447}
}

// Individual performance sampling packet payload. Typically corresponds to a
// stack sample on a configration-dependent counter overflow.
// Timestamps are within the root packet (in the CLOCK_BOOTTIME domain).
// There are three distinct views of this message:
// * completely processed sample (callstack_iid set)
// * indication of kernel buffer data loss (kernel_records_lost set)
// * indication of skipped samples (sample_skipped_reason set)
type PerfSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu *uint32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Pid *uint32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Tid *uint32 `protobuf:"varint,3,opt,name=tid" json:"tid,omitempty"`
	// Execution state that the process was sampled at.
	CpuMode *Profiling_CpuMode `protobuf:"varint,5,opt,name=cpu_mode,json=cpuMode,enum=perfetto.protos.Profiling_CpuMode" json:"cpu_mode,omitempty"`
	// Unwound callstack. Might be partial, in which case a synthetic "error"
	// frame is appended, and |unwind_error| is set appropriately.
	CallstackIid *uint64 `protobuf:"varint,4,opt,name=callstack_iid,json=callstackIid" json:"callstack_iid,omitempty"`
	// If set, stack unwinding was incomplete due to an error.
	// Unset values should be treated as UNWIND_ERROR_NONE.
	//
	// Types that are assignable to OptionalUnwindError:
	//	*PerfSample_UnwindError
	OptionalUnwindError isPerfSample_OptionalUnwindError `protobuf_oneof:"optional_unwind_error"`
	// If set, indicates that this message is not a sample, but rather an
	// indication of data loss in the ring buffer allocated for |cpu|. Such data
	// loss occurs when the kernel has insufficient ring buffer capacity to write
	// a record (which gets discarded). A record in this context is an individual
	// ring buffer entry, and counts more than just sample records.
	//
	// The |timestamp| of the packet corresponds to the time that the producer
	// wrote the packet for trace-sorting purposes alone, and should not be
	// interpreted relative to the sample timestamps. This field is sufficient to
	// detect that *some* kernel data loss happened within the trace, but not the
	// specific time bounds of that loss (which would require tracking precedessor
	// & successor timestamps, which is not deemed necessary at the moment).
	KernelRecordsLost *uint64 `protobuf:"varint,17,opt,name=kernel_records_lost,json=kernelRecordsLost" json:"kernel_records_lost,omitempty"`
	// Types that are assignable to OptionalSampleSkippedReason:
	//	*PerfSample_SampleSkippedReason
	OptionalSampleSkippedReason isPerfSample_OptionalSampleSkippedReason `protobuf_oneof:"optional_sample_skipped_reason"`
}

func (x *PerfSample) Reset() {
	*x = PerfSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[448]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfSample) ProtoMessage() {}

func (x *PerfSample) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[448]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfSample.ProtoReflect.Descriptor instead.
func (*PerfSample) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{448}
}

func (x *PerfSample) GetCpu() uint32 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *PerfSample) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *PerfSample) GetTid() uint32 {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return 0
}

func (x *PerfSample) GetCpuMode() Profiling_CpuMode {
	if x != nil && x.CpuMode != nil {
		return *x.CpuMode
	}
	return Profiling_MODE_UNKNOWN
}

func (x *PerfSample) GetCallstackIid() uint64 {
	if x != nil && x.CallstackIid != nil {
		return *x.CallstackIid
	}
	return 0
}

func (m *PerfSample) GetOptionalUnwindError() isPerfSample_OptionalUnwindError {
	if m != nil {
		return m.OptionalUnwindError
	}
	return nil
}

func (x *PerfSample) GetUnwindError() Profiling_StackUnwindError {
	if x, ok := x.GetOptionalUnwindError().(*PerfSample_UnwindError); ok {
		return x.UnwindError
	}
	return Profiling_UNWIND_ERROR_UNKNOWN
}

func (x *PerfSample) GetKernelRecordsLost() uint64 {
	if x != nil && x.KernelRecordsLost != nil {
		return *x.KernelRecordsLost
	}
	return 0
}

func (m *PerfSample) GetOptionalSampleSkippedReason() isPerfSample_OptionalSampleSkippedReason {
	if m != nil {
		return m.OptionalSampleSkippedReason
	}
	return nil
}

func (x *PerfSample) GetSampleSkippedReason() PerfSample_SampleSkipReason {
	if x, ok := x.GetOptionalSampleSkippedReason().(*PerfSample_SampleSkippedReason); ok {
		return x.SampleSkippedReason
	}
	return PerfSample_PROFILER_SKIP_UNKNOWN
}

type isPerfSample_OptionalUnwindError interface {
	isPerfSample_OptionalUnwindError()
}

type PerfSample_UnwindError struct {
	UnwindError Profiling_StackUnwindError `protobuf:"varint,16,opt,name=unwind_error,json=unwindError,enum=perfetto.protos.Profiling_StackUnwindError,oneof"`
}

func (*PerfSample_UnwindError) isPerfSample_OptionalUnwindError() {}

type isPerfSample_OptionalSampleSkippedReason interface {
	isPerfSample_OptionalSampleSkippedReason()
}

type PerfSample_SampleSkippedReason struct {
	SampleSkippedReason PerfSample_SampleSkipReason `protobuf:"varint,18,opt,name=sample_skipped_reason,json=sampleSkippedReason,enum=perfetto.protos.PerfSample_SampleSkipReason,oneof"`
}

func (*PerfSample_SampleSkippedReason) isPerfSample_OptionalSampleSkippedReason() {}

type SmapsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path           *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	SizeKb         *uint64 `protobuf:"varint,2,opt,name=size_kb,json=sizeKb" json:"size_kb,omitempty"`
	PrivateDirtyKb *uint64 `protobuf:"varint,3,opt,name=private_dirty_kb,json=privateDirtyKb" json:"private_dirty_kb,omitempty"`
	SwapKb         *uint64 `protobuf:"varint,4,opt,name=swap_kb,json=swapKb" json:"swap_kb,omitempty"`
	// for field upload (instead of path).
	FileName *string `protobuf:"bytes,5,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	// TODO(crbug.com/1098746): Consider encoding this as incremental values.
	StartAddress           *uint64 `protobuf:"varint,6,opt,name=start_address,json=startAddress" json:"start_address,omitempty"`
	ModuleTimestamp        *uint64 `protobuf:"varint,7,opt,name=module_timestamp,json=moduleTimestamp" json:"module_timestamp,omitempty"`
	ModuleDebugid          *string `protobuf:"bytes,8,opt,name=module_debugid,json=moduleDebugid" json:"module_debugid,omitempty"`
	ModuleDebugPath        *string `protobuf:"bytes,9,opt,name=module_debug_path,json=moduleDebugPath" json:"module_debug_path,omitempty"`
	ProtectionFlags        *uint32 `protobuf:"varint,10,opt,name=protection_flags,json=protectionFlags" json:"protection_flags,omitempty"`
	PrivateCleanResidentKb *uint64 `protobuf:"varint,11,opt,name=private_clean_resident_kb,json=privateCleanResidentKb" json:"private_clean_resident_kb,omitempty"`
	SharedDirtyResidentKb  *uint64 `protobuf:"varint,12,opt,name=shared_dirty_resident_kb,json=sharedDirtyResidentKb" json:"shared_dirty_resident_kb,omitempty"`
	SharedCleanResidentKb  *uint64 `protobuf:"varint,13,opt,name=shared_clean_resident_kb,json=sharedCleanResidentKb" json:"shared_clean_resident_kb,omitempty"`
	LockedKb               *uint64 `protobuf:"varint,14,opt,name=locked_kb,json=lockedKb" json:"locked_kb,omitempty"`
	ProportionalResidentKb *uint64 `protobuf:"varint,15,opt,name=proportional_resident_kb,json=proportionalResidentKb" json:"proportional_resident_kb,omitempty"`
}

func (x *SmapsEntry) Reset() {
	*x = SmapsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[449]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmapsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmapsEntry) ProtoMessage() {}

func (x *SmapsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[449]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmapsEntry.ProtoReflect.Descriptor instead.
func (*SmapsEntry) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{449}
}

func (x *SmapsEntry) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *SmapsEntry) GetSizeKb() uint64 {
	if x != nil && x.SizeKb != nil {
		return *x.SizeKb
	}
	return 0
}

func (x *SmapsEntry) GetPrivateDirtyKb() uint64 {
	if x != nil && x.PrivateDirtyKb != nil {
		return *x.PrivateDirtyKb
	}
	return 0
}

func (x *SmapsEntry) GetSwapKb() uint64 {
	if x != nil && x.SwapKb != nil {
		return *x.SwapKb
	}
	return 0
}

func (x *SmapsEntry) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *SmapsEntry) GetStartAddress() uint64 {
	if x != nil && x.StartAddress != nil {
		return *x.StartAddress
	}
	return 0
}

func (x *SmapsEntry) GetModuleTimestamp() uint64 {
	if x != nil && x.ModuleTimestamp != nil {
		return *x.ModuleTimestamp
	}
	return 0
}

func (x *SmapsEntry) GetModuleDebugid() string {
	if x != nil && x.ModuleDebugid != nil {
		return *x.ModuleDebugid
	}
	return ""
}

func (x *SmapsEntry) GetModuleDebugPath() string {
	if x != nil && x.ModuleDebugPath != nil {
		return *x.ModuleDebugPath
	}
	return ""
}

func (x *SmapsEntry) GetProtectionFlags() uint32 {
	if x != nil && x.ProtectionFlags != nil {
		return *x.ProtectionFlags
	}
	return 0
}

func (x *SmapsEntry) GetPrivateCleanResidentKb() uint64 {
	if x != nil && x.PrivateCleanResidentKb != nil {
		return *x.PrivateCleanResidentKb
	}
	return 0
}

func (x *SmapsEntry) GetSharedDirtyResidentKb() uint64 {
	if x != nil && x.SharedDirtyResidentKb != nil {
		return *x.SharedDirtyResidentKb
	}
	return 0
}

func (x *SmapsEntry) GetSharedCleanResidentKb() uint64 {
	if x != nil && x.SharedCleanResidentKb != nil {
		return *x.SharedCleanResidentKb
	}
	return 0
}

func (x *SmapsEntry) GetLockedKb() uint64 {
	if x != nil && x.LockedKb != nil {
		return *x.LockedKb
	}
	return 0
}

func (x *SmapsEntry) GetProportionalResidentKb() uint64 {
	if x != nil && x.ProportionalResidentKb != nil {
		return *x.ProportionalResidentKb
	}
	return 0
}

type SmapsPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid     *uint32       `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Entries []*SmapsEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (x *SmapsPacket) Reset() {
	*x = SmapsPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[450]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmapsPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmapsPacket) ProtoMessage() {}

func (x *SmapsPacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[450]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmapsPacket.ProtoReflect.Descriptor instead.
func (*SmapsPacket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{450}
}

func (x *SmapsPacket) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *SmapsPacket) GetEntries() []*SmapsEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Per-process periodically sampled stats. These samples are wrapped in a
// dedicated message (as opposite to be fields in process_tree.proto) because
// they are dumped at a different rate than cmdline and thread list.
// Note: not all of these stats will be present in every ProcessStats message
// and sometimes processes may be missing . This is because counters are
// cached to reduce emission of counters which do not change.
type ProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*ProcessStats_Process `protobuf:"bytes,1,rep,name=processes" json:"processes,omitempty"`
	// The time at which we finish collecting this batch of samples;
	// the top-level packet timestamp is the time at which
	// we begin collection.
	// TODO(dancol): analysis might be improved by
	// time-bracketing each sample as well as the whole
	// ProcessStats, but doing that is probably gated on
	// a vdso for CLOCK_BOOTTIME.
	CollectionEndTimestamp *uint64 `protobuf:"varint,2,opt,name=collection_end_timestamp,json=collectionEndTimestamp" json:"collection_end_timestamp,omitempty"`
}

func (x *ProcessStats) Reset() {
	*x = ProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[451]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStats) ProtoMessage() {}

func (x *ProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[451]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStats.ProtoReflect.Descriptor instead.
func (*ProcessStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{451}
}

func (x *ProcessStats) GetProcesses() []*ProcessStats_Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *ProcessStats) GetCollectionEndTimestamp() uint64 {
	if x != nil && x.CollectionEndTimestamp != nil {
		return *x.CollectionEndTimestamp
	}
	return 0
}

// Metadata about the processes and threads in the trace.
// Note: this proto was designed to be filled in by traced_probes and should
// only be populated with accurate information coming from the system. Other
// trace writers should prefer to fill ThreadDescriptor and ProcessDescriptor
// in TrackDescriptor.
type ProcessTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of processes and threads in the client. These lists are incremental
	// and not exhaustive. A process and its threads might show up separately in
	// different ProcessTree messages. A thread might event not show up at all, if
	// no sched_switch activity was detected, for instance:
	// #0 { processes: [{pid: 10, ...}], threads: [{pid: 11, tgid: 10}] }
	// #1 { threads: [{pid: 12, tgid: 10}] }
	// #2 { processes: [{pid: 20, ...}], threads: [{pid: 13, tgid: 10}] }
	Processes []*ProcessTree_Process `protobuf:"bytes,1,rep,name=processes" json:"processes,omitempty"`
	Threads   []*ProcessTree_Thread  `protobuf:"bytes,2,rep,name=threads" json:"threads,omitempty"`
	// The time at which we finish collecting this process tree;
	// the top-level packet timestamp is the time at which
	// we begin collection.
	CollectionEndTimestamp *uint64 `protobuf:"varint,3,opt,name=collection_end_timestamp,json=collectionEndTimestamp" json:"collection_end_timestamp,omitempty"`
}

func (x *ProcessTree) Reset() {
	*x = ProcessTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[452]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTree) ProtoMessage() {}

func (x *ProcessTree) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[452]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTree.ProtoReflect.Descriptor instead.
func (*ProcessTree) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{452}
}

func (x *ProcessTree) GetProcesses() []*ProcessTree_Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *ProcessTree) GetThreads() []*ProcessTree_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *ProcessTree) GetCollectionEndTimestamp() uint64 {
	if x != nil && x.CollectionEndTimestamp != nil {
		return *x.CollectionEndTimestamp
	}
	return 0
}

// Various Linux system stat counters from /proc.
// The fields in this message can be reported at different rates and with
// different granularity. See sys_stats_config.proto.
type SysStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meminfo []*SysStats_MeminfoValue `protobuf:"bytes,1,rep,name=meminfo" json:"meminfo,omitempty"`
	Vmstat  []*SysStats_VmstatValue  `protobuf:"bytes,2,rep,name=vmstat" json:"vmstat,omitempty"`
	// One entry per cpu.
	CpuStat []*SysStats_CpuTimes `protobuf:"bytes,3,rep,name=cpu_stat,json=cpuStat" json:"cpu_stat,omitempty"`
	// Num processes forked since boot.
	// Populated only if FORK_COUNT in config.stat_counters.
	NumForks *uint64 `protobuf:"varint,4,opt,name=num_forks,json=numForks" json:"num_forks,omitempty"`
	// Total num of irqs serviced since boot.
	NumIrqTotal *uint64                    `protobuf:"varint,5,opt,name=num_irq_total,json=numIrqTotal" json:"num_irq_total,omitempty"`
	NumIrq      []*SysStats_InterruptCount `protobuf:"bytes,6,rep,name=num_irq,json=numIrq" json:"num_irq,omitempty"`
	// Total num of softirqs since boot.
	NumSoftirqTotal *uint64 `protobuf:"varint,7,opt,name=num_softirq_total,json=numSoftirqTotal" json:"num_softirq_total,omitempty"`
	// Per-softirq count.
	NumSoftirq []*SysStats_InterruptCount `protobuf:"bytes,8,rep,name=num_softirq,json=numSoftirq" json:"num_softirq,omitempty"`
	// The time at which we finish collecting this set of samples;
	// the top-level packet timestamp is the time at which
	// we begin collection.
	CollectionEndTimestamp *uint64 `protobuf:"varint,9,opt,name=collection_end_timestamp,json=collectionEndTimestamp" json:"collection_end_timestamp,omitempty"`
}

func (x *SysStats) Reset() {
	*x = SysStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[453]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStats) ProtoMessage() {}

func (x *SysStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[453]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStats.ProtoReflect.Descriptor instead.
func (*SysStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{453}
}

func (x *SysStats) GetMeminfo() []*SysStats_MeminfoValue {
	if x != nil {
		return x.Meminfo
	}
	return nil
}

func (x *SysStats) GetVmstat() []*SysStats_VmstatValue {
	if x != nil {
		return x.Vmstat
	}
	return nil
}

func (x *SysStats) GetCpuStat() []*SysStats_CpuTimes {
	if x != nil {
		return x.CpuStat
	}
	return nil
}

func (x *SysStats) GetNumForks() uint64 {
	if x != nil && x.NumForks != nil {
		return *x.NumForks
	}
	return 0
}

func (x *SysStats) GetNumIrqTotal() uint64 {
	if x != nil && x.NumIrqTotal != nil {
		return *x.NumIrqTotal
	}
	return 0
}

func (x *SysStats) GetNumIrq() []*SysStats_InterruptCount {
	if x != nil {
		return x.NumIrq
	}
	return nil
}

func (x *SysStats) GetNumSoftirqTotal() uint64 {
	if x != nil && x.NumSoftirqTotal != nil {
		return *x.NumSoftirqTotal
	}
	return 0
}

func (x *SysStats) GetNumSoftirq() []*SysStats_InterruptCount {
	if x != nil {
		return x.NumSoftirq
	}
	return nil
}

func (x *SysStats) GetCollectionEndTimestamp() uint64 {
	if x != nil && x.CollectionEndTimestamp != nil {
		return *x.CollectionEndTimestamp
	}
	return 0
}

type Utsname struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sysname *string `protobuf:"bytes,1,opt,name=sysname" json:"sysname,omitempty"`
	Version *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Release *string `protobuf:"bytes,3,opt,name=release" json:"release,omitempty"`
	Machine *string `protobuf:"bytes,4,opt,name=machine" json:"machine,omitempty"`
}

func (x *Utsname) Reset() {
	*x = Utsname{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[454]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Utsname) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Utsname) ProtoMessage() {}

func (x *Utsname) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[454]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Utsname.ProtoReflect.Descriptor instead.
func (*Utsname) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{454}
}

func (x *Utsname) GetSysname() string {
	if x != nil && x.Sysname != nil {
		return *x.Sysname
	}
	return ""
}

func (x *Utsname) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Utsname) GetRelease() string {
	if x != nil && x.Release != nil {
		return *x.Release
	}
	return ""
}

func (x *Utsname) GetMachine() string {
	if x != nil && x.Machine != nil {
		return *x.Machine
	}
	return ""
}

type SystemInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utsname                 *Utsname `protobuf:"bytes,1,opt,name=utsname" json:"utsname,omitempty"`
	AndroidBuildFingerprint *string  `protobuf:"bytes,2,opt,name=android_build_fingerprint,json=androidBuildFingerprint" json:"android_build_fingerprint,omitempty"`
	// Ticks per second - sysconf(_SC_CLK_TCK).
	Hz *int64 `protobuf:"varint,3,opt,name=hz" json:"hz,omitempty"`
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[455]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[455]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{455}
}

func (x *SystemInfo) GetUtsname() *Utsname {
	if x != nil {
		return x.Utsname
	}
	return nil
}

func (x *SystemInfo) GetAndroidBuildFingerprint() string {
	if x != nil && x.AndroidBuildFingerprint != nil {
		return *x.AndroidBuildFingerprint
	}
	return ""
}

func (x *SystemInfo) GetHz() int64 {
	if x != nil && x.Hz != nil {
		return *x.Hz
	}
	return 0
}

// Information about CPUs from procfs and sysfs.
type CpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes available CPUs, one entry per CPU.
	Cpus []*CpuInfo_Cpu `protobuf:"bytes,1,rep,name=cpus" json:"cpus,omitempty"`
}

func (x *CpuInfo) Reset() {
	*x = CpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[456]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuInfo) ProtoMessage() {}

func (x *CpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[456]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuInfo.ProtoReflect.Descriptor instead.
func (*CpuInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{456}
}

func (x *CpuInfo) GetCpus() []*CpuInfo_Cpu {
	if x != nil {
		return x.Cpus
	}
	return nil
}

// Event used by testing code.
type TestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arbitrary string used in tests.
	Str *string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
	// The current value of the random number sequence used in tests.
	SeqValue *uint32 `protobuf:"varint,2,opt,name=seq_value,json=seqValue" json:"seq_value,omitempty"`
	// Monotonically increased on each packet.
	Counter *uint64 `protobuf:"varint,3,opt,name=counter" json:"counter,omitempty"`
	// No more packets should follow (from the current sequence).
	IsLast  *bool                  `protobuf:"varint,4,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
	Payload *TestEvent_TestPayload `protobuf:"bytes,5,opt,name=payload" json:"payload,omitempty"`
}

func (x *TestEvent) Reset() {
	*x = TestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[457]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEvent) ProtoMessage() {}

func (x *TestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[457]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEvent.ProtoReflect.Descriptor instead.
func (*TestEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{457}
}

func (x *TestEvent) GetStr() string {
	if x != nil && x.Str != nil {
		return *x.Str
	}
	return ""
}

func (x *TestEvent) GetSeqValue() uint32 {
	if x != nil && x.SeqValue != nil {
		return *x.SeqValue
	}
	return 0
}

func (x *TestEvent) GetCounter() uint64 {
	if x != nil && x.Counter != nil {
		return *x.Counter
	}
	return 0
}

func (x *TestEvent) GetIsLast() bool {
	if x != nil && x.IsLast != nil {
		return *x.IsLast
	}
	return false
}

func (x *TestEvent) GetPayload() *TestEvent_TestPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

// Default values for TracePacket fields that hold for a particular TraceWriter
// packet sequence. This message contains a subset of the TracePacket fields
// with matching IDs. When provided, these fields define the default values
// that should be applied, at import time, to all TracePacket(s) with the same
// |trusted_packet_sequence_id|, unless otherwise specified in each packet.
//
// Should be reemitted whenever incremental state is cleared on the sequence.
type TracePacketDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampClockId *uint32 `protobuf:"varint,58,opt,name=timestamp_clock_id,json=timestampClockId" json:"timestamp_clock_id,omitempty"`
	// Default values for TrackEvents (e.g. default track).
	TrackEventDefaults *TrackEventDefaults `protobuf:"bytes,11,opt,name=track_event_defaults,json=trackEventDefaults" json:"track_event_defaults,omitempty"`
}

func (x *TracePacketDefaults) Reset() {
	*x = TracePacketDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[458]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracePacketDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePacketDefaults) ProtoMessage() {}

func (x *TracePacketDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[458]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePacketDefaults.ProtoReflect.Descriptor instead.
func (*TracePacketDefaults) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{458}
}

func (x *TracePacketDefaults) GetTimestampClockId() uint32 {
	if x != nil && x.TimestampClockId != nil {
		return *x.TimestampClockId
	}
	return 0
}

func (x *TracePacketDefaults) GetTrackEventDefaults() *TrackEventDefaults {
	if x != nil {
		return x.TrackEventDefaults
	}
	return nil
}

// Describes a process's attributes. Emitted as part of a TrackDescriptor,
// usually by the process's main thread.
//
// Next id: 7.
type ProcessDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid               *int32                               `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Cmdline           []string                             `protobuf:"bytes,2,rep,name=cmdline" json:"cmdline,omitempty"`
	ProcessName       *string                              `protobuf:"bytes,6,opt,name=process_name,json=processName" json:"process_name,omitempty"`
	ProcessPriority   *int32                               `protobuf:"varint,5,opt,name=process_priority,json=processPriority" json:"process_priority,omitempty"`
	ChromeProcessType *ProcessDescriptor_ChromeProcessType `protobuf:"varint,4,opt,name=chrome_process_type,json=chromeProcessType,enum=perfetto.protos.ProcessDescriptor_ChromeProcessType" json:"chrome_process_type,omitempty"`
	// To support old UI. New UI should determine default sorting by process_type.
	LegacySortIndex *int32 `protobuf:"varint,3,opt,name=legacy_sort_index,json=legacySortIndex" json:"legacy_sort_index,omitempty"`
}

func (x *ProcessDescriptor) Reset() {
	*x = ProcessDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[459]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDescriptor) ProtoMessage() {}

func (x *ProcessDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[459]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDescriptor.ProtoReflect.Descriptor instead.
func (*ProcessDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{459}
}

func (x *ProcessDescriptor) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessDescriptor) GetCmdline() []string {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *ProcessDescriptor) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *ProcessDescriptor) GetProcessPriority() int32 {
	if x != nil && x.ProcessPriority != nil {
		return *x.ProcessPriority
	}
	return 0
}

func (x *ProcessDescriptor) GetChromeProcessType() ProcessDescriptor_ChromeProcessType {
	if x != nil && x.ChromeProcessType != nil {
		return *x.ChromeProcessType
	}
	return ProcessDescriptor_PROCESS_UNSPECIFIED
}

func (x *ProcessDescriptor) GetLegacySortIndex() int32 {
	if x != nil && x.LegacySortIndex != nil {
		return *x.LegacySortIndex
	}
	return 0
}

// Describes a thread's attributes. Emitted as part of a TrackDescriptor,
// usually by the thread's trace writer.
//
// Next id: 9.
type ThreadDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid              *int32                             `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	Tid              *int32                             `protobuf:"varint,2,opt,name=tid" json:"tid,omitempty"`
	ThreadName       *string                            `protobuf:"bytes,5,opt,name=thread_name,json=threadName" json:"thread_name,omitempty"`
	ChromeThreadType *ThreadDescriptor_ChromeThreadType `protobuf:"varint,4,opt,name=chrome_thread_type,json=chromeThreadType,enum=perfetto.protos.ThreadDescriptor_ChromeThreadType" json:"chrome_thread_type,omitempty"`
	// Deprecated. Use ClockSnapshot in combination with TracePacket's timestamp
	// and timestamp_clock_id fields instead.
	ReferenceTimestampUs *int64 `protobuf:"varint,6,opt,name=reference_timestamp_us,json=referenceTimestampUs" json:"reference_timestamp_us,omitempty"`
	// Absolute reference values. Clock values in subsequent TrackEvents can be
	// encoded accumulatively and relative to these. This reduces their var-int
	// encoding size.
	// TODO(eseckler): Deprecated. Replace these with ClockSnapshot encoding.
	ReferenceThreadTimeUs           *int64 `protobuf:"varint,7,opt,name=reference_thread_time_us,json=referenceThreadTimeUs" json:"reference_thread_time_us,omitempty"`
	ReferenceThreadInstructionCount *int64 `protobuf:"varint,8,opt,name=reference_thread_instruction_count,json=referenceThreadInstructionCount" json:"reference_thread_instruction_count,omitempty"`
	// To support old UI. New UI should determine default sorting by thread_type.
	LegacySortIndex *int32 `protobuf:"varint,3,opt,name=legacy_sort_index,json=legacySortIndex" json:"legacy_sort_index,omitempty"`
}

func (x *ThreadDescriptor) Reset() {
	*x = ThreadDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[460]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadDescriptor) ProtoMessage() {}

func (x *ThreadDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[460]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadDescriptor.ProtoReflect.Descriptor instead.
func (*ThreadDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{460}
}

func (x *ThreadDescriptor) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ThreadDescriptor) GetTid() int32 {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return 0
}

func (x *ThreadDescriptor) GetThreadName() string {
	if x != nil && x.ThreadName != nil {
		return *x.ThreadName
	}
	return ""
}

func (x *ThreadDescriptor) GetChromeThreadType() ThreadDescriptor_ChromeThreadType {
	if x != nil && x.ChromeThreadType != nil {
		return *x.ChromeThreadType
	}
	return ThreadDescriptor_CHROME_THREAD_UNSPECIFIED
}

func (x *ThreadDescriptor) GetReferenceTimestampUs() int64 {
	if x != nil && x.ReferenceTimestampUs != nil {
		return *x.ReferenceTimestampUs
	}
	return 0
}

func (x *ThreadDescriptor) GetReferenceThreadTimeUs() int64 {
	if x != nil && x.ReferenceThreadTimeUs != nil {
		return *x.ReferenceThreadTimeUs
	}
	return 0
}

func (x *ThreadDescriptor) GetReferenceThreadInstructionCount() int64 {
	if x != nil && x.ReferenceThreadInstructionCount != nil {
		return *x.ReferenceThreadInstructionCount
	}
	return 0
}

func (x *ThreadDescriptor) GetLegacySortIndex() int32 {
	if x != nil && x.LegacySortIndex != nil {
		return *x.LegacySortIndex
	}
	return 0
}

// Describes the attributes for a Chrome process. Must be paired with a
// ProcessDescriptor in the same TrackDescriptor.
//
// Next id: 4.
type ChromeProcessDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessType     *ChromeProcessDescriptor_ProcessType `protobuf:"varint,1,opt,name=process_type,json=processType,enum=perfetto.protos.ChromeProcessDescriptor_ProcessType" json:"process_type,omitempty"`
	ProcessPriority *int32                               `protobuf:"varint,2,opt,name=process_priority,json=processPriority" json:"process_priority,omitempty"`
	// To support old UI. New UI should determine default sorting by process_type.
	LegacySortIndex *int32 `protobuf:"varint,3,opt,name=legacy_sort_index,json=legacySortIndex" json:"legacy_sort_index,omitempty"`
	// Name of the hosting app for WebView. Used to match renderer processes to
	// their hosting apps.
	HostAppPackageName *string `protobuf:"bytes,4,opt,name=host_app_package_name,json=hostAppPackageName" json:"host_app_package_name,omitempty"`
}

func (x *ChromeProcessDescriptor) Reset() {
	*x = ChromeProcessDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[461]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeProcessDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeProcessDescriptor) ProtoMessage() {}

func (x *ChromeProcessDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[461]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeProcessDescriptor.ProtoReflect.Descriptor instead.
func (*ChromeProcessDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{461}
}

func (x *ChromeProcessDescriptor) GetProcessType() ChromeProcessDescriptor_ProcessType {
	if x != nil && x.ProcessType != nil {
		return *x.ProcessType
	}
	return ChromeProcessDescriptor_PROCESS_UNSPECIFIED
}

func (x *ChromeProcessDescriptor) GetProcessPriority() int32 {
	if x != nil && x.ProcessPriority != nil {
		return *x.ProcessPriority
	}
	return 0
}

func (x *ChromeProcessDescriptor) GetLegacySortIndex() int32 {
	if x != nil && x.LegacySortIndex != nil {
		return *x.LegacySortIndex
	}
	return 0
}

func (x *ChromeProcessDescriptor) GetHostAppPackageName() string {
	if x != nil && x.HostAppPackageName != nil {
		return *x.HostAppPackageName
	}
	return ""
}

// Describes a Chrome thread's attributes. Emitted as part of a TrackDescriptor,
// usually by the thread's trace writer. Must be paired with a ThreadDescriptor
// in the same TrackDescriptor.
//
// Next id: 3.
type ChromeThreadDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadType *ChromeThreadDescriptor_ThreadType `protobuf:"varint,1,opt,name=thread_type,json=threadType,enum=perfetto.protos.ChromeThreadDescriptor_ThreadType" json:"thread_type,omitempty"`
	// To support old UI. New UI should determine default sorting by thread_type.
	LegacySortIndex *int32 `protobuf:"varint,2,opt,name=legacy_sort_index,json=legacySortIndex" json:"legacy_sort_index,omitempty"`
}

func (x *ChromeThreadDescriptor) Reset() {
	*x = ChromeThreadDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[462]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeThreadDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeThreadDescriptor) ProtoMessage() {}

func (x *ChromeThreadDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[462]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeThreadDescriptor.ProtoReflect.Descriptor instead.
func (*ChromeThreadDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{462}
}

func (x *ChromeThreadDescriptor) GetThreadType() ChromeThreadDescriptor_ThreadType {
	if x != nil && x.ThreadType != nil {
		return *x.ThreadType
	}
	return ChromeThreadDescriptor_THREAD_UNSPECIFIED
}

func (x *ChromeThreadDescriptor) GetLegacySortIndex() int32 {
	if x != nil && x.LegacySortIndex != nil {
		return *x.LegacySortIndex
	}
	return 0
}

// Defines properties of a counter track, e.g. for built-in counters (thread
// time, instruction count, ..) or user-specified counters (e.g. memory usage of
// a specific app component).
//
// Counter tracks only support TYPE_COUNTER track events, which specify new
// values for the counter. For counters that require per-slice values, counter
// values can instead be provided in a more efficient encoding via TrackEvent's
// |extra_counter_track_uuids| and |extra_counter_values| fields. However,
// slice-type events cannot be emitted onto a counter track.
//
// Values for counters that are only emitted on a single packet sequence can
// optionally be delta-encoded, see |is_incremental|.
//
// Next id: 6.
type CounterDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For built-in counters (e.g. thread time). Custom user-specified counters
	// (e.g. those emitted by TRACE_COUNTER macros of the client library)
	// shouldn't set this, and instead provide a counter name via TrackDescriptor.
	Type *CounterDescriptor_BuiltinCounterType `protobuf:"varint,1,opt,name=type,enum=perfetto.protos.CounterDescriptor_BuiltinCounterType" json:"type,omitempty"`
	// Names of categories of the counter (usually for user-specified counters).
	// In the client library, categories are a way to turn groups of individual
	// counters (or events) on or off.
	Categories []string `protobuf:"bytes,2,rep,name=categories" json:"categories,omitempty"`
	// Type of the counter's values. Built-in counters imply a value for this
	// field.
	Unit *CounterDescriptor_Unit `protobuf:"varint,3,opt,name=unit,enum=perfetto.protos.CounterDescriptor_Unit" json:"unit,omitempty"`
	// Multiplication factor of this counter's values, e.g. to supply
	// COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
	UnitMultiplier *int64 `protobuf:"varint,4,opt,name=unit_multiplier,json=unitMultiplier" json:"unit_multiplier,omitempty"`
	// Whether values for this counter are provided as delta values. Only
	// supported for counters that are emitted on a single packet-sequence (e.g.
	// thread time). Counter values in subsequent packets on the current packet
	// sequence will be interpreted as delta values from the sequence's most
	// recent value for the counter. When incremental state is cleared, the
	// counter value is considered to be reset to 0. Thus, the first value after
	// incremental state is cleared is effectively an absolute value.
	IsIncremental *bool `protobuf:"varint,5,opt,name=is_incremental,json=isIncremental" json:"is_incremental,omitempty"`
}

func (x *CounterDescriptor) Reset() {
	*x = CounterDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[463]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterDescriptor) ProtoMessage() {}

func (x *CounterDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[463]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterDescriptor.ProtoReflect.Descriptor instead.
func (*CounterDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{463}
}

func (x *CounterDescriptor) GetType() CounterDescriptor_BuiltinCounterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CounterDescriptor_COUNTER_UNSPECIFIED
}

func (x *CounterDescriptor) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CounterDescriptor) GetUnit() CounterDescriptor_Unit {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return CounterDescriptor_UNIT_UNSPECIFIED
}

func (x *CounterDescriptor) GetUnitMultiplier() int64 {
	if x != nil && x.UnitMultiplier != nil {
		return *x.UnitMultiplier
	}
	return 0
}

func (x *CounterDescriptor) GetIsIncremental() bool {
	if x != nil && x.IsIncremental != nil {
		return *x.IsIncremental
	}
	return false
}

// Defines a track for TrackEvents. Slices and instant events on the same track
// will be nested based on their timestamps, see TrackEvent::Type.
//
// A TrackDescriptor only needs to be emitted by one trace writer / producer and
// is valid for the entirety of the trace. To ensure the descriptor isn't lost
// when the ring buffer wraps, it should be reemitted whenever incremental state
// is cleared.
//
// As a fallback, TrackEvents emitted without an explicit track association will
// be associated with an implicit trace-global track (uuid = 0), see also
// |TrackEvent::track_uuid|. It is possible but not necessary to emit a
// TrackDescriptor for this implicit track.
//
// Next id: 9.
type TrackDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID that identifies this track. This ID is global to the whole trace.
	// Producers should ensure that it is unlikely to clash with IDs emitted by
	// other producers. A value of 0 denotes the implicit trace-global track.
	//
	// For example, legacy TRACE_EVENT macros may use a hash involving the async
	// event id + id_scope, pid, and/or tid to compute this ID.
	Uuid *uint64 `protobuf:"varint,1,opt,name=uuid" json:"uuid,omitempty"`
	// A parent track reference can be used to describe relationships between
	// tracks. For example, to define an asynchronous track which is scoped to a
	// specific process, specify the uuid for that process's process track here.
	// Similarly, to associate a COUNTER_THREAD_TIME_NS counter track with a
	// thread, specify the uuid for that thread's thread track here.
	ParentUuid *uint64 `protobuf:"varint,5,opt,name=parent_uuid,json=parentUuid" json:"parent_uuid,omitempty"`
	// Name of the track. Optional - if unspecified, it may be derived from the
	// process/thread name (process/thread tracks), the first event's name (async
	// tracks), or counter name (counter tracks).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Associate the track with a process, making it the process-global track.
	// There should only be one such track per process (usually for instant
	// events; trace processor uses this fact to detect pid reuse). If you need
	// more (e.g. for asynchronous events), create child tracks using parent_uuid.
	//
	// Trace processor will merge events on a process track with slice-type events
	// from other sources (e.g. ftrace) for the same process into a single
	// timeline view.
	Process       *ProcessDescriptor       `protobuf:"bytes,3,opt,name=process" json:"process,omitempty"`
	ChromeProcess *ChromeProcessDescriptor `protobuf:"bytes,6,opt,name=chrome_process,json=chromeProcess" json:"chrome_process,omitempty"`
	// Associate the track with a thread, indicating that the track's events
	// describe synchronous code execution on the thread. There should only be one
	// such track per thread (trace processor uses this fact to detect tid reuse).
	//
	// Trace processor will merge events on a thread track with slice-type events
	// from other sources (e.g. ftrace) for the same thread into a single timeline
	// view.
	Thread       *ThreadDescriptor       `protobuf:"bytes,4,opt,name=thread" json:"thread,omitempty"`
	ChromeThread *ChromeThreadDescriptor `protobuf:"bytes,7,opt,name=chrome_thread,json=chromeThread" json:"chrome_thread,omitempty"`
	// Descriptor for a counter track. If set, the track will only support
	// TYPE_COUNTER TrackEvents (and values provided via TrackEvent's
	// |extra_counter_values|).
	Counter *CounterDescriptor `protobuf:"bytes,8,opt,name=counter" json:"counter,omitempty"`
}

func (x *TrackDescriptor) Reset() {
	*x = TrackDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[464]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackDescriptor) ProtoMessage() {}

func (x *TrackDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[464]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackDescriptor.ProtoReflect.Descriptor instead.
func (*TrackDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{464}
}

func (x *TrackDescriptor) GetUuid() uint64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *TrackDescriptor) GetParentUuid() uint64 {
	if x != nil && x.ParentUuid != nil {
		return *x.ParentUuid
	}
	return 0
}

func (x *TrackDescriptor) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TrackDescriptor) GetProcess() *ProcessDescriptor {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *TrackDescriptor) GetChromeProcess() *ChromeProcessDescriptor {
	if x != nil {
		return x.ChromeProcess
	}
	return nil
}

func (x *TrackDescriptor) GetThread() *ThreadDescriptor {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *TrackDescriptor) GetChromeThread() *ChromeThreadDescriptor {
	if x != nil {
		return x.ChromeThread
	}
	return nil
}

func (x *TrackDescriptor) GetCounter() *CounterDescriptor {
	if x != nil {
		return x.Counter
	}
	return nil
}

// When a TracingSession receives a trigger it records the boot time nanoseconds
// in the TracePacket's timestamp field as well as the name of the producer that
// triggered it. We emit this data so filtering can be done on triggers received
// in the trace.
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the trigger which was received.
	TriggerName *string `protobuf:"bytes,1,opt,name=trigger_name,json=triggerName" json:"trigger_name,omitempty"`
	// The actual producer that activated |trigger|.
	ProducerName *string `protobuf:"bytes,2,opt,name=producer_name,json=producerName" json:"producer_name,omitempty"`
	// The verified UID of the producer.
	TrustedProducerUid *int32 `protobuf:"varint,3,opt,name=trusted_producer_uid,json=trustedProducerUid" json:"trusted_producer_uid,omitempty"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[465]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[465]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{465}
}

func (x *Trigger) GetTriggerName() string {
	if x != nil && x.TriggerName != nil {
		return *x.TriggerName
	}
	return ""
}

func (x *Trigger) GetProducerName() string {
	if x != nil && x.ProducerName != nil {
		return *x.ProducerName
	}
	return ""
}

func (x *Trigger) GetTrustedProducerUid() int32 {
	if x != nil && x.TrustedProducerUid != nil {
		return *x.TrustedProducerUid
	}
	return 0
}

// TracePacket is the root object of a Perfeto trace.
// A Perfetto trace is a linear sequence of TracePacket(s).
//
// The tracing service guarantees that all TracePacket(s) written by a given
// TraceWriter are seen in-order, without gaps or duplicates. If, for any
// reason, a TraceWriter sequence becomes invalid, no more packets are returned
// to the Consumer (or written into the trace file).
// TracePacket(s) written by different TraceWriter(s), hence even different
// data sources, can be seen in arbitrary order.
// The consumer can re-establish a total order, if interested, using the packet
// timestamps, after having synchronized the different clocks onto a global
// clock.
//
// The tracing service is agnostic of the content of TracePacket, with the
// exception of few fields (e.g.. trusted_*, trace_config) that are written by
// the service itself.
//
// See the [Buffers and Dataflow](/docs/concepts/buffers.md) doc for details.
//
// Next reserved id: 13 (up to 15).
// Next id: 77.
type TracePacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp of the TracePacket.
	// By default this timestamps refers to the trace clock (CLOCK_BOOTTIME on
	// Android). It can be overridden using a different timestamp_clock_id.
	// The clock domain definition in ClockSnapshot can also override:
	// - The unit (default: 1ns).
	// - The absolute vs delta encoding (default: absolute timestamp).
	Timestamp *uint64 `protobuf:"varint,8,opt,name=timestamp" json:"timestamp,omitempty"`
	// Specifies the ID of the clock used for the TracePacket |timestamp|. Can be
	// one of the built-in types from ClockSnapshot::BuiltinClocks, or a
	// producer-defined clock id.
	// If unspecified and if no default per-sequence value has been provided via
	// TracePacketDefaults, it defaults to BuiltinClocks::BOOTTIME.
	TimestampClockId *uint32 `protobuf:"varint,58,opt,name=timestamp_clock_id,json=timestampClockId" json:"timestamp_clock_id,omitempty"`
	// Types that are assignable to Data:
	//	*TracePacket_ProcessTree
	//	*TracePacket_ProcessStats
	//	*TracePacket_InodeFileMap
	//	*TracePacket_ChromeEvents
	//	*TracePacket_ClockSnapshot
	//	*TracePacket_SysStats
	//	*TracePacket_TrackEvent
	//	*TracePacket_TraceConfig
	//	*TracePacket_FtraceStats
	//	*TracePacket_TraceStats
	//	*TracePacket_ProfilePacket
	//	*TracePacket_StreamingAllocation
	//	*TracePacket_StreamingFree
	//	*TracePacket_Battery
	//	*TracePacket_PowerRails
	//	*TracePacket_AndroidLog
	//	*TracePacket_SystemInfo
	//	*TracePacket_Trigger
	//	*TracePacket_PackagesList
	//	*TracePacket_ChromeBenchmarkMetadata
	//	*TracePacket_PerfettoMetatrace
	//	*TracePacket_ChromeMetadata
	//	*TracePacket_GpuCounterEvent
	//	*TracePacket_GpuRenderStageEvent
	//	*TracePacket_StreamingProfilePacket
	//	*TracePacket_HeapGraph
	//	*TracePacket_GraphicsFrameEvent
	//	*TracePacket_VulkanMemoryEvent
	//	*TracePacket_GpuLog
	//	*TracePacket_VulkanApiEvent
	//	*TracePacket_PerfSample
	//	*TracePacket_CpuInfo
	//	*TracePacket_SmapsPacket
	//	*TracePacket_ServiceEvent
	//	*TracePacket_InitialDisplayState
	//	*TracePacket_GpuMemTotalEvent
	//	*TracePacket_MemoryTrackerSnapshot
	//	*TracePacket_FrameTimelineEvent
	//	*TracePacket_ProfiledFrameSymbols
	//	*TracePacket_ModuleSymbols
	//	*TracePacket_DeobfuscationMapping
	//	*TracePacket_TrackDescriptor
	//	*TracePacket_ProcessDescriptor
	//	*TracePacket_ThreadDescriptor
	//	*TracePacket_FtraceEvents
	//	*TracePacket_SynchronizationMarker
	//	*TracePacket_CompressedPackets
	//	*TracePacket_ExtensionDescriptor
	//	*TracePacket_ForTesting
	Data isTracePacket_Data `protobuf_oneof:"data"`
	// Trusted user id of the producer which generated this packet. Keep in sync
	// with TrustedPacket.trusted_uid.
	//
	// TODO(eseckler): Emit this field in a PacketSequenceDescriptor message
	// instead.
	//
	// Types that are assignable to OptionalTrustedUid:
	//	*TracePacket_TrustedUid
	OptionalTrustedUid isTracePacket_OptionalTrustedUid `protobuf_oneof:"optional_trusted_uid"`
	// Service-assigned identifier of the packet sequence this packet belongs to.
	// Uniquely identifies a producer + writer pair within the tracing session. A
	// value of zero denotes an invalid ID. Keep in sync with
	// TrustedPacket.trusted_packet_sequence_id.
	//
	// Types that are assignable to OptionalTrustedPacketSequenceId:
	//	*TracePacket_TrustedPacketSequenceId
	OptionalTrustedPacketSequenceId isTracePacket_OptionalTrustedPacketSequenceId `protobuf_oneof:"optional_trusted_packet_sequence_id"`
	// Incrementally emitted interned data, valid only on the packet's sequence
	// (packets with the same |trusted_packet_sequence_id|). The writer will
	// usually emit new interned data in the same TracePacket that first refers to
	// it (since the last reset of interning state). It may also be emitted
	// proactively in advance of referring to them in later packets.
	InternedData  *InternedData `protobuf:"bytes,12,opt,name=interned_data,json=internedData" json:"interned_data,omitempty"`
	SequenceFlags *uint32       `protobuf:"varint,13,opt,name=sequence_flags,json=sequenceFlags" json:"sequence_flags,omitempty"`
	// DEPRECATED. Moved to SequenceFlags::SEQ_INCREMENTAL_STATE_CLEARED.
	IncrementalStateCleared *bool `protobuf:"varint,41,opt,name=incremental_state_cleared,json=incrementalStateCleared" json:"incremental_state_cleared,omitempty"`
	// Default values for fields of later TracePackets emitted on this packet's
	// sequence (TracePackets with the same |trusted_packet_sequence_id|).
	// It must be reemitted when incremental state is cleared (see
	// |incremental_state_cleared|).
	// Requires that any future packet emitted on the same sequence specifies
	// the SEQ_NEEDS_INCREMENTAL_STATE flag.
	// TracePacketDefaults always override the global defaults for any future
	// packet on this sequence (regardless of SEQ_NEEDS_INCREMENTAL_STATE).
	TracePacketDefaults *TracePacketDefaults `protobuf:"bytes,59,opt,name=trace_packet_defaults,json=tracePacketDefaults" json:"trace_packet_defaults,omitempty"`
	// Flag set by the service if, for the current packet sequence (see
	// |trusted_packet_sequence_id|), either:
	// * this is the first packet, or
	// * one or multiple packets were dropped since the last packet that the
	//   consumer read from the sequence. This can happen if chunks in the trace
	//   buffer are overridden before the consumer could read them when the trace
	//   is configured in ring buffer mode.
	//
	// When packet loss occurs, incrementally emitted data (including interned
	// data) on the sequence should be considered invalid up until the next packet
	// with SEQ_INCREMENTAL_STATE_CLEARED set.
	PreviousPacketDropped *bool `protobuf:"varint,42,opt,name=previous_packet_dropped,json=previousPacketDropped" json:"previous_packet_dropped,omitempty"`
}

func (x *TracePacket) Reset() {
	*x = TracePacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[466]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracePacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePacket) ProtoMessage() {}

func (x *TracePacket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[466]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePacket.ProtoReflect.Descriptor instead.
func (*TracePacket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{466}
}

func (x *TracePacket) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TracePacket) GetTimestampClockId() uint32 {
	if x != nil && x.TimestampClockId != nil {
		return *x.TimestampClockId
	}
	return 0
}

func (m *TracePacket) GetData() isTracePacket_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TracePacket) GetProcessTree() *ProcessTree {
	if x, ok := x.GetData().(*TracePacket_ProcessTree); ok {
		return x.ProcessTree
	}
	return nil
}

func (x *TracePacket) GetProcessStats() *ProcessStats {
	if x, ok := x.GetData().(*TracePacket_ProcessStats); ok {
		return x.ProcessStats
	}
	return nil
}

func (x *TracePacket) GetInodeFileMap() *InodeFileMap {
	if x, ok := x.GetData().(*TracePacket_InodeFileMap); ok {
		return x.InodeFileMap
	}
	return nil
}

func (x *TracePacket) GetChromeEvents() *ChromeEventBundle {
	if x, ok := x.GetData().(*TracePacket_ChromeEvents); ok {
		return x.ChromeEvents
	}
	return nil
}

func (x *TracePacket) GetClockSnapshot() *ClockSnapshot {
	if x, ok := x.GetData().(*TracePacket_ClockSnapshot); ok {
		return x.ClockSnapshot
	}
	return nil
}

func (x *TracePacket) GetSysStats() *SysStats {
	if x, ok := x.GetData().(*TracePacket_SysStats); ok {
		return x.SysStats
	}
	return nil
}

func (x *TracePacket) GetTrackEvent() *TrackEvent {
	if x, ok := x.GetData().(*TracePacket_TrackEvent); ok {
		return x.TrackEvent
	}
	return nil
}

func (x *TracePacket) GetTraceConfig() *TraceConfig {
	if x, ok := x.GetData().(*TracePacket_TraceConfig); ok {
		return x.TraceConfig
	}
	return nil
}

func (x *TracePacket) GetFtraceStats() *FtraceStats {
	if x, ok := x.GetData().(*TracePacket_FtraceStats); ok {
		return x.FtraceStats
	}
	return nil
}

func (x *TracePacket) GetTraceStats() *TraceStats {
	if x, ok := x.GetData().(*TracePacket_TraceStats); ok {
		return x.TraceStats
	}
	return nil
}

func (x *TracePacket) GetProfilePacket() *ProfilePacket {
	if x, ok := x.GetData().(*TracePacket_ProfilePacket); ok {
		return x.ProfilePacket
	}
	return nil
}

func (x *TracePacket) GetStreamingAllocation() *StreamingAllocation {
	if x, ok := x.GetData().(*TracePacket_StreamingAllocation); ok {
		return x.StreamingAllocation
	}
	return nil
}

func (x *TracePacket) GetStreamingFree() *StreamingFree {
	if x, ok := x.GetData().(*TracePacket_StreamingFree); ok {
		return x.StreamingFree
	}
	return nil
}

func (x *TracePacket) GetBattery() *BatteryCounters {
	if x, ok := x.GetData().(*TracePacket_Battery); ok {
		return x.Battery
	}
	return nil
}

func (x *TracePacket) GetPowerRails() *PowerRails {
	if x, ok := x.GetData().(*TracePacket_PowerRails); ok {
		return x.PowerRails
	}
	return nil
}

func (x *TracePacket) GetAndroidLog() *AndroidLogPacket {
	if x, ok := x.GetData().(*TracePacket_AndroidLog); ok {
		return x.AndroidLog
	}
	return nil
}

func (x *TracePacket) GetSystemInfo() *SystemInfo {
	if x, ok := x.GetData().(*TracePacket_SystemInfo); ok {
		return x.SystemInfo
	}
	return nil
}

func (x *TracePacket) GetTrigger() *Trigger {
	if x, ok := x.GetData().(*TracePacket_Trigger); ok {
		return x.Trigger
	}
	return nil
}

func (x *TracePacket) GetPackagesList() *PackagesList {
	if x, ok := x.GetData().(*TracePacket_PackagesList); ok {
		return x.PackagesList
	}
	return nil
}

func (x *TracePacket) GetChromeBenchmarkMetadata() *ChromeBenchmarkMetadata {
	if x, ok := x.GetData().(*TracePacket_ChromeBenchmarkMetadata); ok {
		return x.ChromeBenchmarkMetadata
	}
	return nil
}

func (x *TracePacket) GetPerfettoMetatrace() *PerfettoMetatrace {
	if x, ok := x.GetData().(*TracePacket_PerfettoMetatrace); ok {
		return x.PerfettoMetatrace
	}
	return nil
}

func (x *TracePacket) GetChromeMetadata() *ChromeMetadataPacket {
	if x, ok := x.GetData().(*TracePacket_ChromeMetadata); ok {
		return x.ChromeMetadata
	}
	return nil
}

func (x *TracePacket) GetGpuCounterEvent() *GpuCounterEvent {
	if x, ok := x.GetData().(*TracePacket_GpuCounterEvent); ok {
		return x.GpuCounterEvent
	}
	return nil
}

func (x *TracePacket) GetGpuRenderStageEvent() *GpuRenderStageEvent {
	if x, ok := x.GetData().(*TracePacket_GpuRenderStageEvent); ok {
		return x.GpuRenderStageEvent
	}
	return nil
}

func (x *TracePacket) GetStreamingProfilePacket() *StreamingProfilePacket {
	if x, ok := x.GetData().(*TracePacket_StreamingProfilePacket); ok {
		return x.StreamingProfilePacket
	}
	return nil
}

func (x *TracePacket) GetHeapGraph() *HeapGraph {
	if x, ok := x.GetData().(*TracePacket_HeapGraph); ok {
		return x.HeapGraph
	}
	return nil
}

func (x *TracePacket) GetGraphicsFrameEvent() *GraphicsFrameEvent {
	if x, ok := x.GetData().(*TracePacket_GraphicsFrameEvent); ok {
		return x.GraphicsFrameEvent
	}
	return nil
}

func (x *TracePacket) GetVulkanMemoryEvent() *VulkanMemoryEvent {
	if x, ok := x.GetData().(*TracePacket_VulkanMemoryEvent); ok {
		return x.VulkanMemoryEvent
	}
	return nil
}

func (x *TracePacket) GetGpuLog() *GpuLog {
	if x, ok := x.GetData().(*TracePacket_GpuLog); ok {
		return x.GpuLog
	}
	return nil
}

func (x *TracePacket) GetVulkanApiEvent() *VulkanApiEvent {
	if x, ok := x.GetData().(*TracePacket_VulkanApiEvent); ok {
		return x.VulkanApiEvent
	}
	return nil
}

func (x *TracePacket) GetPerfSample() *PerfSample {
	if x, ok := x.GetData().(*TracePacket_PerfSample); ok {
		return x.PerfSample
	}
	return nil
}

func (x *TracePacket) GetCpuInfo() *CpuInfo {
	if x, ok := x.GetData().(*TracePacket_CpuInfo); ok {
		return x.CpuInfo
	}
	return nil
}

func (x *TracePacket) GetSmapsPacket() *SmapsPacket {
	if x, ok := x.GetData().(*TracePacket_SmapsPacket); ok {
		return x.SmapsPacket
	}
	return nil
}

func (x *TracePacket) GetServiceEvent() *TracingServiceEvent {
	if x, ok := x.GetData().(*TracePacket_ServiceEvent); ok {
		return x.ServiceEvent
	}
	return nil
}

func (x *TracePacket) GetInitialDisplayState() *InitialDisplayState {
	if x, ok := x.GetData().(*TracePacket_InitialDisplayState); ok {
		return x.InitialDisplayState
	}
	return nil
}

func (x *TracePacket) GetGpuMemTotalEvent() *GpuMemTotalEvent {
	if x, ok := x.GetData().(*TracePacket_GpuMemTotalEvent); ok {
		return x.GpuMemTotalEvent
	}
	return nil
}

func (x *TracePacket) GetMemoryTrackerSnapshot() *MemoryTrackerSnapshot {
	if x, ok := x.GetData().(*TracePacket_MemoryTrackerSnapshot); ok {
		return x.MemoryTrackerSnapshot
	}
	return nil
}

func (x *TracePacket) GetFrameTimelineEvent() *FrameTimelineEvent {
	if x, ok := x.GetData().(*TracePacket_FrameTimelineEvent); ok {
		return x.FrameTimelineEvent
	}
	return nil
}

func (x *TracePacket) GetProfiledFrameSymbols() *ProfiledFrameSymbols {
	if x, ok := x.GetData().(*TracePacket_ProfiledFrameSymbols); ok {
		return x.ProfiledFrameSymbols
	}
	return nil
}

func (x *TracePacket) GetModuleSymbols() *ModuleSymbols {
	if x, ok := x.GetData().(*TracePacket_ModuleSymbols); ok {
		return x.ModuleSymbols
	}
	return nil
}

func (x *TracePacket) GetDeobfuscationMapping() *DeobfuscationMapping {
	if x, ok := x.GetData().(*TracePacket_DeobfuscationMapping); ok {
		return x.DeobfuscationMapping
	}
	return nil
}

func (x *TracePacket) GetTrackDescriptor() *TrackDescriptor {
	if x, ok := x.GetData().(*TracePacket_TrackDescriptor); ok {
		return x.TrackDescriptor
	}
	return nil
}

func (x *TracePacket) GetProcessDescriptor() *ProcessDescriptor {
	if x, ok := x.GetData().(*TracePacket_ProcessDescriptor); ok {
		return x.ProcessDescriptor
	}
	return nil
}

func (x *TracePacket) GetThreadDescriptor() *ThreadDescriptor {
	if x, ok := x.GetData().(*TracePacket_ThreadDescriptor); ok {
		return x.ThreadDescriptor
	}
	return nil
}

func (x *TracePacket) GetFtraceEvents() *FtraceEventBundle {
	if x, ok := x.GetData().(*TracePacket_FtraceEvents); ok {
		return x.FtraceEvents
	}
	return nil
}

func (x *TracePacket) GetSynchronizationMarker() []byte {
	if x, ok := x.GetData().(*TracePacket_SynchronizationMarker); ok {
		return x.SynchronizationMarker
	}
	return nil
}

func (x *TracePacket) GetCompressedPackets() []byte {
	if x, ok := x.GetData().(*TracePacket_CompressedPackets); ok {
		return x.CompressedPackets
	}
	return nil
}

func (x *TracePacket) GetExtensionDescriptor() *ExtensionDescriptor {
	if x, ok := x.GetData().(*TracePacket_ExtensionDescriptor); ok {
		return x.ExtensionDescriptor
	}
	return nil
}

func (x *TracePacket) GetForTesting() *TestEvent {
	if x, ok := x.GetData().(*TracePacket_ForTesting); ok {
		return x.ForTesting
	}
	return nil
}

func (m *TracePacket) GetOptionalTrustedUid() isTracePacket_OptionalTrustedUid {
	if m != nil {
		return m.OptionalTrustedUid
	}
	return nil
}

func (x *TracePacket) GetTrustedUid() int32 {
	if x, ok := x.GetOptionalTrustedUid().(*TracePacket_TrustedUid); ok {
		return x.TrustedUid
	}
	return 0
}

func (m *TracePacket) GetOptionalTrustedPacketSequenceId() isTracePacket_OptionalTrustedPacketSequenceId {
	if m != nil {
		return m.OptionalTrustedPacketSequenceId
	}
	return nil
}

func (x *TracePacket) GetTrustedPacketSequenceId() uint32 {
	if x, ok := x.GetOptionalTrustedPacketSequenceId().(*TracePacket_TrustedPacketSequenceId); ok {
		return x.TrustedPacketSequenceId
	}
	return 0
}

func (x *TracePacket) GetInternedData() *InternedData {
	if x != nil {
		return x.InternedData
	}
	return nil
}

func (x *TracePacket) GetSequenceFlags() uint32 {
	if x != nil && x.SequenceFlags != nil {
		return *x.SequenceFlags
	}
	return 0
}

func (x *TracePacket) GetIncrementalStateCleared() bool {
	if x != nil && x.IncrementalStateCleared != nil {
		return *x.IncrementalStateCleared
	}
	return false
}

func (x *TracePacket) GetTracePacketDefaults() *TracePacketDefaults {
	if x != nil {
		return x.TracePacketDefaults
	}
	return nil
}

func (x *TracePacket) GetPreviousPacketDropped() bool {
	if x != nil && x.PreviousPacketDropped != nil {
		return *x.PreviousPacketDropped
	}
	return false
}

type isTracePacket_Data interface {
	isTracePacket_Data()
}

type TracePacket_ProcessTree struct {
	ProcessTree *ProcessTree `protobuf:"bytes,2,opt,name=process_tree,json=processTree,oneof"`
}

type TracePacket_ProcessStats struct {
	ProcessStats *ProcessStats `protobuf:"bytes,9,opt,name=process_stats,json=processStats,oneof"`
}

type TracePacket_InodeFileMap struct {
	InodeFileMap *InodeFileMap `protobuf:"bytes,4,opt,name=inode_file_map,json=inodeFileMap,oneof"`
}

type TracePacket_ChromeEvents struct {
	ChromeEvents *ChromeEventBundle `protobuf:"bytes,5,opt,name=chrome_events,json=chromeEvents,oneof"`
}

type TracePacket_ClockSnapshot struct {
	ClockSnapshot *ClockSnapshot `protobuf:"bytes,6,opt,name=clock_snapshot,json=clockSnapshot,oneof"`
}

type TracePacket_SysStats struct {
	SysStats *SysStats `protobuf:"bytes,7,opt,name=sys_stats,json=sysStats,oneof"`
}

type TracePacket_TrackEvent struct {
	TrackEvent *TrackEvent `protobuf:"bytes,11,opt,name=track_event,json=trackEvent,oneof"`
}

type TracePacket_TraceConfig struct {
	TraceConfig *TraceConfig `protobuf:"bytes,33,opt,name=trace_config,json=traceConfig,oneof"`
}

type TracePacket_FtraceStats struct {
	FtraceStats *FtraceStats `protobuf:"bytes,34,opt,name=ftrace_stats,json=ftraceStats,oneof"`
}

type TracePacket_TraceStats struct {
	TraceStats *TraceStats `protobuf:"bytes,35,opt,name=trace_stats,json=traceStats,oneof"`
}

type TracePacket_ProfilePacket struct {
	ProfilePacket *ProfilePacket `protobuf:"bytes,37,opt,name=profile_packet,json=profilePacket,oneof"`
}

type TracePacket_StreamingAllocation struct {
	StreamingAllocation *StreamingAllocation `protobuf:"bytes,74,opt,name=streaming_allocation,json=streamingAllocation,oneof"`
}

type TracePacket_StreamingFree struct {
	StreamingFree *StreamingFree `protobuf:"bytes,75,opt,name=streaming_free,json=streamingFree,oneof"`
}

type TracePacket_Battery struct {
	Battery *BatteryCounters `protobuf:"bytes,38,opt,name=battery,oneof"`
}

type TracePacket_PowerRails struct {
	PowerRails *PowerRails `protobuf:"bytes,40,opt,name=power_rails,json=powerRails,oneof"`
}

type TracePacket_AndroidLog struct {
	AndroidLog *AndroidLogPacket `protobuf:"bytes,39,opt,name=android_log,json=androidLog,oneof"`
}

type TracePacket_SystemInfo struct {
	SystemInfo *SystemInfo `protobuf:"bytes,45,opt,name=system_info,json=systemInfo,oneof"`
}

type TracePacket_Trigger struct {
	Trigger *Trigger `protobuf:"bytes,46,opt,name=trigger,oneof"`
}

type TracePacket_PackagesList struct {
	PackagesList *PackagesList `protobuf:"bytes,47,opt,name=packages_list,json=packagesList,oneof"`
}

type TracePacket_ChromeBenchmarkMetadata struct {
	ChromeBenchmarkMetadata *ChromeBenchmarkMetadata `protobuf:"bytes,48,opt,name=chrome_benchmark_metadata,json=chromeBenchmarkMetadata,oneof"`
}

type TracePacket_PerfettoMetatrace struct {
	PerfettoMetatrace *PerfettoMetatrace `protobuf:"bytes,49,opt,name=perfetto_metatrace,json=perfettoMetatrace,oneof"`
}

type TracePacket_ChromeMetadata struct {
	ChromeMetadata *ChromeMetadataPacket `protobuf:"bytes,51,opt,name=chrome_metadata,json=chromeMetadata,oneof"`
}

type TracePacket_GpuCounterEvent struct {
	GpuCounterEvent *GpuCounterEvent `protobuf:"bytes,52,opt,name=gpu_counter_event,json=gpuCounterEvent,oneof"`
}

type TracePacket_GpuRenderStageEvent struct {
	GpuRenderStageEvent *GpuRenderStageEvent `protobuf:"bytes,53,opt,name=gpu_render_stage_event,json=gpuRenderStageEvent,oneof"`
}

type TracePacket_StreamingProfilePacket struct {
	StreamingProfilePacket *StreamingProfilePacket `protobuf:"bytes,54,opt,name=streaming_profile_packet,json=streamingProfilePacket,oneof"`
}

type TracePacket_HeapGraph struct {
	HeapGraph *HeapGraph `protobuf:"bytes,56,opt,name=heap_graph,json=heapGraph,oneof"`
}

type TracePacket_GraphicsFrameEvent struct {
	GraphicsFrameEvent *GraphicsFrameEvent `protobuf:"bytes,57,opt,name=graphics_frame_event,json=graphicsFrameEvent,oneof"`
}

type TracePacket_VulkanMemoryEvent struct {
	VulkanMemoryEvent *VulkanMemoryEvent `protobuf:"bytes,62,opt,name=vulkan_memory_event,json=vulkanMemoryEvent,oneof"`
}

type TracePacket_GpuLog struct {
	GpuLog *GpuLog `protobuf:"bytes,63,opt,name=gpu_log,json=gpuLog,oneof"`
}

type TracePacket_VulkanApiEvent struct {
	VulkanApiEvent *VulkanApiEvent `protobuf:"bytes,65,opt,name=vulkan_api_event,json=vulkanApiEvent,oneof"`
}

type TracePacket_PerfSample struct {
	PerfSample *PerfSample `protobuf:"bytes,66,opt,name=perf_sample,json=perfSample,oneof"`
}

type TracePacket_CpuInfo struct {
	CpuInfo *CpuInfo `protobuf:"bytes,67,opt,name=cpu_info,json=cpuInfo,oneof"`
}

type TracePacket_SmapsPacket struct {
	SmapsPacket *SmapsPacket `protobuf:"bytes,68,opt,name=smaps_packet,json=smapsPacket,oneof"`
}

type TracePacket_ServiceEvent struct {
	ServiceEvent *TracingServiceEvent `protobuf:"bytes,69,opt,name=service_event,json=serviceEvent,oneof"`
}

type TracePacket_InitialDisplayState struct {
	InitialDisplayState *InitialDisplayState `protobuf:"bytes,70,opt,name=initial_display_state,json=initialDisplayState,oneof"`
}

type TracePacket_GpuMemTotalEvent struct {
	GpuMemTotalEvent *GpuMemTotalEvent `protobuf:"bytes,71,opt,name=gpu_mem_total_event,json=gpuMemTotalEvent,oneof"`
}

type TracePacket_MemoryTrackerSnapshot struct {
	MemoryTrackerSnapshot *MemoryTrackerSnapshot `protobuf:"bytes,73,opt,name=memory_tracker_snapshot,json=memoryTrackerSnapshot,oneof"`
}

type TracePacket_FrameTimelineEvent struct {
	FrameTimelineEvent *FrameTimelineEvent `protobuf:"bytes,76,opt,name=frame_timeline_event,json=frameTimelineEvent,oneof"`
}

type TracePacket_ProfiledFrameSymbols struct {
	// Only used in profile packets.
	ProfiledFrameSymbols *ProfiledFrameSymbols `protobuf:"bytes,55,opt,name=profiled_frame_symbols,json=profiledFrameSymbols,oneof"`
}

type TracePacket_ModuleSymbols struct {
	ModuleSymbols *ModuleSymbols `protobuf:"bytes,61,opt,name=module_symbols,json=moduleSymbols,oneof"`
}

type TracePacket_DeobfuscationMapping struct {
	DeobfuscationMapping *DeobfuscationMapping `protobuf:"bytes,64,opt,name=deobfuscation_mapping,json=deobfuscationMapping,oneof"`
}

type TracePacket_TrackDescriptor struct {
	// Only used by TrackEvent.
	TrackDescriptor *TrackDescriptor `protobuf:"bytes,60,opt,name=track_descriptor,json=trackDescriptor,oneof"`
}

type TracePacket_ProcessDescriptor struct {
	// Deprecated, use TrackDescriptor instead.
	ProcessDescriptor *ProcessDescriptor `protobuf:"bytes,43,opt,name=process_descriptor,json=processDescriptor,oneof"`
}

type TracePacket_ThreadDescriptor struct {
	// Deprecated, use TrackDescriptor instead.
	ThreadDescriptor *ThreadDescriptor `protobuf:"bytes,44,opt,name=thread_descriptor,json=threadDescriptor,oneof"`
}

type TracePacket_FtraceEvents struct {
	// Events from the Linux kernel ftrace infrastructure.
	FtraceEvents *FtraceEventBundle `protobuf:"bytes,1,opt,name=ftrace_events,json=ftraceEvents,oneof"`
}

type TracePacket_SynchronizationMarker struct {
	// This field is emitted at periodic intervals (~10s) and
	// contains always the binary representation of the UUID
	// {82477a76-b28d-42ba-81dc-33326d57a079}. This is used to be able to
	// efficiently partition long traces without having to fully parse them.
	SynchronizationMarker []byte `protobuf:"bytes,36,opt,name=synchronization_marker,json=synchronizationMarker,oneof"`
}

type TracePacket_CompressedPackets struct {
	// Zero or more proto encoded trace packets compressed using deflate.
	// Each compressed_packets TracePacket (including the two field ids and
	// sizes) should be less than 512KB.
	CompressedPackets []byte `protobuf:"bytes,50,opt,name=compressed_packets,json=compressedPackets,oneof"`
}

type TracePacket_ExtensionDescriptor struct {
	// Data sources can extend the trace proto with custom extension protos (see
	// docs/design-docs/extensions.md). When they do that, the descriptor of
	// their extension proto descriptor is serialized in this packet. This
	// allows trace_processor to deserialize extended messages using reflection
	// even if the extension proto is not checked in the Perfetto repo.
	ExtensionDescriptor *ExtensionDescriptor `protobuf:"bytes,72,opt,name=extension_descriptor,json=extensionDescriptor,oneof"`
}

type TracePacket_ForTesting struct {
	// This field is only used for testing.
	// In previous versions of this proto this field had the id 268435455
	// This caused many problems:
	// - protozero decoder does not handle field ids larger than 999.
	// - old versions of protoc produce Java bindings with syntax errors when
	//   the field id is large enough.
	ForTesting *TestEvent `protobuf:"bytes,900,opt,name=for_testing,json=forTesting,oneof"`
}

func (*TracePacket_ProcessTree) isTracePacket_Data() {}

func (*TracePacket_ProcessStats) isTracePacket_Data() {}

func (*TracePacket_InodeFileMap) isTracePacket_Data() {}

func (*TracePacket_ChromeEvents) isTracePacket_Data() {}

func (*TracePacket_ClockSnapshot) isTracePacket_Data() {}

func (*TracePacket_SysStats) isTracePacket_Data() {}

func (*TracePacket_TrackEvent) isTracePacket_Data() {}

func (*TracePacket_TraceConfig) isTracePacket_Data() {}

func (*TracePacket_FtraceStats) isTracePacket_Data() {}

func (*TracePacket_TraceStats) isTracePacket_Data() {}

func (*TracePacket_ProfilePacket) isTracePacket_Data() {}

func (*TracePacket_StreamingAllocation) isTracePacket_Data() {}

func (*TracePacket_StreamingFree) isTracePacket_Data() {}

func (*TracePacket_Battery) isTracePacket_Data() {}

func (*TracePacket_PowerRails) isTracePacket_Data() {}

func (*TracePacket_AndroidLog) isTracePacket_Data() {}

func (*TracePacket_SystemInfo) isTracePacket_Data() {}

func (*TracePacket_Trigger) isTracePacket_Data() {}

func (*TracePacket_PackagesList) isTracePacket_Data() {}

func (*TracePacket_ChromeBenchmarkMetadata) isTracePacket_Data() {}

func (*TracePacket_PerfettoMetatrace) isTracePacket_Data() {}

func (*TracePacket_ChromeMetadata) isTracePacket_Data() {}

func (*TracePacket_GpuCounterEvent) isTracePacket_Data() {}

func (*TracePacket_GpuRenderStageEvent) isTracePacket_Data() {}

func (*TracePacket_StreamingProfilePacket) isTracePacket_Data() {}

func (*TracePacket_HeapGraph) isTracePacket_Data() {}

func (*TracePacket_GraphicsFrameEvent) isTracePacket_Data() {}

func (*TracePacket_VulkanMemoryEvent) isTracePacket_Data() {}

func (*TracePacket_GpuLog) isTracePacket_Data() {}

func (*TracePacket_VulkanApiEvent) isTracePacket_Data() {}

func (*TracePacket_PerfSample) isTracePacket_Data() {}

func (*TracePacket_CpuInfo) isTracePacket_Data() {}

func (*TracePacket_SmapsPacket) isTracePacket_Data() {}

func (*TracePacket_ServiceEvent) isTracePacket_Data() {}

func (*TracePacket_InitialDisplayState) isTracePacket_Data() {}

func (*TracePacket_GpuMemTotalEvent) isTracePacket_Data() {}

func (*TracePacket_MemoryTrackerSnapshot) isTracePacket_Data() {}

func (*TracePacket_FrameTimelineEvent) isTracePacket_Data() {}

func (*TracePacket_ProfiledFrameSymbols) isTracePacket_Data() {}

func (*TracePacket_ModuleSymbols) isTracePacket_Data() {}

func (*TracePacket_DeobfuscationMapping) isTracePacket_Data() {}

func (*TracePacket_TrackDescriptor) isTracePacket_Data() {}

func (*TracePacket_ProcessDescriptor) isTracePacket_Data() {}

func (*TracePacket_ThreadDescriptor) isTracePacket_Data() {}

func (*TracePacket_FtraceEvents) isTracePacket_Data() {}

func (*TracePacket_SynchronizationMarker) isTracePacket_Data() {}

func (*TracePacket_CompressedPackets) isTracePacket_Data() {}

func (*TracePacket_ExtensionDescriptor) isTracePacket_Data() {}

func (*TracePacket_ForTesting) isTracePacket_Data() {}

type isTracePacket_OptionalTrustedUid interface {
	isTracePacket_OptionalTrustedUid()
}

type TracePacket_TrustedUid struct {
	TrustedUid int32 `protobuf:"varint,3,opt,name=trusted_uid,json=trustedUid,oneof"`
}

func (*TracePacket_TrustedUid) isTracePacket_OptionalTrustedUid() {}

type isTracePacket_OptionalTrustedPacketSequenceId interface {
	isTracePacket_OptionalTrustedPacketSequenceId()
}

type TracePacket_TrustedPacketSequenceId struct {
	TrustedPacketSequenceId uint32 `protobuf:"varint,10,opt,name=trusted_packet_sequence_id,json=trustedPacketSequenceId,oneof"`
}

func (*TracePacket_TrustedPacketSequenceId) isTracePacket_OptionalTrustedPacketSequenceId() {}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packet []*TracePacket `protobuf:"bytes,1,rep,name=packet" json:"packet,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[467]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[467]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{467}
}

func (x *Trace) GetPacket() []*TracePacket {
	if x != nil {
		return x.Packet
	}
	return nil
}

// Extensions for TrackEvent used for integration testing. This proto file is
// compiled to descriptor and is used in tools/diff_test_trace_processor.py.
//
// See docs/design-docs/extensions.md for more details.
type TestExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestExtension) Reset() {
	*x = TestExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[468]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExtension) ProtoMessage() {}

func (x *TestExtension) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[468]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExtension.ProtoReflect.Descriptor instead.
func (*TestExtension) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{468}
}

type TestExtensionChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildFieldForTesting *string `protobuf:"bytes,1,opt,name=child_field_for_testing,json=childFieldForTesting" json:"child_field_for_testing,omitempty"`
}

func (x *TestExtensionChild) Reset() {
	*x = TestExtensionChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[469]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestExtensionChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExtensionChild) ProtoMessage() {}

func (x *TestExtensionChild) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[469]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExtensionChild.ProtoReflect.Descriptor instead.
func (*TestExtensionChild) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{469}
}

func (x *TestExtensionChild) GetChildFieldForTesting() string {
	if x != nil && x.ChildFieldForTesting != nil {
		return *x.ChildFieldForTesting
	}
	return ""
}

type GpuCounterDescriptor_GpuCounterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterId   *uint32 `protobuf:"varint,1,opt,name=counter_id,json=counterId" json:"counter_id,omitempty"`
	Name        *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Types that are assignable to PeakValue:
	//	*GpuCounterDescriptor_GpuCounterSpec_IntPeakValue
	//	*GpuCounterDescriptor_GpuCounterSpec_DoublePeakValue
	PeakValue        isGpuCounterDescriptor_GpuCounterSpec_PeakValue `protobuf_oneof:"peak_value"`
	NumeratorUnits   []GpuCounterDescriptor_MeasureUnit              `protobuf:"varint,7,rep,name=numerator_units,json=numeratorUnits,enum=perfetto.protos.GpuCounterDescriptor_MeasureUnit" json:"numerator_units,omitempty"`
	DenominatorUnits []GpuCounterDescriptor_MeasureUnit              `protobuf:"varint,8,rep,name=denominator_units,json=denominatorUnits,enum=perfetto.protos.GpuCounterDescriptor_MeasureUnit" json:"denominator_units,omitempty"`
	SelectByDefault  *bool                                           `protobuf:"varint,9,opt,name=select_by_default,json=selectByDefault" json:"select_by_default,omitempty"`
	Groups           []GpuCounterDescriptor_GpuCounterGroup          `protobuf:"varint,10,rep,name=groups,enum=perfetto.protos.GpuCounterDescriptor_GpuCounterGroup" json:"groups,omitempty"`
}

func (x *GpuCounterDescriptor_GpuCounterSpec) Reset() {
	*x = GpuCounterDescriptor_GpuCounterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[470]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuCounterDescriptor_GpuCounterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuCounterDescriptor_GpuCounterSpec) ProtoMessage() {}

func (x *GpuCounterDescriptor_GpuCounterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[470]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuCounterDescriptor_GpuCounterSpec.ProtoReflect.Descriptor instead.
func (*GpuCounterDescriptor_GpuCounterSpec) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetCounterId() uint32 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (m *GpuCounterDescriptor_GpuCounterSpec) GetPeakValue() isGpuCounterDescriptor_GpuCounterSpec_PeakValue {
	if m != nil {
		return m.PeakValue
	}
	return nil
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetIntPeakValue() int64 {
	if x, ok := x.GetPeakValue().(*GpuCounterDescriptor_GpuCounterSpec_IntPeakValue); ok {
		return x.IntPeakValue
	}
	return 0
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetDoublePeakValue() float64 {
	if x, ok := x.GetPeakValue().(*GpuCounterDescriptor_GpuCounterSpec_DoublePeakValue); ok {
		return x.DoublePeakValue
	}
	return 0
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetNumeratorUnits() []GpuCounterDescriptor_MeasureUnit {
	if x != nil {
		return x.NumeratorUnits
	}
	return nil
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetDenominatorUnits() []GpuCounterDescriptor_MeasureUnit {
	if x != nil {
		return x.DenominatorUnits
	}
	return nil
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetSelectByDefault() bool {
	if x != nil && x.SelectByDefault != nil {
		return *x.SelectByDefault
	}
	return false
}

func (x *GpuCounterDescriptor_GpuCounterSpec) GetGroups() []GpuCounterDescriptor_GpuCounterGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type isGpuCounterDescriptor_GpuCounterSpec_PeakValue interface {
	isGpuCounterDescriptor_GpuCounterSpec_PeakValue()
}

type GpuCounterDescriptor_GpuCounterSpec_IntPeakValue struct {
	IntPeakValue int64 `protobuf:"varint,5,opt,name=int_peak_value,json=intPeakValue,oneof"`
}

type GpuCounterDescriptor_GpuCounterSpec_DoublePeakValue struct {
	DoublePeakValue float64 `protobuf:"fixed64,6,opt,name=double_peak_value,json=doublePeakValue,oneof"`
}

func (*GpuCounterDescriptor_GpuCounterSpec_IntPeakValue) isGpuCounterDescriptor_GpuCounterSpec_PeakValue() {
}

func (*GpuCounterDescriptor_GpuCounterSpec_DoublePeakValue) isGpuCounterDescriptor_GpuCounterSpec_PeakValue() {
}

// Allow producer to group counters into block to represent counter islands.
// A capacity may be specified to indicate the number of counters that can be
// enable simultaneously in that block.
type GpuCounterDescriptor_GpuCounterBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required. Unique ID for the counter group.
	BlockId *uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId" json:"block_id,omitempty"`
	// optional. Number of counters supported by the block. No limit if unset.
	BlockCapacity *uint32 `protobuf:"varint,2,opt,name=block_capacity,json=blockCapacity" json:"block_capacity,omitempty"`
	// optional. Name of block.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// optional. Description for the block.
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// list of counters that are part of the block.
	CounterIds []uint32 `protobuf:"varint,5,rep,name=counter_ids,json=counterIds" json:"counter_ids,omitempty"`
}

func (x *GpuCounterDescriptor_GpuCounterBlock) Reset() {
	*x = GpuCounterDescriptor_GpuCounterBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[471]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuCounterDescriptor_GpuCounterBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuCounterDescriptor_GpuCounterBlock) ProtoMessage() {}

func (x *GpuCounterDescriptor_GpuCounterBlock) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[471]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuCounterDescriptor_GpuCounterBlock.ProtoReflect.Descriptor instead.
func (*GpuCounterDescriptor_GpuCounterBlock) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GpuCounterDescriptor_GpuCounterBlock) GetBlockId() uint32 {
	if x != nil && x.BlockId != nil {
		return *x.BlockId
	}
	return 0
}

func (x *GpuCounterDescriptor_GpuCounterBlock) GetBlockCapacity() uint32 {
	if x != nil && x.BlockCapacity != nil {
		return *x.BlockCapacity
	}
	return 0
}

func (x *GpuCounterDescriptor_GpuCounterBlock) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GpuCounterDescriptor_GpuCounterBlock) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GpuCounterDescriptor_GpuCounterBlock) GetCounterIds() []uint32 {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

// Describes a producer process.
type TracingServiceState_Producer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the producer (monotonic counter).
	Id *int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Typically matches the process name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Unix uid of the remote process.
	Uid *int32 `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
}

func (x *TracingServiceState_Producer) Reset() {
	*x = TracingServiceState_Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[472]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingServiceState_Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingServiceState_Producer) ProtoMessage() {}

func (x *TracingServiceState_Producer) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[472]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingServiceState_Producer.ProtoReflect.Descriptor instead.
func (*TracingServiceState_Producer) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TracingServiceState_Producer) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TracingServiceState_Producer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TracingServiceState_Producer) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

// Describes a data source registered by a producer. Data sources are listed
// regardless of the fact that they are being used or not.
type TracingServiceState_DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Descriptor passed by the data source when calling RegisterDataSource().
	DsDescriptor *DataSourceDescriptor `protobuf:"bytes,1,opt,name=ds_descriptor,json=dsDescriptor" json:"ds_descriptor,omitempty"`
	// ID of the producer, as per Producer.id.
	ProducerId *int32 `protobuf:"varint,2,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
}

func (x *TracingServiceState_DataSource) Reset() {
	*x = TracingServiceState_DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[473]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingServiceState_DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingServiceState_DataSource) ProtoMessage() {}

func (x *TracingServiceState_DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[473]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingServiceState_DataSource.ProtoReflect.Descriptor instead.
func (*TracingServiceState_DataSource) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TracingServiceState_DataSource) GetDsDescriptor() *DataSourceDescriptor {
	if x != nil {
		return x.DsDescriptor
	}
	return nil
}

func (x *TracingServiceState_DataSource) GetProducerId() int32 {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return 0
}

// Configuration for compact encoding of scheduler events. When enabled (and
// recording the relevant ftrace events), specific high-volume events are
// encoded in a denser format than normal.
type FtraceConfig_CompactSchedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, and sched_switch or sched_waking ftrace events are enabled,
	// record those events in the compact format.
	Enabled *bool `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
}

func (x *FtraceConfig_CompactSchedConfig) Reset() {
	*x = FtraceConfig_CompactSchedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[474]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceConfig_CompactSchedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceConfig_CompactSchedConfig) ProtoMessage() {}

func (x *FtraceConfig_CompactSchedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[474]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceConfig_CompactSchedConfig.ProtoReflect.Descriptor instead.
func (*FtraceConfig_CompactSchedConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{9, 0}
}

func (x *FtraceConfig_CompactSchedConfig) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

type InodeFileConfig_MountPointMappingEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mountpoint *string  `protobuf:"bytes,1,opt,name=mountpoint" json:"mountpoint,omitempty"`
	ScanRoots  []string `protobuf:"bytes,2,rep,name=scan_roots,json=scanRoots" json:"scan_roots,omitempty"`
}

func (x *InodeFileConfig_MountPointMappingEntry) Reset() {
	*x = InodeFileConfig_MountPointMappingEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[475]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InodeFileConfig_MountPointMappingEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InodeFileConfig_MountPointMappingEntry) ProtoMessage() {}

func (x *InodeFileConfig_MountPointMappingEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[475]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InodeFileConfig_MountPointMappingEntry.ProtoReflect.Descriptor instead.
func (*InodeFileConfig_MountPointMappingEntry) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{12, 0}
}

func (x *InodeFileConfig_MountPointMappingEntry) GetMountpoint() string {
	if x != nil && x.Mountpoint != nil {
		return *x.Mountpoint
	}
	return ""
}

func (x *InodeFileConfig_MountPointMappingEntry) GetScanRoots() []string {
	if x != nil {
		return x.ScanRoots
	}
	return nil
}

type HeapprofdConfig_ContinuousDumpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ms to wait before first dump.
	DumpPhaseMs *uint32 `protobuf:"varint,5,opt,name=dump_phase_ms,json=dumpPhaseMs" json:"dump_phase_ms,omitempty"`
	// ms to wait between following dumps.
	DumpIntervalMs *uint32 `protobuf:"varint,6,opt,name=dump_interval_ms,json=dumpIntervalMs" json:"dump_interval_ms,omitempty"`
}

func (x *HeapprofdConfig_ContinuousDumpConfig) Reset() {
	*x = HeapprofdConfig_ContinuousDumpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[476]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeapprofdConfig_ContinuousDumpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeapprofdConfig_ContinuousDumpConfig) ProtoMessage() {}

func (x *HeapprofdConfig_ContinuousDumpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[476]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeapprofdConfig_ContinuousDumpConfig.ProtoReflect.Descriptor instead.
func (*HeapprofdConfig_ContinuousDumpConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{16, 0}
}

func (x *HeapprofdConfig_ContinuousDumpConfig) GetDumpPhaseMs() uint32 {
	if x != nil && x.DumpPhaseMs != nil {
		return *x.DumpPhaseMs
	}
	return 0
}

func (x *HeapprofdConfig_ContinuousDumpConfig) GetDumpIntervalMs() uint32 {
	if x != nil && x.DumpIntervalMs != nil {
		return *x.DumpIntervalMs
	}
	return 0
}

// If dump_interval_ms != 0, the following configuration is used.
type JavaHprofConfig_ContinuousDumpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ms to wait before first continuous dump.
	// A dump is always created at the beginning of the trace.
	DumpPhaseMs *uint32 `protobuf:"varint,1,opt,name=dump_phase_ms,json=dumpPhaseMs" json:"dump_phase_ms,omitempty"`
	// ms to wait between following dumps.
	DumpIntervalMs *uint32 `protobuf:"varint,2,opt,name=dump_interval_ms,json=dumpIntervalMs" json:"dump_interval_ms,omitempty"`
}

func (x *JavaHprofConfig_ContinuousDumpConfig) Reset() {
	*x = JavaHprofConfig_ContinuousDumpConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[477]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaHprofConfig_ContinuousDumpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaHprofConfig_ContinuousDumpConfig) ProtoMessage() {}

func (x *JavaHprofConfig_ContinuousDumpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[477]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaHprofConfig_ContinuousDumpConfig.ProtoReflect.Descriptor instead.
func (*JavaHprofConfig_ContinuousDumpConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{17, 0}
}

func (x *JavaHprofConfig_ContinuousDumpConfig) GetDumpPhaseMs() uint32 {
	if x != nil && x.DumpPhaseMs != nil {
		return *x.DumpPhaseMs
	}
	return 0
}

func (x *JavaHprofConfig_ContinuousDumpConfig) GetDumpIntervalMs() uint32 {
	if x != nil && x.DumpIntervalMs != nil {
		return *x.DumpIntervalMs
	}
	return 0
}

type TestConfig_DummyFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldUint32   *uint32  `protobuf:"varint,1,opt,name=field_uint32,json=fieldUint32" json:"field_uint32,omitempty"`
	FieldInt32    *int32   `protobuf:"varint,2,opt,name=field_int32,json=fieldInt32" json:"field_int32,omitempty"`
	FieldUint64   *uint64  `protobuf:"varint,3,opt,name=field_uint64,json=fieldUint64" json:"field_uint64,omitempty"`
	FieldInt64    *int64   `protobuf:"varint,4,opt,name=field_int64,json=fieldInt64" json:"field_int64,omitempty"`
	FieldFixed64  *uint64  `protobuf:"fixed64,5,opt,name=field_fixed64,json=fieldFixed64" json:"field_fixed64,omitempty"`
	FieldSfixed64 *int64   `protobuf:"fixed64,6,opt,name=field_sfixed64,json=fieldSfixed64" json:"field_sfixed64,omitempty"`
	FieldFixed32  *uint32  `protobuf:"fixed32,7,opt,name=field_fixed32,json=fieldFixed32" json:"field_fixed32,omitempty"`
	FieldSfixed32 *int32   `protobuf:"fixed32,8,opt,name=field_sfixed32,json=fieldSfixed32" json:"field_sfixed32,omitempty"`
	FieldDouble   *float64 `protobuf:"fixed64,9,opt,name=field_double,json=fieldDouble" json:"field_double,omitempty"`
	FieldFloat    *float32 `protobuf:"fixed32,10,opt,name=field_float,json=fieldFloat" json:"field_float,omitempty"`
	FieldSint64   *int64   `protobuf:"zigzag64,11,opt,name=field_sint64,json=fieldSint64" json:"field_sint64,omitempty"`
	FieldSint32   *int32   `protobuf:"zigzag32,12,opt,name=field_sint32,json=fieldSint32" json:"field_sint32,omitempty"`
	FieldString   *string  `protobuf:"bytes,13,opt,name=field_string,json=fieldString" json:"field_string,omitempty"`
	FieldBytes    []byte   `protobuf:"bytes,14,opt,name=field_bytes,json=fieldBytes" json:"field_bytes,omitempty"`
}

func (x *TestConfig_DummyFields) Reset() {
	*x = TestConfig_DummyFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[478]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestConfig_DummyFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConfig_DummyFields) ProtoMessage() {}

func (x *TestConfig_DummyFields) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[478]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConfig_DummyFields.ProtoReflect.Descriptor instead.
func (*TestConfig_DummyFields) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TestConfig_DummyFields) GetFieldUint32() uint32 {
	if x != nil && x.FieldUint32 != nil {
		return *x.FieldUint32
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldInt32() int32 {
	if x != nil && x.FieldInt32 != nil {
		return *x.FieldInt32
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldUint64() uint64 {
	if x != nil && x.FieldUint64 != nil {
		return *x.FieldUint64
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldInt64() int64 {
	if x != nil && x.FieldInt64 != nil {
		return *x.FieldInt64
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldFixed64() uint64 {
	if x != nil && x.FieldFixed64 != nil {
		return *x.FieldFixed64
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldSfixed64() int64 {
	if x != nil && x.FieldSfixed64 != nil {
		return *x.FieldSfixed64
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldFixed32() uint32 {
	if x != nil && x.FieldFixed32 != nil {
		return *x.FieldFixed32
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldSfixed32() int32 {
	if x != nil && x.FieldSfixed32 != nil {
		return *x.FieldSfixed32
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldDouble() float64 {
	if x != nil && x.FieldDouble != nil {
		return *x.FieldDouble
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldFloat() float32 {
	if x != nil && x.FieldFloat != nil {
		return *x.FieldFloat
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldSint64() int64 {
	if x != nil && x.FieldSint64 != nil {
		return *x.FieldSint64
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldSint32() int32 {
	if x != nil && x.FieldSint32 != nil {
		return *x.FieldSint32
	}
	return 0
}

func (x *TestConfig_DummyFields) GetFieldString() string {
	if x != nil && x.FieldString != nil {
		return *x.FieldString
	}
	return ""
}

func (x *TestConfig_DummyFields) GetFieldBytes() []byte {
	if x != nil {
		return x.FieldBytes
	}
	return nil
}

type TraceConfig_BufferConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeKb     *uint32                              `protobuf:"varint,1,opt,name=size_kb,json=sizeKb" json:"size_kb,omitempty"`
	FillPolicy *TraceConfig_BufferConfig_FillPolicy `protobuf:"varint,4,opt,name=fill_policy,json=fillPolicy,enum=perfetto.protos.TraceConfig_BufferConfig_FillPolicy" json:"fill_policy,omitempty"`
}

func (x *TraceConfig_BufferConfig) Reset() {
	*x = TraceConfig_BufferConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[479]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_BufferConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_BufferConfig) ProtoMessage() {}

func (x *TraceConfig_BufferConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[479]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_BufferConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig_BufferConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 0}
}

func (x *TraceConfig_BufferConfig) GetSizeKb() uint32 {
	if x != nil && x.SizeKb != nil {
		return *x.SizeKb
	}
	return 0
}

func (x *TraceConfig_BufferConfig) GetFillPolicy() TraceConfig_BufferConfig_FillPolicy {
	if x != nil && x.FillPolicy != nil {
		return *x.FillPolicy
	}
	return TraceConfig_BufferConfig_UNSPECIFIED
}

type TraceConfig_DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters and data-source specific config. It contains also the unique name
	// of the data source, the one passed in the  DataSourceDescriptor when they
	// register on the service.
	Config *DataSourceConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	// Optional. If multiple producers (~processes) expose the same data source
	// and either |producer_name_filter| or |producer_name_regex_filter| is set,
	// the data source is enabled only for producers whose names match any of
	// the filters.
	// |producer_name_filter| has to be an exact match, while
	// |producer_name_regex_filter| is a regular expression.
	// This allows to enable a data source only for specific processes.
	// The "repeated" fields have OR semantics: specifying a filter ["foo",
	// "bar"] will enable data sources on both "foo" and "bar" (if they exist).
	ProducerNameFilter      []string `protobuf:"bytes,2,rep,name=producer_name_filter,json=producerNameFilter" json:"producer_name_filter,omitempty"`
	ProducerNameRegexFilter []string `protobuf:"bytes,3,rep,name=producer_name_regex_filter,json=producerNameRegexFilter" json:"producer_name_regex_filter,omitempty"`
}

func (x *TraceConfig_DataSource) Reset() {
	*x = TraceConfig_DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[480]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_DataSource) ProtoMessage() {}

func (x *TraceConfig_DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[480]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_DataSource.ProtoReflect.Descriptor instead.
func (*TraceConfig_DataSource) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 1}
}

func (x *TraceConfig_DataSource) GetConfig() *DataSourceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TraceConfig_DataSource) GetProducerNameFilter() []string {
	if x != nil {
		return x.ProducerNameFilter
	}
	return nil
}

func (x *TraceConfig_DataSource) GetProducerNameRegexFilter() []string {
	if x != nil {
		return x.ProducerNameRegexFilter
	}
	return nil
}

// Config for disabling builtin data sources in the tracing service.
type TraceConfig_BuiltinDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Disable emitting clock timestamps into the trace.
	DisableClockSnapshotting *bool `protobuf:"varint,1,opt,name=disable_clock_snapshotting,json=disableClockSnapshotting" json:"disable_clock_snapshotting,omitempty"`
	// Disable echoing the original trace config in the trace.
	DisableTraceConfig *bool `protobuf:"varint,2,opt,name=disable_trace_config,json=disableTraceConfig" json:"disable_trace_config,omitempty"`
	// Disable emitting system info (build fingerprint, cpuinfo, etc).
	DisableSystemInfo *bool `protobuf:"varint,3,opt,name=disable_system_info,json=disableSystemInfo" json:"disable_system_info,omitempty"`
	// Disable emitting events for data-source state changes (e.g. the marker
	// for all data sources having ACKed the start of the trace).
	DisableServiceEvents *bool `protobuf:"varint,4,opt,name=disable_service_events,json=disableServiceEvents" json:"disable_service_events,omitempty"`
	// The authoritative clock domain for the trace. Defaults to BOOTTIME. See
	// also ClockSnapshot's primary_trace_clock. The configured value is written
	// into the trace as part of the ClockSnapshots emitted by the service.
	// Trace processor will attempt to translate packet/event timestamps from
	// various data sources (and their chosen clock domains) to this domain
	// during import. Added in Android R.
	PrimaryTraceClock *BuiltinClock `protobuf:"varint,5,opt,name=primary_trace_clock,json=primaryTraceClock,enum=perfetto.protos.BuiltinClock" json:"primary_trace_clock,omitempty"`
	// Time interval in between snapshotting of sync markers, clock snapshots,
	// stats, and other periodic service-emitted events. Note that the service
	// only keeps track of the first and the most recent snapshot until
	// ReadBuffers() is called.
	SnapshotIntervalMs *uint32 `protobuf:"varint,6,opt,name=snapshot_interval_ms,json=snapshotIntervalMs" json:"snapshot_interval_ms,omitempty"`
}

func (x *TraceConfig_BuiltinDataSource) Reset() {
	*x = TraceConfig_BuiltinDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[481]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_BuiltinDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_BuiltinDataSource) ProtoMessage() {}

func (x *TraceConfig_BuiltinDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[481]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_BuiltinDataSource.ProtoReflect.Descriptor instead.
func (*TraceConfig_BuiltinDataSource) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 2}
}

func (x *TraceConfig_BuiltinDataSource) GetDisableClockSnapshotting() bool {
	if x != nil && x.DisableClockSnapshotting != nil {
		return *x.DisableClockSnapshotting
	}
	return false
}

func (x *TraceConfig_BuiltinDataSource) GetDisableTraceConfig() bool {
	if x != nil && x.DisableTraceConfig != nil {
		return *x.DisableTraceConfig
	}
	return false
}

func (x *TraceConfig_BuiltinDataSource) GetDisableSystemInfo() bool {
	if x != nil && x.DisableSystemInfo != nil {
		return *x.DisableSystemInfo
	}
	return false
}

func (x *TraceConfig_BuiltinDataSource) GetDisableServiceEvents() bool {
	if x != nil && x.DisableServiceEvents != nil {
		return *x.DisableServiceEvents
	}
	return false
}

func (x *TraceConfig_BuiltinDataSource) GetPrimaryTraceClock() BuiltinClock {
	if x != nil && x.PrimaryTraceClock != nil {
		return *x.PrimaryTraceClock
	}
	return BuiltinClock_BUILTIN_CLOCK_UNKNOWN
}

func (x *TraceConfig_BuiltinDataSource) GetSnapshotIntervalMs() uint32 {
	if x != nil && x.SnapshotIntervalMs != nil {
		return *x.SnapshotIntervalMs
	}
	return 0
}

type TraceConfig_ProducerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the producer for which this config is for.
	ProducerName *string `protobuf:"bytes,1,opt,name=producer_name,json=producerName" json:"producer_name,omitempty"`
	// Specifies the preferred size of the shared memory buffer. If the size is
	// larger than the max size, the max will be used. If it is smaller than
	// the page size or doesn't fit pages evenly into it, it will fall back to
	// the size specified by the producer or finally the default shared memory
	// size.
	ShmSizeKb *uint32 `protobuf:"varint,2,opt,name=shm_size_kb,json=shmSizeKb" json:"shm_size_kb,omitempty"`
	// Specifies the preferred size of each page in the shared memory buffer.
	// Must be an integer multiple of 4K.
	PageSizeKb *uint32 `protobuf:"varint,3,opt,name=page_size_kb,json=pageSizeKb" json:"page_size_kb,omitempty"`
}

func (x *TraceConfig_ProducerConfig) Reset() {
	*x = TraceConfig_ProducerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[482]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_ProducerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_ProducerConfig) ProtoMessage() {}

func (x *TraceConfig_ProducerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[482]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_ProducerConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig_ProducerConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 3}
}

func (x *TraceConfig_ProducerConfig) GetProducerName() string {
	if x != nil && x.ProducerName != nil {
		return *x.ProducerName
	}
	return ""
}

func (x *TraceConfig_ProducerConfig) GetShmSizeKb() uint32 {
	if x != nil && x.ShmSizeKb != nil {
		return *x.ShmSizeKb
	}
	return 0
}

func (x *TraceConfig_ProducerConfig) GetPageSizeKb() uint32 {
	if x != nil && x.PageSizeKb != nil {
		return *x.PageSizeKb
	}
	return 0
}

// Contains statsd-specific metadata about an alert associated with the trace.
type TraceConfig_StatsdMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the alert which triggered this trace.
	TriggeringAlertId *int64 `protobuf:"varint,1,opt,name=triggering_alert_id,json=triggeringAlertId" json:"triggering_alert_id,omitempty"`
	// The uid which registered the triggering configuration with statsd.
	TriggeringConfigUid *int32 `protobuf:"varint,2,opt,name=triggering_config_uid,json=triggeringConfigUid" json:"triggering_config_uid,omitempty"`
	// The identifier of the config which triggered the alert.
	TriggeringConfigId *int64 `protobuf:"varint,3,opt,name=triggering_config_id,json=triggeringConfigId" json:"triggering_config_id,omitempty"`
	// The identifier of the subscription which triggered this trace.
	TriggeringSubscriptionId *int64 `protobuf:"varint,4,opt,name=triggering_subscription_id,json=triggeringSubscriptionId" json:"triggering_subscription_id,omitempty"`
}

func (x *TraceConfig_StatsdMetadata) Reset() {
	*x = TraceConfig_StatsdMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[483]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_StatsdMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_StatsdMetadata) ProtoMessage() {}

func (x *TraceConfig_StatsdMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[483]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_StatsdMetadata.ProtoReflect.Descriptor instead.
func (*TraceConfig_StatsdMetadata) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 4}
}

func (x *TraceConfig_StatsdMetadata) GetTriggeringAlertId() int64 {
	if x != nil && x.TriggeringAlertId != nil {
		return *x.TriggeringAlertId
	}
	return 0
}

func (x *TraceConfig_StatsdMetadata) GetTriggeringConfigUid() int32 {
	if x != nil && x.TriggeringConfigUid != nil {
		return *x.TriggeringConfigUid
	}
	return 0
}

func (x *TraceConfig_StatsdMetadata) GetTriggeringConfigId() int64 {
	if x != nil && x.TriggeringConfigId != nil {
		return *x.TriggeringConfigId
	}
	return 0
}

func (x *TraceConfig_StatsdMetadata) GetTriggeringSubscriptionId() int64 {
	if x != nil && x.TriggeringSubscriptionId != nil {
		return *x.TriggeringSubscriptionId
	}
	return 0
}

// Contains flags which override the default values of the guardrails inside
// Perfetto. These values are only affect userdebug builds.
type TraceConfig_GuardrailOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Override the default limit (in bytes) for uploading data to server within
	// a 24 hour period.
	MaxUploadPerDayBytes *uint64 `protobuf:"varint,1,opt,name=max_upload_per_day_bytes,json=maxUploadPerDayBytes" json:"max_upload_per_day_bytes,omitempty"`
}

func (x *TraceConfig_GuardrailOverrides) Reset() {
	*x = TraceConfig_GuardrailOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[484]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_GuardrailOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_GuardrailOverrides) ProtoMessage() {}

func (x *TraceConfig_GuardrailOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[484]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_GuardrailOverrides.ProtoReflect.Descriptor instead.
func (*TraceConfig_GuardrailOverrides) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 5}
}

func (x *TraceConfig_GuardrailOverrides) GetMaxUploadPerDayBytes() uint64 {
	if x != nil && x.MaxUploadPerDayBytes != nil {
		return *x.MaxUploadPerDayBytes
	}
	return 0
}

// Triggers allow producers to start or stop the tracing session when an event
// occurs.
//
// For example if we are tracing probabilistically, most traces will be
// uninteresting. Triggers allow us to keep only the interesting ones such as
// those traces during which the device temperature reached a certain
// threshold. In this case the producer can activate a trigger to keep
// (STOP_TRACING) the trace, otherwise it can also begin a trace
// (START_TRACING) because it knows something is about to happen.
type TraceConfig_TriggerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerMode *TraceConfig_TriggerConfig_TriggerMode `protobuf:"varint,1,opt,name=trigger_mode,json=triggerMode,enum=perfetto.protos.TraceConfig_TriggerConfig_TriggerMode" json:"trigger_mode,omitempty"`
	// A list of triggers which are related to this configuration. If ANY
	// trigger is seen then an action will be performed based on |trigger_mode|.
	Triggers []*TraceConfig_TriggerConfig_Trigger `protobuf:"bytes,2,rep,name=triggers" json:"triggers,omitempty"`
	// Required and must be positive if a TriggerConfig is specified. This is
	// how long this TraceConfig should wait for a trigger to arrive. After this
	// period of time if no trigger is seen the TracingSession will be cleaned
	// up.
	TriggerTimeoutMs *uint32 `protobuf:"varint,3,opt,name=trigger_timeout_ms,json=triggerTimeoutMs" json:"trigger_timeout_ms,omitempty"`
}

func (x *TraceConfig_TriggerConfig) Reset() {
	*x = TraceConfig_TriggerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[485]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_TriggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_TriggerConfig) ProtoMessage() {}

func (x *TraceConfig_TriggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[485]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_TriggerConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig_TriggerConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 6}
}

func (x *TraceConfig_TriggerConfig) GetTriggerMode() TraceConfig_TriggerConfig_TriggerMode {
	if x != nil && x.TriggerMode != nil {
		return *x.TriggerMode
	}
	return TraceConfig_TriggerConfig_UNSPECIFIED
}

func (x *TraceConfig_TriggerConfig) GetTriggers() []*TraceConfig_TriggerConfig_Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *TraceConfig_TriggerConfig) GetTriggerTimeoutMs() uint32 {
	if x != nil && x.TriggerTimeoutMs != nil {
		return *x.TriggerTimeoutMs
	}
	return 0
}

// Configuration for trace contents that reference earlier trace data. For
// example, a data source might intern strings, and emit packets containing
// {interned id : string} pairs. Future packets from that data source can then
// use the interned ids instead of duplicating the raw string contents. The
// trace parser will then need to use that interning table to fully interpret
// the rest of the trace.
type TraceConfig_IncrementalStateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If nonzero, notify eligible data sources to clear their incremental state
	// periodically, with the given period. The notification is sent only to
	// data sources that have |handles_incremental_state_clear| set in their
	// DataSourceDescriptor. The notification requests that the data source
	// stops referring to past trace contents. This is particularly useful when
	// tracing in ring buffer mode, where it is not exceptional to overwrite old
	// trace data.
	//
	// Warning: this time-based global clearing is likely to be removed in the
	// future, to be replaced with a smarter way of sending the notifications
	// only when necessary.
	ClearPeriodMs *uint32 `protobuf:"varint,1,opt,name=clear_period_ms,json=clearPeriodMs" json:"clear_period_ms,omitempty"`
}

func (x *TraceConfig_IncrementalStateConfig) Reset() {
	*x = TraceConfig_IncrementalStateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[486]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_IncrementalStateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_IncrementalStateConfig) ProtoMessage() {}

func (x *TraceConfig_IncrementalStateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[486]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_IncrementalStateConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig_IncrementalStateConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 7}
}

func (x *TraceConfig_IncrementalStateConfig) GetClearPeriodMs() uint32 {
	if x != nil && x.ClearPeriodMs != nil {
		return *x.ClearPeriodMs
	}
	return 0
}

// Android-only. Debug builds only. Not for general use. If set, saves a
// Dropbox trace into an incident. This field is read by perfetto_cmd, rather
// than the tracing service. All fields are mandatory.
type TraceConfig_IncidentReportConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationPackage *string `protobuf:"bytes,1,opt,name=destination_package,json=destinationPackage" json:"destination_package,omitempty"`
	DestinationClass   *string `protobuf:"bytes,2,opt,name=destination_class,json=destinationClass" json:"destination_class,omitempty"`
	// Level of filtering in the requested incident. See |Destination| in
	// frameworks/base/core/proto/android/privacy.proto.
	PrivacyLevel *int32 `protobuf:"varint,3,opt,name=privacy_level,json=privacyLevel" json:"privacy_level,omitempty"`
	// If true, do not write the trace into dropbox (i.e. incident only).
	// Otherwise, write to both dropbox and incident.
	SkipDropbox *bool `protobuf:"varint,4,opt,name=skip_dropbox,json=skipDropbox" json:"skip_dropbox,omitempty"`
}

func (x *TraceConfig_IncidentReportConfig) Reset() {
	*x = TraceConfig_IncidentReportConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[487]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_IncidentReportConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_IncidentReportConfig) ProtoMessage() {}

func (x *TraceConfig_IncidentReportConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[487]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_IncidentReportConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig_IncidentReportConfig) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 8}
}

func (x *TraceConfig_IncidentReportConfig) GetDestinationPackage() string {
	if x != nil && x.DestinationPackage != nil {
		return *x.DestinationPackage
	}
	return ""
}

func (x *TraceConfig_IncidentReportConfig) GetDestinationClass() string {
	if x != nil && x.DestinationClass != nil {
		return *x.DestinationClass
	}
	return ""
}

func (x *TraceConfig_IncidentReportConfig) GetPrivacyLevel() int32 {
	if x != nil && x.PrivacyLevel != nil {
		return *x.PrivacyLevel
	}
	return 0
}

func (x *TraceConfig_IncidentReportConfig) GetSkipDropbox() bool {
	if x != nil && x.SkipDropbox != nil {
		return *x.SkipDropbox
	}
	return false
}

type TraceConfig_TriggerConfig_Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The producer must specify this name to activate the trigger.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The a std::regex that will match the producer that can activate this
	// trigger. This is optional. If unset any producers can activate this
	// trigger.
	ProducerNameRegex *string `protobuf:"bytes,2,opt,name=producer_name_regex,json=producerNameRegex" json:"producer_name_regex,omitempty"`
	// After a trigger is received either in START_TRACING or STOP_TRACING
	// mode then the trace will end |stop_delay_ms| after triggering.
	StopDelayMs *uint32 `protobuf:"varint,3,opt,name=stop_delay_ms,json=stopDelayMs" json:"stop_delay_ms,omitempty"`
}

func (x *TraceConfig_TriggerConfig_Trigger) Reset() {
	*x = TraceConfig_TriggerConfig_Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[488]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceConfig_TriggerConfig_Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig_TriggerConfig_Trigger) ProtoMessage() {}

func (x *TraceConfig_TriggerConfig_Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[488]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig_TriggerConfig_Trigger.ProtoReflect.Descriptor instead.
func (*TraceConfig_TriggerConfig_Trigger) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{23, 6, 0}
}

func (x *TraceConfig_TriggerConfig_Trigger) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TraceConfig_TriggerConfig_Trigger) GetProducerNameRegex() string {
	if x != nil && x.ProducerNameRegex != nil {
		return *x.ProducerNameRegex
	}
	return ""
}

func (x *TraceConfig_TriggerConfig_Trigger) GetStopDelayMs() uint32 {
	if x != nil && x.StopDelayMs != nil {
		return *x.StopDelayMs
	}
	return 0
}

// From TraceBuffer::Stats.
//
// Next id: 20.
type TraceStats_BufferStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the circular buffer in bytes.
	BufferSize *uint64 `protobuf:"varint,12,opt,name=buffer_size,json=bufferSize" json:"buffer_size,omitempty"`
	// Num. bytes written into the circular buffer, including chunk headers.
	BytesWritten *uint64 `protobuf:"varint,1,opt,name=bytes_written,json=bytesWritten" json:"bytes_written,omitempty"`
	// Num. bytes overwritten before they have been read (i.e. loss of data).
	BytesOverwritten *uint64 `protobuf:"varint,13,opt,name=bytes_overwritten,json=bytesOverwritten" json:"bytes_overwritten,omitempty"`
	// Total size of chunks that were fully read from the circular buffer by the
	// consumer. This may not be equal to |bytes_written| either in the middle
	// of tracing, or if |chunks_overwritten| is non-zero. Note that this is the
	// size of the chunks read from the buffer, including chunk headers, which
	// will be different from the total size of packets returned to the
	// consumer.
	//
	// The current utilization of the trace buffer (mid-tracing) can be obtained
	// by subtracting |bytes_read| and |bytes_overwritten| from |bytes_written|,
	// adding the difference of |padding_bytes_written| and
	// |padding_bytes_cleared|, and comparing this sum to the |buffer_size|.
	// Note that this represents the total size of buffered data in the buffer,
	// yet this data may be spread non-contiguously through the buffer and may
	// be overridden before the utilization reaches 100%.
	BytesRead *uint64 `protobuf:"varint,14,opt,name=bytes_read,json=bytesRead" json:"bytes_read,omitempty"`
	// Num. bytes that were allocated as padding between chunks in the circular
	// buffer.
	PaddingBytesWritten *uint64 `protobuf:"varint,15,opt,name=padding_bytes_written,json=paddingBytesWritten" json:"padding_bytes_written,omitempty"`
	// Num. of padding bytes that were removed from the circular buffer when
	// they were overwritten.
	//
	// The difference between |padding_bytes_written| and
	// |padding_bytes_cleared| denotes the total size of padding currently
	// present in the buffer.
	PaddingBytesCleared *uint64 `protobuf:"varint,16,opt,name=padding_bytes_cleared,json=paddingBytesCleared" json:"padding_bytes_cleared,omitempty"`
	// Num. chunks (!= packets) written into the buffer.
	ChunksWritten *uint64 `protobuf:"varint,2,opt,name=chunks_written,json=chunksWritten" json:"chunks_written,omitempty"`
	// Num. chunks (!= packets) rewritten into the buffer. This means we rewrote
	// the same chunk with additional packets appended to the end.
	ChunksRewritten *uint64 `protobuf:"varint,10,opt,name=chunks_rewritten,json=chunksRewritten" json:"chunks_rewritten,omitempty"`
	// Num. chunks overwritten before they have been read (i.e. loss of data).
	ChunksOverwritten *uint64 `protobuf:"varint,3,opt,name=chunks_overwritten,json=chunksOverwritten" json:"chunks_overwritten,omitempty"`
	// Num. chunks discarded (i.e. loss of data). Can be > 0 only when a buffer
	// is configured with FillPolicy == DISCARD.
	ChunksDiscarded *uint64 `protobuf:"varint,18,opt,name=chunks_discarded,json=chunksDiscarded" json:"chunks_discarded,omitempty"`
	// Num. chunks (!= packets) that were fully read from the circular buffer by
	// the consumer. This may not be equal to |chunks_written| either in the
	// middle of tracing, or if |chunks_overwritten| is non-zero.
	ChunksRead *uint64 `protobuf:"varint,17,opt,name=chunks_read,json=chunksRead" json:"chunks_read,omitempty"`
	// Num. chunks that were committed out of order.
	ChunksCommittedOutOfOrder *uint64 `protobuf:"varint,11,opt,name=chunks_committed_out_of_order,json=chunksCommittedOutOfOrder" json:"chunks_committed_out_of_order,omitempty"`
	// Num. times the ring buffer wrapped around.
	WriteWrapCount *uint64 `protobuf:"varint,4,opt,name=write_wrap_count,json=writeWrapCount" json:"write_wrap_count,omitempty"`
	// Num. out-of-band (OOB) patches that succeeded.
	PatchesSucceeded *uint64 `protobuf:"varint,5,opt,name=patches_succeeded,json=patchesSucceeded" json:"patches_succeeded,omitempty"`
	// Num. OOB patches that failed (e.g., the chunk to patch was gone).
	PatchesFailed *uint64 `protobuf:"varint,6,opt,name=patches_failed,json=patchesFailed" json:"patches_failed,omitempty"`
	// Num. readaheads (for large multi-chunk packet reads) that ended up in a
	// successful packet read.
	ReadaheadsSucceeded *uint64 `protobuf:"varint,7,opt,name=readaheads_succeeded,json=readaheadsSucceeded" json:"readaheads_succeeded,omitempty"`
	// Num. readaheads aborted because of missing chunks in the sequence stream.
	// Note that a small number > 0 is totally expected: occasionally, when
	// issuing a read, the very last packet in a sequence might be incomplete
	// (because the producer is still writing it while we read). The read will
	// stop at that point, for that sequence, increasing this counter.
	ReadaheadsFailed *uint64 `protobuf:"varint,8,opt,name=readaheads_failed,json=readaheadsFailed" json:"readaheads_failed,omitempty"`
	// Num. of violations of the SharedMemoryABI found while writing or reading
	// the buffer. This is an indication of either a bug in the producer(s) or
	// malicious producer(s).
	AbiViolations *uint64 `protobuf:"varint,9,opt,name=abi_violations,json=abiViolations" json:"abi_violations,omitempty"`
	// Num. of times the service detected packet loss on a trace writer
	// sequence. This is usually caused by exhaustion of available chunks in the
	// writer process's SMB. Note that this relies on the client's TraceWriter
	// indicating this loss to the service -- packets lost for other reasons are
	// not reflected in this stat.
	TraceWriterPacketLoss *uint64 `protobuf:"varint,19,opt,name=trace_writer_packet_loss,json=traceWriterPacketLoss" json:"trace_writer_packet_loss,omitempty"`
}

func (x *TraceStats_BufferStats) Reset() {
	*x = TraceStats_BufferStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[489]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStats_BufferStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStats_BufferStats) ProtoMessage() {}

func (x *TraceStats_BufferStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[489]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStats_BufferStats.ProtoReflect.Descriptor instead.
func (*TraceStats_BufferStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{24, 0}
}

func (x *TraceStats_BufferStats) GetBufferSize() uint64 {
	if x != nil && x.BufferSize != nil {
		return *x.BufferSize
	}
	return 0
}

func (x *TraceStats_BufferStats) GetBytesWritten() uint64 {
	if x != nil && x.BytesWritten != nil {
		return *x.BytesWritten
	}
	return 0
}

func (x *TraceStats_BufferStats) GetBytesOverwritten() uint64 {
	if x != nil && x.BytesOverwritten != nil {
		return *x.BytesOverwritten
	}
	return 0
}

func (x *TraceStats_BufferStats) GetBytesRead() uint64 {
	if x != nil && x.BytesRead != nil {
		return *x.BytesRead
	}
	return 0
}

func (x *TraceStats_BufferStats) GetPaddingBytesWritten() uint64 {
	if x != nil && x.PaddingBytesWritten != nil {
		return *x.PaddingBytesWritten
	}
	return 0
}

func (x *TraceStats_BufferStats) GetPaddingBytesCleared() uint64 {
	if x != nil && x.PaddingBytesCleared != nil {
		return *x.PaddingBytesCleared
	}
	return 0
}

func (x *TraceStats_BufferStats) GetChunksWritten() uint64 {
	if x != nil && x.ChunksWritten != nil {
		return *x.ChunksWritten
	}
	return 0
}

func (x *TraceStats_BufferStats) GetChunksRewritten() uint64 {
	if x != nil && x.ChunksRewritten != nil {
		return *x.ChunksRewritten
	}
	return 0
}

func (x *TraceStats_BufferStats) GetChunksOverwritten() uint64 {
	if x != nil && x.ChunksOverwritten != nil {
		return *x.ChunksOverwritten
	}
	return 0
}

func (x *TraceStats_BufferStats) GetChunksDiscarded() uint64 {
	if x != nil && x.ChunksDiscarded != nil {
		return *x.ChunksDiscarded
	}
	return 0
}

func (x *TraceStats_BufferStats) GetChunksRead() uint64 {
	if x != nil && x.ChunksRead != nil {
		return *x.ChunksRead
	}
	return 0
}

func (x *TraceStats_BufferStats) GetChunksCommittedOutOfOrder() uint64 {
	if x != nil && x.ChunksCommittedOutOfOrder != nil {
		return *x.ChunksCommittedOutOfOrder
	}
	return 0
}

func (x *TraceStats_BufferStats) GetWriteWrapCount() uint64 {
	if x != nil && x.WriteWrapCount != nil {
		return *x.WriteWrapCount
	}
	return 0
}

func (x *TraceStats_BufferStats) GetPatchesSucceeded() uint64 {
	if x != nil && x.PatchesSucceeded != nil {
		return *x.PatchesSucceeded
	}
	return 0
}

func (x *TraceStats_BufferStats) GetPatchesFailed() uint64 {
	if x != nil && x.PatchesFailed != nil {
		return *x.PatchesFailed
	}
	return 0
}

func (x *TraceStats_BufferStats) GetReadaheadsSucceeded() uint64 {
	if x != nil && x.ReadaheadsSucceeded != nil {
		return *x.ReadaheadsSucceeded
	}
	return 0
}

func (x *TraceStats_BufferStats) GetReadaheadsFailed() uint64 {
	if x != nil && x.ReadaheadsFailed != nil {
		return *x.ReadaheadsFailed
	}
	return 0
}

func (x *TraceStats_BufferStats) GetAbiViolations() uint64 {
	if x != nil && x.AbiViolations != nil {
		return *x.AbiViolations
	}
	return 0
}

func (x *TraceStats_BufferStats) GetTraceWriterPacketLoss() uint64 {
	if x != nil && x.TraceWriterPacketLoss != nil {
		return *x.TraceWriterPacketLoss
	}
	return 0
}

type AndroidLogPacket_LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The log buffer (e.g. MAIN, SYSTEM, RADIO) the event comes from.
	LogId *AndroidLogId `protobuf:"varint,1,opt,name=log_id,json=logId,enum=perfetto.protos.AndroidLogId" json:"log_id,omitempty"`
	// PID (TGID), TID and UID of the task that emitted the event.
	Pid *int32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Tid *int32 `protobuf:"varint,3,opt,name=tid" json:"tid,omitempty"`
	Uid *int32 `protobuf:"varint,4,opt,name=uid" json:"uid,omitempty"`
	// Timestamp [ns]. The clock source is CLOCK_REALTIME, unlike many other
	// Perfetto trace events that instead use CLOCK_BOOTTIME. The trace
	// processor will take care of realigning clocks using the ClockSnapshot(s).
	Timestamp *uint64 `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	// When log_id == LID_EVENTS, |tag| corresponds to the event name defined in
	// the second column of /system/etc/event-log-tags. For all other events,
	// |tag| is the app-specified argument passed to __android_log_write().
	Tag *string `protobuf:"bytes,6,opt,name=tag" json:"tag,omitempty"`
	// Empty when log_id == LID_EVENTS.
	Prio *AndroidLogPriority `protobuf:"varint,7,opt,name=prio,enum=perfetto.protos.AndroidLogPriority" json:"prio,omitempty"`
	// Empty when log_id == LID_EVENTS.
	Message *string `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	// Only populated when log_id == LID_EVENTS.
	Args []*AndroidLogPacket_LogEvent_Arg `protobuf:"bytes,9,rep,name=args" json:"args,omitempty"`
}

func (x *AndroidLogPacket_LogEvent) Reset() {
	*x = AndroidLogPacket_LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[490]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLogPacket_LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLogPacket_LogEvent) ProtoMessage() {}

func (x *AndroidLogPacket_LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[490]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLogPacket_LogEvent.ProtoReflect.Descriptor instead.
func (*AndroidLogPacket_LogEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{25, 0}
}

func (x *AndroidLogPacket_LogEvent) GetLogId() AndroidLogId {
	if x != nil && x.LogId != nil {
		return *x.LogId
	}
	return AndroidLogId_LID_DEFAULT
}

func (x *AndroidLogPacket_LogEvent) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *AndroidLogPacket_LogEvent) GetTid() int32 {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return 0
}

func (x *AndroidLogPacket_LogEvent) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *AndroidLogPacket_LogEvent) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *AndroidLogPacket_LogEvent) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *AndroidLogPacket_LogEvent) GetPrio() AndroidLogPriority {
	if x != nil && x.Prio != nil {
		return *x.Prio
	}
	return AndroidLogPriority_PRIO_UNSPECIFIED
}

func (x *AndroidLogPacket_LogEvent) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *AndroidLogPacket_LogEvent) GetArgs() []*AndroidLogPacket_LogEvent_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

// Stats are emitted only upon Flush() and are monotonic (i.e. they are
// absolute counters since the beginning of the lifetime of the tracing
// session and NOT relative to the previous Stats snapshot).
type AndroidLogPacket_Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of log events seen, including errors and skipped entries
	// (num of events stored in the trace = total - failed - skipped).
	NumTotal *uint64 `protobuf:"varint,1,opt,name=num_total,json=numTotal" json:"num_total,omitempty"`
	// Parser failures.
	NumFailed *uint64 `protobuf:"varint,2,opt,name=num_failed,json=numFailed" json:"num_failed,omitempty"`
	// Messages skipped due to filters.
	NumSkipped *uint64 `protobuf:"varint,3,opt,name=num_skipped,json=numSkipped" json:"num_skipped,omitempty"`
}

func (x *AndroidLogPacket_Stats) Reset() {
	*x = AndroidLogPacket_Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[491]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLogPacket_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLogPacket_Stats) ProtoMessage() {}

func (x *AndroidLogPacket_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[491]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLogPacket_Stats.ProtoReflect.Descriptor instead.
func (*AndroidLogPacket_Stats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{25, 1}
}

func (x *AndroidLogPacket_Stats) GetNumTotal() uint64 {
	if x != nil && x.NumTotal != nil {
		return *x.NumTotal
	}
	return 0
}

func (x *AndroidLogPacket_Stats) GetNumFailed() uint64 {
	if x != nil && x.NumFailed != nil {
		return *x.NumFailed
	}
	return 0
}

func (x *AndroidLogPacket_Stats) GetNumSkipped() uint64 {
	if x != nil && x.NumSkipped != nil {
		return *x.NumSkipped
	}
	return 0
}

type AndroidLogPacket_LogEvent_Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*AndroidLogPacket_LogEvent_Arg_IntValue
	//	*AndroidLogPacket_LogEvent_Arg_FloatValue
	//	*AndroidLogPacket_LogEvent_Arg_StringValue
	Value isAndroidLogPacket_LogEvent_Arg_Value `protobuf_oneof:"value"`
}

func (x *AndroidLogPacket_LogEvent_Arg) Reset() {
	*x = AndroidLogPacket_LogEvent_Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[492]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidLogPacket_LogEvent_Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidLogPacket_LogEvent_Arg) ProtoMessage() {}

func (x *AndroidLogPacket_LogEvent_Arg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[492]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidLogPacket_LogEvent_Arg.ProtoReflect.Descriptor instead.
func (*AndroidLogPacket_LogEvent_Arg) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{25, 0, 0}
}

func (x *AndroidLogPacket_LogEvent_Arg) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *AndroidLogPacket_LogEvent_Arg) GetValue() isAndroidLogPacket_LogEvent_Arg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AndroidLogPacket_LogEvent_Arg) GetIntValue() int64 {
	if x, ok := x.GetValue().(*AndroidLogPacket_LogEvent_Arg_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *AndroidLogPacket_LogEvent_Arg) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*AndroidLogPacket_LogEvent_Arg_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *AndroidLogPacket_LogEvent_Arg) GetStringValue() string {
	if x, ok := x.GetValue().(*AndroidLogPacket_LogEvent_Arg_StringValue); ok {
		return x.StringValue
	}
	return ""
}

type isAndroidLogPacket_LogEvent_Arg_Value interface {
	isAndroidLogPacket_LogEvent_Arg_Value()
}

type AndroidLogPacket_LogEvent_Arg_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type AndroidLogPacket_LogEvent_Arg_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,oneof"`
}

type AndroidLogPacket_LogEvent_Arg_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,oneof"`
}

func (*AndroidLogPacket_LogEvent_Arg_IntValue) isAndroidLogPacket_LogEvent_Arg_Value() {}

func (*AndroidLogPacket_LogEvent_Arg_FloatValue) isAndroidLogPacket_LogEvent_Arg_Value() {}

func (*AndroidLogPacket_LogEvent_Arg_StringValue) isAndroidLogPacket_LogEvent_Arg_Value() {}

// Represents the app's work on a frame.
// Next id: 13
type FrameTimelineEvent_SurfaceFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token received by the app for its work. Can be shared between multiple
	// layers of the same app (example: pip mode).
	Token *int64 `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	// The corresponding DisplayFrame token is required to link the App's work
	// with SurfaceFlinger's work. Many SurfaceFrames can be mapped to a single
	// DisplayFrame.
	// this.display_frame_token = DisplayFrame.token
	DisplayFrameToken *int64                          `protobuf:"varint,12,opt,name=display_frame_token,json=displayFrameToken" json:"display_frame_token,omitempty"`
	PresentType       *FrameTimelineEvent_PresentType `protobuf:"varint,2,opt,name=present_type,json=presentType,enum=perfetto.protos.FrameTimelineEvent_PresentType" json:"present_type,omitempty"`
	OnTimeFinish      *bool                           `protobuf:"varint,3,opt,name=on_time_finish,json=onTimeFinish" json:"on_time_finish,omitempty"`
	GpuComposition    *bool                           `protobuf:"varint,4,opt,name=gpu_composition,json=gpuComposition" json:"gpu_composition,omitempty"`
	JankType          *FrameTimelineEvent_JankType    `protobuf:"varint,5,opt,name=jank_type,json=jankType,enum=perfetto.protos.FrameTimelineEvent_JankType" json:"jank_type,omitempty"`
	// Timestamps in nanoseconds using CLOCK_MONOTONIC.
	// Expected timeline = expected_start to expected_end.
	ExpectedStartNs *int64 `protobuf:"varint,6,opt,name=expected_start_ns,json=expectedStartNs" json:"expected_start_ns,omitempty"`
	ExpectedEndNs   *int64 `protobuf:"varint,7,opt,name=expected_end_ns,json=expectedEndNs" json:"expected_end_ns,omitempty"`
	// (b/172587309) Apps currently do not provide actual start time.
	// Actual timeline = expected_start to actual_end.
	ActualStartNs *int64 `protobuf:"varint,8,opt,name=actual_start_ns,json=actualStartNs" json:"actual_start_ns,omitempty"`
	// If two SufaceFrames have the same token and same pid, then
	//  actual timeline =
	//    expected_start to max(frame1.actual_end, frame2.actual_end)
	ActualEndNs *int64  `protobuf:"varint,9,opt,name=actual_end_ns,json=actualEndNs" json:"actual_end_ns,omitempty"`
	LayerName   *string `protobuf:"bytes,10,opt,name=layer_name,json=layerName" json:"layer_name,omitempty"`
	Pid         *int32  `protobuf:"varint,11,opt,name=pid" json:"pid,omitempty"`
}

func (x *FrameTimelineEvent_SurfaceFrame) Reset() {
	*x = FrameTimelineEvent_SurfaceFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[493]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTimelineEvent_SurfaceFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTimelineEvent_SurfaceFrame) ProtoMessage() {}

func (x *FrameTimelineEvent_SurfaceFrame) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[493]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTimelineEvent_SurfaceFrame.ProtoReflect.Descriptor instead.
func (*FrameTimelineEvent_SurfaceFrame) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{26, 0}
}

func (x *FrameTimelineEvent_SurfaceFrame) GetToken() int64 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

func (x *FrameTimelineEvent_SurfaceFrame) GetDisplayFrameToken() int64 {
	if x != nil && x.DisplayFrameToken != nil {
		return *x.DisplayFrameToken
	}
	return 0
}

func (x *FrameTimelineEvent_SurfaceFrame) GetPresentType() FrameTimelineEvent_PresentType {
	if x != nil && x.PresentType != nil {
		return *x.PresentType
	}
	return FrameTimelineEvent_PRESENT_UNSPECIFIED
}

func (x *FrameTimelineEvent_SurfaceFrame) GetOnTimeFinish() bool {
	if x != nil && x.OnTimeFinish != nil {
		return *x.OnTimeFinish
	}
	return false
}

func (x *FrameTimelineEvent_SurfaceFrame) GetGpuComposition() bool {
	if x != nil && x.GpuComposition != nil {
		return *x.GpuComposition
	}
	return false
}

func (x *FrameTimelineEvent_SurfaceFrame) GetJankType() FrameTimelineEvent_JankType {
	if x != nil && x.JankType != nil {
		return *x.JankType
	}
	return FrameTimelineEvent_JANK_UNSPECIFIED
}

func (x *FrameTimelineEvent_SurfaceFrame) GetExpectedStartNs() int64 {
	if x != nil && x.ExpectedStartNs != nil {
		return *x.ExpectedStartNs
	}
	return 0
}

func (x *FrameTimelineEvent_SurfaceFrame) GetExpectedEndNs() int64 {
	if x != nil && x.ExpectedEndNs != nil {
		return *x.ExpectedEndNs
	}
	return 0
}

func (x *FrameTimelineEvent_SurfaceFrame) GetActualStartNs() int64 {
	if x != nil && x.ActualStartNs != nil {
		return *x.ActualStartNs
	}
	return 0
}

func (x *FrameTimelineEvent_SurfaceFrame) GetActualEndNs() int64 {
	if x != nil && x.ActualEndNs != nil {
		return *x.ActualEndNs
	}
	return 0
}

func (x *FrameTimelineEvent_SurfaceFrame) GetLayerName() string {
	if x != nil && x.LayerName != nil {
		return *x.LayerName
	}
	return ""
}

func (x *FrameTimelineEvent_SurfaceFrame) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

// Represents the SurfaceFlinger's work on a frame.
type FrameTimelineEvent_DisplayFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Token received by SurfaceFlinger for its work
	// this.token = SurfaceFrame.display_frame_token
	Token          *int64                          `protobuf:"varint,1,opt,name=token" json:"token,omitempty"`
	PresentType    *FrameTimelineEvent_PresentType `protobuf:"varint,2,opt,name=present_type,json=presentType,enum=perfetto.protos.FrameTimelineEvent_PresentType" json:"present_type,omitempty"`
	OnTimeFinish   *bool                           `protobuf:"varint,3,opt,name=on_time_finish,json=onTimeFinish" json:"on_time_finish,omitempty"`
	GpuComposition *bool                           `protobuf:"varint,4,opt,name=gpu_composition,json=gpuComposition" json:"gpu_composition,omitempty"`
	JankType       *FrameTimelineEvent_JankType    `protobuf:"varint,5,opt,name=jank_type,json=jankType,enum=perfetto.protos.FrameTimelineEvent_JankType" json:"jank_type,omitempty"`
	// Timestamps in nanoseconds using CLOCK_MONOTONIC.
	// Expected timeline = expected_start to expected_end.
	ExpectedStartNs *int64 `protobuf:"varint,6,opt,name=expected_start_ns,json=expectedStartNs" json:"expected_start_ns,omitempty"`
	ExpectedEndNs   *int64 `protobuf:"varint,7,opt,name=expected_end_ns,json=expectedEndNs" json:"expected_end_ns,omitempty"`
	// Actual timeline = actual_start to actual_end.
	ActualStartNs *int64 `protobuf:"varint,8,opt,name=actual_start_ns,json=actualStartNs" json:"actual_start_ns,omitempty"`
	ActualEndNs   *int64 `protobuf:"varint,9,opt,name=actual_end_ns,json=actualEndNs" json:"actual_end_ns,omitempty"`
}

func (x *FrameTimelineEvent_DisplayFrame) Reset() {
	*x = FrameTimelineEvent_DisplayFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[494]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTimelineEvent_DisplayFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTimelineEvent_DisplayFrame) ProtoMessage() {}

func (x *FrameTimelineEvent_DisplayFrame) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[494]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTimelineEvent_DisplayFrame.ProtoReflect.Descriptor instead.
func (*FrameTimelineEvent_DisplayFrame) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{26, 1}
}

func (x *FrameTimelineEvent_DisplayFrame) GetToken() int64 {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return 0
}

func (x *FrameTimelineEvent_DisplayFrame) GetPresentType() FrameTimelineEvent_PresentType {
	if x != nil && x.PresentType != nil {
		return *x.PresentType
	}
	return FrameTimelineEvent_PRESENT_UNSPECIFIED
}

func (x *FrameTimelineEvent_DisplayFrame) GetOnTimeFinish() bool {
	if x != nil && x.OnTimeFinish != nil {
		return *x.OnTimeFinish
	}
	return false
}

func (x *FrameTimelineEvent_DisplayFrame) GetGpuComposition() bool {
	if x != nil && x.GpuComposition != nil {
		return *x.GpuComposition
	}
	return false
}

func (x *FrameTimelineEvent_DisplayFrame) GetJankType() FrameTimelineEvent_JankType {
	if x != nil && x.JankType != nil {
		return *x.JankType
	}
	return FrameTimelineEvent_JANK_UNSPECIFIED
}

func (x *FrameTimelineEvent_DisplayFrame) GetExpectedStartNs() int64 {
	if x != nil && x.ExpectedStartNs != nil {
		return *x.ExpectedStartNs
	}
	return 0
}

func (x *FrameTimelineEvent_DisplayFrame) GetExpectedEndNs() int64 {
	if x != nil && x.ExpectedEndNs != nil {
		return *x.ExpectedEndNs
	}
	return 0
}

func (x *FrameTimelineEvent_DisplayFrame) GetActualStartNs() int64 {
	if x != nil && x.ActualStartNs != nil {
		return *x.ActualStartNs
	}
	return 0
}

func (x *FrameTimelineEvent_DisplayFrame) GetActualEndNs() int64 {
	if x != nil && x.ActualEndNs != nil {
		return *x.ActualEndNs
	}
	return 0
}

type GraphicsFrameEvent_BufferEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameNumber *uint32                             `protobuf:"varint,1,opt,name=frame_number,json=frameNumber" json:"frame_number,omitempty"`
	Type        *GraphicsFrameEvent_BufferEventType `protobuf:"varint,2,opt,name=type,enum=perfetto.protos.GraphicsFrameEvent_BufferEventType" json:"type,omitempty"`
	LayerName   *string                             `protobuf:"bytes,3,opt,name=layer_name,json=layerName" json:"layer_name,omitempty"`
	// If no duration is set, the event is an instant event.
	DurationNs *uint64 `protobuf:"varint,4,opt,name=duration_ns,json=durationNs" json:"duration_ns,omitempty"`
	// Unique buffer identifier.
	BufferId *uint32 `protobuf:"varint,5,opt,name=buffer_id,json=bufferId" json:"buffer_id,omitempty"`
}

func (x *GraphicsFrameEvent_BufferEvent) Reset() {
	*x = GraphicsFrameEvent_BufferEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[495]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphicsFrameEvent_BufferEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphicsFrameEvent_BufferEvent) ProtoMessage() {}

func (x *GraphicsFrameEvent_BufferEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[495]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphicsFrameEvent_BufferEvent.ProtoReflect.Descriptor instead.
func (*GraphicsFrameEvent_BufferEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{28, 0}
}

func (x *GraphicsFrameEvent_BufferEvent) GetFrameNumber() uint32 {
	if x != nil && x.FrameNumber != nil {
		return *x.FrameNumber
	}
	return 0
}

func (x *GraphicsFrameEvent_BufferEvent) GetType() GraphicsFrameEvent_BufferEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GraphicsFrameEvent_UNSPECIFIED
}

func (x *GraphicsFrameEvent_BufferEvent) GetLayerName() string {
	if x != nil && x.LayerName != nil {
		return *x.LayerName
	}
	return ""
}

func (x *GraphicsFrameEvent_BufferEvent) GetDurationNs() uint64 {
	if x != nil && x.DurationNs != nil {
		return *x.DurationNs
	}
	return 0
}

func (x *GraphicsFrameEvent_BufferEvent) GetBufferId() uint32 {
	if x != nil && x.BufferId != nil {
		return *x.BufferId
	}
	return 0
}

type PackagesList_PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid                  *uint64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Debuggable           *bool   `protobuf:"varint,3,opt,name=debuggable" json:"debuggable,omitempty"`
	ProfileableFromShell *bool   `protobuf:"varint,4,opt,name=profileable_from_shell,json=profileableFromShell" json:"profileable_from_shell,omitempty"`
	VersionCode          *int64  `protobuf:"varint,5,opt,name=version_code,json=versionCode" json:"version_code,omitempty"`
}

func (x *PackagesList_PackageInfo) Reset() {
	*x = PackagesList_PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[496]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagesList_PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagesList_PackageInfo) ProtoMessage() {}

func (x *PackagesList_PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[496]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagesList_PackageInfo.ProtoReflect.Descriptor instead.
func (*PackagesList_PackageInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{30, 0}
}

func (x *PackagesList_PackageInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PackagesList_PackageInfo) GetUid() uint64 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

func (x *PackagesList_PackageInfo) GetDebuggable() bool {
	if x != nil && x.Debuggable != nil {
		return *x.Debuggable
	}
	return false
}

func (x *PackagesList_PackageInfo) GetProfileableFromShell() bool {
	if x != nil && x.ProfileableFromShell != nil {
		return *x.ProfileableFromShell
	}
	return false
}

func (x *PackagesList_PackageInfo) GetVersionCode() int64 {
	if x != nil && x.VersionCode != nil {
		return *x.VersionCode
	}
	return 0
}

// Information about a trigger rule defined in the experiment config.
type BackgroundTracingMetadata_TriggerRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType   *BackgroundTracingMetadata_TriggerRule_TriggerType   `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,enum=perfetto.protos.BackgroundTracingMetadata_TriggerRule_TriggerType" json:"trigger_type,omitempty"`
	HistogramRule *BackgroundTracingMetadata_TriggerRule_HistogramRule `protobuf:"bytes,2,opt,name=histogram_rule,json=histogramRule" json:"histogram_rule,omitempty"`
	NamedRule     *BackgroundTracingMetadata_TriggerRule_NamedRule     `protobuf:"bytes,3,opt,name=named_rule,json=namedRule" json:"named_rule,omitempty"`
}

func (x *BackgroundTracingMetadata_TriggerRule) Reset() {
	*x = BackgroundTracingMetadata_TriggerRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[497]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundTracingMetadata_TriggerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundTracingMetadata_TriggerRule) ProtoMessage() {}

func (x *BackgroundTracingMetadata_TriggerRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[497]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundTracingMetadata_TriggerRule.ProtoReflect.Descriptor instead.
func (*BackgroundTracingMetadata_TriggerRule) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{33, 0}
}

func (x *BackgroundTracingMetadata_TriggerRule) GetTriggerType() BackgroundTracingMetadata_TriggerRule_TriggerType {
	if x != nil && x.TriggerType != nil {
		return *x.TriggerType
	}
	return BackgroundTracingMetadata_TriggerRule_TRIGGER_UNSPECIFIED
}

func (x *BackgroundTracingMetadata_TriggerRule) GetHistogramRule() *BackgroundTracingMetadata_TriggerRule_HistogramRule {
	if x != nil {
		return x.HistogramRule
	}
	return nil
}

func (x *BackgroundTracingMetadata_TriggerRule) GetNamedRule() *BackgroundTracingMetadata_TriggerRule_NamedRule {
	if x != nil {
		return x.NamedRule
	}
	return nil
}

// Configuration of histogram trigger.
type BackgroundTracingMetadata_TriggerRule_HistogramRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UMA histogram name hash, same as HistogramEventProto.name_hash.
	HistogramNameHash *uint64 `protobuf:"fixed64,1,opt,name=histogram_name_hash,json=histogramNameHash" json:"histogram_name_hash,omitempty"`
	// Range of values of the histogram that activates trigger.
	HistogramMinTrigger *int64 `protobuf:"varint,2,opt,name=histogram_min_trigger,json=histogramMinTrigger" json:"histogram_min_trigger,omitempty"`
	HistogramMaxTrigger *int64 `protobuf:"varint,3,opt,name=histogram_max_trigger,json=histogramMaxTrigger" json:"histogram_max_trigger,omitempty"`
}

func (x *BackgroundTracingMetadata_TriggerRule_HistogramRule) Reset() {
	*x = BackgroundTracingMetadata_TriggerRule_HistogramRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[498]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundTracingMetadata_TriggerRule_HistogramRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundTracingMetadata_TriggerRule_HistogramRule) ProtoMessage() {}

func (x *BackgroundTracingMetadata_TriggerRule_HistogramRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[498]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundTracingMetadata_TriggerRule_HistogramRule.ProtoReflect.Descriptor instead.
func (*BackgroundTracingMetadata_TriggerRule_HistogramRule) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{33, 0, 0}
}

func (x *BackgroundTracingMetadata_TriggerRule_HistogramRule) GetHistogramNameHash() uint64 {
	if x != nil && x.HistogramNameHash != nil {
		return *x.HistogramNameHash
	}
	return 0
}

func (x *BackgroundTracingMetadata_TriggerRule_HistogramRule) GetHistogramMinTrigger() int64 {
	if x != nil && x.HistogramMinTrigger != nil {
		return *x.HistogramMinTrigger
	}
	return 0
}

func (x *BackgroundTracingMetadata_TriggerRule_HistogramRule) GetHistogramMaxTrigger() int64 {
	if x != nil && x.HistogramMaxTrigger != nil {
		return *x.HistogramMaxTrigger
	}
	return 0
}

// Configuration of named trigger.
type BackgroundTracingMetadata_TriggerRule_NamedRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType *BackgroundTracingMetadata_TriggerRule_NamedRule_EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=perfetto.protos.BackgroundTracingMetadata_TriggerRule_NamedRule_EventType" json:"event_type,omitempty"`
}

func (x *BackgroundTracingMetadata_TriggerRule_NamedRule) Reset() {
	*x = BackgroundTracingMetadata_TriggerRule_NamedRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[499]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackgroundTracingMetadata_TriggerRule_NamedRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackgroundTracingMetadata_TriggerRule_NamedRule) ProtoMessage() {}

func (x *BackgroundTracingMetadata_TriggerRule_NamedRule) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[499]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackgroundTracingMetadata_TriggerRule_NamedRule.ProtoReflect.Descriptor instead.
func (*BackgroundTracingMetadata_TriggerRule_NamedRule) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{33, 0, 1}
}

func (x *BackgroundTracingMetadata_TriggerRule_NamedRule) GetEventType() BackgroundTracingMetadata_TriggerRule_NamedRule_EventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return BackgroundTracingMetadata_TriggerRule_NamedRule_UNSPECIFIED
}

type ChromeTraceEvent_Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*ChromeTraceEvent_Arg_BoolValue
	//	*ChromeTraceEvent_Arg_UintValue
	//	*ChromeTraceEvent_Arg_IntValue
	//	*ChromeTraceEvent_Arg_DoubleValue
	//	*ChromeTraceEvent_Arg_StringValue
	//	*ChromeTraceEvent_Arg_PointerValue
	//	*ChromeTraceEvent_Arg_JsonValue
	//	*ChromeTraceEvent_Arg_TracedValue
	Value isChromeTraceEvent_Arg_Value `protobuf_oneof:"value"`
	// Takes precedence over |name| if set,
	// and is an index into |string_table|.
	NameIndex *uint32 `protobuf:"varint,9,opt,name=name_index,json=nameIndex" json:"name_index,omitempty"`
}

func (x *ChromeTraceEvent_Arg) Reset() {
	*x = ChromeTraceEvent_Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[500]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeTraceEvent_Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeTraceEvent_Arg) ProtoMessage() {}

func (x *ChromeTraceEvent_Arg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[500]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeTraceEvent_Arg.ProtoReflect.Descriptor instead.
func (*ChromeTraceEvent_Arg) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ChromeTraceEvent_Arg) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *ChromeTraceEvent_Arg) GetValue() isChromeTraceEvent_Arg_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ChromeTraceEvent_Arg) GetBoolValue() bool {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *ChromeTraceEvent_Arg) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_UintValue); ok {
		return x.UintValue
	}
	return 0
}

func (x *ChromeTraceEvent_Arg) GetIntValue() int64 {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *ChromeTraceEvent_Arg) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *ChromeTraceEvent_Arg) GetStringValue() string {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *ChromeTraceEvent_Arg) GetPointerValue() uint64 {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_PointerValue); ok {
		return x.PointerValue
	}
	return 0
}

func (x *ChromeTraceEvent_Arg) GetJsonValue() string {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_JsonValue); ok {
		return x.JsonValue
	}
	return ""
}

func (x *ChromeTraceEvent_Arg) GetTracedValue() *ChromeTracedValue {
	if x, ok := x.GetValue().(*ChromeTraceEvent_Arg_TracedValue); ok {
		return x.TracedValue
	}
	return nil
}

func (x *ChromeTraceEvent_Arg) GetNameIndex() uint32 {
	if x != nil && x.NameIndex != nil {
		return *x.NameIndex
	}
	return 0
}

type isChromeTraceEvent_Arg_Value interface {
	isChromeTraceEvent_Arg_Value()
}

type ChromeTraceEvent_Arg_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,oneof"`
}

type ChromeTraceEvent_Arg_UintValue struct {
	UintValue uint64 `protobuf:"varint,3,opt,name=uint_value,json=uintValue,oneof"`
}

type ChromeTraceEvent_Arg_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}

type ChromeTraceEvent_Arg_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,oneof"`
}

type ChromeTraceEvent_Arg_StringValue struct {
	StringValue string `protobuf:"bytes,6,opt,name=string_value,json=stringValue,oneof"`
}

type ChromeTraceEvent_Arg_PointerValue struct {
	// Pointers are stored in a separate type as the JSON output treats them
	// differently from other uint64 values.
	PointerValue uint64 `protobuf:"varint,7,opt,name=pointer_value,json=pointerValue,oneof"`
}

type ChromeTraceEvent_Arg_JsonValue struct {
	JsonValue string `protobuf:"bytes,8,opt,name=json_value,json=jsonValue,oneof"`
}

type ChromeTraceEvent_Arg_TracedValue struct {
	TracedValue *ChromeTracedValue `protobuf:"bytes,10,opt,name=traced_value,json=tracedValue,oneof"`
}

func (*ChromeTraceEvent_Arg_BoolValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_UintValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_IntValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_DoubleValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_StringValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_PointerValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_JsonValue) isChromeTraceEvent_Arg_Value() {}

func (*ChromeTraceEvent_Arg_TracedValue) isChromeTraceEvent_Arg_Value() {}

type ClockSnapshot_Clock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clock IDs have the following semantic:
	// [1, 63]:    Builtin types, see BuiltinClock from
	//             ../common/builtin_clock.proto.
	// [64, 127]:  User-defined clocks. These clocks are sequence-scoped. They
	//             are only valid within the same |trusted_packet_sequence_id|
	//             (i.e. only for TracePacket(s) emitted by the same TraceWriter
	//             that emitted the clock snapshot).
	// [128, MAX]: Reserved for future use. The idea is to allow global clock
	//             IDs and setting this ID to hash(full_clock_name) & ~127.
	ClockId *uint32 `protobuf:"varint,1,opt,name=clock_id,json=clockId" json:"clock_id,omitempty"`
	// Absolute timestamp. Unit is ns unless specified otherwise by the
	// unit_multiplier_ns field below.
	Timestamp *uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// When true each TracePacket's timestamp should be interpreted as a delta
	// from the last TracePacket's timestamp (referencing this clock) emitted by
	// the same packet_sequence_id. Should only be used for user-defined
	// sequence-local clocks. The first packet timestamp after each
	// ClockSnapshot that contains this clock is relative to the |timestamp| in
	// the ClockSnapshot.
	IsIncremental *bool `protobuf:"varint,3,opt,name=is_incremental,json=isIncremental" json:"is_incremental,omitempty"`
	// Allows to specify a custom unit different than the default (ns) for this
	// clock domain. A multiplier of 1000 means that a timestamp = 3 should be
	// interpreted as 3000 ns = 3 us. All snapshots for the same clock within a
	// trace need to use the same unit.
	UnitMultiplierNs *uint64 `protobuf:"varint,4,opt,name=unit_multiplier_ns,json=unitMultiplierNs" json:"unit_multiplier_ns,omitempty"`
}

func (x *ClockSnapshot_Clock) Reset() {
	*x = ClockSnapshot_Clock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[501]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockSnapshot_Clock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockSnapshot_Clock) ProtoMessage() {}

func (x *ClockSnapshot_Clock) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[501]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockSnapshot_Clock.ProtoReflect.Descriptor instead.
func (*ClockSnapshot_Clock) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{40, 0}
}

func (x *ClockSnapshot_Clock) GetClockId() uint32 {
	if x != nil && x.ClockId != nil {
		return *x.ClockId
	}
	return 0
}

func (x *ClockSnapshot_Clock) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ClockSnapshot_Clock) GetIsIncremental() bool {
	if x != nil && x.IsIncremental != nil {
		return *x.IsIncremental
	}
	return false
}

func (x *ClockSnapshot_Clock) GetUnitMultiplierNs() uint64 {
	if x != nil && x.UnitMultiplierNs != nil {
		return *x.UnitMultiplierNs
	}
	return 0
}

// Range of reserved tag numbers. Reserved tag numbers may not be used by
// fields or extension ranges in the same message. Reserved ranges may
// not overlap.
type DescriptorProto_ReservedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inclusive.
	Start *int32 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	// Exclusive.
	End *int32 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (x *DescriptorProto_ReservedRange) Reset() {
	*x = DescriptorProto_ReservedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[502]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescriptorProto_ReservedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptorProto_ReservedRange) ProtoMessage() {}

func (x *DescriptorProto_ReservedRange) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[502]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptorProto_ReservedRange.ProtoReflect.Descriptor instead.
func (*DescriptorProto_ReservedRange) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{43, 0}
}

func (x *DescriptorProto_ReservedRange) GetStart() int32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *DescriptorProto_ReservedRange) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

// Representation of Entry
type InodeFileMap_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InodeNumber *uint64 `protobuf:"varint,1,opt,name=inode_number,json=inodeNumber" json:"inode_number,omitempty"`
	// The path to the file, e.g. "etc/file.xml"
	// List of strings for multiple hardlinks
	Paths []string                 `protobuf:"bytes,2,rep,name=paths" json:"paths,omitempty"`
	Type  *InodeFileMap_Entry_Type `protobuf:"varint,3,opt,name=type,enum=perfetto.protos.InodeFileMap_Entry_Type" json:"type,omitempty"`
}

func (x *InodeFileMap_Entry) Reset() {
	*x = InodeFileMap_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[503]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InodeFileMap_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InodeFileMap_Entry) ProtoMessage() {}

func (x *InodeFileMap_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[503]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InodeFileMap_Entry.ProtoReflect.Descriptor instead.
func (*InodeFileMap_Entry) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{50, 0}
}

func (x *InodeFileMap_Entry) GetInodeNumber() uint64 {
	if x != nil && x.InodeNumber != nil {
		return *x.InodeNumber
	}
	return 0
}

func (x *InodeFileMap_Entry) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *InodeFileMap_Entry) GetType() InodeFileMap_Entry_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return InodeFileMap_Entry_UNKNOWN
}

type GenericFtraceEvent_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Types that are assignable to Value:
	//	*GenericFtraceEvent_Field_StrValue
	//	*GenericFtraceEvent_Field_IntValue
	//	*GenericFtraceEvent_Field_UintValue
	Value isGenericFtraceEvent_Field_Value `protobuf_oneof:"value"`
}

func (x *GenericFtraceEvent_Field) Reset() {
	*x = GenericFtraceEvent_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[504]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericFtraceEvent_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericFtraceEvent_Field) ProtoMessage() {}

func (x *GenericFtraceEvent_Field) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[504]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericFtraceEvent_Field.ProtoReflect.Descriptor instead.
func (*GenericFtraceEvent_Field) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{243, 0}
}

func (x *GenericFtraceEvent_Field) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (m *GenericFtraceEvent_Field) GetValue() isGenericFtraceEvent_Field_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GenericFtraceEvent_Field) GetStrValue() string {
	if x, ok := x.GetValue().(*GenericFtraceEvent_Field_StrValue); ok {
		return x.StrValue
	}
	return ""
}

func (x *GenericFtraceEvent_Field) GetIntValue() int64 {
	if x, ok := x.GetValue().(*GenericFtraceEvent_Field_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *GenericFtraceEvent_Field) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*GenericFtraceEvent_Field_UintValue); ok {
		return x.UintValue
	}
	return 0
}

type isGenericFtraceEvent_Field_Value interface {
	isGenericFtraceEvent_Field_Value()
}

type GenericFtraceEvent_Field_StrValue struct {
	StrValue string `protobuf:"bytes,3,opt,name=str_value,json=strValue,oneof"`
}

type GenericFtraceEvent_Field_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}

type GenericFtraceEvent_Field_UintValue struct {
	UintValue uint64 `protobuf:"varint,5,opt,name=uint_value,json=uintValue,oneof"`
}

func (*GenericFtraceEvent_Field_StrValue) isGenericFtraceEvent_Field_Value() {}

func (*GenericFtraceEvent_Field_IntValue) isGenericFtraceEvent_Field_Value() {}

func (*GenericFtraceEvent_Field_UintValue) isGenericFtraceEvent_Field_Value() {}

// Optionally-enabled compact encoding of a batch of scheduling events. Only
// a subset of events & their fields is recorded.
// All fields (except comms) are stored in a structure-of-arrays form, one
// entry in each repeated field per event.
type FtraceEventBundle_CompactSched struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interned table of unique strings for this bundle.
	InternTable []string `protobuf:"bytes,5,rep,name=intern_table,json=internTable" json:"intern_table,omitempty"`
	// Delta-encoded timestamps across all sched_switch events within this
	// bundle. The first is absolute, each next one is relative to its
	// predecessor.
	SwitchTimestamp []uint64 `protobuf:"varint,1,rep,packed,name=switch_timestamp,json=switchTimestamp" json:"switch_timestamp,omitempty"`
	SwitchPrevState []int64  `protobuf:"varint,2,rep,packed,name=switch_prev_state,json=switchPrevState" json:"switch_prev_state,omitempty"`
	SwitchNextPid   []int32  `protobuf:"varint,3,rep,packed,name=switch_next_pid,json=switchNextPid" json:"switch_next_pid,omitempty"`
	SwitchNextPrio  []int32  `protobuf:"varint,4,rep,packed,name=switch_next_prio,json=switchNextPrio" json:"switch_next_prio,omitempty"`
	// One per event, index into |intern_table| corresponding to the
	// next_comm field of the event.
	SwitchNextCommIndex []uint32 `protobuf:"varint,6,rep,packed,name=switch_next_comm_index,json=switchNextCommIndex" json:"switch_next_comm_index,omitempty"`
	// Delta-encoded timestamps across all sched_waking events within this
	// bundle. The first is absolute, each next one is relative to its
	// predecessor.
	WakingTimestamp []uint64 `protobuf:"varint,7,rep,packed,name=waking_timestamp,json=wakingTimestamp" json:"waking_timestamp,omitempty"`
	WakingPid       []int32  `protobuf:"varint,8,rep,packed,name=waking_pid,json=wakingPid" json:"waking_pid,omitempty"`
	WakingTargetCpu []int32  `protobuf:"varint,9,rep,packed,name=waking_target_cpu,json=wakingTargetCpu" json:"waking_target_cpu,omitempty"`
	WakingPrio      []int32  `protobuf:"varint,10,rep,packed,name=waking_prio,json=wakingPrio" json:"waking_prio,omitempty"`
	// One per event, index into |intern_table| corresponding to the
	// comm field of the event.
	WakingCommIndex []uint32 `protobuf:"varint,11,rep,packed,name=waking_comm_index,json=wakingCommIndex" json:"waking_comm_index,omitempty"`
}

func (x *FtraceEventBundle_CompactSched) Reset() {
	*x = FtraceEventBundle_CompactSched{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[505]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FtraceEventBundle_CompactSched) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FtraceEventBundle_CompactSched) ProtoMessage() {}

func (x *FtraceEventBundle_CompactSched) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[505]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FtraceEventBundle_CompactSched.ProtoReflect.Descriptor instead.
func (*FtraceEventBundle_CompactSched) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{382, 0}
}

func (x *FtraceEventBundle_CompactSched) GetInternTable() []string {
	if x != nil {
		return x.InternTable
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetSwitchTimestamp() []uint64 {
	if x != nil {
		return x.SwitchTimestamp
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetSwitchPrevState() []int64 {
	if x != nil {
		return x.SwitchPrevState
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetSwitchNextPid() []int32 {
	if x != nil {
		return x.SwitchNextPid
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetSwitchNextPrio() []int32 {
	if x != nil {
		return x.SwitchNextPrio
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetSwitchNextCommIndex() []uint32 {
	if x != nil {
		return x.SwitchNextCommIndex
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetWakingTimestamp() []uint64 {
	if x != nil {
		return x.WakingTimestamp
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetWakingPid() []int32 {
	if x != nil {
		return x.WakingPid
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetWakingTargetCpu() []int32 {
	if x != nil {
		return x.WakingTargetCpu
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetWakingPrio() []int32 {
	if x != nil {
		return x.WakingPrio
	}
	return nil
}

func (x *FtraceEventBundle_CompactSched) GetWakingCommIndex() []uint32 {
	if x != nil {
		return x.WakingCommIndex
	}
	return nil
}

type GpuCounterEvent_GpuCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required. Identifier for counter.
	CounterId *uint32 `protobuf:"varint,1,opt,name=counter_id,json=counterId" json:"counter_id,omitempty"`
	// required. Value of the counter.
	//
	// Types that are assignable to Value:
	//	*GpuCounterEvent_GpuCounter_IntValue
	//	*GpuCounterEvent_GpuCounter_DoubleValue
	Value isGpuCounterEvent_GpuCounter_Value `protobuf_oneof:"value"`
}

func (x *GpuCounterEvent_GpuCounter) Reset() {
	*x = GpuCounterEvent_GpuCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[506]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuCounterEvent_GpuCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuCounterEvent_GpuCounter) ProtoMessage() {}

func (x *GpuCounterEvent_GpuCounter) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[506]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuCounterEvent_GpuCounter.ProtoReflect.Descriptor instead.
func (*GpuCounterEvent_GpuCounter) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{385, 0}
}

func (x *GpuCounterEvent_GpuCounter) GetCounterId() uint32 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (m *GpuCounterEvent_GpuCounter) GetValue() isGpuCounterEvent_GpuCounter_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *GpuCounterEvent_GpuCounter) GetIntValue() int64 {
	if x, ok := x.GetValue().(*GpuCounterEvent_GpuCounter_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *GpuCounterEvent_GpuCounter) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*GpuCounterEvent_GpuCounter_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isGpuCounterEvent_GpuCounter_Value interface {
	isGpuCounterEvent_GpuCounter_Value()
}

type GpuCounterEvent_GpuCounter_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,oneof"`
}

type GpuCounterEvent_GpuCounter_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,oneof"`
}

func (*GpuCounterEvent_GpuCounter_IntValue) isGpuCounterEvent_GpuCounter_Value() {}

func (*GpuCounterEvent_GpuCounter_DoubleValue) isGpuCounterEvent_GpuCounter_Value() {}

// optional. Additional data for the user. This may include attributes for
// the event like resource ids, shaders, etc.
type GpuRenderStageEvent_ExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *GpuRenderStageEvent_ExtraData) Reset() {
	*x = GpuRenderStageEvent_ExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[507]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuRenderStageEvent_ExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuRenderStageEvent_ExtraData) ProtoMessage() {}

func (x *GpuRenderStageEvent_ExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[507]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuRenderStageEvent_ExtraData.ProtoReflect.Descriptor instead.
func (*GpuRenderStageEvent_ExtraData) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{387, 0}
}

func (x *GpuRenderStageEvent_ExtraData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GpuRenderStageEvent_ExtraData) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Deprecated.  Use InternedGpuRenderStageSpecification instead.
// The first trace packet of each session should include a Specifications
// to enumerate *all* IDs that will be used. The timestamp of this packet
// must be earlier than all other packets. Only one packet with Specifications
// is expected.
type GpuRenderStageEvent_Specifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextSpec *GpuRenderStageEvent_Specifications_ContextSpec `protobuf:"bytes,1,opt,name=context_spec,json=contextSpec" json:"context_spec,omitempty"`
	// Labels to categorize the hw Queue this event goes on.
	HwQueue []*GpuRenderStageEvent_Specifications_Description `protobuf:"bytes,2,rep,name=hw_queue,json=hwQueue" json:"hw_queue,omitempty"`
	// Labels to categorize render stage(binning, render, compute etc).
	Stage []*GpuRenderStageEvent_Specifications_Description `protobuf:"bytes,3,rep,name=stage" json:"stage,omitempty"`
}

func (x *GpuRenderStageEvent_Specifications) Reset() {
	*x = GpuRenderStageEvent_Specifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[508]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuRenderStageEvent_Specifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuRenderStageEvent_Specifications) ProtoMessage() {}

func (x *GpuRenderStageEvent_Specifications) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[508]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuRenderStageEvent_Specifications.ProtoReflect.Descriptor instead.
func (*GpuRenderStageEvent_Specifications) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{387, 1}
}

func (x *GpuRenderStageEvent_Specifications) GetContextSpec() *GpuRenderStageEvent_Specifications_ContextSpec {
	if x != nil {
		return x.ContextSpec
	}
	return nil
}

func (x *GpuRenderStageEvent_Specifications) GetHwQueue() []*GpuRenderStageEvent_Specifications_Description {
	if x != nil {
		return x.HwQueue
	}
	return nil
}

func (x *GpuRenderStageEvent_Specifications) GetStage() []*GpuRenderStageEvent_Specifications_Description {
	if x != nil {
		return x.Stage
	}
	return nil
}

type GpuRenderStageEvent_Specifications_ContextSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *uint64 `protobuf:"varint,1,opt,name=context" json:"context,omitempty"`
	Pid     *int32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
}

func (x *GpuRenderStageEvent_Specifications_ContextSpec) Reset() {
	*x = GpuRenderStageEvent_Specifications_ContextSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[509]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuRenderStageEvent_Specifications_ContextSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuRenderStageEvent_Specifications_ContextSpec) ProtoMessage() {}

func (x *GpuRenderStageEvent_Specifications_ContextSpec) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[509]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuRenderStageEvent_Specifications_ContextSpec.ProtoReflect.Descriptor instead.
func (*GpuRenderStageEvent_Specifications_ContextSpec) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{387, 1, 0}
}

func (x *GpuRenderStageEvent_Specifications_ContextSpec) GetContext() uint64 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *GpuRenderStageEvent_Specifications_ContextSpec) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

type GpuRenderStageEvent_Specifications_Description struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *GpuRenderStageEvent_Specifications_Description) Reset() {
	*x = GpuRenderStageEvent_Specifications_Description{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[510]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuRenderStageEvent_Specifications_Description) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuRenderStageEvent_Specifications_Description) ProtoMessage() {}

func (x *GpuRenderStageEvent_Specifications_Description) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[510]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuRenderStageEvent_Specifications_Description.ProtoReflect.Descriptor instead.
func (*GpuRenderStageEvent_Specifications_Description) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{387, 1, 1}
}

func (x *GpuRenderStageEvent_Specifications_Description) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GpuRenderStageEvent_Specifications_Description) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// For recording vkSetDebugUtilsObjectNameEXT and
// vkDebugMarkerSetObjectNameEXT
type VulkanApiEvent_VkDebugUtilsObjectName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid      *uint32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	VkDevice *uint64 `protobuf:"varint,2,opt,name=vk_device,json=vkDevice" json:"vk_device,omitempty"`
	// VkObjectType.  Value must match
	// https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkObjectType.html.
	ObjectType *int32  `protobuf:"varint,3,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	Object     *uint64 `protobuf:"varint,4,opt,name=object" json:"object,omitempty"`
	ObjectName *string `protobuf:"bytes,5,opt,name=object_name,json=objectName" json:"object_name,omitempty"`
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) Reset() {
	*x = VulkanApiEvent_VkDebugUtilsObjectName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[511]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulkanApiEvent_VkDebugUtilsObjectName) ProtoMessage() {}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[511]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulkanApiEvent_VkDebugUtilsObjectName.ProtoReflect.Descriptor instead.
func (*VulkanApiEvent_VkDebugUtilsObjectName) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{390, 0}
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) GetVkDevice() uint64 {
	if x != nil && x.VkDevice != nil {
		return *x.VkDevice
	}
	return 0
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) GetObjectType() int32 {
	if x != nil && x.ObjectType != nil {
		return *x.ObjectType
	}
	return 0
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) GetObject() uint64 {
	if x != nil && x.Object != nil {
		return *x.Object
	}
	return 0
}

func (x *VulkanApiEvent_VkDebugUtilsObjectName) GetObjectName() string {
	if x != nil && x.ObjectName != nil {
		return *x.ObjectName
	}
	return ""
}

// For recording vkQueueSubmit call.
type VulkanApiEvent_VkQueueSubmit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationNs       *uint64  `protobuf:"varint,1,opt,name=duration_ns,json=durationNs" json:"duration_ns,omitempty"`
	Pid              *uint32  `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	Tid              *uint32  `protobuf:"varint,3,opt,name=tid" json:"tid,omitempty"`
	VkQueue          *uint64  `protobuf:"varint,4,opt,name=vk_queue,json=vkQueue" json:"vk_queue,omitempty"`
	VkCommandBuffers []uint64 `protobuf:"varint,5,rep,name=vk_command_buffers,json=vkCommandBuffers" json:"vk_command_buffers,omitempty"`
	// Submission ID.  An identifier unique to each vkQueueSubmit call.  This
	// submission_id must match GpuRenderStageEvent.submission_id if the
	// GpuRenderStageEvent is created due to this vkQueueSubmit.
	SubmissionId *uint32 `protobuf:"varint,6,opt,name=submission_id,json=submissionId" json:"submission_id,omitempty"`
}

func (x *VulkanApiEvent_VkQueueSubmit) Reset() {
	*x = VulkanApiEvent_VkQueueSubmit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[512]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulkanApiEvent_VkQueueSubmit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulkanApiEvent_VkQueueSubmit) ProtoMessage() {}

func (x *VulkanApiEvent_VkQueueSubmit) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[512]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulkanApiEvent_VkQueueSubmit.ProtoReflect.Descriptor instead.
func (*VulkanApiEvent_VkQueueSubmit) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{390, 1}
}

func (x *VulkanApiEvent_VkQueueSubmit) GetDurationNs() uint64 {
	if x != nil && x.DurationNs != nil {
		return *x.DurationNs
	}
	return 0
}

func (x *VulkanApiEvent_VkQueueSubmit) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *VulkanApiEvent_VkQueueSubmit) GetTid() uint32 {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return 0
}

func (x *VulkanApiEvent_VkQueueSubmit) GetVkQueue() uint64 {
	if x != nil && x.VkQueue != nil {
		return *x.VkQueue
	}
	return 0
}

func (x *VulkanApiEvent_VkQueueSubmit) GetVkCommandBuffers() []uint64 {
	if x != nil {
		return x.VkCommandBuffers
	}
	return nil
}

func (x *VulkanApiEvent_VkQueueSubmit) GetSubmissionId() uint32 {
	if x != nil && x.SubmissionId != nil {
		return *x.SubmissionId
	}
	return 0
}

type DebugAnnotation_NestedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NestedType  *DebugAnnotation_NestedValue_NestedType `protobuf:"varint,1,opt,name=nested_type,json=nestedType,enum=perfetto.protos.DebugAnnotation_NestedValue_NestedType" json:"nested_type,omitempty"`
	DictKeys    []string                                `protobuf:"bytes,2,rep,name=dict_keys,json=dictKeys" json:"dict_keys,omitempty"`
	DictValues  []*DebugAnnotation_NestedValue          `protobuf:"bytes,3,rep,name=dict_values,json=dictValues" json:"dict_values,omitempty"`
	ArrayValues []*DebugAnnotation_NestedValue          `protobuf:"bytes,4,rep,name=array_values,json=arrayValues" json:"array_values,omitempty"`
	IntValue    *int64                                  `protobuf:"varint,5,opt,name=int_value,json=intValue" json:"int_value,omitempty"`
	DoubleValue *float64                                `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	BoolValue   *bool                                   `protobuf:"varint,7,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue *string                                 `protobuf:"bytes,8,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (x *DebugAnnotation_NestedValue) Reset() {
	*x = DebugAnnotation_NestedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[513]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugAnnotation_NestedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugAnnotation_NestedValue) ProtoMessage() {}

func (x *DebugAnnotation_NestedValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[513]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugAnnotation_NestedValue.ProtoReflect.Descriptor instead.
func (*DebugAnnotation_NestedValue) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{403, 0}
}

func (x *DebugAnnotation_NestedValue) GetNestedType() DebugAnnotation_NestedValue_NestedType {
	if x != nil && x.NestedType != nil {
		return *x.NestedType
	}
	return DebugAnnotation_NestedValue_UNSPECIFIED
}

func (x *DebugAnnotation_NestedValue) GetDictKeys() []string {
	if x != nil {
		return x.DictKeys
	}
	return nil
}

func (x *DebugAnnotation_NestedValue) GetDictValues() []*DebugAnnotation_NestedValue {
	if x != nil {
		return x.DictValues
	}
	return nil
}

func (x *DebugAnnotation_NestedValue) GetArrayValues() []*DebugAnnotation_NestedValue {
	if x != nil {
		return x.ArrayValues
	}
	return nil
}

func (x *DebugAnnotation_NestedValue) GetIntValue() int64 {
	if x != nil && x.IntValue != nil {
		return *x.IntValue
	}
	return 0
}

func (x *DebugAnnotation_NestedValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *DebugAnnotation_NestedValue) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *DebugAnnotation_NestedValue) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

// Next id: 6
type ChromeCompositorStateMachine_MajorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextAction              *ChromeCompositorSchedulerAction                                    `protobuf:"varint,1,opt,name=next_action,json=nextAction,enum=perfetto.protos.ChromeCompositorSchedulerAction" json:"next_action,omitempty"`
	BeginImplFrameState     *ChromeCompositorStateMachine_MajorState_BeginImplFrameState        `protobuf:"varint,2,opt,name=begin_impl_frame_state,json=beginImplFrameState,enum=perfetto.protos.ChromeCompositorStateMachine_MajorState_BeginImplFrameState" json:"begin_impl_frame_state,omitempty"`
	BeginMainFrameState     *ChromeCompositorStateMachine_MajorState_BeginMainFrameState        `protobuf:"varint,3,opt,name=begin_main_frame_state,json=beginMainFrameState,enum=perfetto.protos.ChromeCompositorStateMachine_MajorState_BeginMainFrameState" json:"begin_main_frame_state,omitempty"`
	LayerTreeFrameSinkState *ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState    `protobuf:"varint,4,opt,name=layer_tree_frame_sink_state,json=layerTreeFrameSinkState,enum=perfetto.protos.ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState" json:"layer_tree_frame_sink_state,omitempty"`
	ForcedRedrawState       *ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState `protobuf:"varint,5,opt,name=forced_redraw_state,json=forcedRedrawState,enum=perfetto.protos.ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState" json:"forced_redraw_state,omitempty"`
}

func (x *ChromeCompositorStateMachine_MajorState) Reset() {
	*x = ChromeCompositorStateMachine_MajorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[514]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeCompositorStateMachine_MajorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeCompositorStateMachine_MajorState) ProtoMessage() {}

func (x *ChromeCompositorStateMachine_MajorState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[514]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeCompositorStateMachine_MajorState.ProtoReflect.Descriptor instead.
func (*ChromeCompositorStateMachine_MajorState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 0}
}

func (x *ChromeCompositorStateMachine_MajorState) GetNextAction() ChromeCompositorSchedulerAction {
	if x != nil && x.NextAction != nil {
		return *x.NextAction
	}
	return ChromeCompositorSchedulerAction_CC_SCHEDULER_ACTION_UNSPECIFIED
}

func (x *ChromeCompositorStateMachine_MajorState) GetBeginImplFrameState() ChromeCompositorStateMachine_MajorState_BeginImplFrameState {
	if x != nil && x.BeginImplFrameState != nil {
		return *x.BeginImplFrameState
	}
	return ChromeCompositorStateMachine_MajorState_BEGIN_IMPL_FRAME_UNSPECIFIED
}

func (x *ChromeCompositorStateMachine_MajorState) GetBeginMainFrameState() ChromeCompositorStateMachine_MajorState_BeginMainFrameState {
	if x != nil && x.BeginMainFrameState != nil {
		return *x.BeginMainFrameState
	}
	return ChromeCompositorStateMachine_MajorState_BEGIN_MAIN_FRAME_UNSPECIFIED
}

func (x *ChromeCompositorStateMachine_MajorState) GetLayerTreeFrameSinkState() ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState {
	if x != nil && x.LayerTreeFrameSinkState != nil {
		return *x.LayerTreeFrameSinkState
	}
	return ChromeCompositorStateMachine_MajorState_LAYER_TREE_FRAME_UNSPECIFIED
}

func (x *ChromeCompositorStateMachine_MajorState) GetForcedRedrawState() ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState {
	if x != nil && x.ForcedRedrawState != nil {
		return *x.ForcedRedrawState
	}
	return ChromeCompositorStateMachine_MajorState_FORCED_REDRAW_UNSPECIFIED
}

// Next id: 47
type ChromeCompositorStateMachine_MinorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitCount                                   *int32                                                      `protobuf:"varint,1,opt,name=commit_count,json=commitCount" json:"commit_count,omitempty"`
	CurrentFrameNumber                            *int32                                                      `protobuf:"varint,2,opt,name=current_frame_number,json=currentFrameNumber" json:"current_frame_number,omitempty"`
	LastFrameNumberSubmitPerformed                *int32                                                      `protobuf:"varint,3,opt,name=last_frame_number_submit_performed,json=lastFrameNumberSubmitPerformed" json:"last_frame_number_submit_performed,omitempty"`
	LastFrameNumberDrawPerformed                  *int32                                                      `protobuf:"varint,4,opt,name=last_frame_number_draw_performed,json=lastFrameNumberDrawPerformed" json:"last_frame_number_draw_performed,omitempty"`
	LastFrameNumberBeginMainFrameSent             *int32                                                      `protobuf:"varint,5,opt,name=last_frame_number_begin_main_frame_sent,json=lastFrameNumberBeginMainFrameSent" json:"last_frame_number_begin_main_frame_sent,omitempty"`
	DidDraw                                       *bool                                                       `protobuf:"varint,6,opt,name=did_draw,json=didDraw" json:"did_draw,omitempty"`
	DidSendBeginMainFrameForCurrentFrame          *bool                                                       `protobuf:"varint,7,opt,name=did_send_begin_main_frame_for_current_frame,json=didSendBeginMainFrameForCurrentFrame" json:"did_send_begin_main_frame_for_current_frame,omitempty"`
	DidNotifyBeginMainFrameNotExpectedUntil       *bool                                                       `protobuf:"varint,8,opt,name=did_notify_begin_main_frame_not_expected_until,json=didNotifyBeginMainFrameNotExpectedUntil" json:"did_notify_begin_main_frame_not_expected_until,omitempty"`
	DidNotifyBeginMainFrameNotExpectedSoon        *bool                                                       `protobuf:"varint,9,opt,name=did_notify_begin_main_frame_not_expected_soon,json=didNotifyBeginMainFrameNotExpectedSoon" json:"did_notify_begin_main_frame_not_expected_soon,omitempty"`
	WantsBeginMainFrameNotExpected                *bool                                                       `protobuf:"varint,10,opt,name=wants_begin_main_frame_not_expected,json=wantsBeginMainFrameNotExpected" json:"wants_begin_main_frame_not_expected,omitempty"`
	DidCommitDuringFrame                          *bool                                                       `protobuf:"varint,11,opt,name=did_commit_during_frame,json=didCommitDuringFrame" json:"did_commit_during_frame,omitempty"`
	DidInvalidateLayerTreeFrameSink               *bool                                                       `protobuf:"varint,12,opt,name=did_invalidate_layer_tree_frame_sink,json=didInvalidateLayerTreeFrameSink" json:"did_invalidate_layer_tree_frame_sink,omitempty"`
	DidPerformImplSideInvalidaion                 *bool                                                       `protobuf:"varint,13,opt,name=did_perform_impl_side_invalidaion,json=didPerformImplSideInvalidaion" json:"did_perform_impl_side_invalidaion,omitempty"`
	DidPrepareTiles                               *bool                                                       `protobuf:"varint,14,opt,name=did_prepare_tiles,json=didPrepareTiles" json:"did_prepare_tiles,omitempty"`
	ConsecutiveCheckerboardAnimations             *int32                                                      `protobuf:"varint,15,opt,name=consecutive_checkerboard_animations,json=consecutiveCheckerboardAnimations" json:"consecutive_checkerboard_animations,omitempty"`
	PendingSubmitFrames                           *int32                                                      `protobuf:"varint,16,opt,name=pending_submit_frames,json=pendingSubmitFrames" json:"pending_submit_frames,omitempty"`
	SubmitFramesWithCurrentLayerTreeFrameSink     *int32                                                      `protobuf:"varint,17,opt,name=submit_frames_with_current_layer_tree_frame_sink,json=submitFramesWithCurrentLayerTreeFrameSink" json:"submit_frames_with_current_layer_tree_frame_sink,omitempty"`
	NeedsRedraw                                   *bool                                                       `protobuf:"varint,18,opt,name=needs_redraw,json=needsRedraw" json:"needs_redraw,omitempty"`
	NeedsPrepareTiles                             *bool                                                       `protobuf:"varint,19,opt,name=needs_prepare_tiles,json=needsPrepareTiles" json:"needs_prepare_tiles,omitempty"`
	NeedsBeginMainFrame                           *bool                                                       `protobuf:"varint,20,opt,name=needs_begin_main_frame,json=needsBeginMainFrame" json:"needs_begin_main_frame,omitempty"`
	NeedsOneBeginImplFrame                        *bool                                                       `protobuf:"varint,21,opt,name=needs_one_begin_impl_frame,json=needsOneBeginImplFrame" json:"needs_one_begin_impl_frame,omitempty"`
	Visible                                       *bool                                                       `protobuf:"varint,22,opt,name=visible" json:"visible,omitempty"`
	BeginFrameSourcePaused                        *bool                                                       `protobuf:"varint,23,opt,name=begin_frame_source_paused,json=beginFrameSourcePaused" json:"begin_frame_source_paused,omitempty"`
	CanDraw                                       *bool                                                       `protobuf:"varint,24,opt,name=can_draw,json=canDraw" json:"can_draw,omitempty"`
	ResourcelessDraw                              *bool                                                       `protobuf:"varint,25,opt,name=resourceless_draw,json=resourcelessDraw" json:"resourceless_draw,omitempty"`
	HasPendingTree                                *bool                                                       `protobuf:"varint,26,opt,name=has_pending_tree,json=hasPendingTree" json:"has_pending_tree,omitempty"`
	PendingTreeIsReadyForActivation               *bool                                                       `protobuf:"varint,27,opt,name=pending_tree_is_ready_for_activation,json=pendingTreeIsReadyForActivation" json:"pending_tree_is_ready_for_activation,omitempty"`
	ActiveTreeNeedsFirstDraw                      *bool                                                       `protobuf:"varint,28,opt,name=active_tree_needs_first_draw,json=activeTreeNeedsFirstDraw" json:"active_tree_needs_first_draw,omitempty"`
	ActiveTreeIsReadyToDraw                       *bool                                                       `protobuf:"varint,29,opt,name=active_tree_is_ready_to_draw,json=activeTreeIsReadyToDraw" json:"active_tree_is_ready_to_draw,omitempty"`
	DidCreateAndInitializeFirstLayerTreeFrameSink *bool                                                       `protobuf:"varint,30,opt,name=did_create_and_initialize_first_layer_tree_frame_sink,json=didCreateAndInitializeFirstLayerTreeFrameSink" json:"did_create_and_initialize_first_layer_tree_frame_sink,omitempty"`
	TreePriority                                  *ChromeCompositorStateMachine_MinorState_TreePriority       `protobuf:"varint,31,opt,name=tree_priority,json=treePriority,enum=perfetto.protos.ChromeCompositorStateMachine_MinorState_TreePriority" json:"tree_priority,omitempty"`
	ScrollHandlerState                            *ChromeCompositorStateMachine_MinorState_ScrollHandlerState `protobuf:"varint,32,opt,name=scroll_handler_state,json=scrollHandlerState,enum=perfetto.protos.ChromeCompositorStateMachine_MinorState_ScrollHandlerState" json:"scroll_handler_state,omitempty"`
	CriticalBeginMainFrameToActivateIsFast        *bool                                                       `protobuf:"varint,33,opt,name=critical_begin_main_frame_to_activate_is_fast,json=criticalBeginMainFrameToActivateIsFast" json:"critical_begin_main_frame_to_activate_is_fast,omitempty"`
	MainThreadMissedLastDeadline                  *bool                                                       `protobuf:"varint,34,opt,name=main_thread_missed_last_deadline,json=mainThreadMissedLastDeadline" json:"main_thread_missed_last_deadline,omitempty"`
	SkipNextBeginMainFrameToReduceLatency         *bool                                                       `protobuf:"varint,35,opt,name=skip_next_begin_main_frame_to_reduce_latency,json=skipNextBeginMainFrameToReduceLatency" json:"skip_next_begin_main_frame_to_reduce_latency,omitempty"`
	VideoNeedsBeginFrames                         *bool                                                       `protobuf:"varint,36,opt,name=video_needs_begin_frames,json=videoNeedsBeginFrames" json:"video_needs_begin_frames,omitempty"`
	DeferBeginMainFrame                           *bool                                                       `protobuf:"varint,37,opt,name=defer_begin_main_frame,json=deferBeginMainFrame" json:"defer_begin_main_frame,omitempty"`
	LastCommitHadNoUpdates                        *bool                                                       `protobuf:"varint,38,opt,name=last_commit_had_no_updates,json=lastCommitHadNoUpdates" json:"last_commit_had_no_updates,omitempty"`
	DidDrawInLastFrame                            *bool                                                       `protobuf:"varint,39,opt,name=did_draw_in_last_frame,json=didDrawInLastFrame" json:"did_draw_in_last_frame,omitempty"`
	DidSubmitInLastFrame                          *bool                                                       `protobuf:"varint,40,opt,name=did_submit_in_last_frame,json=didSubmitInLastFrame" json:"did_submit_in_last_frame,omitempty"`
	NeedsImplSideInvalidation                     *bool                                                       `protobuf:"varint,41,opt,name=needs_impl_side_invalidation,json=needsImplSideInvalidation" json:"needs_impl_side_invalidation,omitempty"`
	CurrentPendingTreeIsImplSide                  *bool                                                       `protobuf:"varint,42,opt,name=current_pending_tree_is_impl_side,json=currentPendingTreeIsImplSide" json:"current_pending_tree_is_impl_side,omitempty"`
	PreviousPendingTreeWasImplSide                *bool                                                       `protobuf:"varint,43,opt,name=previous_pending_tree_was_impl_side,json=previousPendingTreeWasImplSide" json:"previous_pending_tree_was_impl_side,omitempty"`
	ProcessingAnimationWorkletsForActiveTree      *bool                                                       `protobuf:"varint,44,opt,name=processing_animation_worklets_for_active_tree,json=processingAnimationWorkletsForActiveTree" json:"processing_animation_worklets_for_active_tree,omitempty"`
	ProcessingAnimationWorkletsForPendingTree     *bool                                                       `protobuf:"varint,45,opt,name=processing_animation_worklets_for_pending_tree,json=processingAnimationWorkletsForPendingTree" json:"processing_animation_worklets_for_pending_tree,omitempty"`
	ProcessingPaintWorkletsForPendingTree         *bool                                                       `protobuf:"varint,46,opt,name=processing_paint_worklets_for_pending_tree,json=processingPaintWorkletsForPendingTree" json:"processing_paint_worklets_for_pending_tree,omitempty"`
}

func (x *ChromeCompositorStateMachine_MinorState) Reset() {
	*x = ChromeCompositorStateMachine_MinorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[515]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeCompositorStateMachine_MinorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeCompositorStateMachine_MinorState) ProtoMessage() {}

func (x *ChromeCompositorStateMachine_MinorState) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[515]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeCompositorStateMachine_MinorState.ProtoReflect.Descriptor instead.
func (*ChromeCompositorStateMachine_MinorState) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{410, 1}
}

func (x *ChromeCompositorStateMachine_MinorState) GetCommitCount() int32 {
	if x != nil && x.CommitCount != nil {
		return *x.CommitCount
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetCurrentFrameNumber() int32 {
	if x != nil && x.CurrentFrameNumber != nil {
		return *x.CurrentFrameNumber
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetLastFrameNumberSubmitPerformed() int32 {
	if x != nil && x.LastFrameNumberSubmitPerformed != nil {
		return *x.LastFrameNumberSubmitPerformed
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetLastFrameNumberDrawPerformed() int32 {
	if x != nil && x.LastFrameNumberDrawPerformed != nil {
		return *x.LastFrameNumberDrawPerformed
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetLastFrameNumberBeginMainFrameSent() int32 {
	if x != nil && x.LastFrameNumberBeginMainFrameSent != nil {
		return *x.LastFrameNumberBeginMainFrameSent
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidDraw() bool {
	if x != nil && x.DidDraw != nil {
		return *x.DidDraw
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidSendBeginMainFrameForCurrentFrame() bool {
	if x != nil && x.DidSendBeginMainFrameForCurrentFrame != nil {
		return *x.DidSendBeginMainFrameForCurrentFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidNotifyBeginMainFrameNotExpectedUntil() bool {
	if x != nil && x.DidNotifyBeginMainFrameNotExpectedUntil != nil {
		return *x.DidNotifyBeginMainFrameNotExpectedUntil
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidNotifyBeginMainFrameNotExpectedSoon() bool {
	if x != nil && x.DidNotifyBeginMainFrameNotExpectedSoon != nil {
		return *x.DidNotifyBeginMainFrameNotExpectedSoon
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetWantsBeginMainFrameNotExpected() bool {
	if x != nil && x.WantsBeginMainFrameNotExpected != nil {
		return *x.WantsBeginMainFrameNotExpected
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidCommitDuringFrame() bool {
	if x != nil && x.DidCommitDuringFrame != nil {
		return *x.DidCommitDuringFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidInvalidateLayerTreeFrameSink() bool {
	if x != nil && x.DidInvalidateLayerTreeFrameSink != nil {
		return *x.DidInvalidateLayerTreeFrameSink
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidPerformImplSideInvalidaion() bool {
	if x != nil && x.DidPerformImplSideInvalidaion != nil {
		return *x.DidPerformImplSideInvalidaion
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidPrepareTiles() bool {
	if x != nil && x.DidPrepareTiles != nil {
		return *x.DidPrepareTiles
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetConsecutiveCheckerboardAnimations() int32 {
	if x != nil && x.ConsecutiveCheckerboardAnimations != nil {
		return *x.ConsecutiveCheckerboardAnimations
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetPendingSubmitFrames() int32 {
	if x != nil && x.PendingSubmitFrames != nil {
		return *x.PendingSubmitFrames
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetSubmitFramesWithCurrentLayerTreeFrameSink() int32 {
	if x != nil && x.SubmitFramesWithCurrentLayerTreeFrameSink != nil {
		return *x.SubmitFramesWithCurrentLayerTreeFrameSink
	}
	return 0
}

func (x *ChromeCompositorStateMachine_MinorState) GetNeedsRedraw() bool {
	if x != nil && x.NeedsRedraw != nil {
		return *x.NeedsRedraw
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetNeedsPrepareTiles() bool {
	if x != nil && x.NeedsPrepareTiles != nil {
		return *x.NeedsPrepareTiles
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetNeedsBeginMainFrame() bool {
	if x != nil && x.NeedsBeginMainFrame != nil {
		return *x.NeedsBeginMainFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetNeedsOneBeginImplFrame() bool {
	if x != nil && x.NeedsOneBeginImplFrame != nil {
		return *x.NeedsOneBeginImplFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetBeginFrameSourcePaused() bool {
	if x != nil && x.BeginFrameSourcePaused != nil {
		return *x.BeginFrameSourcePaused
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetCanDraw() bool {
	if x != nil && x.CanDraw != nil {
		return *x.CanDraw
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetResourcelessDraw() bool {
	if x != nil && x.ResourcelessDraw != nil {
		return *x.ResourcelessDraw
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetHasPendingTree() bool {
	if x != nil && x.HasPendingTree != nil {
		return *x.HasPendingTree
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetPendingTreeIsReadyForActivation() bool {
	if x != nil && x.PendingTreeIsReadyForActivation != nil {
		return *x.PendingTreeIsReadyForActivation
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetActiveTreeNeedsFirstDraw() bool {
	if x != nil && x.ActiveTreeNeedsFirstDraw != nil {
		return *x.ActiveTreeNeedsFirstDraw
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetActiveTreeIsReadyToDraw() bool {
	if x != nil && x.ActiveTreeIsReadyToDraw != nil {
		return *x.ActiveTreeIsReadyToDraw
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidCreateAndInitializeFirstLayerTreeFrameSink() bool {
	if x != nil && x.DidCreateAndInitializeFirstLayerTreeFrameSink != nil {
		return *x.DidCreateAndInitializeFirstLayerTreeFrameSink
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetTreePriority() ChromeCompositorStateMachine_MinorState_TreePriority {
	if x != nil && x.TreePriority != nil {
		return *x.TreePriority
	}
	return ChromeCompositorStateMachine_MinorState_TREE_PRIORITY_UNSPECIFIED
}

func (x *ChromeCompositorStateMachine_MinorState) GetScrollHandlerState() ChromeCompositorStateMachine_MinorState_ScrollHandlerState {
	if x != nil && x.ScrollHandlerState != nil {
		return *x.ScrollHandlerState
	}
	return ChromeCompositorStateMachine_MinorState_SCROLL_HANDLER_UNSPECIFIED
}

func (x *ChromeCompositorStateMachine_MinorState) GetCriticalBeginMainFrameToActivateIsFast() bool {
	if x != nil && x.CriticalBeginMainFrameToActivateIsFast != nil {
		return *x.CriticalBeginMainFrameToActivateIsFast
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetMainThreadMissedLastDeadline() bool {
	if x != nil && x.MainThreadMissedLastDeadline != nil {
		return *x.MainThreadMissedLastDeadline
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetSkipNextBeginMainFrameToReduceLatency() bool {
	if x != nil && x.SkipNextBeginMainFrameToReduceLatency != nil {
		return *x.SkipNextBeginMainFrameToReduceLatency
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetVideoNeedsBeginFrames() bool {
	if x != nil && x.VideoNeedsBeginFrames != nil {
		return *x.VideoNeedsBeginFrames
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDeferBeginMainFrame() bool {
	if x != nil && x.DeferBeginMainFrame != nil {
		return *x.DeferBeginMainFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetLastCommitHadNoUpdates() bool {
	if x != nil && x.LastCommitHadNoUpdates != nil {
		return *x.LastCommitHadNoUpdates
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidDrawInLastFrame() bool {
	if x != nil && x.DidDrawInLastFrame != nil {
		return *x.DidDrawInLastFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetDidSubmitInLastFrame() bool {
	if x != nil && x.DidSubmitInLastFrame != nil {
		return *x.DidSubmitInLastFrame
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetNeedsImplSideInvalidation() bool {
	if x != nil && x.NeedsImplSideInvalidation != nil {
		return *x.NeedsImplSideInvalidation
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetCurrentPendingTreeIsImplSide() bool {
	if x != nil && x.CurrentPendingTreeIsImplSide != nil {
		return *x.CurrentPendingTreeIsImplSide
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetPreviousPendingTreeWasImplSide() bool {
	if x != nil && x.PreviousPendingTreeWasImplSide != nil {
		return *x.PreviousPendingTreeWasImplSide
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetProcessingAnimationWorkletsForActiveTree() bool {
	if x != nil && x.ProcessingAnimationWorkletsForActiveTree != nil {
		return *x.ProcessingAnimationWorkletsForActiveTree
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetProcessingAnimationWorkletsForPendingTree() bool {
	if x != nil && x.ProcessingAnimationWorkletsForPendingTree != nil {
		return *x.ProcessingAnimationWorkletsForPendingTree
	}
	return false
}

func (x *ChromeCompositorStateMachine_MinorState) GetProcessingPaintWorkletsForPendingTree() bool {
	if x != nil && x.ProcessingPaintWorkletsForPendingTree != nil {
		return *x.ProcessingPaintWorkletsForPendingTree
	}
	return false
}

type BeginImplFrameArgs_TimestampsInUs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalDelta            *int64 `protobuf:"varint,1,opt,name=interval_delta,json=intervalDelta" json:"interval_delta,omitempty"`
	NowToDeadlineDelta       *int64 `protobuf:"varint,2,opt,name=now_to_deadline_delta,json=nowToDeadlineDelta" json:"now_to_deadline_delta,omitempty"`
	FrameTimeToNowDelta      *int64 `protobuf:"varint,3,opt,name=frame_time_to_now_delta,json=frameTimeToNowDelta" json:"frame_time_to_now_delta,omitempty"`
	FrameTimeToDeadlineDelta *int64 `protobuf:"varint,4,opt,name=frame_time_to_deadline_delta,json=frameTimeToDeadlineDelta" json:"frame_time_to_deadline_delta,omitempty"`
	Now                      *int64 `protobuf:"varint,5,opt,name=now" json:"now,omitempty"`
	FrameTime                *int64 `protobuf:"varint,6,opt,name=frame_time,json=frameTime" json:"frame_time,omitempty"`
	Deadline                 *int64 `protobuf:"varint,7,opt,name=deadline" json:"deadline,omitempty"`
}

func (x *BeginImplFrameArgs_TimestampsInUs) Reset() {
	*x = BeginImplFrameArgs_TimestampsInUs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[516]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginImplFrameArgs_TimestampsInUs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginImplFrameArgs_TimestampsInUs) ProtoMessage() {}

func (x *BeginImplFrameArgs_TimestampsInUs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[516]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginImplFrameArgs_TimestampsInUs.ProtoReflect.Descriptor instead.
func (*BeginImplFrameArgs_TimestampsInUs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{412, 0}
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetIntervalDelta() int64 {
	if x != nil && x.IntervalDelta != nil {
		return *x.IntervalDelta
	}
	return 0
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetNowToDeadlineDelta() int64 {
	if x != nil && x.NowToDeadlineDelta != nil {
		return *x.NowToDeadlineDelta
	}
	return 0
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetFrameTimeToNowDelta() int64 {
	if x != nil && x.FrameTimeToNowDelta != nil {
		return *x.FrameTimeToNowDelta
	}
	return 0
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetFrameTimeToDeadlineDelta() int64 {
	if x != nil && x.FrameTimeToDeadlineDelta != nil {
		return *x.FrameTimeToDeadlineDelta
	}
	return 0
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetNow() int64 {
	if x != nil && x.Now != nil {
		return *x.Now
	}
	return 0
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetFrameTime() int64 {
	if x != nil && x.FrameTime != nil {
		return *x.FrameTime
	}
	return 0
}

func (x *BeginImplFrameArgs_TimestampsInUs) GetDeadline() int64 {
	if x != nil && x.Deadline != nil {
		return *x.Deadline
	}
	return 0
}

type ChromeLatencyInfo_ComponentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType *ChromeLatencyInfo_LatencyComponentType `protobuf:"varint,1,opt,name=component_type,json=componentType,enum=perfetto.protos.ChromeLatencyInfo_LatencyComponentType" json:"component_type,omitempty"`
	// Microsecond timestamp in CLOCK_MONOTONIC domain
	TimeUs *uint64 `protobuf:"varint,2,opt,name=time_us,json=timeUs" json:"time_us,omitempty"`
}

func (x *ChromeLatencyInfo_ComponentInfo) Reset() {
	*x = ChromeLatencyInfo_ComponentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[517]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromeLatencyInfo_ComponentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromeLatencyInfo_ComponentInfo) ProtoMessage() {}

func (x *ChromeLatencyInfo_ComponentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[517]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromeLatencyInfo_ComponentInfo.ProtoReflect.Descriptor instead.
func (*ChromeLatencyInfo_ComponentInfo) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{418, 0}
}

func (x *ChromeLatencyInfo_ComponentInfo) GetComponentType() ChromeLatencyInfo_LatencyComponentType {
	if x != nil && x.ComponentType != nil {
		return *x.ComponentType
	}
	return ChromeLatencyInfo_COMPONENT_UNSPECIFIED
}

func (x *ChromeLatencyInfo_ComponentInfo) GetTimeUs() uint64 {
	if x != nil && x.TimeUs != nil {
		return *x.TimeUs
	}
	return 0
}

// Apart from {category, time, thread time, tid, pid}, other legacy trace
// event attributes are initially simply proxied for conversion to a JSON
// trace. We intend to gradually transition these attributes to similar native
// features in TrackEvent (e.g. async + flow events), or deprecate them
// without replacement where transition is unsuitable.
//
// Next reserved id: 16 (up to 16).
// Next id: 20.
type TrackEvent_LegacyEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, use TrackEvent::name(_iid) instead.
	// interned EventName.
	NameIid          *uint64 `protobuf:"varint,1,opt,name=name_iid,json=nameIid" json:"name_iid,omitempty"`
	Phase            *int32  `protobuf:"varint,2,opt,name=phase" json:"phase,omitempty"`
	DurationUs       *int64  `protobuf:"varint,3,opt,name=duration_us,json=durationUs" json:"duration_us,omitempty"`
	ThreadDurationUs *int64  `protobuf:"varint,4,opt,name=thread_duration_us,json=threadDurationUs" json:"thread_duration_us,omitempty"`
	// Elapsed retired instruction count during the event.
	ThreadInstructionDelta *int64 `protobuf:"varint,15,opt,name=thread_instruction_delta,json=threadInstructionDelta" json:"thread_instruction_delta,omitempty"`
	// Types that are assignable to Id:
	//	*TrackEvent_LegacyEvent_UnscopedId
	//	*TrackEvent_LegacyEvent_LocalId
	//	*TrackEvent_LegacyEvent_GlobalId
	Id isTrackEvent_LegacyEvent_Id `protobuf_oneof:"id"`
	// Additional optional scope for |id|.
	IdScope *string `protobuf:"bytes,7,opt,name=id_scope,json=idScope" json:"id_scope,omitempty"`
	// Consider the thread timestamps for async BEGIN/END event pairs as valid.
	UseAsyncTts *bool `protobuf:"varint,9,opt,name=use_async_tts,json=useAsyncTts" json:"use_async_tts,omitempty"`
	// Idenfifies a flow. Flow events with the same bind_id are connected.
	BindId *uint64 `protobuf:"varint,8,opt,name=bind_id,json=bindId" json:"bind_id,omitempty"`
	// Use the enclosing slice as binding point for a flow end event instead of
	// the next slice. Flow start/step events always bind to the enclosing
	// slice.
	BindToEnclosing   *bool                                     `protobuf:"varint,12,opt,name=bind_to_enclosing,json=bindToEnclosing" json:"bind_to_enclosing,omitempty"`
	FlowDirection     *TrackEvent_LegacyEvent_FlowDirection     `protobuf:"varint,13,opt,name=flow_direction,json=flowDirection,enum=perfetto.protos.TrackEvent_LegacyEvent_FlowDirection" json:"flow_direction,omitempty"`
	InstantEventScope *TrackEvent_LegacyEvent_InstantEventScope `protobuf:"varint,14,opt,name=instant_event_scope,json=instantEventScope,enum=perfetto.protos.TrackEvent_LegacyEvent_InstantEventScope" json:"instant_event_scope,omitempty"`
	// Override the pid/tid if the writer needs to emit events on behalf of
	// another process/thread. This should be the exception. Normally, the
	// pid+tid from ThreadDescriptor is used.
	PidOverride *int32 `protobuf:"varint,18,opt,name=pid_override,json=pidOverride" json:"pid_override,omitempty"`
	TidOverride *int32 `protobuf:"varint,19,opt,name=tid_override,json=tidOverride" json:"tid_override,omitempty"`
}

func (x *TrackEvent_LegacyEvent) Reset() {
	*x = TrackEvent_LegacyEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[518]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackEvent_LegacyEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackEvent_LegacyEvent) ProtoMessage() {}

func (x *TrackEvent_LegacyEvent) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[518]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackEvent_LegacyEvent.ProtoReflect.Descriptor instead.
func (*TrackEvent_LegacyEvent) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{426, 0}
}

func (x *TrackEvent_LegacyEvent) GetNameIid() uint64 {
	if x != nil && x.NameIid != nil {
		return *x.NameIid
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetPhase() int32 {
	if x != nil && x.Phase != nil {
		return *x.Phase
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetDurationUs() int64 {
	if x != nil && x.DurationUs != nil {
		return *x.DurationUs
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetThreadDurationUs() int64 {
	if x != nil && x.ThreadDurationUs != nil {
		return *x.ThreadDurationUs
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetThreadInstructionDelta() int64 {
	if x != nil && x.ThreadInstructionDelta != nil {
		return *x.ThreadInstructionDelta
	}
	return 0
}

func (m *TrackEvent_LegacyEvent) GetId() isTrackEvent_LegacyEvent_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *TrackEvent_LegacyEvent) GetUnscopedId() uint64 {
	if x, ok := x.GetId().(*TrackEvent_LegacyEvent_UnscopedId); ok {
		return x.UnscopedId
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetLocalId() uint64 {
	if x, ok := x.GetId().(*TrackEvent_LegacyEvent_LocalId); ok {
		return x.LocalId
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetGlobalId() uint64 {
	if x, ok := x.GetId().(*TrackEvent_LegacyEvent_GlobalId); ok {
		return x.GlobalId
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetIdScope() string {
	if x != nil && x.IdScope != nil {
		return *x.IdScope
	}
	return ""
}

func (x *TrackEvent_LegacyEvent) GetUseAsyncTts() bool {
	if x != nil && x.UseAsyncTts != nil {
		return *x.UseAsyncTts
	}
	return false
}

func (x *TrackEvent_LegacyEvent) GetBindId() uint64 {
	if x != nil && x.BindId != nil {
		return *x.BindId
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetBindToEnclosing() bool {
	if x != nil && x.BindToEnclosing != nil {
		return *x.BindToEnclosing
	}
	return false
}

func (x *TrackEvent_LegacyEvent) GetFlowDirection() TrackEvent_LegacyEvent_FlowDirection {
	if x != nil && x.FlowDirection != nil {
		return *x.FlowDirection
	}
	return TrackEvent_LegacyEvent_FLOW_UNSPECIFIED
}

func (x *TrackEvent_LegacyEvent) GetInstantEventScope() TrackEvent_LegacyEvent_InstantEventScope {
	if x != nil && x.InstantEventScope != nil {
		return *x.InstantEventScope
	}
	return TrackEvent_LegacyEvent_SCOPE_UNSPECIFIED
}

func (x *TrackEvent_LegacyEvent) GetPidOverride() int32 {
	if x != nil && x.PidOverride != nil {
		return *x.PidOverride
	}
	return 0
}

func (x *TrackEvent_LegacyEvent) GetTidOverride() int32 {
	if x != nil && x.TidOverride != nil {
		return *x.TidOverride
	}
	return 0
}

type isTrackEvent_LegacyEvent_Id interface {
	isTrackEvent_LegacyEvent_Id()
}

type TrackEvent_LegacyEvent_UnscopedId struct {
	UnscopedId uint64 `protobuf:"varint,6,opt,name=unscoped_id,json=unscopedId,oneof"`
}

type TrackEvent_LegacyEvent_LocalId struct {
	LocalId uint64 `protobuf:"varint,10,opt,name=local_id,json=localId,oneof"`
}

type TrackEvent_LegacyEvent_GlobalId struct {
	GlobalId uint64 `protobuf:"varint,11,opt,name=global_id,json=globalId,oneof"`
}

func (*TrackEvent_LegacyEvent_UnscopedId) isTrackEvent_LegacyEvent_Id() {}

func (*TrackEvent_LegacyEvent_LocalId) isTrackEvent_LegacyEvent_Id() {}

func (*TrackEvent_LegacyEvent_GlobalId) isTrackEvent_LegacyEvent_Id() {}

// Memory snapshot of a process. The snapshot contains memory data that is
// from 2 different sources, namely system stats and instrumentation stats.
// The system memory usage stats come from the OS based on standard API
// available in the platform to query memory usage. The instrumentation stats
// are added by instrumenting specific piece of code which tracks memory
// allocations and deallocations made by a small sub-system within the
// application.
// The system stats of the global memory snapshot are recorded as part of
// ProcessStats and SmapsPacket fields in trace packet with the same
// timestamp.
type MemoryTrackerSnapshot_ProcessSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Process ID of the process
	Pid            *int32                                              `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	AllocatorDumps []*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode `protobuf:"bytes,2,rep,name=allocator_dumps,json=allocatorDumps" json:"allocator_dumps,omitempty"`
	MemoryEdges    []*MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge `protobuf:"bytes,3,rep,name=memory_edges,json=memoryEdges" json:"memory_edges,omitempty"`
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot) Reset() {
	*x = MemoryTrackerSnapshot_ProcessSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[519]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTrackerSnapshot_ProcessSnapshot) ProtoMessage() {}

func (x *MemoryTrackerSnapshot_ProcessSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[519]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTrackerSnapshot_ProcessSnapshot.ProtoReflect.Descriptor instead.
func (*MemoryTrackerSnapshot_ProcessSnapshot) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431, 0}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot) GetAllocatorDumps() []*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode {
	if x != nil {
		return x.AllocatorDumps
	}
	return nil
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot) GetMemoryEdges() []*MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge {
	if x != nil {
		return x.MemoryEdges
	}
	return nil
}

// A single node in the memory graph.
type MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the node across all processes involved in the global
	// memory dump. The ID is only unique within this particular global dump
	// identified by GlobalMemoryDumpPacket.global_dump_id.
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Absolute name is a unique name for the memory node within the process
	// with ProcessMemoryDump.pid. The name can contain multiple parts
	// separated by '/', which traces the edges of the node from the root
	// node.
	// Eg: "partition_allocator/array_buffers/buffer1" refers to the child
	// node "buffer1" in a graph structure of:
	//   root -> partition_allocator -> array_buffers -> buffer1.
	AbsoluteName *string `protobuf:"bytes,2,opt,name=absolute_name,json=absoluteName" json:"absolute_name,omitempty"`
	// A weak node means that the instrumentation that added the current node
	// is unsure about the existence of the actual memory. Unless a "strong"
	// (non-weak is default) node that has an edge to the current node exists
	// in the current global dump, the current node will be discarded.
	Weak *bool `protobuf:"varint,3,opt,name=weak" json:"weak,omitempty"`
	// Size of the node in bytes, used to compute the effective size of the
	// nodes without double counting.
	SizeBytes *uint64                                                             `protobuf:"varint,4,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	Entries   []*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) Reset() {
	*x = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[520]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) ProtoMessage() {}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[520]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode.ProtoReflect.Descriptor instead.
func (*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431, 0, 0}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) GetAbsoluteName() string {
	if x != nil && x.AbsoluteName != nil {
		return *x.AbsoluteName
	}
	return ""
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) GetWeak() bool {
	if x != nil && x.Weak != nil {
		return *x.Weak
	}
	return false
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) GetSizeBytes() uint64 {
	if x != nil && x.SizeBytes != nil {
		return *x.SizeBytes
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode) GetEntries() []*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// A directed edge that connects any 2 nodes in the graph above. These are
// in addition to the inherent edges added due to the tree structure of the
// node's absolute names.
// Node with id |source_id| owns the node with id |target_id|, and has the
// effect of attributing the memory usage of target to source. |importance|
// is optional and relevant only for the cases of co-ownership, where it
// acts as a z-index: the owner with the highest importance will be
// attributed target's memory.
type MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId    *uint64 `protobuf:"varint,1,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	TargetId    *uint64 `protobuf:"varint,2,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
	Importance  *uint32 `protobuf:"varint,3,opt,name=importance" json:"importance,omitempty"`
	Overridable *bool   `protobuf:"varint,4,opt,name=overridable" json:"overridable,omitempty"`
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) Reset() {
	*x = MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[521]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) ProtoMessage() {}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[521]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge.ProtoReflect.Descriptor instead.
func (*MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431, 0, 1}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) GetSourceId() uint64 {
	if x != nil && x.SourceId != nil {
		return *x.SourceId
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) GetTargetId() uint64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) GetImportance() uint32 {
	if x != nil && x.Importance != nil {
		return *x.Importance
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge) GetOverridable() bool {
	if x != nil && x.Overridable != nil {
		return *x.Overridable
	}
	return false
}

// Entries in the memory node that contain statistics and additional
// debuggable information about the memory. The size of the node is
// tracked separately in the |size_bytes| field.
type MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string                                                                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Units *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units `protobuf:"varint,2,opt,name=units,enum=perfetto.protos.MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units" json:"units,omitempty"`
	// Contains either one of uint64 or string value.
	ValueUint64 *uint64 `protobuf:"varint,3,opt,name=value_uint64,json=valueUint64" json:"value_uint64,omitempty"`
	ValueString *string `protobuf:"bytes,4,opt,name=value_string,json=valueString" json:"value_string,omitempty"`
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) Reset() {
	*x = MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[522]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) ProtoMessage() {}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[522]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry.ProtoReflect.Descriptor instead.
func (*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{431, 0, 0, 0}
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) GetUnits() MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_UNSPECIFIED
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) GetValueUint64() uint64 {
	if x != nil && x.ValueUint64 != nil {
		return *x.ValueUint64
	}
	return 0
}

func (x *MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry) GetValueString() string {
	if x != nil && x.ValueString != nil {
		return *x.ValueString
	}
	return ""
}

type PerfettoMetatrace_Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *PerfettoMetatrace_Arg) Reset() {
	*x = PerfettoMetatrace_Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[523]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfettoMetatrace_Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfettoMetatrace_Arg) ProtoMessage() {}

func (x *PerfettoMetatrace_Arg) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[523]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfettoMetatrace_Arg.ProtoReflect.Descriptor instead.
func (*PerfettoMetatrace_Arg) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{432, 0}
}

func (x *PerfettoMetatrace_Arg) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *PerfettoMetatrace_Arg) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type PowerRails_RailDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index corresponding to the rail
	Index *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// Name of the rail
	RailName *string `protobuf:"bytes,2,opt,name=rail_name,json=railName" json:"rail_name,omitempty"`
	// Name of the subsystem to which this rail belongs
	SubsysName *string `protobuf:"bytes,3,opt,name=subsys_name,json=subsysName" json:"subsys_name,omitempty"`
	// Hardware sampling rate (Hz).
	SamplingRate *uint32 `protobuf:"varint,4,opt,name=sampling_rate,json=samplingRate" json:"sampling_rate,omitempty"`
}

func (x *PowerRails_RailDescriptor) Reset() {
	*x = PowerRails_RailDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[524]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRails_RailDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRails_RailDescriptor) ProtoMessage() {}

func (x *PowerRails_RailDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[524]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRails_RailDescriptor.ProtoReflect.Descriptor instead.
func (*PowerRails_RailDescriptor) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{435, 0}
}

func (x *PowerRails_RailDescriptor) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PowerRails_RailDescriptor) GetRailName() string {
	if x != nil && x.RailName != nil {
		return *x.RailName
	}
	return ""
}

func (x *PowerRails_RailDescriptor) GetSubsysName() string {
	if x != nil && x.SubsysName != nil {
		return *x.SubsysName
	}
	return ""
}

func (x *PowerRails_RailDescriptor) GetSamplingRate() uint32 {
	if x != nil && x.SamplingRate != nil {
		return *x.SamplingRate
	}
	return 0
}

type PowerRails_EnergyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index corresponding to RailDescriptor.index
	Index *uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// Time since device boot(CLOCK_BOOTTIME) in milli-seconds.
	TimestampMs *uint64 `protobuf:"varint,2,opt,name=timestamp_ms,json=timestampMs" json:"timestamp_ms,omitempty"`
	// Accumulated energy since device boot in microwatt-seconds (uWs).
	Energy *uint64 `protobuf:"varint,3,opt,name=energy" json:"energy,omitempty"`
}

func (x *PowerRails_EnergyData) Reset() {
	*x = PowerRails_EnergyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[525]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRails_EnergyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRails_EnergyData) ProtoMessage() {}

func (x *PowerRails_EnergyData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[525]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRails_EnergyData.ProtoReflect.Descriptor instead.
func (*PowerRails_EnergyData) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{435, 1}
}

func (x *PowerRails_EnergyData) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *PowerRails_EnergyData) GetTimestampMs() uint64 {
	if x != nil && x.TimestampMs != nil {
		return *x.TimestampMs
	}
	return 0
}

func (x *PowerRails_EnergyData) GetEnergy() uint64 {
	if x != nil && x.Energy != nil {
		return *x.Energy
	}
	return 0
}

// Next ID: 9
type ProfilePacket_HeapSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallstackId *uint64 `protobuf:"varint,1,opt,name=callstack_id,json=callstackId" json:"callstack_id,omitempty"`
	// bytes allocated at this callstack.
	SelfAllocated *uint64 `protobuf:"varint,2,opt,name=self_allocated,json=selfAllocated" json:"self_allocated,omitempty"`
	// bytes allocated at this callstack that have been freed.
	SelfFreed *uint64 `protobuf:"varint,3,opt,name=self_freed,json=selfFreed" json:"self_freed,omitempty"`
	// Bytes allocated by this callstack but not freed at the time the malloc
	// heap usage of this process was maximal. This is only set if dump_at_max
	// is true in HeapprofdConfig. In that case, self_allocated, self_freed and
	// self_idle will not be set.
	SelfMax *uint64 `protobuf:"varint,8,opt,name=self_max,json=selfMax" json:"self_max,omitempty"`
	// Number of allocations that were sampled at this callstack but not freed
	// at the time the malloc heap usage of this process was maximal. This is
	// only set if dump_at_max is true in HeapprofdConfig. In that case,
	// self_allocated, self_freed and self_idle will not be set.
	SelfMaxCount *uint64 `protobuf:"varint,9,opt,name=self_max_count,json=selfMaxCount" json:"self_max_count,omitempty"`
	// timestamp [opt]
	Timestamp *uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// Number of allocations that were sampled at this callstack.
	AllocCount *uint64 `protobuf:"varint,5,opt,name=alloc_count,json=allocCount" json:"alloc_count,omitempty"`
	// Number of allocations that were sampled at this callstack that have been
	// freed.
	FreeCount *uint64 `protobuf:"varint,6,opt,name=free_count,json=freeCount" json:"free_count,omitempty"`
}

func (x *ProfilePacket_HeapSample) Reset() {
	*x = ProfilePacket_HeapSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[526]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePacket_HeapSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePacket_HeapSample) ProtoMessage() {}

func (x *ProfilePacket_HeapSample) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[526]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePacket_HeapSample.ProtoReflect.Descriptor instead.
func (*ProfilePacket_HeapSample) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{443, 0}
}

func (x *ProfilePacket_HeapSample) GetCallstackId() uint64 {
	if x != nil && x.CallstackId != nil {
		return *x.CallstackId
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetSelfAllocated() uint64 {
	if x != nil && x.SelfAllocated != nil {
		return *x.SelfAllocated
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetSelfFreed() uint64 {
	if x != nil && x.SelfFreed != nil {
		return *x.SelfFreed
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetSelfMax() uint64 {
	if x != nil && x.SelfMax != nil {
		return *x.SelfMax
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetSelfMaxCount() uint64 {
	if x != nil && x.SelfMaxCount != nil {
		return *x.SelfMaxCount
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetAllocCount() uint64 {
	if x != nil && x.AllocCount != nil {
		return *x.AllocCount
	}
	return 0
}

func (x *ProfilePacket_HeapSample) GetFreeCount() uint64 {
	if x != nil && x.FreeCount != nil {
		return *x.FreeCount
	}
	return 0
}

type ProfilePacket_Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*ProfilePacket_Histogram_Bucket `protobuf:"bytes,1,rep,name=buckets" json:"buckets,omitempty"`
}

func (x *ProfilePacket_Histogram) Reset() {
	*x = ProfilePacket_Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[527]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePacket_Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePacket_Histogram) ProtoMessage() {}

func (x *ProfilePacket_Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[527]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePacket_Histogram.ProtoReflect.Descriptor instead.
func (*ProfilePacket_Histogram) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{443, 1}
}

func (x *ProfilePacket_Histogram) GetBuckets() []*ProfilePacket_Histogram_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type ProfilePacket_ProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnwindingErrors         *uint64                  `protobuf:"varint,1,opt,name=unwinding_errors,json=unwindingErrors" json:"unwinding_errors,omitempty"`
	HeapSamples             *uint64                  `protobuf:"varint,2,opt,name=heap_samples,json=heapSamples" json:"heap_samples,omitempty"`
	MapReparses             *uint64                  `protobuf:"varint,3,opt,name=map_reparses,json=mapReparses" json:"map_reparses,omitempty"`
	UnwindingTimeUs         *ProfilePacket_Histogram `protobuf:"bytes,4,opt,name=unwinding_time_us,json=unwindingTimeUs" json:"unwinding_time_us,omitempty"`
	TotalUnwindingTimeUs    *uint64                  `protobuf:"varint,5,opt,name=total_unwinding_time_us,json=totalUnwindingTimeUs" json:"total_unwinding_time_us,omitempty"`
	ClientSpinlockBlockedUs *uint64                  `protobuf:"varint,6,opt,name=client_spinlock_blocked_us,json=clientSpinlockBlockedUs" json:"client_spinlock_blocked_us,omitempty"`
}

func (x *ProfilePacket_ProcessStats) Reset() {
	*x = ProfilePacket_ProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[528]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePacket_ProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePacket_ProcessStats) ProtoMessage() {}

func (x *ProfilePacket_ProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[528]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePacket_ProcessStats.ProtoReflect.Descriptor instead.
func (*ProfilePacket_ProcessStats) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{443, 2}
}

func (x *ProfilePacket_ProcessStats) GetUnwindingErrors() uint64 {
	if x != nil && x.UnwindingErrors != nil {
		return *x.UnwindingErrors
	}
	return 0
}

func (x *ProfilePacket_ProcessStats) GetHeapSamples() uint64 {
	if x != nil && x.HeapSamples != nil {
		return *x.HeapSamples
	}
	return 0
}

func (x *ProfilePacket_ProcessStats) GetMapReparses() uint64 {
	if x != nil && x.MapReparses != nil {
		return *x.MapReparses
	}
	return 0
}

func (x *ProfilePacket_ProcessStats) GetUnwindingTimeUs() *ProfilePacket_Histogram {
	if x != nil {
		return x.UnwindingTimeUs
	}
	return nil
}

func (x *ProfilePacket_ProcessStats) GetTotalUnwindingTimeUs() uint64 {
	if x != nil && x.TotalUnwindingTimeUs != nil {
		return *x.TotalUnwindingTimeUs
	}
	return 0
}

func (x *ProfilePacket_ProcessStats) GetClientSpinlockBlockedUs() uint64 {
	if x != nil && x.ClientSpinlockBlockedUs != nil {
		return *x.ClientSpinlockBlockedUs
	}
	return 0
}

type ProfilePacket_ProcessHeapSamples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid *uint64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// This process was profiled from startup.
	// If false, this process was already running when profiling started.
	FromStartup *bool `protobuf:"varint,3,opt,name=from_startup,json=fromStartup" json:"from_startup,omitempty"`
	// This process was not profiled because a concurrent session was active.
	// If this is true, samples will be empty.
	RejectedConcurrent *bool `protobuf:"varint,4,opt,name=rejected_concurrent,json=rejectedConcurrent" json:"rejected_concurrent,omitempty"`
	// This process disconnected while it was profiled.
	// If false, the process outlived the profiling session.
	Disconnected *bool `protobuf:"varint,6,opt,name=disconnected" json:"disconnected,omitempty"`
	// If disconnected, this disconnect was caused by the client overrunning
	// the buffer.
	BufferOverran *bool `protobuf:"varint,7,opt,name=buffer_overran,json=bufferOverran" json:"buffer_overran,omitempty"`
	// If disconnected, this disconnected was caused by the shared memory
	// buffer being corrupted. THIS IS ALWAYS A BUG IN HEAPPROFD OR CLIENT
	// MEMORY CORRUPTION.
	BufferCorrupted *bool `protobuf:"varint,8,opt,name=buffer_corrupted,json=bufferCorrupted" json:"buffer_corrupted,omitempty"`
	// If disconnected, this disconnect was caused by heapprofd exceeding
	// guardrails during this profiling session.
	HitGuardrail *bool   `protobuf:"varint,10,opt,name=hit_guardrail,json=hitGuardrail" json:"hit_guardrail,omitempty"`
	HeapName     *string `protobuf:"bytes,11,opt,name=heap_name,json=heapName" json:"heap_name,omitempty"`
	// Timestamp of the state of the target process that this dump represents.
	// This can be different to the timestamp of the TracePackets for various
	// reasons:
	// * If disconnected is set above, this is the timestamp of last state
	//   heapprofd had of the process before it disconnected.
	// * Otherwise, if the rate of events produced by the process is high,
	//   heapprofd might be behind.
	//
	// TODO(fmayer): This is MONOTONIC_COARSE. Refactor ClockSnapshot::Clock
	//               to have a type enum that we can reuse here.
	Timestamp *uint64 `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
	// Metadata about heapprofd.
	Stats   *ProfilePacket_ProcessStats `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	Samples []*ProfilePacket_HeapSample `protobuf:"bytes,2,rep,name=samples" json:"samples,omitempty"`
}

func (x *ProfilePacket_ProcessHeapSamples) Reset() {
	*x = ProfilePacket_ProcessHeapSamples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[529]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePacket_ProcessHeapSamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePacket_ProcessHeapSamples) ProtoMessage() {}

func (x *ProfilePacket_ProcessHeapSamples) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[529]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePacket_ProcessHeapSamples.ProtoReflect.Descriptor instead.
func (*ProfilePacket_ProcessHeapSamples) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{443, 3}
}

func (x *ProfilePacket_ProcessHeapSamples) GetPid() uint64 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProfilePacket_ProcessHeapSamples) GetFromStartup() bool {
	if x != nil && x.FromStartup != nil {
		return *x.FromStartup
	}
	return false
}

func (x *ProfilePacket_ProcessHeapSamples) GetRejectedConcurrent() bool {
	if x != nil && x.RejectedConcurrent != nil {
		return *x.RejectedConcurrent
	}
	return false
}

func (x *ProfilePacket_ProcessHeapSamples) GetDisconnected() bool {
	if x != nil && x.Disconnected != nil {
		return *x.Disconnected
	}
	return false
}

func (x *ProfilePacket_ProcessHeapSamples) GetBufferOverran() bool {
	if x != nil && x.BufferOverran != nil {
		return *x.BufferOverran
	}
	return false
}

func (x *ProfilePacket_ProcessHeapSamples) GetBufferCorrupted() bool {
	if x != nil && x.BufferCorrupted != nil {
		return *x.BufferCorrupted
	}
	return false
}

func (x *ProfilePacket_ProcessHeapSamples) GetHitGuardrail() bool {
	if x != nil && x.HitGuardrail != nil {
		return *x.HitGuardrail
	}
	return false
}

func (x *ProfilePacket_ProcessHeapSamples) GetHeapName() string {
	if x != nil && x.HeapName != nil {
		return *x.HeapName
	}
	return ""
}

func (x *ProfilePacket_ProcessHeapSamples) GetTimestamp() uint64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ProfilePacket_ProcessHeapSamples) GetStats() *ProfilePacket_ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ProfilePacket_ProcessHeapSamples) GetSamples() []*ProfilePacket_HeapSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type ProfilePacket_Histogram_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This bucket counts values from the previous bucket's (or -infinity if
	// this is the first bucket) upper_limit (inclusive) to this upper_limit
	// (exclusive).
	UpperLimit *uint64 `protobuf:"varint,1,opt,name=upper_limit,json=upperLimit" json:"upper_limit,omitempty"`
	// This is the highest bucket. This is set instead of the upper_limit. Any
	// values larger or equal to the previous bucket's upper_limit are counted
	// in this bucket.
	MaxBucket *bool `protobuf:"varint,2,opt,name=max_bucket,json=maxBucket" json:"max_bucket,omitempty"`
	// Number of values that fall into this range.
	Count *uint64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (x *ProfilePacket_Histogram_Bucket) Reset() {
	*x = ProfilePacket_Histogram_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[530]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfilePacket_Histogram_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfilePacket_Histogram_Bucket) ProtoMessage() {}

func (x *ProfilePacket_Histogram_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[530]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfilePacket_Histogram_Bucket.ProtoReflect.Descriptor instead.
func (*ProfilePacket_Histogram_Bucket) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{443, 1, 0}
}

func (x *ProfilePacket_Histogram_Bucket) GetUpperLimit() uint64 {
	if x != nil && x.UpperLimit != nil {
		return *x.UpperLimit
	}
	return 0
}

func (x *ProfilePacket_Histogram_Bucket) GetMaxBucket() bool {
	if x != nil && x.MaxBucket != nil {
		return *x.MaxBucket
	}
	return false
}

func (x *ProfilePacket_Histogram_Bucket) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Per-thread periodically sampled stats.
// Note: not all of these stats will be present in every message. See the note
// for ProcessStats.
type ProcessStats_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid *int32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	// Pairs of frequency (represented as a (1-based) index to CpuInfo
	// frequencies) and time at that frequency (represented as a number of
	// ticks, see SystemInfo for the HZ (ticks / second) value to convert this
	// to time). Frequencies with zero ticks are never uploaded. Read from
	// /proc/tid/time_in_state.
	CpuFreqIndices []uint32 `protobuf:"varint,2,rep,name=cpu_freq_indices,json=cpuFreqIndices" json:"cpu_freq_indices,omitempty"`
	CpuFreqTicks   []uint64 `protobuf:"varint,3,rep,name=cpu_freq_ticks,json=cpuFreqTicks" json:"cpu_freq_ticks,omitempty"`
	// Whether all frequencies with non-zero ticks are present in
	// `cpu_freq_indices`. This marker is used to detect packets that describe
	// time_in_state exhaustively.
	CpuFreqFull *bool `protobuf:"varint,4,opt,name=cpu_freq_full,json=cpuFreqFull" json:"cpu_freq_full,omitempty"`
}

func (x *ProcessStats_Thread) Reset() {
	*x = ProcessStats_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[531]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStats_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStats_Thread) ProtoMessage() {}

func (x *ProcessStats_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[531]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStats_Thread.ProtoReflect.Descriptor instead.
func (*ProcessStats_Thread) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{451, 0}
}

func (x *ProcessStats_Thread) GetTid() int32 {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return 0
}

func (x *ProcessStats_Thread) GetCpuFreqIndices() []uint32 {
	if x != nil {
		return x.CpuFreqIndices
	}
	return nil
}

func (x *ProcessStats_Thread) GetCpuFreqTicks() []uint64 {
	if x != nil {
		return x.CpuFreqTicks
	}
	return nil
}

func (x *ProcessStats_Thread) GetCpuFreqFull() bool {
	if x != nil && x.CpuFreqFull != nil {
		return *x.CpuFreqFull
	}
	return false
}

type ProcessStats_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid *int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// See /proc/[pid]/status in `man 5 proc` for a description of these fields.
	VmSizeKb    *uint64                `protobuf:"varint,2,opt,name=vm_size_kb,json=vmSizeKb" json:"vm_size_kb,omitempty"`
	VmRssKb     *uint64                `protobuf:"varint,3,opt,name=vm_rss_kb,json=vmRssKb" json:"vm_rss_kb,omitempty"`
	RssAnonKb   *uint64                `protobuf:"varint,4,opt,name=rss_anon_kb,json=rssAnonKb" json:"rss_anon_kb,omitempty"`
	RssFileKb   *uint64                `protobuf:"varint,5,opt,name=rss_file_kb,json=rssFileKb" json:"rss_file_kb,omitempty"`
	RssShmemKb  *uint64                `protobuf:"varint,6,opt,name=rss_shmem_kb,json=rssShmemKb" json:"rss_shmem_kb,omitempty"`
	VmSwapKb    *uint64                `protobuf:"varint,7,opt,name=vm_swap_kb,json=vmSwapKb" json:"vm_swap_kb,omitempty"`
	VmLockedKb  *uint64                `protobuf:"varint,8,opt,name=vm_locked_kb,json=vmLockedKb" json:"vm_locked_kb,omitempty"`
	VmHwmKb     *uint64                `protobuf:"varint,9,opt,name=vm_hwm_kb,json=vmHwmKb" json:"vm_hwm_kb,omitempty"`
	OomScoreAdj *int64                 `protobuf:"varint,10,opt,name=oom_score_adj,json=oomScoreAdj" json:"oom_score_adj,omitempty"`
	Threads     []*ProcessStats_Thread `protobuf:"bytes,11,rep,name=threads" json:"threads,omitempty"`
	// The peak resident set size is resettable in newer Posix kernels.
	// This field specifies if reset is supported and if the writer had reset
	// the peaks after each process stats recording.
	IsPeakRssResettable *bool `protobuf:"varint,12,opt,name=is_peak_rss_resettable,json=isPeakRssResettable" json:"is_peak_rss_resettable,omitempty"`
	// Private, shared and swap footprint of the process as measured by
	// Chrome. To know more about these metrics refer to:
	// https://docs.google.com/document/d/1_WmgE1F5WUrhwkPqJis3dWyOiUmQKvpXp5cd4w86TvA
	ChromePrivateFootprintKb *uint32 `protobuf:"varint,13,opt,name=chrome_private_footprint_kb,json=chromePrivateFootprintKb" json:"chrome_private_footprint_kb,omitempty"`
	ChromePeakResidentSetKb  *uint32 `protobuf:"varint,14,opt,name=chrome_peak_resident_set_kb,json=chromePeakResidentSetKb" json:"chrome_peak_resident_set_kb,omitempty"`
}

func (x *ProcessStats_Process) Reset() {
	*x = ProcessStats_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[532]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStats_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStats_Process) ProtoMessage() {}

func (x *ProcessStats_Process) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[532]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStats_Process.ProtoReflect.Descriptor instead.
func (*ProcessStats_Process) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{451, 1}
}

func (x *ProcessStats_Process) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessStats_Process) GetVmSizeKb() uint64 {
	if x != nil && x.VmSizeKb != nil {
		return *x.VmSizeKb
	}
	return 0
}

func (x *ProcessStats_Process) GetVmRssKb() uint64 {
	if x != nil && x.VmRssKb != nil {
		return *x.VmRssKb
	}
	return 0
}

func (x *ProcessStats_Process) GetRssAnonKb() uint64 {
	if x != nil && x.RssAnonKb != nil {
		return *x.RssAnonKb
	}
	return 0
}

func (x *ProcessStats_Process) GetRssFileKb() uint64 {
	if x != nil && x.RssFileKb != nil {
		return *x.RssFileKb
	}
	return 0
}

func (x *ProcessStats_Process) GetRssShmemKb() uint64 {
	if x != nil && x.RssShmemKb != nil {
		return *x.RssShmemKb
	}
	return 0
}

func (x *ProcessStats_Process) GetVmSwapKb() uint64 {
	if x != nil && x.VmSwapKb != nil {
		return *x.VmSwapKb
	}
	return 0
}

func (x *ProcessStats_Process) GetVmLockedKb() uint64 {
	if x != nil && x.VmLockedKb != nil {
		return *x.VmLockedKb
	}
	return 0
}

func (x *ProcessStats_Process) GetVmHwmKb() uint64 {
	if x != nil && x.VmHwmKb != nil {
		return *x.VmHwmKb
	}
	return 0
}

func (x *ProcessStats_Process) GetOomScoreAdj() int64 {
	if x != nil && x.OomScoreAdj != nil {
		return *x.OomScoreAdj
	}
	return 0
}

func (x *ProcessStats_Process) GetThreads() []*ProcessStats_Thread {
	if x != nil {
		return x.Threads
	}
	return nil
}

func (x *ProcessStats_Process) GetIsPeakRssResettable() bool {
	if x != nil && x.IsPeakRssResettable != nil {
		return *x.IsPeakRssResettable
	}
	return false
}

func (x *ProcessStats_Process) GetChromePrivateFootprintKb() uint32 {
	if x != nil && x.ChromePrivateFootprintKb != nil {
		return *x.ChromePrivateFootprintKb
	}
	return 0
}

func (x *ProcessStats_Process) GetChromePeakResidentSetKb() uint32 {
	if x != nil && x.ChromePeakResidentSetKb != nil {
		return *x.ChromePeakResidentSetKb
	}
	return 0
}

// Representation of a thread.
type ProcessTree_Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The thread id (as per gettid())
	Tid *int32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	// Thread group id (i.e. the PID of the process, == TID of the main thread)
	Tgid *int32 `protobuf:"varint,3,opt,name=tgid" json:"tgid,omitempty"`
	// The name of the thread.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *ProcessTree_Thread) Reset() {
	*x = ProcessTree_Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[533]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTree_Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTree_Thread) ProtoMessage() {}

func (x *ProcessTree_Thread) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[533]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTree_Thread.ProtoReflect.Descriptor instead.
func (*ProcessTree_Thread) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{452, 0}
}

func (x *ProcessTree_Thread) GetTid() int32 {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return 0
}

func (x *ProcessTree_Thread) GetTgid() int32 {
	if x != nil && x.Tgid != nil {
		return *x.Tgid
	}
	return 0
}

func (x *ProcessTree_Thread) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Representation of a process.
type ProcessTree_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UNIX process ID, aka thread group ID (as per getpid()).
	Pid *int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// The parent process ID, as per getppid().
	Ppid *int32 `protobuf:"varint,2,opt,name=ppid" json:"ppid,omitempty"`
	// The command line for the process, as per /proc/pid/cmdline.
	// If it is a kernel thread there will only be one cmdline field
	// and it will contain /proc/pid/comm.
	Cmdline []string `protobuf:"bytes,3,rep,name=cmdline" json:"cmdline,omitempty"`
	// No longer used as of Apr 2018, when the dedicated |threads| field was
	// introduced in ProcessTree.
	//
	// Deprecated: Do not use.
	ThreadsDeprecated []*ProcessTree_Thread `protobuf:"bytes,4,rep,name=threads_deprecated,json=threadsDeprecated" json:"threads_deprecated,omitempty"`
	// The uid for the process, as per /proc/pid/status.
	Uid *int32 `protobuf:"varint,5,opt,name=uid" json:"uid,omitempty"`
}

func (x *ProcessTree_Process) Reset() {
	*x = ProcessTree_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[534]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTree_Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTree_Process) ProtoMessage() {}

func (x *ProcessTree_Process) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[534]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTree_Process.ProtoReflect.Descriptor instead.
func (*ProcessTree_Process) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{452, 1}
}

func (x *ProcessTree_Process) GetPid() int32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessTree_Process) GetPpid() int32 {
	if x != nil && x.Ppid != nil {
		return *x.Ppid
	}
	return 0
}

func (x *ProcessTree_Process) GetCmdline() []string {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

// Deprecated: Do not use.
func (x *ProcessTree_Process) GetThreadsDeprecated() []*ProcessTree_Thread {
	if x != nil {
		return x.ThreadsDeprecated
	}
	return nil
}

func (x *ProcessTree_Process) GetUid() int32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

// Counters from /proc/meminfo. Values are in KB.
type SysStats_MeminfoValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *MeminfoCounters `protobuf:"varint,1,opt,name=key,enum=perfetto.protos.MeminfoCounters" json:"key,omitempty"`
	Value *uint64          `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *SysStats_MeminfoValue) Reset() {
	*x = SysStats_MeminfoValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[535]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStats_MeminfoValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStats_MeminfoValue) ProtoMessage() {}

func (x *SysStats_MeminfoValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[535]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStats_MeminfoValue.ProtoReflect.Descriptor instead.
func (*SysStats_MeminfoValue) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{453, 0}
}

func (x *SysStats_MeminfoValue) GetKey() MeminfoCounters {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return MeminfoCounters_MEMINFO_UNSPECIFIED
}

func (x *SysStats_MeminfoValue) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Counter from /proc/vmstat. Units are often pages, not KB.
type SysStats_VmstatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *VmstatCounters `protobuf:"varint,1,opt,name=key,enum=perfetto.protos.VmstatCounters" json:"key,omitempty"`
	Value *uint64         `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (x *SysStats_VmstatValue) Reset() {
	*x = SysStats_VmstatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[536]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStats_VmstatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStats_VmstatValue) ProtoMessage() {}

func (x *SysStats_VmstatValue) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[536]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStats_VmstatValue.ProtoReflect.Descriptor instead.
func (*SysStats_VmstatValue) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{453, 1}
}

func (x *SysStats_VmstatValue) GetKey() VmstatCounters {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return VmstatCounters_VMSTAT_UNSPECIFIED
}

func (x *SysStats_VmstatValue) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Times in each mode, since boot. Unit: nanoseconds.
type SysStats_CpuTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuId *uint32 `protobuf:"varint,1,opt,name=cpu_id,json=cpuId" json:"cpu_id,omitempty"`
	// Time spent in user mode.
	UserNs *uint64 `protobuf:"varint,2,opt,name=user_ns,json=userNs" json:"user_ns,omitempty"`
	// Time spent in user mode (low prio).
	UserIceNs *uint64 `protobuf:"varint,3,opt,name=user_ice_ns,json=userIceNs" json:"user_ice_ns,omitempty"`
	// Time spent in system mode.
	SystemModeNs *uint64 `protobuf:"varint,4,opt,name=system_mode_ns,json=systemModeNs" json:"system_mode_ns,omitempty"`
	// Time spent in the idle task.
	IdleNs *uint64 `protobuf:"varint,5,opt,name=idle_ns,json=idleNs" json:"idle_ns,omitempty"`
	// Time spent waiting for I/O.
	IoWaitNs *uint64 `protobuf:"varint,6,opt,name=io_wait_ns,json=ioWaitNs" json:"io_wait_ns,omitempty"`
	// Time spent servicing interrupts.
	IrqNs *uint64 `protobuf:"varint,7,opt,name=irq_ns,json=irqNs" json:"irq_ns,omitempty"`
	// Time spent servicing softirqs.
	SoftirqNs *uint64 `protobuf:"varint,8,opt,name=softirq_ns,json=softirqNs" json:"softirq_ns,omitempty"`
}

func (x *SysStats_CpuTimes) Reset() {
	*x = SysStats_CpuTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[537]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStats_CpuTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStats_CpuTimes) ProtoMessage() {}

func (x *SysStats_CpuTimes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[537]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStats_CpuTimes.ProtoReflect.Descriptor instead.
func (*SysStats_CpuTimes) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{453, 2}
}

func (x *SysStats_CpuTimes) GetCpuId() uint32 {
	if x != nil && x.CpuId != nil {
		return *x.CpuId
	}
	return 0
}

func (x *SysStats_CpuTimes) GetUserNs() uint64 {
	if x != nil && x.UserNs != nil {
		return *x.UserNs
	}
	return 0
}

func (x *SysStats_CpuTimes) GetUserIceNs() uint64 {
	if x != nil && x.UserIceNs != nil {
		return *x.UserIceNs
	}
	return 0
}

func (x *SysStats_CpuTimes) GetSystemModeNs() uint64 {
	if x != nil && x.SystemModeNs != nil {
		return *x.SystemModeNs
	}
	return 0
}

func (x *SysStats_CpuTimes) GetIdleNs() uint64 {
	if x != nil && x.IdleNs != nil {
		return *x.IdleNs
	}
	return 0
}

func (x *SysStats_CpuTimes) GetIoWaitNs() uint64 {
	if x != nil && x.IoWaitNs != nil {
		return *x.IoWaitNs
	}
	return 0
}

func (x *SysStats_CpuTimes) GetIrqNs() uint64 {
	if x != nil && x.IrqNs != nil {
		return *x.IrqNs
	}
	return 0
}

func (x *SysStats_CpuTimes) GetSoftirqNs() uint64 {
	if x != nil && x.SoftirqNs != nil {
		return *x.SoftirqNs
	}
	return 0
}

type SysStats_InterruptCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Irq   *int32  `protobuf:"varint,1,opt,name=irq" json:"irq,omitempty"`
	Count *uint64 `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (x *SysStats_InterruptCount) Reset() {
	*x = SysStats_InterruptCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[538]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysStats_InterruptCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysStats_InterruptCount) ProtoMessage() {}

func (x *SysStats_InterruptCount) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[538]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysStats_InterruptCount.ProtoReflect.Descriptor instead.
func (*SysStats_InterruptCount) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{453, 3}
}

func (x *SysStats_InterruptCount) GetIrq() int32 {
	if x != nil && x.Irq != nil {
		return *x.Irq
	}
	return 0
}

func (x *SysStats_InterruptCount) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Information about a single CPU.
type CpuInfo_Cpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of "Processor" field from /proc/cpuinfo for this CPU.
	// Example: "AArch64 Processor rev 12 (aarch64)"
	Processor *string `protobuf:"bytes,1,opt,name=processor" json:"processor,omitempty"`
	// Frequencies from
	// /sys/devices/system/cpu/cpuX/cpufreq/scaling_available_frequencies
	// where X is the index of this CPU.
	Frequencies []uint32 `protobuf:"varint,2,rep,name=frequencies" json:"frequencies,omitempty"`
}

func (x *CpuInfo_Cpu) Reset() {
	*x = CpuInfo_Cpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[539]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuInfo_Cpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuInfo_Cpu) ProtoMessage() {}

func (x *CpuInfo_Cpu) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[539]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuInfo_Cpu.ProtoReflect.Descriptor instead.
func (*CpuInfo_Cpu) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{456, 0}
}

func (x *CpuInfo_Cpu) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *CpuInfo_Cpu) GetFrequencies() []uint32 {
	if x != nil {
		return x.Frequencies
	}
	return nil
}

type TestEvent_TestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str    []string                 `protobuf:"bytes,1,rep,name=str" json:"str,omitempty"`
	Nested []*TestEvent_TestPayload `protobuf:"bytes,2,rep,name=nested" json:"nested,omitempty"`
	// When 0 this is the bottom-most nested message.
	RemainingNestingDepth *uint32 `protobuf:"varint,3,opt,name=remaining_nesting_depth,json=remainingNestingDepth" json:"remaining_nesting_depth,omitempty"`
}

func (x *TestEvent_TestPayload) Reset() {
	*x = TestEvent_TestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[540]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestEvent_TestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestEvent_TestPayload) ProtoMessage() {}

func (x *TestEvent_TestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[540]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestEvent_TestPayload.ProtoReflect.Descriptor instead.
func (*TestEvent_TestPayload) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP(), []int{457, 0}
}

func (x *TestEvent_TestPayload) GetStr() []string {
	if x != nil {
		return x.Str
	}
	return nil
}

func (x *TestEvent_TestPayload) GetNested() []*TestEvent_TestPayload {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *TestEvent_TestPayload) GetRemainingNestingDepth() uint32 {
	if x != nil && x.RemainingNestingDepth != nil {
		return *x.RemainingNestingDepth
	}
	return 0
}

var file_protos_perfetto_trace_perfetto_trace_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*TrackEvent)(nil),
		ExtensionType: (*string)(nil),
		Field:         9900,
		Name:          "perfetto.protos.TestExtension.string_extension_for_testing",
		Tag:           "bytes,9900,opt,name=string_extension_for_testing",
		Filename:      "protos/perfetto/trace/perfetto_trace.proto",
	},
	{
		ExtendedType:  (*TrackEvent)(nil),
		ExtensionType: ([]int32)(nil),
		Field:         9901,
		Name:          "perfetto.protos.TestExtension.int_extension_for_testing",
		Tag:           "varint,9901,rep,name=int_extension_for_testing",
		Filename:      "protos/perfetto/trace/perfetto_trace.proto",
	},
	{
		ExtendedType:  (*TrackEvent)(nil),
		ExtensionType: (*string)(nil),
		Field:         9902,
		Name:          "perfetto.protos.TestExtension.omitted_extension_for_testing",
		Tag:           "bytes,9902,opt,name=omitted_extension_for_testing",
		Filename:      "protos/perfetto/trace/perfetto_trace.proto",
	},
	{
		ExtendedType:  (*TrackEvent)(nil),
		ExtensionType: (*TestExtensionChild)(nil),
		Field:         9903,
		Name:          "perfetto.protos.TestExtension.nested_message_extension_for_testing",
		Tag:           "bytes,9903,opt,name=nested_message_extension_for_testing",
		Filename:      "protos/perfetto/trace/perfetto_trace.proto",
	},
}

// Extension fields to TrackEvent.
var (
	// optional string string_extension_for_testing = 9900;
	E_TestExtension_StringExtensionForTesting = &file_protos_perfetto_trace_perfetto_trace_proto_extTypes[0]
	// repeated int32 int_extension_for_testing = 9901;
	E_TestExtension_IntExtensionForTesting = &file_protos_perfetto_trace_perfetto_trace_proto_extTypes[1]
	// optional string omitted_extension_for_testing = 9902;
	E_TestExtension_OmittedExtensionForTesting = &file_protos_perfetto_trace_perfetto_trace_proto_extTypes[2]
	// optional perfetto.protos.TestExtensionChild nested_message_extension_for_testing = 9903;
	E_TestExtension_NestedMessageExtensionForTesting = &file_protos_perfetto_trace_perfetto_trace_proto_extTypes[3]
)

var File_protos_perfetto_trace_perfetto_trace_proto protoreflect.FileDescriptor

var file_protos_perfetto_trace_perfetto_trace_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0xbd, 0x0d,
	0x0a, 0x14, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x4e, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4e, 0x73, 0x12, 0x44, 0x0a, 0x1e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x1a, 0x86, 0x04, 0x0a, 0x0e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x50, 0x65, 0x61, 0x6b, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5a, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x10, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x79,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x47,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0xaa, 0x01, 0x0a, 0x0f, 0x47,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x0f, 0x47, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10,
	0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x06, 0x22, 0xac,
	0x04, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x4c, 0x4f, 0x42, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x45, 0x47, 0x41, 0x42, 0x49, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x49, 0x47, 0x41, 0x42, 0x49, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x52, 0x41,
	0x42, 0x49, 0x54, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x54, 0x41, 0x42, 0x49, 0x54,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08,
	0x4b, 0x49, 0x4c, 0x4f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45,
	0x47, 0x41, 0x42, 0x59, 0x54, 0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x49, 0x47, 0x41,
	0x42, 0x59, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x52, 0x41, 0x42, 0x59,
	0x54, 0x45, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x54, 0x41, 0x42, 0x59, 0x54, 0x45,
	0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x0d, 0x12, 0x0d, 0x0a,
	0x09, 0x4b, 0x49, 0x4c, 0x4f, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x45, 0x47, 0x41, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x47,
	0x49, 0x47, 0x41, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45,
	0x52, 0x41, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x45, 0x54,
	0x41, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x4e, 0x4f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c,
	0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45,
	0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x45, 0x52, 0x54, 0x45, 0x58, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x58, 0x45,
	0x4c, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x49, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x10,
	0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x26,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x27, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x57, 0x41, 0x54, 0x54, 0x10, 0x1c, 0x12, 0x08, 0x0a,
	0x04, 0x57, 0x41, 0x54, 0x54, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4c, 0x4f, 0x57,
	0x41, 0x54, 0x54, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x4f, 0x55, 0x4c, 0x45, 0x10, 0x1f,
	0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x4c, 0x54, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4d,
	0x50, 0x45, 0x52, 0x45, 0x10, 0x21, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x53, 0x49, 0x55,
	0x53, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x48, 0x52, 0x45, 0x4e, 0x48, 0x45, 0x49,
	0x54, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x4c, 0x56, 0x49, 0x4e, 0x10, 0x24, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x25, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x28, 0x22, 0x5e, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x6e, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x93, 0x03,
	0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x69,
	0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x77, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x12, 0x5f, 0x0a, 0x16, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x02, 0x28, 0x01, 0x52, 0x14, 0x67, 0x70,
	0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x42, 0x02, 0x28, 0x01, 0x52, 0x14, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x22, 0xc8, 0x03, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e,
	0x75, 0x6d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x1a, 0x40, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x1a, 0x79, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x0c, 0x64, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1,
	0x01, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f,
	0x67, 0x49, 0x64, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x22, 0x33, 0x0a, 0x18, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x4d, 0x73, 0x22, 0x44, 0x0a, 0x12, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xbc, 0x02,
	0x0a, 0x0c, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x41, 0x0a, 0x0e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x41, 0x43, 0x4b,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xff, 0x02, 0x0a,
	0x0c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x70, 0x70, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x6b, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x55,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69,
	0x7a, 0x65, 0x5f, 0x6b, 0x73, 0x79, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x69, 0x7a, 0x65, 0x4b, 0x73, 0x79, 0x6d, 0x73, 0x1a, 0x2e,
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb8,
	0x01, 0x0a, 0x10, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x5f, 0x67, 0x70, 0x75,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69,
	0x78, 0x47, 0x70, 0x75, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x56, 0x75,
	0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x39, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x95, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x6f, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x63, 0x61,
	0x6e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x13,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x6f, 0x64,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x57, 0x0a, 0x16, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x22, 0x27,
	0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x12, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x73, 0x12, 0x5e, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43,
	0x49, 0x54, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x56, 0x47, 0x10, 0x04, 0x22, 0x83, 0x04, 0x0a, 0x12,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x42, 0x0a, 0x06, 0x71, 0x75, 0x69, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x75, 0x69, 0x72, 0x6b, 0x73, 0x52, 0x06,
	0x71, 0x75, 0x69, 0x72, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x63, 0x61,
	0x6e, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x4d,
	0x73, 0x12, 0x34, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x54, 0x74, 0x6c, 0x4d, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x1f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x55, 0x0a, 0x06, 0x51, 0x75,
	0x69, 0x72, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x49, 0x52, 0x4b, 0x53, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x14,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x44, 0x55, 0x4d, 0x50, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x02, 0x22, 0xa8, 0x08, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x65, 0x61, 0x70,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x68, 0x65, 0x61, 0x70, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x04, 0x52, 0x15,
	0x68, 0x65, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65, 0x61,
	0x70, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x48, 0x65, 0x61,
	0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x62, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x12, 0x35, 0x0a, 0x17, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x48, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x4b, 0x62, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x66, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x64,
	0x43, 0x70, 0x75, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x6b, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x6f, 0x75, 0x73, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f,
	0x75, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x68,
	0x6d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x61, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x75, 0x6d, 0x70, 0x41,
	0x74, 0x4d, 0x61, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6b,
	0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x66, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x64, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x44, 0x75,
	0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x75, 0x6d, 0x70,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x64, 0x75, 0x6d, 0x70, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x75, 0x6d, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0x9a, 0x03, 0x0a,
	0x0f, 0x4a, 0x61, 0x76, 0x61, 0x48, 0x70, 0x72, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6d, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x6b, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61,
	0x76, 0x61, 0x48, 0x70, 0x72, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x44, 0x75,
	0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6b, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x73, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x75, 0x6d, 0x70, 0x53, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x1a, 0x64, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75,
	0x73, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x75, 0x6d, 0x70, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x50, 0x68, 0x61, 0x73, 0x65, 0x4d, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x75, 0x6d, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x22, 0xb3, 0x04, 0x0a, 0x0f, 0x50, 0x65,
	0x72, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x6c, 0x6c, 0x43, 0x70, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6d,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6d, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12,
	0x3e, 0x0a, 0x1c, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x22,
	0xf3, 0x03, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d,
	0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x4b,
	0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x69, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x69,
	0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x76,
	0x6d, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x56, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0e, 0x76, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x52, 0x51, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x49, 0x52, 0x51, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x04, 0x22, 0x9e, 0x06, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x4f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0c,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x0b, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xfb, 0x03, 0x0a, 0x0b, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x22, 0xc5, 0x0d, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x47, 0x75, 0x61, 0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x66,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x02, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x4d, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x79, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52,
	0x0e, 0x73, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4f, 0x0a, 0x10, 0x68, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x66, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52,
	0x0f, 0x68, 0x65, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x66, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x50, 0x0a, 0x11, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x68, 0x70, 0x72, 0x6f, 0x66, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4a, 0x61,
	0x76, 0x61, 0x48, 0x70, 0x72, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28,
	0x01, 0x52, 0x0f, 0x6a, 0x61, 0x76, 0x61, 0x48, 0x70, 0x72, 0x6f, 0x66, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x59, 0x0a, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a,
	0x12, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01,
	0x52, 0x10, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x53, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x10, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x14, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x12,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x02, 0x28, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x14, 0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x12, 0x76, 0x75, 0x6c,
	0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x53, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x02,
	0x28, 0x01, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x6c, 0x0a, 0x1b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f,
	0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x02, 0x28, 0x01, 0x52, 0x18, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3d, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xe9,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x0b,
	0x08, 0xff, 0xff, 0xff, 0x7f, 0x10, 0x80, 0x80, 0x80, 0x80, 0x01, 0x22, 0x9a, 0x1d, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x07, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x4a, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x14,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x49, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x72,
	0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66,
	0x6c, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x75, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x75, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x18, 0x69, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x69,
	0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x14,
	0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x5f, 0x6d, 0x73, 0x62, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x4d, 0x73, 0x62, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x73, 0x62, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x4c, 0x73, 0x62,
	0x1a, 0xc7, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x12, 0x55, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x3b, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0xb6, 0x01, 0x0a, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0xea, 0x02, 0x0a, 0x11, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4d, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73,
	0x1a, 0x77, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x68, 0x6d, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x68,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x1a, 0xe4, 0x01, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x4c, 0x0a, 0x12, 0x47, 0x75, 0x61, 0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xa0,
	0x03, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x59, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x1a, 0x71, 0x0a, 0x07, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x74, 0x6f, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x22, 0x43, 0x0a, 0x0b,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x1a, 0x40, 0x0a, 0x16, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x4d, 0x73, 0x1a, 0xbc, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x62, 0x6f, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x72, 0x6f, 0x70, 0x62,
	0x6f, 0x78, 0x22, 0x55, 0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x4f, 0x43, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x43, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x4b, 0x44,
	0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22, 0x51, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x0f,
	0x10, 0x10, 0x4a, 0x04, 0x08, 0x1a, 0x10, 0x1b, 0x22, 0xbc, 0x0a, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x1a, 0xd4, 0x06, 0x0a, 0x0b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x2d, 0x0a, 0x12,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x57, 0x72, 0x61, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x61, 0x64, 0x61,
	0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x61, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x61, 0x62, 0x69, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x74, 0x72, 0x61, 0x63, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x22, 0xc7, 0x05, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0xc9, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x4c, 0x6f, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x04, 0x70, 0x72, 0x69,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a,
	0x89, 0x01, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x64, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x22, 0xf3, 0x0b, 0x0a, 0x12, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x1a, 0x93, 0x04, 0x0a, 0x0c, 0x53,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x67,
	0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x6a, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x61, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x64, 0x4e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x4e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x1a, 0xb2, 0x03, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x6a, 0x61,
	0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4a, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6a, 0x61, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x4e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x45, 0x6e, 0x64, 0x4e, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x08, 0x4a, 0x61, 0x6e, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x41, 0x4e, 0x4b,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x41, 0x4e, 0x4b, 0x5f,
	0x53, 0x46, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4a, 0x41, 0x4e, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4a, 0x41,
	0x4e, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x48, 0x41, 0x4c, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x4a, 0x41, 0x4e, 0x4b, 0x5f, 0x53, 0x46, 0x5f, 0x44, 0x45, 0x41, 0x44,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x4a, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4a,
	0x41, 0x4e, 0x4b, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x55, 0x46, 0x46,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x22, 0x75, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x42, 0x07,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x10, 0x47, 0x70, 0x75, 0x4d, 0x65,
	0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x67,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x70, 0x75,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xb2, 0x04, 0x0a, 0x12, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x52, 0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x1a, 0xd6, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x22, 0xee, 0x01, 0x0a,
	0x0f, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x46,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x05, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x57, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x54,
	0x41, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x10,
	0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x0d, 0x22, 0x5a, 0x0a,
	0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x1a, 0xac, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x67, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xf6, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x17,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x67, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x14, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x6a, 0x0a, 0x1b, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x19, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb9,
	0x08, 0x0a, 0x19, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x0e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xe1, 0x06, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a,
	0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x0d,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x11, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x32, 0x0a,
	0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x69, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0xe8, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x70,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x41, 0x56, 0x49, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x09, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0xe8, 0x07,
	0x22, 0x87, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x4d, 0x4f, 0x4e,
	0x49, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x5f, 0x57, 0x48,
	0x45, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x44, 0x55, 0x4d, 0x50, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47,
	0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x22, 0xb1, 0x03, 0x0a, 0x11, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x43, 0x0a,
	0x0b, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x0a, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x43,
	0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x01, 0x22, 0x44,
	0x0a, 0x16, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xa0, 0x07, 0x0a, 0x10, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x19,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xfd, 0x02, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x73, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa0, 0x01,
	0x0a, 0x15, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4a, 0x73,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2d, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x22, 0xf0, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x52, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x1a, 0xc3, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x42,
	0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x41,
	0x4c, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x4c, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x41, 0x52, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d,
	0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x41, 0x52, 0x53, 0x45, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x52,
	0x41, 0x57, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x4f, 0x54, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x43, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x3f, 0x22, 0x04, 0x08, 0x07,
	0x10, 0x07, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x22, 0x4d, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x65,
	0x61, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x65, 0x61, 0x6b, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xb4, 0x04, 0x0a, 0x0f, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x43, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x65, 0x6e, 0x75, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x65, 0x63, 0x6c, 0x12, 0x55,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22,
	0xce, 0x05, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb6, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36,
	0x34, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33, 0x32, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x10, 0x10, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x11, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x12, 0x22,
	0x43, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x42, 0x45,
	0x4c, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x22, 0x63, 0x0a, 0x14, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x75, 0x6d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x22, 0x4c, 0x0a, 0x18, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x22, 0x21, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2a, 0x09, 0x08, 0xe8, 0x07, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x4a, 0x06, 0x08, 0xe7,
	0x07, 0x10, 0xe8, 0x07, 0x22, 0x5e, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0xac, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x22, 0xd0,
	0x01, 0x0a, 0x1c, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f,
	0x50, 0x72, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x41, 0x0a, 0x24, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x22, 0x29, 0x0a, 0x15, 0x42, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x2b, 0x0a, 0x17, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x2b, 0x0a, 0x17, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22,
	0x81, 0x01, 0x0a, 0x24, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x77, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x69, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77,
	0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x69, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x77, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x6d, 0x6d, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x77, 0x62, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69,
	0x6f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d,
	0x6d, 0x22, 0xad, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x52, 0x65,
	0x6d, 0x61, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62,
	0x73, 0x22, 0x5b, 0x0a, 0x1b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x74, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x72, 0x71, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x77, 0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x2a, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x50, 0x6c, 0x75, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x6d, 0x6d, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77,
	0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x77, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x77, 0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xc5, 0x01, 0x0a,
	0x17, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x6c, 0x64, 0x44, 0x65, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x6c,
	0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x72, 0x5f, 0x62, 0x69,
	0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x72, 0x42, 0x69, 0x6f, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x77, 0x62, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x77, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x72, 0x71, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6e, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x77,
	0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x6d, 0x6d, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x77, 0x62, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x77, 0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x5b, 0x0a,
	0x1b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x41, 0x0a, 0x16, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x72, 0x5f, 0x72, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x72, 0x52, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x8b, 0x01,
	0x0a, 0x1b, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x5b, 0x0a, 0x18, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x16,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x64, 0x73, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x5f, 0x0a, 0x1c, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a,
	0x1a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x6f, 0x6f, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2a, 0x0a, 0x14,
	0x43, 0x6c, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6c, 0x6b, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x15, 0x43, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x1c, 0x4d, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x7a, 0x6f, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x66, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x50, 0x66, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x5f,
	0x70, 0x66, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x50,
	0x66, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x79, 0x6e,
	0x63, 0x22, 0xc6, 0x01, 0x0a, 0x26, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x4d,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x69,
	0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xc1, 0x01, 0x0a,
	0x21, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6e, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x66, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x66, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x66, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x66, 0x72, 0x65, 0x65, 0x50, 0x66, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x7a, 0x6f,
	0x6e, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x6d, 0x0a, 0x1f, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0x99, 0x01, 0x0a, 0x27, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x66, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64,
	0x5f, 0x70, 0x66, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x50,
	0x66, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6e, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0x9c, 0x01, 0x0a,
	0x2a, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x66, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x66, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x50, 0x66,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6e, 0x72, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x22, 0x39, 0x0a, 0x25, 0x4d,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x64, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x24, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x57,
	0x61, 0x6b, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x78, 0x22, 0x63, 0x0a, 0x23, 0x4d,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x72, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x72, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x22, 0x6d, 0x0a, 0x1f, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22,
	0x6f, 0x0a, 0x28, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x79, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x66, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x66, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x75, 0x0a, 0x26, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x78, 0x22, 0x62, 0x0a, 0x14, 0x43, 0x70, 0x75, 0x68, 0x70,
	0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70,
	0x75, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x69, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x43,
	0x70, 0x75, 0x68, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x75, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x15, 0x43, 0x70, 0x75, 0x68, 0x70,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x66, 0x75, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x64, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x67,
	0x0a, 0x17, 0x43, 0x70, 0x75, 0x68, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x44, 0x70, 0x75, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7b, 0x0a, 0x1b, 0x45, 0x78,
	0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x7b, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x34, 0x44,
	0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f,
	0x70, 0x69, 0x65, 0x64, 0x22, 0x76, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x22, 0x53, 0x0a, 0x1b,
	0x45, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x22, 0x84, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x44,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x1d, 0x45, 0x78, 0x74,
	0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x67, 0x6f,
	0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x70, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x68, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x64, 0x0a, 0x23, 0x45, 0x78, 0x74, 0x34, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6c, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x64, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x64, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xd2, 0x02, 0x0a, 0x23, 0x45,
	0x78, 0x74, 0x34, 0x44, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xa8, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x72, 0x54, 0x6f, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x62, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x6f, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x6f, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x21, 0x45,
	0x78, 0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x22, 0x76, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x4f,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x72, 0x77, 0x22, 0x87, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x74,
	0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x72, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x72, 0x77,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x65, 0x74, 0x22, 0x58, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6c, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x62, 0x6c, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x24,
	0x45, 0x78, 0x74, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x22, 0x52, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x34,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x72, 0x6f, 0x70, 0x22, 0x94, 0x01, 0x0a,
	0x1c, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x2c, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x2b,
	0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c,
	0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x95, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c,
	0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5c, 0x0a, 0x22, 0x45, 0x78, 0x74,
	0x34, 0x45, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x22, 0xaf, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x74, 0x34,
	0x45, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78,
	0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x69, 0x0a, 0x1d, 0x45, 0x78, 0x74,
	0x34, 0x45, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x62,
	0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73, 0x68, 0x72, 0x75, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x72, 0x53, 0x68, 0x72, 0x75, 0x6e, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x72, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x72, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x64, 0x22, 0x6b, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x72, 0x54,
	0x6f, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72, 0x69,
	0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x72,
	0x54, 0x6f, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x43, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x72, 0x5f, 0x73,
	0x68, 0x72, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x72, 0x53,
	0x68, 0x72, 0x75, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x43,
	0x6e, 0x74, 0x22, 0x55, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x34, 0x45, 0x76, 0x69, 0x63, 0x74, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xc0, 0x01, 0x0a, 0x2b, 0x45, 0x78,
	0x74, 0x34, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x5f, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x4c, 0x62, 0x6c, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x4c, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x6c,
	0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x75, 0x4c, 0x62, 0x6c, 0x6b,
	0x12, 0x13, 0x0a, 0x05, 0x75, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x75, 0x4c, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x5f, 0x70, 0x62, 0x6c, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x50, 0x62, 0x6c, 0x6b, 0x22, 0x86, 0x02, 0x0a,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54,
	0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x5f, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x4c, 0x62, 0x6c, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x4c, 0x65, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x75, 0x5f, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x75, 0x4c, 0x62, 0x6c, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x75, 0x5f, 0x6c, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x4c, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x75,
	0x5f, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x75, 0x50, 0x62,
	0x6c, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x5f, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x4c, 0x62, 0x6c, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x4c, 0x65, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x5f, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x50, 0x62, 0x6c, 0x6b, 0x22, 0xd4, 0x01, 0x0a, 0x28, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x70, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x62, 0x6c, 0x6b, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x62, 0x6c, 0x6b, 0x22, 0x65, 0x0a, 0x19,
	0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x22, 0x6a, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x22,
	0x82, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74,
	0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x7e, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78,
	0x74, 0x50, 0x75, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62,
	0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x45,
	0x78, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0xbe, 0x01, 0x0a, 0x21, 0x45,
	0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x68, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x65, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x17, 0x45,
	0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52, 0x6d, 0x49, 0x64, 0x78, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62,
	0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x22, 0xb7,
	0x01, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52, 0x6d, 0x4c, 0x65, 0x61, 0x66,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x65, 0x65, 0x5f, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x65, 0x65, 0x4c, 0x62, 0x6c, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x65, 0x5f, 0x70,
	0x62, 0x6c, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x65, 0x50, 0x62, 0x6c,
	0x6b, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x65, 0x65, 0x4c, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34,
	0x45, 0x78, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x46,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x7e, 0x0a, 0x1c,
	0x45, 0x78, 0x74, 0x34, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69,
	0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0xb7, 0x01, 0x0a,
	0x20, 0x45, 0x78, 0x74, 0x34, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x42, 0x6c, 0x6b, 0x22, 0x86, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x34, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x95, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x34, 0x46, 0x72, 0x65, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x34,
	0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x29, 0x45, 0x78, 0x74,
	0x34, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62,
	0x6c, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x26, 0x45, 0x78,
	0x74, 0x34, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x82,
	0x01, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x64, 0x4d,
	0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x62, 0x6c, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x62, 0x6c, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x6a, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x90, 0x01,
	0x0a, 0x1b, 0x45, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x73, 0x76, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x73, 0x76,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x22, 0x5f, 0x0a, 0x23, 0x45, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x93, 0x01, 0x0a, 0x27, 0x45, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x83, 0x01, 0x0a, 0x21, 0x45, 0x78, 0x74, 0x34,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x22, 0x3e, 0x0a,
	0x18, 0x45, 0x78, 0x74, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x22, 0x48, 0x0a,
	0x1e, 0x45, 0x78, 0x74, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x53, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x4d,
	0x61, 0x72, 0x6b, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x70, 0x22, 0x45, 0x0a, 0x1b,
	0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x4a, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x42, 0x75, 0x64,
	0x64, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x52, 0x0a, 0x26, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x4e, 0x65,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f, 0x70, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x50, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f, 0x6c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x4c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x61, 0x4c, 0x65, 0x6e, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x74,
	0x34, 0x4d, 0x62, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x5f, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x70, 0x61, 0x50, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f,
	0x6c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61,
	0x4c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x4c, 0x65, 0x6e, 0x22, 0x67, 0x0a,
	0x1f, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x61, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x5f, 0x70, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x50, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x70, 0x61, 0x4c, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc3, 0x04, 0x0a, 0x1b, 0x45, 0x78,
	0x74, 0x34, 0x4d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x72, 0x69, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x61,
	0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x6f, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f,
	0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6f,
	0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x75, 0x64, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x75, 0x64, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x63, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x63, 0x72, 0x22,
	0xa8, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x45,
	0x78, 0x74, 0x34, 0x4d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c,
	0x65, 0x6e, 0x22, 0xcc, 0x02, 0x0a, 0x1e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x69, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6f, 0x72, 0x69, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x69, 0x67, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72,
	0x69, 0x67, 0x4c, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4c, 0x65,
	0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x23, 0x45, 0x78, 0x74, 0x34, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6f, 0x72, 0x69, 0x67, 0x49, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x7c, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x34, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4c,
	0x0a, 0x22, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x53, 0x0a, 0x17,
	0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x56, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x45, 0x78,
	0x74, 0x34, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x65, 0x5f, 0x70, 0x62, 0x6c, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x65,
	0x50, 0x62, 0x6c, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x65, 0x5f, 0x6c, 0x62, 0x6c, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x65, 0x4c, 0x62, 0x6c, 0x6b, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65,
	0x65, 0x4c, 0x65, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x65, 0x66, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x55, 0x0a, 0x1b, 0x45,
	0x78, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x22, 0x3d, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x73,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x61, 0x69,
	0x74, 0x22, 0x94, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x34, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c,
	0x6c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x76, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x74,
	0x34, 0x54, 0x72, 0x69, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x76, 0x4d, 0x61,
	0x6a, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x76, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x5a,
	0x0a, 0x1c, 0x45, 0x78, 0x74, 0x34, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x59, 0x0a, 0x1b, 0x45, 0x78,
	0x74, 0x34, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x6c, 0x0a, 0x1a, 0x45, 0x78, 0x74, 0x34, 0x55, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x51, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x34, 0x55, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x79, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x79, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e,
	0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x22, 0x54, 0x0a, 0x18,
	0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xcc, 0x02, 0x0a, 0x19, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x72, 0x54, 0x6f, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x6b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x4b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x69,
	0x63, 0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x73, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x7c, 0x0a, 0x18, 0x45,
	0x78, 0x74, 0x34, 0x5a, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x1a, 0x46, 0x32,
	0x66, 0x73, 0x44, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x6f, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x79, 0x6e, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0xc1, 0x01, 0x0a, 0x19, 0x46, 0x32, 0x66, 0x73, 0x45, 0x76, 0x69, 0x63, 0x74, 0x49, 0x6e,
	0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x64,
	0x76, 0x69, 0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x18, 0x46, 0x32, 0x66, 0x73, 0x46, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x46, 0x32, 0x66, 0x73, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x62, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x68, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x65, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x18, 0x46, 0x32, 0x66, 0x73, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x63, 0x74, 0x69, 0x6d, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x63, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x67, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x66, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x66, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x46, 0x32, 0x66, 0x73,
	0x49, 0x67, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x17, 0x46, 0x32, 0x66, 0x73, 0x49, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x4f, 0x0a, 0x17, 0x46, 0x32, 0x66, 0x73, 0x4e, 0x65,
	0x77, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x46, 0x32, 0x66, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6c, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x62, 0x6c, 0x6b, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x1e, 0x46,
	0x32, 0x66, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x66, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x66, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x46, 0x32, 0x66, 0x73, 0x53, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x1e, 0x46, 0x32, 0x66, 0x73,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xc4,
	0x01, 0x0a, 0x1c, 0x46, 0x32, 0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61,
	0x64, 0x76, 0x69, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1b, 0x46, 0x32, 0x66, 0x73, 0x53, 0x79,
	0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x65,
	0x64, 0x5f, 0x63, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0x53, 0x0a, 0x15, 0x46, 0x32, 0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x73, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x69, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x77, 0x61, 0x69, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x17, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x22, 0x46, 0x32, 0x66, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x22, 0x59, 0x0a, 0x21, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x26, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6f, 0x66, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x72, 0x65, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x27, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x22, 0x5e, 0x0a, 0x26, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45,
	0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0x6e, 0x0a, 0x1b, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6b,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x74, 0x0a, 0x21, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x22, 0x58, 0x0a, 0x20, 0x46, 0x32,
	0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69,
	0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x65, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x23, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x46,
	0x32, 0x66, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x19, 0x46, 0x32, 0x66, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0x94, 0x01, 0x0a, 0x1c, 0x46, 0x32, 0x66, 0x73, 0x56, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x6b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x64, 0x69, 0x72, 0x74, 0x79, 0x22, 0x79, 0x0a, 0x19, 0x46, 0x32, 0x66, 0x73, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0x61, 0x0a, 0x1e, 0x46, 0x32, 0x66, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x79, 0x0a, 0x17, 0x46, 0x32, 0x66, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x64,
	0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x69, 0x6e, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x70, 0x69,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64,
	0x22, 0x68, 0x0a, 0x19, 0x46, 0x61, 0x73, 0x74, 0x72, 0x70, 0x63, 0x44, 0x6d, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x7a, 0x0a, 0x14, 0x46, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x7d, 0x0a, 0x17, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x1c, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x7e, 0x0a, 0x18, 0x46, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x22, 0x4d,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x70, 0x66, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x5f, 0x69, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x69, 0x49, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13,
	0x0a, 0x05, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x44, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x27, 0x4d, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x70, 0x66, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x5f, 0x69, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x69, 0x49, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x13, 0x0a, 0x05, 0x73, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x44, 0x65, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x75, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x75, 0x66, 0x22,
	0x70, 0x0a, 0x1e, 0x47, 0x32, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72,
	0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xfa, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x83, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55,
	0x0a, 0x16, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x70, 0x75, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x49, 0x32, 0x63, 0x52, 0x65, 0x61,
	0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x4e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x99,
	0x01, 0x0a, 0x13, 0x49, 0x32, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x4e, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x4e, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x66, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x75, 0x66, 0x22, 0x60, 0x0a, 0x14, 0x49, 0x32,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6e, 0x72, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x99, 0x01, 0x0a,
	0x13, 0x49, 0x32, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x4e, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x4e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x66, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x75, 0x66, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x53, 0x6d, 0x62,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x22, 0xa8, 0x01, 0x0a, 0x15, 0x53, 0x6d, 0x62, 0x75, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xc8, 0x01, 0x0a, 0x16,
	0x53, 0x6d, 0x62, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x4e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x53, 0x6d, 0x62, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x4e, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x22, 0x6c, 0x0a, 0x12, 0x49, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x2d, 0x0a, 0x13, 0x49, 0x70, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2c,
	0x0a, 0x12, 0x49, 0x70, 0x69, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x13,
	0x49, 0x70, 0x69, 0x52, 0x61, 0x69, 0x73, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x70,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x17,
	0x53, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x65, 0x63, 0x22, 0x2a, 0x0a, 0x16, 0x53, 0x6f, 0x66,
	0x74, 0x69, 0x72, 0x71, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x76, 0x65, 0x63, 0x22, 0x2b, 0x0a, 0x17, 0x53, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76,
	0x65, 0x63, 0x22, 0x5c, 0x0a, 0x1a, 0x49, 0x72, 0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69,
	0x72, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x22, 0x3f, 0x0a, 0x19, 0x49, 0x72, 0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78,
	0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x72, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65,
	0x74, 0x22, 0x52, 0x0a, 0x1d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49,
	0x6f, 0x6d, 0x6d, 0x75, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x54, 0x0a, 0x1f, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x50, 0x0a, 0x1b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79,
	0x73, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x51, 0x0a, 0x1c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x53, 0x79, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x1d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x22, 0x44, 0x6d, 0x61,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x18, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x4d, 0x61,
	0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c,
	0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x70, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x76, 0x61, 0x22, 0x7f, 0x0a, 0x22, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x63, 0x50, 0x74,
	0x62, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x70, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x61, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x65,
	0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x76, 0x61, 0x22, 0x81, 0x01, 0x0a, 0x24, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x63,
	0x50, 0x74, 0x62, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x70, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x61,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x65, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x76, 0x61, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x49, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61,
	0x73, 0x6b, 0x22, 0xaf, 0x01, 0x0a, 0x1d, 0x49, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x21, 0x49, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x9a, 0x01, 0x0a, 0x1e, 0x49,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6c, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x32, 0x0a, 0x1a, 0x49, 0x6f, 0x6e, 0x43, 0x70,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x1f, 0x49,
	0x6f, 0x6e, 0x43, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x7e, 0x0a, 0x21, 0x49, 0x6f, 0x6e,
	0x43, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x2d, 0x0a, 0x19, 0x49, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x77, 0x0a, 0x23, 0x49, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x79, 0x0a, 0x25, 0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d,
	0x61, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x69, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7f, 0x0a, 0x22,
	0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x81, 0x01,
	0x0a, 0x24, 0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x22, 0x6c, 0x0a, 0x24, 0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d,
	0x61, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x6e, 0x0a, 0x26, 0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x41, 0x0a, 0x10, 0x4b, 0x66, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70,
	0x74, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x4b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x70, 0x74, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x4b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x74, 0x72, 0x22, 0xa5, 0x01, 0x0a,
	0x19, 0x4b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x70, 0x74, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x4b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x70, 0x74, 0x72, 0x22, 0x49, 0x0a, 0x18, 0x4b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x74, 0x72, 0x22,
	0x30, 0x0a, 0x1a, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x45,
	0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x32, 0x0a, 0x1c, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x4d, 0x6d, 0x50, 0x61, 0x67,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x66, 0x6e, 0x22, 0x98, 0x02, 0x0a,
	0x1d, 0x4d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x45, 0x78, 0x74, 0x66,
	0x72, 0x61, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14,
	0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x70, 0x66, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x4d, 0x6d, 0x50, 0x61,
	0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x66, 0x6e, 0x22, 0x53, 0x0a, 0x15, 0x4d, 0x6d,
	0x50, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x66, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x66, 0x6e, 0x22,
	0x58, 0x0a, 0x1c, 0x4d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x66, 0x6e, 0x22, 0x7a, 0x0a, 0x1a, 0x4d, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x50, 0x63, 0x70, 0x75, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69,
	0x67, 0x72, 0x61, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x66, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x70, 0x66, 0x6e, 0x22, 0x69, 0x0a, 0x12, 0x52, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x75, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x75, 0x72, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x6d,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6d, 0x49, 0x64,
	0x22, 0x72, 0x0a, 0x18, 0x49, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x68, 0x72, 0x69, 0x6e,
	0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x49, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x47,
	0x72, 0x6f, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x49, 0x6f, 0x6e, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x43, 0x0a, 0x1b, 0x49, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22,
	0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x77, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6c,
	0x6c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x67, 0x65,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x67,
	0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64,
	0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6b,
	0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x14,
	0x4d, 0x64, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x79, 0x0a, 0x17, 0x4d, 0x64,
	0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x4f, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x78, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x78, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x72, 0x64, 0x4c, 0x69, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x62,
	0x69, 0x66, 0x5f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x73, 0x56,
	0x62, 0x69, 0x66, 0x52, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x18, 0x4d, 0x64, 0x70, 0x53, 0x73, 0x70,
	0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x69, 0x78, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6d, 0x67,
	0x5f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x57, 0x12, 0x13,
	0x0a, 0x05, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69,
	0x6d, 0x67, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x5f, 0x78, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x5f,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x59, 0x12, 0x13, 0x0a,
	0x05, 0x73, 0x72, 0x63, 0x5f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72,
	0x63, 0x57, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74, 0x58, 0x12, 0x13, 0x0a, 0x05,
	0x64, 0x73, 0x74, 0x5f, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74,
	0x59, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x64, 0x73, 0x74, 0x57, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74, 0x48, 0x22, 0x6f, 0x0a, 0x1b, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x22, 0x85, 0x01, 0x0a,
	0x1d, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6e, 0x67, 0x44,
	0x6f, 0x6e, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x74, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x4e,
	0x75, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6f, 0x66,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x6f, 0x66,
	0x66, 0x43, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x17, 0x4d, 0x64, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x42, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x65, 0x77, 0x41, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x69,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x49, 0x62, 0x12, 0x15,
	0x0a, 0x06, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6e, 0x65, 0x77, 0x57, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x5f, 0x61, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x41, 0x62, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x6c,
	0x64, 0x49, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x5f, 0x77, 0x62, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x6c, 0x64, 0x57, 0x62, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x77, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x77, 0x22, 0x96,
	0x01, 0x0a, 0x1e, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x50, 0x61, 0x6e,
	0x69, 0x63, 0x4c, 0x75, 0x74, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6d, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x66, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x6e, 0x69, 0x63, 0x5f, 0x6c, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x61, 0x6e, 0x69, 0x63, 0x4c, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x75,
	0x73, 0x74, 0x5f, 0x6c, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x6f,
	0x62, 0x75, 0x73, 0x74, 0x4c, 0x75, 0x74, 0x22, 0xf0, 0x02, 0x0a, 0x15, 0x4d, 0x64, 0x70, 0x53,
	0x73, 0x70, 0x70, 0x53, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x69, 0x78, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6d, 0x67, 0x5f,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x57, 0x12, 0x13, 0x0a,
	0x05, 0x69, 0x6d, 0x67, 0x5f, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6d,
	0x67, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x5f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x5f, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x63, 0x59, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x72, 0x63, 0x5f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x72, 0x63,
	0x57, 0x12, 0x13, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x5f, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x72, 0x63, 0x48, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x78, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x64,
	0x73, 0x74, 0x5f, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74, 0x59,
	0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x64, 0x73, 0x74, 0x57, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x5f, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x74, 0x48, 0x22, 0x52, 0x0a, 0x1c, 0x4d, 0x64,
	0x70, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x64, 0x70, 0x74, 0x72, 0x44, 0x6f, 0x6e, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6e, 0x74, 0x22, 0x61,
	0x0a, 0x15, 0x4d, 0x64, 0x70, 0x4d, 0x69, 0x73, 0x72, 0x43, 0x72, 0x63, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x72,
	0x63, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74,
	0x51, 0x6f, 0x73, 0x4c, 0x75, 0x74, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6d, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x66, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x6f, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x66, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x22, 0x67, 0x0a, 0x1a, 0x4d, 0x64, 0x70, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x35, 0x0a, 0x1a, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x42, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x63, 0x74, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0x38, 0x0a, 0x19, 0x4d, 0x64, 0x70, 0x4d,
	0x69, 0x78, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65,
	0x74, 0x57, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x77, 0x6d, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x77, 0x6d, 0x30, 0x12, 0x10,
	0x0a, 0x03, 0x77, 0x6d, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x77, 0x6d, 0x31,
	0x12, 0x10, 0x0a, 0x03, 0x77, 0x6d, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x77,
	0x6d, 0x32, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x62, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x62, 0x43, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x62, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x62, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x5d, 0x0a, 0x1f, 0x4d, 0x64, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x43, 0x6e,
	0x74, 0x22, 0x59, 0x0a, 0x1d, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x57, 0x61, 0x69, 0x74, 0x50,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6e, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x74, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x74, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6b,
	0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6e, 0x74, 0x22, 0xa5, 0x02, 0x0a,
	0x1d, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x50, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43,
	0x61, 0x6c, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6e,
	0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x62, 0x75,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x75, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x6f, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x79, 0x42, 0x75, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x79, 0x5f, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x79, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x53, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x62, 0x63, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x62, 0x63, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x1b, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x62, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61,
	0x62, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x62, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x62, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x22, 0x37, 0x0a, 0x1f, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x77, 0x41, 0x6f,
	0x41, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x18, 0x4d, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x68, 0x0a, 0x1c, 0x4f, 0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64,
	0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15,
	0x4d, 0x61, 0x72, 0x6b, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x17, 0x43, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x22,
	0x6c, 0x0a, 0x1d, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x12, 0x43, 0x70, 0x75, 0x49, 0x64, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64,
	0x22, 0x59, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x17, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x70,
	0x75, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x18, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22,
	0x46, 0x0a, 0x17, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x36,
	0x0a, 0x12, 0x53, 0x79, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x31, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x23, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x22, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x35, 0x0a, 0x1f, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x22, 0x4e, 0x0a, 0x26, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x50, 0x72, 0x69,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x72, 0x69, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64, 0x57,
	0x61, 0x6b, 0x65, 0x75, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x70, 0x75, 0x22, 0x62, 0x0a, 0x1d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x6d, 0x0a, 0x1a, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x70, 0x75, 0x48, 0x6f, 0x74, 0x70, 0x6c, 0x75, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x70, 0x75, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x57, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x70, 0x75, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x53, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61,
	0x6b, 0x65, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x70, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x70, 0x75, 0x22, 0x64, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x50, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x1b, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x50, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x22, 0x43, 0x0a,
	0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x6e,
	0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x22, 0x57, 0x0a, 0x1b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x57, 0x61, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x22, 0x53, 0x0a, 0x17, 0x53,
	0x63, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x78, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x78, 0x30,
	0x12, 0x0e, 0x0a, 0x02, 0x78, 0x35, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x78, 0x35,
	0x22, 0x17, 0x0a, 0x15, 0x53, 0x63, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x1e, 0x53, 0x64,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x22, 0x5b, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x67,
	0x22, 0x95, 0x01, 0x0a, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x69, 0x67, 0x22, 0x45, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x43, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x22, 0x61, 0x0a,
	0x0f, 0x5a, 0x65, 0x72, 0x6f, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x83, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x74, 0x61, 0x73, 0x6b,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d,
	0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x6f, 0x6d, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x50, 0x72, 0x65, 0x76, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0x43, 0x0a, 0x15, 0x43, 0x64, 0x65, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x25, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61,
	0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x79, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x79,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x66, 0x70,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x66,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x23, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63,
	0x61, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45,
	0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x6e, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x72, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x22, 0x47, 0x0a, 0x1d, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x4b, 0x73, 0x77, 0x61,
	0x70, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x1e, 0x4d, 0x6d, 0x56,
	0x6d, 0x73, 0x63, 0x61, 0x6e, 0x4b, 0x73, 0x77, 0x61, 0x70, 0x64, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x22, 0x36, 0x0a,
	0x20, 0x57, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x34, 0x0a, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x52, 0x0a, 0x20, 0x57,
	0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x98, 0x01, 0x0a, 0x1d, 0x57, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x65, 0x71, 0x43, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0x95, 0xf8, 0x01, 0x0a, 0x0b,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x62, 0x0a, 0x14, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x70, 0x75,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70,
	0x75, 0x49, 0x64, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x12, 0x62, 0x0a, 0x14, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x59,
	0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x68, 0x6f, 0x74, 0x70,
	0x6c, 0x75, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x43, 0x70, 0x75, 0x48, 0x6f, 0x74, 0x70, 0x6c, 0x75, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x70, 0x75, 0x48, 0x6f, 0x74, 0x70, 0x6c, 0x75, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x57, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x70, 0x69, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x70, 0x69,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x70, 0x69, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x08,
	0x69, 0x70, 0x69, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x49, 0x70, 0x69, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x70, 0x69, 0x45, 0x78, 0x69, 0x74, 0x12, 0x43,
	0x0a, 0x09, 0x69, 0x70, 0x69, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x49, 0x70, 0x69, 0x52, 0x61, 0x69, 0x73, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69, 0x70, 0x69, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x69, 0x72, 0x71, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x5f,
	0x65, 0x78, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x66,
	0x74, 0x69, 0x72, 0x71, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x5f, 0x72, 0x61,
	0x69, 0x73, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x69, 0x72, 0x71, 0x52, 0x61, 0x69, 0x73, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x69, 0x32, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x32, 0x63, 0x52, 0x65, 0x61, 0x64, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x32,
	0x63, 0x52, 0x65, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x32, 0x63, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x32, 0x63, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x32, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x32,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x49, 0x32, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x69, 0x32, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x32, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x32, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x32, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x6d, 0x62, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6d,
	0x62, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6d, 0x62, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x49, 0x0a, 0x0b, 0x73, 0x6d, 0x62, 0x75, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6d, 0x62, 0x75, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x6d, 0x62, 0x75, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x6d,
	0x62, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x6d, 0x62, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6d, 0x62,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x6d, 0x62, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x6d, 0x62, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6d, 0x62, 0x75, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f,
	0x77, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x59, 0x0a, 0x11, 0x69, 0x72, 0x71, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x72, 0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x69, 0x72, 0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x69, 0x72, 0x71, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x72, 0x71, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x72, 0x71, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x45, 0x78, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x70, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x50, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x79,
	0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x57, 0x61, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x57, 0x61, 0x69, 0x74, 0x12,
	0x5d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x61, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x57,
	0x0a, 0x11, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x61, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34,
	0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x44, 0x61, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x60, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x13, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x71, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x49, 0x73, 0x73, 0x75, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x71, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x7c, 0x0a, 0x1e, 0x6d, 0x6d,
	0x5f, 0x76, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x6d,
	0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x76, 0x0a, 0x1c, 0x6d, 0x6d, 0x5f, 0x76,
	0x6d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x45, 0x6e, 0x64,
	0x12, 0x63, 0x0a, 0x15, 0x6d, 0x6d, 0x5f, 0x76, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6b, 0x73,
	0x77, 0x61, 0x70, 0x64, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x4b, 0x73, 0x77, 0x61, 0x70, 0x64,
	0x57, 0x61, 0x6b, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x6d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e, 0x4b, 0x73, 0x77, 0x61, 0x70,
	0x64, 0x57, 0x61, 0x6b, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x6d, 0x6d, 0x5f, 0x76, 0x6d, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x6b, 0x73, 0x77, 0x61, 0x70, 0x64, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x56, 0x6d, 0x73, 0x63, 0x61, 0x6e,
	0x4b, 0x73, 0x77, 0x61, 0x70, 0x64, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x6d, 0x56, 0x6d, 0x73, 0x63,
	0x61, 0x6e, 0x4b, 0x73, 0x77, 0x61, 0x70, 0x64, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x5e, 0x0a,
	0x12, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a,
	0x1b, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x62, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6b, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x12, 0x65, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x6b, 0x0a, 0x17, 0x77, 0x6f, 0x72, 0x6b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x5b, 0x0a, 0x11, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x74, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x10,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x16, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x65, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x7e, 0x0a, 0x1e, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6d, 0x64, 0x69, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x6d, 0x64, 0x69, 0x72, 0x12, 0x65, 0x0a, 0x15, 0x63, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x5f, 0x0a, 0x13, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x6f, 0x6f, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x52, 0x0a, 0x0e, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x11, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x6f,
	0x6f, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x75, 0x70, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x53, 0x0a, 0x0f, 0x6d, 0x64, 0x70, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x6b, 0x69, 0x63, 0x6b,
	0x6f, 0x66, 0x66, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x43,
	0x6d, 0x64, 0x4b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x4b, 0x69,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x12, 0x46, 0x0a, 0x0a, 0x6d, 0x64, 0x70, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x6d, 0x64, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x51, 0x0a,
	0x0f, 0x6d, 0x64, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x74,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66,
	0x53, 0x65, 0x74, 0x4f, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x4f, 0x74,
	0x12, 0x53, 0x0a, 0x0f, 0x6d, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x70, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x53,
	0x73, 0x70, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x64, 0x70, 0x53, 0x73, 0x70, 0x70, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x6d, 0x64, 0x70, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x50, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6e, 0x67, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x50, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6e, 0x67, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x6d, 0x64, 0x70, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x77, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x77, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x64,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x77, 0x12, 0x67, 0x0a, 0x17, 0x6d, 0x64,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x6e, 0x69, 0x63,
	0x5f, 0x6c, 0x75, 0x74, 0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64,
	0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x4c, 0x75, 0x74,
	0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x6d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x50, 0x61, 0x6e, 0x69, 0x63, 0x4c,
	0x75, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x64, 0x70, 0x5f, 0x73, 0x73, 0x70, 0x70, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x53,
	0x73, 0x70, 0x70, 0x53, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x64, 0x70, 0x53, 0x73, 0x70, 0x70, 0x53, 0x65, 0x74, 0x12,
	0x60, 0x0a, 0x14, 0x6d, 0x64, 0x70, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x70,
	0x74, 0x72, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x64, 0x70, 0x74, 0x72, 0x44, 0x6f, 0x6e,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x6d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x61, 0x64, 0x70, 0x74, 0x72, 0x44, 0x6f, 0x6e,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x73, 0x72, 0x5f, 0x63, 0x72,
	0x63, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x4d, 0x69, 0x73,
	0x72, 0x43, 0x72, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x6d, 0x64, 0x70, 0x4d, 0x69, 0x73, 0x72, 0x43, 0x72, 0x63, 0x12, 0x61, 0x0a,
	0x15, 0x6d, 0x64, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x71, 0x6f,
	0x73, 0x5f, 0x6c, 0x75, 0x74, 0x73, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x4c, 0x75, 0x74, 0x73,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d,
	0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x51, 0x6f, 0x73, 0x4c, 0x75, 0x74, 0x73,
	0x12, 0x59, 0x0a, 0x11, 0x6d, 0x64, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64,
	0x70, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x64, 0x70, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x12, 0x6d,
	0x64, 0x70, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62,
	0x77, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x77, 0x12, 0x56, 0x0a, 0x10, 0x6d, 0x64, 0x70, 0x5f, 0x6d,
	0x69, 0x78, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x4d, 0x69, 0x78, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x6d, 0x64, 0x70, 0x4d, 0x69, 0x78, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x64, 0x0a, 0x16, 0x6d, 0x64, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x77, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x57, 0x6d, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x6d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x53, 0x65, 0x74, 0x57, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x69, 0x0a, 0x17, 0x6d, 0x64, 0x70, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x64, 0x70, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x63, 0x0a, 0x15, 0x6d, 0x64, 0x70, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6e, 0x67, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x57, 0x61, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6e, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x6d, 0x64, 0x70, 0x43, 0x6d, 0x64, 0x57, 0x61, 0x69, 0x74, 0x50, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x63, 0x0a, 0x15, 0x6d, 0x64, 0x70, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x18, 0x5e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x12, 0x5d, 0x0a, 0x13, 0x6d, 0x64,
	0x70, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75,
	0x73, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x64, 0x70, 0x50, 0x65, 0x72,
	0x66, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x64, 0x70, 0x50, 0x65, 0x72, 0x66,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x73, 0x12, 0x6a, 0x0a, 0x18, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x77, 0x5f, 0x61, 0x6f, 0x5f, 0x61, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x77, 0x41, 0x6f, 0x41, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x77, 0x41, 0x6f, 0x41, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x74, 0x0a, 0x1c, 0x6d, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x6d, 0x61, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x67, 0x65,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x6d, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x21,
	0x6d, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x46, 0x69, 0x6c, 0x65,
	0x6d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x67,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x6d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x5f, 0x0a, 0x13, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x7e, 0x0a, 0x1e, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x16, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x19,
	0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x59, 0x0a,
	0x11, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x12, 0x68, 0x0a, 0x16, 0x6d, 0x6d, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x1f, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x22, 0x6d, 0x6d, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x1f, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x1d, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x5f, 0x73,
	0x6c, 0x65, 0x65, 0x70, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x64, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x53, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x78, 0x0a, 0x1c, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x5f, 0x77, 0x61, 0x6b, 0x65,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x57, 0x61,
	0x6b, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x19, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x12, 0x74, 0x0a, 0x1a, 0x6d, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x68, 0x0a, 0x16, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x6d,
	0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x79,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x79, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x79, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x1e, 0x6d, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x5f, 0x6b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70,
	0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x4b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x4e,
	0x65, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x4e, 0x65, 0x77, 0x12,
	0x5f, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x42, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x12, 0x56, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x69, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x69, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x62, 0x69, 0x6f, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x77, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x53, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x69, 0x6f, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x70, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x69, 0x6f, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x6f, 0x52,
	0x65, 0x6d, 0x61, 0x70, 0x12, 0x5c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x69,
	0x72, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x74, 0x79, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x72, 0x74, 0x79, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x72,
	0x71, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47,
	0x65, 0x74, 0x72, 0x71, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x72, 0x71, 0x12, 0x46, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6c, 0x75, 0x67, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x6c, 0x75, 0x67, 0x12, 0x50, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x71, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x71, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x71, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x7d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x71, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x71, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x72, 0x71, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x71, 0x52, 0x65, 0x6d, 0x61, 0x70, 0x12, 0x57, 0x0a, 0x10, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x71, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x71, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x72, 0x71, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x72, 0x71, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x72, 0x71, 0x12, 0x4a, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x12, 0x5d, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x70, 0x6c, 0x75, 0x67,
	0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55,
	0x6e, 0x70, 0x6c, 0x75, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x12,
	0x61, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x61,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x65, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x44, 0x61, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x88,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x76, 0x0a, 0x1b, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x74, 0x34, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x61, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x8b, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x44, 0x61, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x64, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34,
	0x44, 0x61, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74,
	0x34, 0x44, 0x61, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x77, 0x0a, 0x1c, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18,
	0x65, 0x78, 0x74, 0x34, 0x44, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34,
	0x5f, 0x64, 0x61, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x44, 0x61, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x1a, 0x65, 0x78, 0x74, 0x34,
	0x5f, 0x64, 0x61, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x74, 0x34, 0x44, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x14, 0x65,
	0x78, 0x74, 0x34, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x49, 0x4f, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74,
	0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5e,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x49, 0x4f,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x45, 0x78, 0x69, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x4f, 0x45, 0x78, 0x69, 0x74, 0x12, 0x60,
	0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65,
	0x78, 0x74, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x78, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x19, 0x65, 0x78, 0x74, 0x34, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78,
	0x74, 0x34, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x94, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x34, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x61, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x94, 0x01, 0x0a, 0x27, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x21, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x46,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x91, 0x01, 0x0a, 0x26, 0x65,
	0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x45, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x20, 0x65, 0x78,
	0x74, 0x34, 0x45, 0x73, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x64,
	0x0a, 0x15, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x34, 0x45, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x17, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x1a, 0x65, 0x78,
	0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x69, 0x74, 0x12, 0x64, 0x0a,
	0x15, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x73, 0x5f, 0x73,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73,
	0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x61, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65,
	0x73, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9d,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68,
	0x72, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x65, 0x73, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6e,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x53, 0x63, 0x61, 0x6e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x18, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x65, 0x73, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x53, 0x63, 0x61, 0x6e, 0x45,
	0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x65, 0x78, 0x74, 0x34, 0x45, 0x73, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x53, 0x63,
	0x61, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65,
	0x76, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x76, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x6f,
	0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x65, 0x78, 0x74, 0x34, 0x45, 0x76, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x25, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x54, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x20, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x54, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x28, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x18,
	0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x23, 0x65, 0x78, 0x74, 0x34, 0x45,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x61, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x12, 0x86,
	0x01, 0x0a, 0x21, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x34, 0x45, 0x78, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x6e, 0x77, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x6e, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x34, 0x5f,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0xa4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x12, 0x61, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x6e, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45,
	0x78, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65,
	0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x6b, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74,
	0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78,
	0x74, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x74,
	0x34, 0x45, 0x78, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x62, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x50, 0x75, 0x74, 0x49, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x50, 0x75, 0x74, 0x49, 0x6e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x64, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0xa9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x1a, 0x65,
	0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x52,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6d, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45,
	0x78, 0x74, 0x52, 0x6d, 0x49, 0x64, 0x78, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52, 0x6d, 0x49,
	0x64, 0x78, 0x12, 0x55, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x34, 0x45, 0x78, 0x74, 0x52, 0x6d, 0x4c, 0x65, 0x61, 0x66, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x34,
	0x45, 0x78, 0x74, 0x52, 0x6d, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x61, 0x0a, 0x14, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x45,
	0x78, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x45,
	0x78, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x14,
	0x65, 0x78, 0x74, 0x34, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x34, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65,
	0x78, 0x74, 0x34, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x69, 0x74, 0x12, 0x6d, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x66, 0x69, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x46, 0x69, 0x6e,
	0x64, 0x44, 0x65, 0x6c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x74,
	0x34, 0x46, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x66, 0x6f, 0x72, 0x67, 0x65,
	0x74, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x46,
	0x6f, 0x72, 0x67, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x34, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x12, 0x57,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34,
	0x46, 0x72, 0x65, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x6f, 0x64,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x34, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x8a, 0x01,
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x65, 0x78, 0x74, 0x34,
	0x47, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x45, 0x78, 0x69, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x65,
	0x78, 0x74, 0x34, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0xb5,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1b, 0x65, 0x78, 0x74, 0x34, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x6e, 0x0a,
	0x19, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x64, 0x4d,
	0x61, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x6b, 0x0a,
	0x18, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x70, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x70,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x78,
	0x74, 0x34, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0xb9, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x78,
	0x74, 0x34, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x76, 0x0a, 0x1b, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x65, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78,
	0x74, 0x34, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x16, 0x65, 0x78, 0x74, 0x34, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x6f, 0x64,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x67, 0x0a,
	0x16, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x65, 0x78, 0x74, 0x34, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x6f, 0x64, 0x65,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x64, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18,
	0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x61, 0x72,
	0x6b, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x61,
	0x72, 0x6b, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x34, 0x4d, 0x62, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34,
	0x4d, 0x62, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x6e, 0x0a, 0x19,
	0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x62, 0x75, 0x64, 0x64, 0x79, 0x5f, 0x62, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x42, 0x75, 0x64, 0x64, 0x79, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x42, 0x75, 0x64,
	0x64, 0x79, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x7f, 0x0a, 0x1e,
	0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1b, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50,
	0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a,
	0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x70, 0x61, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x34, 0x4d, 0x62, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78,
	0x74, 0x34, 0x4d, 0x62, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x12, 0x5f,
	0x0a, 0x14, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x78, 0x74, 0x34, 0x4d, 0x62, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x12,
	0x6b, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x18, 0xc6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x12, 0x6b, 0x0a, 0x18,
	0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x62, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x63, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x34,
	0x5f, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4d, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x74, 0x34, 0x4d,
	0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5a, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34,
	0x4d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x4d, 0x62,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x72, 0x65, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x65, 0x78, 0x74,
	0x34, 0x5f, 0x6d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34,
	0x4d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78,
	0x74, 0x34, 0x4d, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x12, 0x77, 0x0a, 0x1c, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x65, 0x78, 0x74, 0x34, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78,
	0x74, 0x34, 0x5f, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0xcd, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x50, 0x75, 0x6e, 0x63, 0x68,
	0x48, 0x6f, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x34, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x48, 0x6f, 0x6c, 0x65,
	0x12, 0x74, 0x0a, 0x1b, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x61,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x65,
	0x78, 0x74, 0x34, 0x52, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x50, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x34,
	0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x34,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0xd0, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x70, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x66, 0x73, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x34, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x34, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x73,
	0x12, 0x5b, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x34, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x78,
	0x74, 0x34, 0x54, 0x72, 0x69, 0x6d, 0x41, 0x6c, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x12, 0x57, 0x0a,
	0x10, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x54,
	0x72, 0x69, 0x6d, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x54, 0x72, 0x69, 0x6d,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xd7, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x74, 0x34, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x34,
	0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xd8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x78, 0x74, 0x34, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x34, 0x5f,
	0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xd9, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x75, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78,
	0x74, 0x34, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x74, 0x12, 0x57, 0x0a, 0x10,
	0x65, 0x78, 0x74, 0x34, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x34,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x34,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0xe7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x56, 0x0a,
	0x0f, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0xe8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x34, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x78, 0x74, 0x34,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x70, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x54, 0x0a, 0x0f, 0x65, 0x78, 0x74, 0x34, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0xea, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x34, 0x5a, 0x65, 0x72, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x34, 0x5a, 0x65, 0x72,
	0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e,
	0x65, 0x77, 0x74, 0x61, 0x73, 0x6b, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x65, 0x77, 0x74, 0x61, 0x73, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x65,
	0x77, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x18, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65,
	0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x12, 0x5d, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x69, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x69, 0x74, 0x12,
	0x5d, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0xef, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x5d,
	0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68,
	0x61, 0x6e, 0x67, 0x18, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x6e, 0x67, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x61, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x61, 0x69, 0x74, 0x12, 0x5b, 0x0a, 0x12, 0x66,
	0x32, 0x66, 0x73, 0x5f, 0x64, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x69,
	0x6f, 0x18, 0xf3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x44,
	0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x6f, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x32, 0x66, 0x73, 0x44, 0x6f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x69, 0x6f, 0x12, 0x57, 0x0a, 0x10, 0x66, 0x32, 0x66, 0x73,
	0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xf4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x45, 0x76, 0x69, 0x63, 0x74, 0x49,
	0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x66, 0x32, 0x66, 0x73, 0x45, 0x76, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x53, 0x0a, 0x0e, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x18, 0xf5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66,
	0x73, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x32, 0x66, 0x73, 0x46, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0xf6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66, 0x32, 0x66, 0x73, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x0f, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x18, 0xf7, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x47, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x66,
	0x32, 0x66, 0x73, 0x47, 0x65, 0x74, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x12, 0x44, 0x0a, 0x09,
	0x66, 0x32, 0x66, 0x73, 0x5f, 0x69, 0x67, 0x65, 0x74, 0x18, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x49, 0x67, 0x65, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x32, 0x66, 0x73, 0x49, 0x67,
	0x65, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x69, 0x67, 0x65, 0x74, 0x5f,
	0x65, 0x78, 0x69, 0x74, 0x18, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32,
	0x66, 0x73, 0x49, 0x67, 0x65, 0x74, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x32, 0x66, 0x73, 0x49, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x6e, 0x65,
	0x77, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x46, 0x32, 0x66, 0x73, 0x4e, 0x65, 0x77, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x32, 0x66, 0x73,
	0x4e, 0x65, 0x77, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x66, 0x32, 0x66, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x32,
	0x66, 0x73, 0x52, 0x65, 0x61, 0x64, 0x70, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x66, 0x32,
	0x66, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32,
	0x66, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x66, 0x32, 0x66, 0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4e, 0x65, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x5e, 0x0a, 0x13, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0xfd, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x53, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x74, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x66, 0x32, 0x66, 0x73, 0x53, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x72, 0x74, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0xfe, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66, 0x32, 0x66, 0x73, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x14,
	0x66, 0x32, 0x66, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32,
	0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x66, 0x32,
	0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x5e, 0x0a, 0x13, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x46, 0x32, 0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x66,
	0x32, 0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12,
	0x4b, 0x0a, 0x0c, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x73, 0x18,
	0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x53, 0x79, 0x6e,
	0x63, 0x46, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x32, 0x66, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x73, 0x12, 0x50, 0x0a, 0x0d,
	0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x82, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x73,
	0x0a, 0x1a, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x83, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x66, 0x32, 0x66, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x19, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74,
	0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x66,
	0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x45, 0x78, 0x69, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x1f, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x85, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x32, 0x66,
	0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x66, 0x32, 0x66,
	0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x86, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x1c, 0x66, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x80,
	0x01, 0x0a, 0x1f, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x18, 0x87, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x5d, 0x0a, 0x12, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x88, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x66, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x70, 0x0a, 0x19, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x89, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x66, 0x32, 0x66, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x6d, 0x0a, 0x18, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x8a,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x66, 0x32, 0x66, 0x73,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x76, 0x0a, 0x1b, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x8b, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x18, 0x66, 0x32, 0x66, 0x73, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x11, 0x66, 0x32, 0x66,
	0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x8c,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x55, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x32, 0x66, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x10, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x75, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x8d, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x69,
	0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x66, 0x32, 0x66, 0x73, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x78, 0x69, 0x74, 0x12, 0x61,
	0x0a, 0x14, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x76, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x6b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x46, 0x32, 0x66, 0x73, 0x56, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x6b, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x66, 0x32, 0x66, 0x73, 0x56, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x6b, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x10, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46,
	0x32, 0x66, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x32, 0x66, 0x73,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x66, 0x0a, 0x15, 0x66, 0x32,
	0x66, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x90, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32, 0x66,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x66,
	0x32, 0x66, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x66, 0x32, 0x66, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x91, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x32,
	0x66, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x32, 0x66, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x92,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x45, 0x6e, 0x64, 0x12, 0x67, 0x0a, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6f, 0x6d, 0x6d, 0x75,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x93, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x46, 0x61,
	0x69, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75,
	0x46, 0x61, 0x69, 0x6c, 0x12, 0x6a, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x94, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x5e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x95, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x45, 0x6e,
	0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x45, 0x6e, 0x64,
	0x12, 0x61, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x79, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x96, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x79, 0x73, 0x46,
	0x61, 0x69, 0x6c, 0x12, 0x64, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x97, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x73, 0x0a, 0x1a, 0x64, 0x6d, 0x61,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x44, 0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75,
	0x6f, 0x75, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x64, 0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x54,
	0x0a, 0x0f, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x99, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6d, 0x6d, 0x75,
	0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x4d, 0x61, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x65,
	0x63, 0x5f, 0x70, 0x74, 0x62, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f,
	0x6d, 0x6d, 0x75, 0x53, 0x65, 0x63, 0x50, 0x74, 0x62, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x17, 0x69, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x63, 0x50, 0x74, 0x62, 0x6c,
	0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x7b, 0x0a, 0x1e, 0x69,
	0x6f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x74, 0x62, 0x6c, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x9b, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x63, 0x50,
	0x74, 0x62, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x69,
	0x6f, 0x6d, 0x6d, 0x75, 0x53, 0x65, 0x63, 0x50, 0x74, 0x62, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x61, 0x0a, 0x14, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64,
	0x18, 0x9c, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x64, 0x0a, 0x15, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x18, 0x9d, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x12, 0x70, 0x0a, 0x19, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x9e,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x67, 0x0a, 0x16, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x9f, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5b, 0x0a, 0x12,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x18, 0xa0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x43,
	0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x18, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0xa1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x6f, 0x6e, 0x43, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x12, 0x71, 0x0a, 0x1a, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f,
	0x6e, 0x43, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0xa3, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x12, 0x79, 0x0a, 0x1e, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6d, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0xa4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x18, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x7f, 0x0a, 0x20,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6d, 0x61, 0x5f, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0xa5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x1a, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41,
	0x64, 0x64, 0x54, 0x6f, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x74, 0x0a,
	0x1b, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6d, 0x61, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0xa6, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43,
	0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x7a, 0x0a, 0x1d, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x5f, 0x63, 0x6d, 0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xa7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43,
	0x6d, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x7b, 0x0a, 0x1e, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6d,
	0x61, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0xa8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x53,
	0x68, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x81, 0x01, 0x0a,
	0x20, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6d, 0x61, 0x5f,
	0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0xa9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x43, 0x6d, 0x61, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x1b, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x43, 0x6d,
	0x61, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x3a, 0x0a, 0x05, 0x6b, 0x66, 0x72, 0x65, 0x65, 0x18, 0xaa, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4b, 0x66, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x66, 0x72, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x6b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0xab, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x4d,
	0x0a, 0x0c, 0x6b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x6b, 0x6d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x57, 0x0a,
	0x10, 0x6b, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4b, 0x6d, 0x65, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x64, 0x0a, 0x15, 0x6b, 0x6d, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6b, 0x6d, 0x65, 0x6d, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0f,
	0x6b, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18,
	0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x6d, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x64,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x60,
	0x0a, 0x13, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x50, 0x0a, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0d, 0x6d, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x50,
	0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x12, 0x64, 0x0a, 0x15, 0x6d, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x66, 0x72, 0x61, 0x67, 0x18, 0xb4, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x45, 0x78, 0x74, 0x66, 0x72, 0x61, 0x67, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x45, 0x78, 0x74, 0x66, 0x72, 0x61, 0x67, 0x12, 0x6e, 0x0a, 0x19, 0x6d, 0x6d, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x6d, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x6d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x5a, 0x6f,
	0x6e, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x6d, 0x6d, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6d, 0x50, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x6d, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0xb7, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x12, 0x6d, 0x6d, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x63, 0x70, 0x75, 0x5f, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x18, 0xb8,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x50, 0x63,
	0x70, 0x75, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x50, 0x63, 0x70, 0x75,
	0x44, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x72, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x18, 0xba, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x68, 0x72, 0x69,
	0x6e, 0x6b, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x12, 0x4e,
	0x0a, 0x0d, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x18,
	0xbb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70,
	0x47, 0x72, 0x6f, 0x77, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x77, 0x12, 0x47,
	0x0a, 0x0a, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0xbc, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x66, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x66, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0xbd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x60, 0x0a, 0x13, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0xbe, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x0e, 0x66,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64, 0x18, 0xbf, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x65, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x65, 0x64,
	0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6c, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc0,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6c, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x6c, 0x6b,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6c, 0x6b, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6b, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6c, 0x6b, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x6c, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x79, 0x0a, 0x1c, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x62,
	0x75, 0x66, 0x18, 0xc3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x42, 0x75, 0x66, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x19, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x75, 0x66, 0x12, 0x53, 0x0a,
	0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x18,
	0xc4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0xc5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x14, 0x6f, 0x6f,
	0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0xc6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x6f, 0x6d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x6f, 0x6d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0xc7, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12,
	0x54, 0x0a, 0x0f, 0x6d, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0xc8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x5f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0xc9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x73,
	0x79, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x79, 0x73, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x79, 0x73, 0x45, 0x78, 0x69, 0x74, 0x12, 0x37,
	0x0a, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x5a, 0x65, 0x72, 0x6f, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x50, 0x0a, 0x0d, 0x67, 0x70, 0x75, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xcc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x67, 0x0a, 0x16, 0x73, 0x64, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x18, 0xcd, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x64, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73,
	0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x69, 0x63, 0x74, 0x69,
	0x6d, 0x18, 0xce, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x56,
	0x69, 0x63, 0x74, 0x69, 0x6d, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x69, 0x63, 0x74, 0x69, 0x6d, 0x12, 0x41,
	0x0a, 0x08, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x5a, 0x0a, 0x11, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x49, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x18, 0xd1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6f, 0x6e,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x51, 0x0a, 0x0e,
	0x73, 0x63, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xd2,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x63, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x4b, 0x0a, 0x0c, 0x73, 0x63, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x18,
	0xd3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x63, 0x6d, 0x43, 0x61, 0x6c, 0x6c,
	0x45, 0x6e, 0x64, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x63, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x0d,
	0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xd4, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x13,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x64, 0x65, 0x76, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0xd6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x64, 0x65, 0x76, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x64, 0x65, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0a,
	0x63, 0x70, 0x75, 0x68, 0x70, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0xd7, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x68, 0x70, 0x45, 0x78, 0x69, 0x74, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x70, 0x75, 0x68,
	0x70, 0x45, 0x78, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x68, 0x70, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0xd8, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x68, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x6e,
	0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x70, 0x75, 0x68, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x68, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0xd9, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x68, 0x70, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x68, 0x70, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a,
	0x0d, 0x63, 0x70, 0x75, 0x68, 0x70, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xda,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x68, 0x70, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x68, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x57, 0x0a, 0x10, 0x66, 0x61, 0x73, 0x74, 0x72, 0x70, 0x63, 0x5f, 0x64, 0x6d, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x18, 0xdb, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x61, 0x73,
	0x74, 0x72, 0x70, 0x63, 0x44, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x61, 0x73, 0x74, 0x72, 0x70,
	0x63, 0x44, 0x6d, 0x61, 0x53, 0x74, 0x61, 0x74, 0x12, 0x67, 0x0a, 0x16, 0x64, 0x70, 0x75, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x18, 0xdc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x70, 0x75, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x70,
	0x75, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x67, 0x0a, 0x16, 0x67, 0x32, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0xdd, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x32, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x32, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x72, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xcd, 0x05, 0x0a, 0x11, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x54, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x1a, 0xfa, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4e, 0x65,
	0x78, 0x74, 0x50, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x50,
	0x72, 0x69, 0x6f, 0x12, 0x37, 0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4e,
	0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x10,
	0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x77, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0a, 0x77,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x11, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x70, 0x75, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x77,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x70, 0x75, 0x12, 0x23,
	0x0a, 0x0b, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x11, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x0f, 0x77, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x70,
	0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x75, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x75, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x6c, 0x64,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f,
	0x77, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6e, 0x6f, 0x77, 0x54,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72,
	0x65, 0x61, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x6b, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x4d, 0x65, 0x6d, 0x4b, 0x62, 0x22, 0x3e, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x46,
	0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x02, 0x22, 0xc1, 0x02, 0x0a, 0x0f, 0x47, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x11, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x67,
	0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x70, 0x75,
	0x49, 0x64, 0x1a, 0x78, 0x0a, 0x0a, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x02, 0x0a,
	0x06, 0x47, 0x70, 0x75, 0x4c, 0x6f, 0x67, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x4c,
	0x6f, 0x67, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45,
	0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14,
	0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45,
	0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x22, 0x8a,
	0x09, 0x0a, 0x13, 0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0c, 0x68, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x68, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x67, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x70,
	0x75, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x70,
	0x61, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x15,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x5f, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0b, 0x68, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x68, 0x77, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x1a, 0x35, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa7, 0x03, 0x0a, 0x0e,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x08, 0x68, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x68, 0x77, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x55,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x1a, 0x43, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x04, 0x08, 0x64, 0x10, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x17,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x41, 0x70, 0x69, 0x52, 0x03, 0x61, 0x70, 0x69, 0x22, 0x3a, 0x0a, 0x03, 0x41,
	0x70, 0x69, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x47, 0x4c, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x56, 0x55, 0x4c, 0x4b, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x43, 0x4c, 0x10, 0x03, 0x22, 0x90, 0x02, 0x0a, 0x23, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3b, 0x0a,
	0x13, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22, 0xd1, 0x04, 0x0a, 0x0e, 0x56,
	0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x74, 0x0a,
	0x1a, 0x76, 0x6b, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x6b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x16, 0x76, 0x6b, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x76, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56,
	0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x76,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x1a, 0xa1, 0x01, 0x0a,
	0x16, 0x56, 0x6b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6b, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xc2, 0x01, 0x0a, 0x0d, 0x56, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6b, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x10,
	0x76, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa4,
	0x01, 0x0a, 0x1b, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x49, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x08, 0x0a, 0x11, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75,
	0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4a,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x69,
	0x64, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75,
	0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x65, 0x61, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x65,
	0x61, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x05, 0x22,
	0x75, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x50, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x05, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x22, 0x34, 0x0a,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x73, 0x74, 0x72, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x64,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x57,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0d, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x22, 0x79,
	0x0a, 0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x5f, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x6c, 0x50, 0x63, 0x22, 0x3a, 0x0a, 0x09, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x15,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x69, 0x64, 0x22, 0x8b, 0x07, 0x0a, 0x0f, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xda, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64,
	0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x0a,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x02,
	0x42, 0x0c, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x13, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x49, 0x69, 0x64, 0x22, 0x36, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x80, 0x03,
	0x0a, 0x1a, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x01,
	0x0a, 0x16, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x49, 0x45, 0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x03,
	0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f,
	0x59, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x04,
	0x22, 0xe6, 0x0b, 0x0a, 0x1e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5b, 0x0a, 0x2b, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x69,
	0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41,
	0x74, 0x55, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x77, 0x5f, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x77, 0x55, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6e, 0x6f,
	0x77, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6e, 0x6f,
	0x77, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x55, 0x73, 0x12, 0x4e, 0x0a, 0x25, 0x6e, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x1f, 0x6e, 0x6f, 0x77, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x55, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x12, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x65, 0x0a, 0x1a, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x17, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x5f, 0x0a, 0x18, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x15, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x64, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x1a, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x41, 0x44, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44,
	0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x47,
	0x55, 0x4c, 0x41, 0x52, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x22, 0x86, 0x28, 0x0a, 0x1c, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x1a, 0xf9, 0x0a, 0x0a, 0x0a, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x51, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x70,
	0x6c, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x13, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x16, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x1b, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x50, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x72, 0x65, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x17, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x13,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x52, 0x65, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x45, 0x47,
	0x49, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x45, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f,
	0x49, 0x4d, 0x50, 0x4c, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44,
	0x45, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x03, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d,
	0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x45,
	0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x22, 0xf4, 0x01, 0x0a, 0x17,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x45, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x2d, 0x0a, 0x29, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12,
	0x31, 0x0a, 0x2d, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x22, 0xc7, 0x01, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x52, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x52,
	0x41, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x28,
	0x0a, 0x24, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x10, 0x04, 0x1a, 0xb3, 0x1b, 0x0a,
	0x0a, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x27, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x64, 0x5f,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x64, 0x44,
	0x72, 0x61, 0x77, 0x12, 0x59, 0x0a, 0x2b, 0x64, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x64, 0x69, 0x64, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46,
	0x6f, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x5f,
	0x0a, 0x2e, 0x64, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x64, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x5d, 0x0a, 0x2d, 0x64, 0x69, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x64, 0x69, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x6f, 0x6e, 0x12, 0x4b,
	0x0a, 0x23, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x77, 0x61, 0x6e,
	0x74, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x6f, 0x74, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x64, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1f, 0x64, 0x69, 0x64, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6e,
	0x6b, 0x12, 0x48, 0x0a, 0x21, 0x64, 0x69, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69,
	0x64, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6d, 0x70, 0x6c, 0x53, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x69, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x30, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d,
	0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6e, 0x65, 0x65, 0x64,
	0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x70, 0x6c,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6e, 0x65,
	0x65, 0x64, 0x73, 0x4f, 0x6e, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e,
	0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e,
	0x44, 0x72, 0x61, 0x77, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x6c, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x72, 0x61,
	0x77, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x49, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x46, 0x6f, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x65, 0x64,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x72, 0x61, 0x77, 0x12, 0x3d, 0x0a, 0x1c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x65, 0x65, 0x49, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x54, 0x6f, 0x44, 0x72, 0x61, 0x77, 0x12, 0x6c, 0x0a, 0x35, 0x64, 0x69, 0x64,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x64, 0x69, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x65, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x6a, 0x0a, 0x0d, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x69,
	0x6e, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x7d, 0x0a, 0x14, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12,
	0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x5d, 0x0a, 0x2d, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x73, 0x46, 0x61, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x61, 0x69,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5b, 0x0a, 0x2c, 0x73, 0x6b, 0x69,
	0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x25, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61,
	0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4e,
	0x65, 0x65, 0x64, 0x73, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x64, 0x65, 0x66, 0x65, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x64, 0x5f, 0x6e, 0x6f, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x64, 0x4e, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x16, 0x64, 0x69, 0x64, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x69, 0x6e, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x64, 0x69, 0x64, 0x44, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x64, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x53, 0x69, 0x64,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x21, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x49, 0x73, 0x49, 0x6d,
	0x70, 0x6c, 0x53, 0x69, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x23, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x57, 0x61, 0x73, 0x49, 0x6d, 0x70, 0x6c, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x5f, 0x0a, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x61, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x59, 0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x65, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x4d, 0x4f, 0x4f, 0x54, 0x48, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x41, 0x4b, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x41, 0x4b,
	0x45, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x22, 0x82, 0x01,
	0x0a, 0x12, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x41,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x52, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x43, 0x52, 0x4f, 0x4c,
	0x4c, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x46, 0x46, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x52,
	0x10, 0x02, 0x22, 0x8f, 0x05, 0x0a, 0x0e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x55, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa2, 0x01, 0x0a, 0x12, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72,
	0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x52, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x52, 0x47,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x52, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x41, 0x52, 0x47, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x22, 0xf5, 0x05, 0x0a, 0x12, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d,
	0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x55, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6d,
	0x70, 0x6c, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x1a, 0xad, 0x02, 0x0a, 0x0e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x6f, 0x77, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x6f, 0x77, 0x54, 0x6f, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4e, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x3e, 0x0a,
	0x1c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x38, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x17, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x52, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x67, 0x73, 0x22, 0xfd, 0x04,
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x31, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x2a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73,
	0x12, 0x6c, 0x0a, 0x35, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x2d, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x6f, 0x74, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x76,
	0x0a, 0x3b, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x31, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x69, 0x6e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x5d, 0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x26, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54, 0x6f, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x44, 0x0a, 0x1f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x72, 0x61, 0x77, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x22, 0x8d, 0x04,
	0x0a, 0x13, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x6d, 0x6f, 0x6f, 0x74,
	0x68, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x73, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x6d,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x45, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x22, 0x7e, 0x0a,
	0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x28, 0x0a,
	0x12, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x0c, 0x0a, 0x11, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x67, 0x65, 0x73, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x1a, 0x88, 0x01, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x73, 0x22, 0xf2, 0x02, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x49,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4d,
	0x50, 0x4c, 0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x44, 0x49, 0x44,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x08, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x04,
	0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x29, 0x0a,
	0x25, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4f,
	0x52, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x45, 0x50,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x07, 0x22, 0xf5, 0x05, 0x0a, 0x14, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b,
	0x0a, 0x27, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x57, 0x48, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x43, 0x52,
	0x4f, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x3e, 0x0a, 0x3a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52,
	0x4f, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x04, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x55, 0x49, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x07, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x10, 0x08,
	0x12, 0x3a, 0x0a, 0x36, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x43,
	0x4b, 0x5f, 0x52, 0x57, 0x48, 0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45,
	0x52, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4d, 0x50,
	0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x10, 0x0d, 0x12, 0x2c, 0x0a, 0x28, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x57, 0x41, 0x50,
	0x10, 0x0e, 0x22, 0xe9, 0x07, 0x0a, 0x0f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x49, 0x70, 0x63, 0x12, 0x52, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0xde, 0x06,
	0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10,
	0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x41, 0x43, 0x4c, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x50, 0x50, 0x41, 0x50, 0x49, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x47, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x11, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x13, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x52, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x52,
	0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49,
	0x4e, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x17, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x41, 0x43, 0x4c, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x19, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x10, 0x1a, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x47, 0x49, 0x4e, 0x5f, 0x4a, 0x41, 0x56,
	0x41, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x47, 0x50, 0x55,
	0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x57, 0x45, 0x42, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x1f, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x20,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x21, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x10, 0x23, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x53, 0x55, 0x42,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10,
	0x24, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x46, 0x52, 0x45,
	0x45, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x25, 0x22, 0x48,
	0x0a, 0x11, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x75, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x49, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x13, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x4d, 0x6f, 0x6a, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3f, 0x0a, 0x1c, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x61, 0x67,
	0x22, 0x5c, 0x0a, 0x1c, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x52, 0x41, 0x49, 0x4c,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x61, 0x69, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x4a,
	0x0a, 0x0f, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4e, 0x0a, 0x1b, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x70, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x70, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0d, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x69, 0x64, 0x22, 0xfd, 0x1a, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x6d,
	0x65, 0x49, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x16, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x24, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x73, 0x12, 0x4d,
	0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x63, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x10, 0x63, 0x63, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x55, 0x0a, 0x14, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x12, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x70, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x49, 0x70, 0x63, 0x52, 0x0f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x49, 0x70, 0x63, 0x12, 0x5e, 0x0a, 0x17, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x15, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x15, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x13, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x6e, 0x0a, 0x1d, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x1a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x74, 0x0a, 0x1f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x1c, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x72, 0x0a, 0x1f, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x1b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x69, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x6d,
	0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6d, 0x70, 0x12, 0x59,
	0x0a, 0x16, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x6a, 0x6f, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x6a, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x6f, 0x6a, 0x6f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f,
	0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x55, 0x73, 0x12,
	0x31, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52,
	0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x55, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x55, 0x73, 0x12, 0x45, 0x0a, 0x1e, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x1b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x12, 0x4b, 0x0a, 0x21, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52,
	0x1e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12,
	0x4a, 0x0a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0xfa, 0x06, 0x0a, 0x0b,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x54, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x6f, 0x45,
	0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x0e, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x64, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x50, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x49, 0x4e, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x22, 0x61, 0x0a, 0x11, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x10, 0x03, 0x42, 0x04, 0x0a, 0x02,
	0x69, 0x64, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x6a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4c, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x04, 0x2a, 0x06, 0x08, 0xe8, 0x07, 0x10, 0xac, 0x4d, 0x2a, 0x06, 0x08, 0xac,
	0x4d, 0x10, 0x91, 0x4e, 0x42, 0x0c, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x16, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x09, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x69, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x0a,
	0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49,
	0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x14, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x5b, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x55, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x10, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x47, 0x70,
	0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x67, 0x70, 0x75, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0e,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x22, 0xc4, 0x09, 0x0a, 0x15, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x75,
	0x6d, 0x70, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6f, 0x66,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x66, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0d, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x66, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x68, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x75, 0x6d, 0x70, 0x73, 0x1a, 0xf1, 0x06, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x6a, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x64, 0x75, 0x6d, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x75, 0x6d, 0x70, 0x73, 0x12, 0x64,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x45, 0x64, 0x67, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45,
	0x64, 0x67, 0x65, 0x73, 0x1a, 0xee, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x65, 0x61, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x65, 0x61, 0x6b, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x8a, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x6d, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x57, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x88, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x49, 0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4f, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x22, 0xa2, 0x03, 0x0a, 0x11,
	0x50, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x75, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x4d,
	0x65, 0x74, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x1a, 0x2d, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xb8, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0f,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x75, 0x61, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x61, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x67, 0x55, 0x61, 0x22, 0x95, 0x03,
	0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x0f,
	0x72, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x52, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x0e, 0x72, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x89, 0x01, 0x0a, 0x0e, 0x52,
	0x61, 0x69, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x5d, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x68, 0x0a, 0x10, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62, 0x66,
	0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8b, 0x02, 0x0a, 0x0f, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x62,
	0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6f, 0x62, 0x66, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x62, 0x66,
	0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x6f,
	0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x11, 0x6f, 0x62, 0x66, 0x75,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x12,
	0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x62, 0x66, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x11, 0x6f, 0x62, 0x66, 0x75,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0xcb, 0x03,
	0x0a, 0x0d, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x21, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x6f, 0x6f, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4a, 0x4e, 0x49, 0x5f, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4a, 0x4e, 0x49,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4f, 0x54,
	0x5f, 0x4a, 0x41, 0x56, 0x41, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x49,
	0x43, 0x4b, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x4f, 0x4f, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54,
	0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4f,
	0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x08, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x4f, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x0a,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x47, 0x45,
	0x52, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10, 0x0c, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x56, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x4a, 0x4e,
	0x49, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x0e, 0x22, 0xc0, 0x04, 0x0a, 0x0d,
	0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10,
	0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x58, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x4b, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x41, 0x4e, 0x54,
	0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0b, 0x22, 0xf4,
	0x01, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x6f, 0x6f, 0x74,
	0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x40, 0x0a,
	0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x46, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x22, 0xf5, 0x0c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x56, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x75, 0x6d, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x65, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x75, 0x6d, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x9a, 0x02, 0x0a,
	0x0a, 0x48, 0x65, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x46,
	0x72, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x4d, 0x61, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x1a, 0xb6, 0x01, 0x0a, 0x09, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x49, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x1a, 0x5e, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0xc9, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75,
	0x6e, 0x77, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x11, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x75, 0x6e, 0x77, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x55, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x69, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x69,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x1a, 0xd8,
	0x03, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x70, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x61,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x69, 0x74, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x72, 0x61,
	0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x74, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x72, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x70, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x47, 0x0a, 0x20, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f,
	0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x1d, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x0d, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x5f, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x55, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x96, 0x04, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x22,
	0x7c, 0x0a, 0x07, 0x43, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x59, 0x50, 0x45, 0x52, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x22, 0x8a, 0x03,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x05, 0x12, 0x24,
	0x0a, 0x20, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4c,
	0x46, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x22, 0xd7, 0x04, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x70,
	0x75, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x77, 0x69, 0x6e,
	0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x13, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x4c, 0x45, 0x52, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x55, 0x4e, 0x57, 0x49, 0x4e, 0x44, 0x5f,
	0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x03, 0x42, 0x17, 0x0a, 0x15, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x20, 0x0a, 0x1e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0xeb, 0x04, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x6b, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x62,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x5f, 0x6b, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x72, 0x74, 0x79, 0x4b, 0x62, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x6b, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x61,
	0x70, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x62, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x44, 0x69, 0x72, 0x74, 0x79, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4b, 0x62, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x4b, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6b, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4b, 0x62, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x6b, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4b, 0x62, 0x22, 0x56, 0x0a, 0x0b, 0x53, 0x6d, 0x61, 0x70, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x6d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xca, 0x06, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x8e, 0x01, 0x0a, 0x06, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x71, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x1a, 0xa9, 0x04, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x6d, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x4b, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x76, 0x6d, 0x5f, 0x72, 0x73,
	0x73, 0x5f, 0x6b, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x6d, 0x52, 0x73,
	0x73, 0x4b, 0x62, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x73, 0x73, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f,
	0x6b, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x73, 0x73, 0x41, 0x6e, 0x6f,
	0x6e, 0x4b, 0x62, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6b, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x73, 0x73, 0x46, 0x69, 0x6c,
	0x65, 0x4b, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x73, 0x73, 0x5f, 0x73, 0x68, 0x6d, 0x65, 0x6d,
	0x5f, 0x6b, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x73, 0x73, 0x53, 0x68,
	0x6d, 0x65, 0x6d, 0x4b, 0x62, 0x12, 0x1c, 0x0a, 0x0a, 0x76, 0x6d, 0x5f, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6b, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x76, 0x6d, 0x53, 0x77, 0x61,
	0x70, 0x4b, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x5f, 0x6b, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x6d, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x4b, 0x62, 0x12, 0x1a, 0x0a, 0x09, 0x76, 0x6d, 0x5f, 0x68, 0x77, 0x6d, 0x5f,
	0x6b, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x6d, 0x48, 0x77, 0x6d, 0x4b,
	0x62, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x64, 0x6a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x6f, 0x6d, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x41, 0x64, 0x6a, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x72, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x6f,
	0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x18, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x46, 0x6f,
	0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4b, 0x62, 0x12, 0x3c, 0x0a, 0x1b, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x65, 0x61, 0x6b, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x4b, 0x62, 0x22, 0xc4, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x1a, 0x42, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f,
	0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xdb,
	0x07, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x06, 0x76, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x56, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x52, 0x07, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f,
	0x69, 0x72, 0x71, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x49, 0x72, 0x71, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x72, 0x71, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75,
	0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x49, 0x72, 0x71, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x53,
	0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53,
	0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0x58, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x56, 0x0a, 0x0b, 0x56, 0x6d,
	0x73, 0x74, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xed, 0x01, 0x0a, 0x08, 0x43, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x63, 0x65, 0x4e, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x6f, 0x64, 0x65, 0x4e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x64, 0x6c, 0x65, 0x4e, 0x73, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x6f, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x4e, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x72, 0x71, 0x5f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x72,
	0x71, 0x4e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x5f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71,
	0x4e, 0x73, 0x1a, 0x38, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x07,
	0x55, 0x74, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22,
	0x8c, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x07, 0x75, 0x74, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x55, 0x74, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x07, 0x75, 0x74, 0x73, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x68, 0x7a, 0x22, 0x82,
	0x01, 0x0a, 0x07, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x70,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x1a, 0x45, 0x0a, 0x03,
	0x43, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x97, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x4e, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22,
	0x9a, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x83, 0x04, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x13,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x11, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xe1,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x5a, 0x59, 0x47, 0x4f, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4e,
	0x44, 0x42, 0x4f, 0x58, 0x5f, 0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x47, 0x50, 0x55, 0x10, 0x06, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x50, 0x41, 0x50, 0x49, 0x5f,
	0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x50, 0x50, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52,
	0x10, 0x08, 0x22, 0xfb, 0x06, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x12,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x55, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x4b, 0x0a,
	0x22, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd7, 0x03, 0x0a, 0x10, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48,
	0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x52, 0x4f,
	0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x42,
	0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48,
	0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x46, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x46, 0x42, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x56, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x4f, 0x52, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x52,
	0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x4d,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x10, 0x32, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x48, 0x52, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x33,
	0x22, 0xda, 0x03, 0x0a, 0x17, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a, 0x15,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x6f, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xdb, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x55,
	0x54, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x5a, 0x59, 0x47, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x42, 0x4f, 0x58, 0x5f,
	0x48, 0x45, 0x4c, 0x50, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x47, 0x50, 0x55, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x50, 0x41, 0x50, 0x49, 0x5f, 0x50, 0x4c, 0x55, 0x47, 0x49,
	0x4e, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x50, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0x08, 0x22, 0x8b, 0x04,
	0x0a, 0x16, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xef, 0x02, 0x0a, 0x0a, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x48, 0x52, 0x45,
	0x41, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x4f, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x42, 0x47, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x46, 0x47, 0x5f, 0x57, 0x4f,
	0x52, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x46, 0x47, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x08,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x56, 0x49, 0x5a, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x48, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x10, 0x32, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x33, 0x22, 0xd1, 0x03, 0x0a, 0x11,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x22, 0x6f, 0x0a, 0x12, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4e, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x22, 0x53, 0x0a, 0x04, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x03, 0x22,
	0xb0, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x43, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x82, 0x22, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x72, 0x65, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x47, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x79,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x79, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x59, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x19, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53, 0x0a,
	0x12, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x11, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x16, 0x67, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x67, 0x70,
	0x75, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x16,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x48, 0x65, 0x61,
	0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x70, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x57, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x13,
	0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6b,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x06,
	0x67, 0x70, 0x75, 0x4c, 0x6f, 0x67, 0x12, 0x4b, 0x0a, 0x10, 0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x56, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x75, 0x6c, 0x6b, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x66, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x6d,
	0x61, 0x70, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x6d, 0x61, 0x70, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x6d, 0x61, 0x70, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x4b, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65,
	0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x17, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x57, 0x0a, 0x14,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x64,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x5c, 0x0a,
	0x15, 0x64, 0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x14, 0x64, 0x65, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12,
	0x50, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x10, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x49, 0x0a, 0x0d, 0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65,
	0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x66, 0x74, 0x72, 0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x16,
	0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x48,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x17, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3a,
	0x0a, 0x19, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x15, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x13, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x0d,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x51, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x51, 0x5f, 0x4e, 0x45, 0x45,
	0x44, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x16,
	0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x3d, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xbc, 0x03, 0x0a,
	0x0d, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x5d,
	0x0a, 0x1c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xac, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x57, 0x0a,
	0x19, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xad, 0x4d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x16,
	0x69, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x5f, 0x0a, 0x1d, 0x6f, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0xae, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x91, 0x01, 0x0a, 0x24, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1b, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0xaf, 0x4d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x52, 0x20, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x4b, 0x0a, 0x12, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2a, 0x8c, 0x02, 0x0a, 0x0c, 0x42, 0x75, 0x69,
	0x6c, 0x74, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x49,
	0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x21, 0x0a, 0x1d, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x41, 0x52, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x43,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x03,
	0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f, 0x43, 0x4f, 0x41, 0x52,
	0x53, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f,
	0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x54, 0x4f, 0x4e, 0x49, 0x43, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e,
	0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x54, 0x49, 0x4e, 0x5f, 0x43, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x3f, 0x22, 0x04, 0x08, 0x07, 0x10,
	0x07, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x2a, 0x8e, 0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x44, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x44,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x44, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x44, 0x5f,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x44, 0x5f,
	0x43, 0x52, 0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x44, 0x5f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x10, 0x07, 0x2a, 0x9b, 0x01, 0x0a, 0x12, 0x41, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x49, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x49, 0x4f, 0x5f, 0x55, 0x4e,
	0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4f, 0x5f, 0x56,
	0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x4f,
	0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x4f,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x4f, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x4f, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x4f, 0x5f, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x07, 0x2a, 0xbf, 0x06, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x69, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45,
	0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d,
	0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45,
	0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x45, 0x4d, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x45, 0x4d, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x53, 0x57, 0x41, 0x50, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x07, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x10, 0x09,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x0c, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x55, 0x4e, 0x45, 0x56, 0x49,
	0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x4d, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x54, 0x59, 0x10, 0x11, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53, 0x10, 0x13, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x48,
	0x4d, 0x45, 0x4d, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x4c, 0x41, 0x42, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x4d, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x53, 0x4c, 0x41, 0x42, 0x5f, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x53, 0x4c, 0x41, 0x42, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x19, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x4d, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x10, 0x1c, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x56, 0x4d, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x54,
	0x4f, 0x54, 0x41, 0x4c, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x56, 0x4d, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x1e,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x56, 0x4d, 0x41, 0x4c,
	0x4c, 0x4f, 0x43, 0x5f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4d, 0x41, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c,
	0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4d,
	0x41, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x21, 0x2a, 0x9b, 0x1d, 0x0a, 0x0e, 0x56, 0x6d, 0x73,
	0x74, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41,
	0x4e, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4e, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x55, 0x4e, 0x45, 0x56, 0x49, 0x43, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52,
	0x5f, 0x4d, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53,
	0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x4d, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x44, 0x49, 0x52, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0d,
	0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x53, 0x4c,
	0x41, 0x42, 0x5f, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e,
	0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x53, 0x4c,
	0x41, 0x42, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0f, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x50, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53,
	0x10, 0x10, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x11, 0x12, 0x16,
	0x0a, 0x12, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x48, 0x45, 0x41, 0x44, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x4e, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x13, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x42, 0x4f, 0x55, 0x4e,
	0x43, 0x45, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e,
	0x52, 0x5f, 0x56, 0x4d, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x15,
	0x12, 0x26, 0x0a, 0x22, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x56, 0x4d,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x4e, 0x52, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x4f,
	0x4e, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52,
	0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x19,
	0x12, 0x13, 0x0a, 0x0f, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x53, 0x48,
	0x4d, 0x45, 0x4d, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4e, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x54, 0x49, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x54, 0x45,
	0x4e, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x1d,
	0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x47, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x1e, 0x12,
	0x1e, 0x0a, 0x1a, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x1f, 0x12,
	0x21, 0x0a, 0x1d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e,
	0x47, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x10, 0x20, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x41, 0x4e, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x48, 0x55, 0x47, 0x45, 0x50, 0x41, 0x47, 0x45, 0x53, 0x10, 0x21, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x43,
	0x4d, 0x41, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e,
	0x52, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x23, 0x12, 0x1d, 0x0a,
	0x19, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x54, 0x59,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x24, 0x12, 0x28, 0x0a, 0x24,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x54, 0x59, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x47, 0x50, 0x47, 0x49, 0x4e, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x50, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x27, 0x12, 0x17, 0x0a,
	0x13, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x50, 0x47, 0x4f, 0x55, 0x54, 0x43,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x28, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x53, 0x57, 0x50, 0x49, 0x4e, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x50, 0x53, 0x57, 0x50, 0x4f, 0x55, 0x54, 0x10, 0x2a, 0x12, 0x16, 0x0a,
	0x12, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f,
	0x44, 0x4d, 0x41, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x50, 0x47, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x2c,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x5f, 0x4d, 0x4f, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x2d, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x46, 0x52, 0x45, 0x45, 0x10, 0x2e, 0x12,
	0x15, 0x0a, 0x11, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x47, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x30, 0x12,
	0x12, 0x0a, 0x0e, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47,
	0x4d, 0x41, 0x4a, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x52, 0x45, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x4d,
	0x41, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47,
	0x52, 0x45, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x34, 0x12,
	0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x52, 0x45, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x35, 0x12, 0x1d, 0x0a, 0x19,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x5f, 0x4b,
	0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x44, 0x4d, 0x41, 0x10, 0x36, 0x12, 0x20, 0x0a, 0x1c, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x5f, 0x4b, 0x53,
	0x57, 0x41, 0x50, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x37, 0x12, 0x21, 0x0a,
	0x1d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x5f,
	0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x38,
	0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x45,
	0x41, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x4d, 0x41, 0x10, 0x39, 0x12,
	0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x45, 0x41,
	0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x3a, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54,
	0x45, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x56, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x3b, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x47, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x44, 0x4d, 0x41,
	0x10, 0x3c, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53,
	0x43, 0x41, 0x4e, 0x5f, 0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x3d, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x3e, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x50, 0x47, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x4d,
	0x41, 0x10, 0x3f, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x40, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x47, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x56,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x41, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x47, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x42, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x49, 0x4e, 0x4f, 0x44, 0x45, 0x53, 0x54, 0x45, 0x41, 0x4c,
	0x10, 0x43, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x4c, 0x41,
	0x42, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x44, 0x12, 0x1c, 0x0a, 0x18,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x49, 0x4e,
	0x4f, 0x44, 0x45, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x10, 0x45, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x4d,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x5f, 0x4c, 0x4f, 0x57, 0x5f,
	0x57, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x4c,
	0x59, 0x10, 0x46, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4b, 0x53,
	0x57, 0x41, 0x50, 0x44, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x57, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x48, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x4c, 0x59, 0x10, 0x47, 0x12, 0x15, 0x0a,
	0x11, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x4f, 0x55, 0x54, 0x52,
	0x55, 0x4e, 0x10, 0x48, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x49, 0x12, 0x14, 0x0a, 0x10, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x4a, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x4b, 0x12, 0x14, 0x0a, 0x10,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x4c, 0x41, 0x42,
	0x10, 0x4c, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x4d,
	0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x4d,
	0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x4d, 0x49, 0x47,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x4e, 0x12, 0x22, 0x0a, 0x1e, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x4d, 0x49,
	0x47, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x4f, 0x12,
	0x1f, 0x0a, 0x1b, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x50,
	0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x51, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10, 0x52, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4d, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x53,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x43, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x54, 0x12, 0x1e, 0x0a, 0x1a,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x44,
	0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x10, 0x55, 0x12, 0x21, 0x0a, 0x1d,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x56, 0x49, 0x43, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x5f, 0x43, 0x55, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x56, 0x12,
	0x22, 0x0a, 0x1e, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x56, 0x49, 0x43,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45,
	0x44, 0x10, 0x57, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x45, 0x56, 0x49, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x5f, 0x52, 0x45,
	0x53, 0x43, 0x55, 0x45, 0x44, 0x10, 0x58, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x4d, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x55, 0x4e, 0x45, 0x56, 0x49, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x47,
	0x53, 0x5f, 0x4d, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x59, 0x12, 0x24, 0x0a, 0x20, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x56, 0x49, 0x43, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x50, 0x47, 0x53, 0x5f, 0x4d, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x5a, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x45, 0x56,
	0x49, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x45, 0x44, 0x10, 0x5b, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x55, 0x4e, 0x45, 0x56, 0x49, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x47, 0x53, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x5c, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x5a, 0x53, 0x50, 0x41, 0x47, 0x45, 0x53, 0x10,
	0x5d, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x49,
	0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x10, 0x5e, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x10,
	0x5f, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x41, 0x10, 0x60, 0x12, 0x1d, 0x0a, 0x19,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x53, 0x54, 0x41, 0x4c,
	0x4c, 0x5f, 0x4d, 0x4f, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x61, 0x12, 0x1c, 0x0a, 0x18, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x62, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x45, 0x4d,
	0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10,
	0x63, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x45, 0x4d, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x64, 0x12, 0x15, 0x0a, 0x11,
	0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x52, 0x50,
	0x43, 0x10, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52,
	0x5f, 0x49, 0x4e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x66, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x4e, 0x52, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f,
	0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x68, 0x12, 0x25, 0x0a,
	0x21, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x4f,
	0x57, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x69, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e,
	0x52, 0x5f, 0x53, 0x48, 0x4d, 0x45, 0x4d, 0x5f, 0x48, 0x55, 0x47, 0x45, 0x50, 0x41, 0x47, 0x45,
	0x53, 0x10, 0x6a, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52,
	0x5f, 0x53, 0x48, 0x4d, 0x45, 0x4d, 0x5f, 0x50, 0x4d, 0x44, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x6b, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x41,
	0x47, 0x45, 0x53, 0x10, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4e, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41,
	0x4e, 0x4f, 0x4e, 0x10, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4e, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x10, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4e, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x41, 0x4e, 0x4f, 0x4e, 0x10, 0x6f, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x70, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x45, 0x56,
	0x49, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x71, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4d, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4e, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x72, 0x12, 0x13, 0x0a, 0x0f, 0x56,
	0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x4f, 0x4d, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x73,
	0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x4c, 0x41, 0x5a,
	0x59, 0x46, 0x52, 0x45, 0x45, 0x10, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x4d, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x50, 0x47, 0x4c, 0x41, 0x5a, 0x59, 0x46, 0x52, 0x45, 0x45, 0x44, 0x10, 0x75, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x52, 0x45, 0x46, 0x49,
	0x4c, 0x4c, 0x10, 0x76, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x47, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x77, 0x12, 0x18,
	0x0a, 0x14, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x43, 0x41, 0x4e, 0x5f,
	0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x10, 0x78, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4d, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x44, 0x4d, 0x41, 0x10, 0x79, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x4b, 0x49, 0x50,
	0x5f, 0x4d, 0x4f, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x7a, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4d,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x7b, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x47, 0x53, 0x54, 0x45, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x7c, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x45, 0x41,
	0x4c, 0x5f, 0x4b, 0x53, 0x57, 0x41, 0x50, 0x44, 0x10, 0x7d, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x4d,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x52, 0x41, 0x10, 0x7e, 0x12, 0x16,
	0x0a, 0x12, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x52, 0x41,
	0x5f, 0x48, 0x49, 0x54, 0x10, 0x7f, 0x12, 0x1e, 0x0a, 0x19, 0x56, 0x4d, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x80, 0x01, 0x2a, 0xb0, 0x05, 0x0a, 0x1f, 0x43, 0x68, 0x72, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a,
	0x29, 0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26,
	0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x43, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x52, 0x41, 0x57, 0x5f, 0x49, 0x46, 0x5f, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x44, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x43, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x52, 0x41, 0x57, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x3c, 0x0a, 0x38, 0x43,
	0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54,
	0x52, 0x45, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x43, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x09,
	0x12, 0x38, 0x0a, 0x34, 0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x45, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x10, 0x0a, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x43,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x5f, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0b, 0x12, 0x42, 0x0a, 0x3e, 0x43, 0x43, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x55,
	0x4e, 0x54, 0x49, 0x4c, 0x10, 0x0c, 0x12, 0x41, 0x0a, 0x3d, 0x43, 0x43, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x53, 0x4f, 0x4f, 0x4e, 0x10, 0x0d, 0x2a, 0x7d, 0x0a, 0x0e, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x65, 0x52, 0x41, 0x49, 0x4c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x49, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4e, 0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04,
}

var (
	file_protos_perfetto_trace_perfetto_trace_proto_rawDescOnce sync.Once
	file_protos_perfetto_trace_perfetto_trace_proto_rawDescData = file_protos_perfetto_trace_perfetto_trace_proto_rawDesc
)

func file_protos_perfetto_trace_perfetto_trace_proto_rawDescGZIP() []byte {
	file_protos_perfetto_trace_perfetto_trace_proto_rawDescOnce.Do(func() {
		file_protos_perfetto_trace_perfetto_trace_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_perfetto_trace_perfetto_trace_proto_rawDescData)
	})
	return file_protos_perfetto_trace_perfetto_trace_proto_rawDescData
}

var file_protos_perfetto_trace_perfetto_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 68)
var file_protos_perfetto_trace_perfetto_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 541)
var file_protos_perfetto_trace_perfetto_trace_proto_goTypes = []interface{}{
	(BuiltinClock)(0),                                                           // 0: perfetto.protos.BuiltinClock
	(AndroidLogId)(0),                                                           // 1: perfetto.protos.AndroidLogId
	(AndroidLogPriority)(0),                                                     // 2: perfetto.protos.AndroidLogPriority
	(MeminfoCounters)(0),                                                        // 3: perfetto.protos.MeminfoCounters
	(VmstatCounters)(0),                                                         // 4: perfetto.protos.VmstatCounters
	(ChromeCompositorSchedulerAction)(0),                                        // 5: perfetto.protos.ChromeCompositorSchedulerAction
	(ChromeRAILMode)(0),                                                         // 6: perfetto.protos.ChromeRAILMode
	(GpuCounterDescriptor_GpuCounterGroup)(0),                                   // 7: perfetto.protos.GpuCounterDescriptor.GpuCounterGroup
	(GpuCounterDescriptor_MeasureUnit)(0),                                       // 8: perfetto.protos.GpuCounterDescriptor.MeasureUnit
	(ChromeConfig_ClientPriority)(0),                                            // 9: perfetto.protos.ChromeConfig.ClientPriority
	(AndroidPowerConfig_BatteryCounters)(0),                                     // 10: perfetto.protos.AndroidPowerConfig.BatteryCounters
	(ProcessStatsConfig_Quirks)(0),                                              // 11: perfetto.protos.ProcessStatsConfig.Quirks
	(SysStatsConfig_StatCounters)(0),                                            // 12: perfetto.protos.SysStatsConfig.StatCounters
	(TraceConfig_LockdownModeOperation)(0),                                      // 13: perfetto.protos.TraceConfig.LockdownModeOperation
	(TraceConfig_CompressionType)(0),                                            // 14: perfetto.protos.TraceConfig.CompressionType
	(TraceConfig_BufferConfig_FillPolicy)(0),                                    // 15: perfetto.protos.TraceConfig.BufferConfig.FillPolicy
	(TraceConfig_TriggerConfig_TriggerMode)(0),                                  // 16: perfetto.protos.TraceConfig.TriggerConfig.TriggerMode
	(FrameTimelineEvent_JankType)(0),                                            // 17: perfetto.protos.FrameTimelineEvent.JankType
	(FrameTimelineEvent_PresentType)(0),                                         // 18: perfetto.protos.FrameTimelineEvent.PresentType
	(GraphicsFrameEvent_BufferEventType)(0),                                     // 19: perfetto.protos.GraphicsFrameEvent.BufferEventType
	(BackgroundTracingMetadata_TriggerRule_TriggerType)(0),                      // 20: perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType
	(BackgroundTracingMetadata_TriggerRule_NamedRule_EventType)(0),              // 21: perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
	(ChromeTracedValue_NestedType)(0),                                           // 22: perfetto.protos.ChromeTracedValue.NestedType
	(ChromeLegacyJsonTrace_TraceType)(0),                                        // 23: perfetto.protos.ChromeLegacyJsonTrace.TraceType
	(ClockSnapshot_Clock_BuiltinClocks)(0),                                      // 24: perfetto.protos.ClockSnapshot.Clock.BuiltinClocks
	(FieldDescriptorProto_Type)(0),                                              // 25: perfetto.protos.FieldDescriptorProto.Type
	(FieldDescriptorProto_Label)(0),                                             // 26: perfetto.protos.FieldDescriptorProto.Label
	(InodeFileMap_Entry_Type)(0),                                                // 27: perfetto.protos.InodeFileMap.Entry.Type
	(FtraceStats_Phase)(0),                                                      // 28: perfetto.protos.FtraceStats.Phase
	(GpuLog_Severity)(0),                                                        // 29: perfetto.protos.GpuLog.Severity
	(InternedGraphicsContext_Api)(0),                                            // 30: perfetto.protos.InternedGraphicsContext.Api
	(InternedGpuRenderStageSpecification_RenderStageCategory)(0),                // 31: perfetto.protos.InternedGpuRenderStageSpecification.RenderStageCategory
	(VulkanMemoryEvent_Source)(0),                                               // 32: perfetto.protos.VulkanMemoryEvent.Source
	(VulkanMemoryEvent_Operation)(0),                                            // 33: perfetto.protos.VulkanMemoryEvent.Operation
	(VulkanMemoryEvent_AllocationScope)(0),                                      // 34: perfetto.protos.VulkanMemoryEvent.AllocationScope
	(DebugAnnotation_NestedValue_NestedType)(0),                                 // 35: perfetto.protos.DebugAnnotation.NestedValue.NestedType
	(ChromeApplicationStateInfo_ChromeApplicationState)(0),                      // 36: perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState
	(ChromeCompositorSchedulerState_BeginImplFrameDeadlineMode)(0),              // 37: perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
	(ChromeCompositorStateMachine_MajorState_BeginImplFrameState)(0),            // 38: perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState
	(ChromeCompositorStateMachine_MajorState_BeginMainFrameState)(0),            // 39: perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState
	(ChromeCompositorStateMachine_MajorState_LayerTreeFrameSinkState)(0),        // 40: perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
	(ChromeCompositorStateMachine_MajorState_ForcedRedrawOnTimeoutState)(0),     // 41: perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
	(ChromeCompositorStateMachine_MinorState_TreePriority)(0),                   // 42: perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority
	(ChromeCompositorStateMachine_MinorState_ScrollHandlerState)(0),             // 43: perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState
	(BeginFrameArgs_BeginFrameArgsType)(0),                                      // 44: perfetto.protos.BeginFrameArgs.BeginFrameArgsType
	(BeginImplFrameArgs_State)(0),                                               // 45: perfetto.protos.BeginImplFrameArgs.State
	(ChromeFrameReporter_State)(0),                                              // 46: perfetto.protos.ChromeFrameReporter.State
	(ChromeFrameReporter_FrameDropReason)(0),                                    // 47: perfetto.protos.ChromeFrameReporter.FrameDropReason
	(ChromeLatencyInfo_Step)(0),                                                 // 48: perfetto.protos.ChromeLatencyInfo.Step
	(ChromeLatencyInfo_LatencyComponentType)(0),                                 // 49: perfetto.protos.ChromeLatencyInfo.LatencyComponentType
	(ChromeLegacyIpc_MessageClass)(0),                                           // 50: perfetto.protos.ChromeLegacyIpc.MessageClass
	(TrackEvent_Type)(0),                                                        // 51: perfetto.protos.TrackEvent.Type
	(TrackEvent_LegacyEvent_FlowDirection)(0),                                   // 52: perfetto.protos.TrackEvent.LegacyEvent.FlowDirection
	(TrackEvent_LegacyEvent_InstantEventScope)(0),                               // 53: perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope
	(MemoryTrackerSnapshot_LevelOfDetail)(0),                                    // 54: perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail
	(MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry_Units)(0), // 55: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units
	(HeapGraphRoot_Type)(0),                                                     // 56: perfetto.protos.HeapGraphRoot.Type
	(HeapGraphType_Kind)(0),                                                     // 57: perfetto.protos.HeapGraphType.Kind
	(Profiling_CpuMode)(0),                                                      // 58: perfetto.protos.Profiling.CpuMode
	(Profiling_StackUnwindError)(0),                                             // 59: perfetto.protos.Profiling.StackUnwindError
	(PerfSample_SampleSkipReason)(0),                                            // 60: perfetto.protos.PerfSample.SampleSkipReason
	(ProcessDescriptor_ChromeProcessType)(0),                                    // 61: perfetto.protos.ProcessDescriptor.ChromeProcessType
	(ThreadDescriptor_ChromeThreadType)(0),                                      // 62: perfetto.protos.ThreadDescriptor.ChromeThreadType
	(ChromeProcessDescriptor_ProcessType)(0),                                    // 63: perfetto.protos.ChromeProcessDescriptor.ProcessType
	(ChromeThreadDescriptor_ThreadType)(0),                                      // 64: perfetto.protos.ChromeThreadDescriptor.ThreadType
	(CounterDescriptor_BuiltinCounterType)(0),                                   // 65: perfetto.protos.CounterDescriptor.BuiltinCounterType
	(CounterDescriptor_Unit)(0),                                                 // 66: perfetto.protos.CounterDescriptor.Unit
	(TracePacket_SequenceFlags)(0),                                              // 67: perfetto.protos.TracePacket.SequenceFlags
	(*GpuCounterDescriptor)(nil),                                                // 68: perfetto.protos.GpuCounterDescriptor
	(*TrackEventCategory)(nil),                                                  // 69: perfetto.protos.TrackEventCategory
	(*TrackEventDescriptor)(nil),                                                // 70: perfetto.protos.TrackEventDescriptor
	(*DataSourceDescriptor)(nil),                                                // 71: perfetto.protos.DataSourceDescriptor
	(*TracingServiceState)(nil),                                                 // 72: perfetto.protos.TracingServiceState
	(*AndroidLogConfig)(nil),                                                    // 73: perfetto.protos.AndroidLogConfig
	(*AndroidPolledStateConfig)(nil),                                            // 74: perfetto.protos.AndroidPolledStateConfig
	(*PackagesListConfig)(nil),                                                  // 75: perfetto.protos.PackagesListConfig
	(*ChromeConfig)(nil),                                                        // 76: perfetto.protos.ChromeConfig
	(*FtraceConfig)(nil),                                                        // 77: perfetto.protos.FtraceConfig
	(*GpuCounterConfig)(nil),                                                    // 78: perfetto.protos.GpuCounterConfig
	(*VulkanMemoryConfig)(nil),                                                  // 79: perfetto.protos.VulkanMemoryConfig
	(*InodeFileConfig)(nil),                                                     // 80: perfetto.protos.InodeFileConfig
	(*InterceptorConfig)(nil),                                                   // 81: perfetto.protos.InterceptorConfig
	(*AndroidPowerConfig)(nil),                                                  // 82: perfetto.protos.AndroidPowerConfig
	(*ProcessStatsConfig)(nil),                                                  // 83: perfetto.protos.ProcessStatsConfig
	(*HeapprofdConfig)(nil),                                                     // 84: perfetto.protos.HeapprofdConfig
	(*JavaHprofConfig)(nil),                                                     // 85: perfetto.protos.JavaHprofConfig
	(*PerfEventConfig)(nil),                                                     // 86: perfetto.protos.PerfEventConfig
	(*SysStatsConfig)(nil),                                                      // 87: perfetto.protos.SysStatsConfig
	(*TestConfig)(nil),                                                          // 88: perfetto.protos.TestConfig
	(*TrackEventConfig)(nil),                                                    // 89: perfetto.protos.TrackEventConfig
	(*DataSourceConfig)(nil),                                                    // 90: perfetto.protos.DataSourceConfig
	(*TraceConfig)(nil),                                                         // 91: perfetto.protos.TraceConfig
	(*TraceStats)(nil),                                                          // 92: perfetto.protos.TraceStats
	(*AndroidLogPacket)(nil),                                                    // 93: perfetto.protos.AndroidLogPacket
	(*FrameTimelineEvent)(nil),                                                  // 94: perfetto.protos.FrameTimelineEvent
	(*GpuMemTotalEvent)(nil),                                                    // 95: perfetto.protos.GpuMemTotalEvent
	(*GraphicsFrameEvent)(nil),                                                  // 96: perfetto.protos.GraphicsFrameEvent
	(*InitialDisplayState)(nil),                                                 // 97: perfetto.protos.InitialDisplayState
	(*PackagesList)(nil),                                                        // 98: perfetto.protos.PackagesList
	(*ChromeBenchmarkMetadata)(nil),                                             // 99: perfetto.protos.ChromeBenchmarkMetadata
	(*ChromeMetadataPacket)(nil),                                                // 100: perfetto.protos.ChromeMetadataPacket
	(*BackgroundTracingMetadata)(nil),                                           // 101: perfetto.protos.BackgroundTracingMetadata
	(*ChromeTracedValue)(nil),                                                   // 102: perfetto.protos.ChromeTracedValue
	(*ChromeStringTableEntry)(nil),                                              // 103: perfetto.protos.ChromeStringTableEntry
	(*ChromeTraceEvent)(nil),                                                    // 104: perfetto.protos.ChromeTraceEvent
	(*ChromeMetadata)(nil),                                                      // 105: perfetto.protos.ChromeMetadata
	(*ChromeLegacyJsonTrace)(nil),                                               // 106: perfetto.protos.ChromeLegacyJsonTrace
	(*ChromeEventBundle)(nil),                                                   // 107: perfetto.protos.ChromeEventBundle
	(*ClockSnapshot)(nil),                                                       // 108: perfetto.protos.ClockSnapshot
	(*FileDescriptorSet)(nil),                                                   // 109: perfetto.protos.FileDescriptorSet
	(*FileDescriptorProto)(nil),                                                 // 110: perfetto.protos.FileDescriptorProto
	(*DescriptorProto)(nil),                                                     // 111: perfetto.protos.DescriptorProto
	(*FieldDescriptorProto)(nil),                                                // 112: perfetto.protos.FieldDescriptorProto
	(*OneofDescriptorProto)(nil),                                                // 113: perfetto.protos.OneofDescriptorProto
	(*EnumDescriptorProto)(nil),                                                 // 114: perfetto.protos.EnumDescriptorProto
	(*EnumValueDescriptorProto)(nil),                                            // 115: perfetto.protos.EnumValueDescriptorProto
	(*OneofOptions)(nil),                                                        // 116: perfetto.protos.OneofOptions
	(*ExtensionDescriptor)(nil),                                                 // 117: perfetto.protos.ExtensionDescriptor
	(*InodeFileMap)(nil),                                                        // 118: perfetto.protos.InodeFileMap
	(*BinderTransactionFtraceEvent)(nil),                                        // 119: perfetto.protos.BinderTransactionFtraceEvent
	(*BinderTransactionReceivedFtraceEvent)(nil),                                // 120: perfetto.protos.BinderTransactionReceivedFtraceEvent
	(*BinderSetPriorityFtraceEvent)(nil),                                        // 121: perfetto.protos.BinderSetPriorityFtraceEvent
	(*BinderLockFtraceEvent)(nil),                                               // 122: perfetto.protos.BinderLockFtraceEvent
	(*BinderLockedFtraceEvent)(nil),                                             // 123: perfetto.protos.BinderLockedFtraceEvent
	(*BinderUnlockFtraceEvent)(nil),                                             // 124: perfetto.protos.BinderUnlockFtraceEvent
	(*BinderTransactionAllocBufFtraceEvent)(nil),                                // 125: perfetto.protos.BinderTransactionAllocBufFtraceEvent
	(*BlockRqIssueFtraceEvent)(nil),                                             // 126: perfetto.protos.BlockRqIssueFtraceEvent
	(*BlockBioBackmergeFtraceEvent)(nil),                                        // 127: perfetto.protos.BlockBioBackmergeFtraceEvent
	(*BlockBioBounceFtraceEvent)(nil),                                           // 128: perfetto.protos.BlockBioBounceFtraceEvent
	(*BlockBioCompleteFtraceEvent)(nil),                                         // 129: perfetto.protos.BlockBioCompleteFtraceEvent
	(*BlockBioFrontmergeFtraceEvent)(nil),                                       // 130: perfetto.protos.BlockBioFrontmergeFtraceEvent
	(*BlockBioQueueFtraceEvent)(nil),                                            // 131: perfetto.protos.BlockBioQueueFtraceEvent
	(*BlockBioRemapFtraceEvent)(nil),                                            // 132: perfetto.protos.BlockBioRemapFtraceEvent
	(*BlockDirtyBufferFtraceEvent)(nil),                                         // 133: perfetto.protos.BlockDirtyBufferFtraceEvent
	(*BlockGetrqFtraceEvent)(nil),                                               // 134: perfetto.protos.BlockGetrqFtraceEvent
	(*BlockPlugFtraceEvent)(nil),                                                // 135: perfetto.protos.BlockPlugFtraceEvent
	(*BlockRqAbortFtraceEvent)(nil),                                             // 136: perfetto.protos.BlockRqAbortFtraceEvent
	(*BlockRqCompleteFtraceEvent)(nil),                                          // 137: perfetto.protos.BlockRqCompleteFtraceEvent
	(*BlockRqInsertFtraceEvent)(nil),                                            // 138: perfetto.protos.BlockRqInsertFtraceEvent
	(*BlockRqRemapFtraceEvent)(nil),                                             // 139: perfetto.protos.BlockRqRemapFtraceEvent
	(*BlockRqRequeueFtraceEvent)(nil),                                           // 140: perfetto.protos.BlockRqRequeueFtraceEvent
	(*BlockSleeprqFtraceEvent)(nil),                                             // 141: perfetto.protos.BlockSleeprqFtraceEvent
	(*BlockSplitFtraceEvent)(nil),                                               // 142: perfetto.protos.BlockSplitFtraceEvent
	(*BlockTouchBufferFtraceEvent)(nil),                                         // 143: perfetto.protos.BlockTouchBufferFtraceEvent
	(*BlockUnplugFtraceEvent)(nil),                                              // 144: perfetto.protos.BlockUnplugFtraceEvent
	(*CgroupAttachTaskFtraceEvent)(nil),                                         // 145: perfetto.protos.CgroupAttachTaskFtraceEvent
	(*CgroupMkdirFtraceEvent)(nil),                                              // 146: perfetto.protos.CgroupMkdirFtraceEvent
	(*CgroupRemountFtraceEvent)(nil),                                            // 147: perfetto.protos.CgroupRemountFtraceEvent
	(*CgroupRmdirFtraceEvent)(nil),                                              // 148: perfetto.protos.CgroupRmdirFtraceEvent
	(*CgroupTransferTasksFtraceEvent)(nil),                                      // 149: perfetto.protos.CgroupTransferTasksFtraceEvent
	(*CgroupDestroyRootFtraceEvent)(nil),                                        // 150: perfetto.protos.CgroupDestroyRootFtraceEvent
	(*CgroupReleaseFtraceEvent)(nil),                                            // 151: perfetto.protos.CgroupReleaseFtraceEvent
	(*CgroupRenameFtraceEvent)(nil),                                             // 152: perfetto.protos.CgroupRenameFtraceEvent
	(*CgroupSetupRootFtraceEvent)(nil),                                          // 153: perfetto.protos.CgroupSetupRootFtraceEvent
	(*ClkEnableFtraceEvent)(nil),                                                // 154: perfetto.protos.ClkEnableFtraceEvent
	(*ClkDisableFtraceEvent)(nil),                                               // 155: perfetto.protos.ClkDisableFtraceEvent
	(*ClkSetRateFtraceEvent)(nil),                                               // 156: perfetto.protos.ClkSetRateFtraceEvent
	(*MmCompactionBeginFtraceEvent)(nil),                                        // 157: perfetto.protos.MmCompactionBeginFtraceEvent
	(*MmCompactionDeferCompactionFtraceEvent)(nil),                              // 158: perfetto.protos.MmCompactionDeferCompactionFtraceEvent
	(*MmCompactionDeferredFtraceEvent)(nil),                                     // 159: perfetto.protos.MmCompactionDeferredFtraceEvent
	(*MmCompactionDeferResetFtraceEvent)(nil),                                   // 160: perfetto.protos.MmCompactionDeferResetFtraceEvent
	(*MmCompactionEndFtraceEvent)(nil),                                          // 161: perfetto.protos.MmCompactionEndFtraceEvent
	(*MmCompactionFinishedFtraceEvent)(nil),                                     // 162: perfetto.protos.MmCompactionFinishedFtraceEvent
	(*MmCompactionIsolateFreepagesFtraceEvent)(nil),                             // 163: perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent
	(*MmCompactionIsolateMigratepagesFtraceEvent)(nil),                          // 164: perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent
	(*MmCompactionKcompactdSleepFtraceEvent)(nil),                               // 165: perfetto.protos.MmCompactionKcompactdSleepFtraceEvent
	(*MmCompactionKcompactdWakeFtraceEvent)(nil),                                // 166: perfetto.protos.MmCompactionKcompactdWakeFtraceEvent
	(*MmCompactionMigratepagesFtraceEvent)(nil),                                 // 167: perfetto.protos.MmCompactionMigratepagesFtraceEvent
	(*MmCompactionSuitableFtraceEvent)(nil),                                     // 168: perfetto.protos.MmCompactionSuitableFtraceEvent
	(*MmCompactionTryToCompactPagesFtraceEvent)(nil),                            // 169: perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent
	(*MmCompactionWakeupKcompactdFtraceEvent)(nil),                              // 170: perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent
	(*CpuhpExitFtraceEvent)(nil),                                                // 171: perfetto.protos.CpuhpExitFtraceEvent
	(*CpuhpMultiEnterFtraceEvent)(nil),                                          // 172: perfetto.protos.CpuhpMultiEnterFtraceEvent
	(*CpuhpEnterFtraceEvent)(nil),                                               // 173: perfetto.protos.CpuhpEnterFtraceEvent
	(*CpuhpLatencyFtraceEvent)(nil),                                             // 174: perfetto.protos.CpuhpLatencyFtraceEvent
	(*DpuTracingMarkWriteFtraceEvent)(nil),                                      // 175: perfetto.protos.DpuTracingMarkWriteFtraceEvent
	(*Ext4DaWriteBeginFtraceEvent)(nil),                                         // 176: perfetto.protos.Ext4DaWriteBeginFtraceEvent
	(*Ext4DaWriteEndFtraceEvent)(nil),                                           // 177: perfetto.protos.Ext4DaWriteEndFtraceEvent
	(*Ext4SyncFileEnterFtraceEvent)(nil),                                        // 178: perfetto.protos.Ext4SyncFileEnterFtraceEvent
	(*Ext4SyncFileExitFtraceEvent)(nil),                                         // 179: perfetto.protos.Ext4SyncFileExitFtraceEvent
	(*Ext4AllocDaBlocksFtraceEvent)(nil),                                        // 180: perfetto.protos.Ext4AllocDaBlocksFtraceEvent
	(*Ext4AllocateBlocksFtraceEvent)(nil),                                       // 181: perfetto.protos.Ext4AllocateBlocksFtraceEvent
	(*Ext4AllocateInodeFtraceEvent)(nil),                                        // 182: perfetto.protos.Ext4AllocateInodeFtraceEvent
	(*Ext4BeginOrderedTruncateFtraceEvent)(nil),                                 // 183: perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent
	(*Ext4CollapseRangeFtraceEvent)(nil),                                        // 184: perfetto.protos.Ext4CollapseRangeFtraceEvent
	(*Ext4DaReleaseSpaceFtraceEvent)(nil),                                       // 185: perfetto.protos.Ext4DaReleaseSpaceFtraceEvent
	(*Ext4DaReserveSpaceFtraceEvent)(nil),                                       // 186: perfetto.protos.Ext4DaReserveSpaceFtraceEvent
	(*Ext4DaUpdateReserveSpaceFtraceEvent)(nil),                                 // 187: perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent
	(*Ext4DaWritePagesFtraceEvent)(nil),                                         // 188: perfetto.protos.Ext4DaWritePagesFtraceEvent
	(*Ext4DaWritePagesExtentFtraceEvent)(nil),                                   // 189: perfetto.protos.Ext4DaWritePagesExtentFtraceEvent
	(*Ext4DirectIOEnterFtraceEvent)(nil),                                        // 190: perfetto.protos.Ext4DirectIOEnterFtraceEvent
	(*Ext4DirectIOExitFtraceEvent)(nil),                                         // 191: perfetto.protos.Ext4DirectIOExitFtraceEvent
	(*Ext4DiscardBlocksFtraceEvent)(nil),                                        // 192: perfetto.protos.Ext4DiscardBlocksFtraceEvent
	(*Ext4DiscardPreallocationsFtraceEvent)(nil),                                // 193: perfetto.protos.Ext4DiscardPreallocationsFtraceEvent
	(*Ext4DropInodeFtraceEvent)(nil),                                            // 194: perfetto.protos.Ext4DropInodeFtraceEvent
	(*Ext4EsCacheExtentFtraceEvent)(nil),                                        // 195: perfetto.protos.Ext4EsCacheExtentFtraceEvent
	(*Ext4EsFindDelayedExtentRangeEnterFtraceEvent)(nil),                        // 196: perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent
	(*Ext4EsFindDelayedExtentRangeExitFtraceEvent)(nil),                         // 197: perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent
	(*Ext4EsInsertExtentFtraceEvent)(nil),                                       // 198: perfetto.protos.Ext4EsInsertExtentFtraceEvent
	(*Ext4EsLookupExtentEnterFtraceEvent)(nil),                                  // 199: perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent
	(*Ext4EsLookupExtentExitFtraceEvent)(nil),                                   // 200: perfetto.protos.Ext4EsLookupExtentExitFtraceEvent
	(*Ext4EsRemoveExtentFtraceEvent)(nil),                                       // 201: perfetto.protos.Ext4EsRemoveExtentFtraceEvent
	(*Ext4EsShrinkFtraceEvent)(nil),                                             // 202: perfetto.protos.Ext4EsShrinkFtraceEvent
	(*Ext4EsShrinkCountFtraceEvent)(nil),                                        // 203: perfetto.protos.Ext4EsShrinkCountFtraceEvent
	(*Ext4EsShrinkScanEnterFtraceEvent)(nil),                                    // 204: perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent
	(*Ext4EsShrinkScanExitFtraceEvent)(nil),                                     // 205: perfetto.protos.Ext4EsShrinkScanExitFtraceEvent
	(*Ext4EvictInodeFtraceEvent)(nil),                                           // 206: perfetto.protos.Ext4EvictInodeFtraceEvent
	(*Ext4ExtConvertToInitializedEnterFtraceEvent)(nil),                         // 207: perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent
	(*Ext4ExtConvertToInitializedFastpathFtraceEvent)(nil),                      // 208: perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent
	(*Ext4ExtHandleUnwrittenExtentsFtraceEvent)(nil),                            // 209: perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent
	(*Ext4ExtInCacheFtraceEvent)(nil),                                           // 210: perfetto.protos.Ext4ExtInCacheFtraceEvent
	(*Ext4ExtLoadExtentFtraceEvent)(nil),                                        // 211: perfetto.protos.Ext4ExtLoadExtentFtraceEvent
	(*Ext4ExtMapBlocksEnterFtraceEvent)(nil),                                    // 212: perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent
	(*Ext4ExtMapBlocksExitFtraceEvent)(nil),                                     // 213: perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent
	(*Ext4ExtPutInCacheFtraceEvent)(nil),                                        // 214: perfetto.protos.Ext4ExtPutInCacheFtraceEvent
	(*Ext4ExtRemoveSpaceFtraceEvent)(nil),                                       // 215: perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent
	(*Ext4ExtRemoveSpaceDoneFtraceEvent)(nil),                                   // 216: perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent
	(*Ext4ExtRmIdxFtraceEvent)(nil),                                             // 217: perfetto.protos.Ext4ExtRmIdxFtraceEvent
	(*Ext4ExtRmLeafFtraceEvent)(nil),                                            // 218: perfetto.protos.Ext4ExtRmLeafFtraceEvent
	(*Ext4ExtShowExtentFtraceEvent)(nil),                                        // 219: perfetto.protos.Ext4ExtShowExtentFtraceEvent
	(*Ext4FallocateEnterFtraceEvent)(nil),                                       // 220: perfetto.protos.Ext4FallocateEnterFtraceEvent
	(*Ext4FallocateExitFtraceEvent)(nil),                                        // 221: perfetto.protos.Ext4FallocateExitFtraceEvent
	(*Ext4FindDelallocRangeFtraceEvent)(nil),                                    // 222: perfetto.protos.Ext4FindDelallocRangeFtraceEvent
	(*Ext4ForgetFtraceEvent)(nil),                                               // 223: perfetto.protos.Ext4ForgetFtraceEvent
	(*Ext4FreeBlocksFtraceEvent)(nil),                                           // 224: perfetto.protos.Ext4FreeBlocksFtraceEvent
	(*Ext4FreeInodeFtraceEvent)(nil),                                            // 225: perfetto.protos.Ext4FreeInodeFtraceEvent
	(*Ext4GetImpliedClusterAllocExitFtraceEvent)(nil),                           // 226: perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent
	(*Ext4GetReservedClusterAllocFtraceEvent)(nil),                              // 227: perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent
	(*Ext4IndMapBlocksEnterFtraceEvent)(nil),                                    // 228: perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent
	(*Ext4IndMapBlocksExitFtraceEvent)(nil),                                     // 229: perfetto.protos.Ext4IndMapBlocksExitFtraceEvent
	(*Ext4InsertRangeFtraceEvent)(nil),                                          // 230: perfetto.protos.Ext4InsertRangeFtraceEvent
	(*Ext4InvalidatepageFtraceEvent)(nil),                                       // 231: perfetto.protos.Ext4InvalidatepageFtraceEvent
	(*Ext4JournalStartFtraceEvent)(nil),                                         // 232: perfetto.protos.Ext4JournalStartFtraceEvent
	(*Ext4JournalStartReservedFtraceEvent)(nil),                                 // 233: perfetto.protos.Ext4JournalStartReservedFtraceEvent
	(*Ext4JournalledInvalidatepageFtraceEvent)(nil),                             // 234: perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent
	(*Ext4JournalledWriteEndFtraceEvent)(nil),                                   // 235: perfetto.protos.Ext4JournalledWriteEndFtraceEvent
	(*Ext4LoadInodeFtraceEvent)(nil),                                            // 236: perfetto.protos.Ext4LoadInodeFtraceEvent
	(*Ext4LoadInodeBitmapFtraceEvent)(nil),                                      // 237: perfetto.protos.Ext4LoadInodeBitmapFtraceEvent
	(*Ext4MarkInodeDirtyFtraceEvent)(nil),                                       // 238: perfetto.protos.Ext4MarkInodeDirtyFtraceEvent
	(*Ext4MbBitmapLoadFtraceEvent)(nil),                                         // 239: perfetto.protos.Ext4MbBitmapLoadFtraceEvent
	(*Ext4MbBuddyBitmapLoadFtraceEvent)(nil),                                    // 240: perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent
	(*Ext4MbDiscardPreallocationsFtraceEvent)(nil),                              // 241: perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent
	(*Ext4MbNewGroupPaFtraceEvent)(nil),                                         // 242: perfetto.protos.Ext4MbNewGroupPaFtraceEvent
	(*Ext4MbNewInodePaFtraceEvent)(nil),                                         // 243: perfetto.protos.Ext4MbNewInodePaFtraceEvent
	(*Ext4MbReleaseGroupPaFtraceEvent)(nil),                                     // 244: perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent
	(*Ext4MbReleaseInodePaFtraceEvent)(nil),                                     // 245: perfetto.protos.Ext4MbReleaseInodePaFtraceEvent
	(*Ext4MballocAllocFtraceEvent)(nil),                                         // 246: perfetto.protos.Ext4MballocAllocFtraceEvent
	(*Ext4MballocDiscardFtraceEvent)(nil),                                       // 247: perfetto.protos.Ext4MballocDiscardFtraceEvent
	(*Ext4MballocFreeFtraceEvent)(nil),                                          // 248: perfetto.protos.Ext4MballocFreeFtraceEvent
	(*Ext4MballocPreallocFtraceEvent)(nil),                                      // 249: perfetto.protos.Ext4MballocPreallocFtraceEvent
	(*Ext4OtherInodeUpdateTimeFtraceEvent)(nil),                                 // 250: perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent
	(*Ext4PunchHoleFtraceEvent)(nil),                                            // 251: perfetto.protos.Ext4PunchHoleFtraceEvent
	(*Ext4ReadBlockBitmapLoadFtraceEvent)(nil),                                  // 252: perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent
	(*Ext4ReadpageFtraceEvent)(nil),                                             // 253: perfetto.protos.Ext4ReadpageFtraceEvent
	(*Ext4ReleasepageFtraceEvent)(nil),                                          // 254: perfetto.protos.Ext4ReleasepageFtraceEvent
	(*Ext4RemoveBlocksFtraceEvent)(nil),                                         // 255: perfetto.protos.Ext4RemoveBlocksFtraceEvent
	(*Ext4RequestBlocksFtraceEvent)(nil),                                        // 256: perfetto.protos.Ext4RequestBlocksFtraceEvent
	(*Ext4RequestInodeFtraceEvent)(nil),                                         // 257: perfetto.protos.Ext4RequestInodeFtraceEvent
	(*Ext4SyncFsFtraceEvent)(nil),                                               // 258: perfetto.protos.Ext4SyncFsFtraceEvent
	(*Ext4TrimAllFreeFtraceEvent)(nil),                                          // 259: perfetto.protos.Ext4TrimAllFreeFtraceEvent
	(*Ext4TrimExtentFtraceEvent)(nil),                                           // 260: perfetto.protos.Ext4TrimExtentFtraceEvent
	(*Ext4TruncateEnterFtraceEvent)(nil),                                        // 261: perfetto.protos.Ext4TruncateEnterFtraceEvent
	(*Ext4TruncateExitFtraceEvent)(nil),                                         // 262: perfetto.protos.Ext4TruncateExitFtraceEvent
	(*Ext4UnlinkEnterFtraceEvent)(nil),                                          // 263: perfetto.protos.Ext4UnlinkEnterFtraceEvent
	(*Ext4UnlinkExitFtraceEvent)(nil),                                           // 264: perfetto.protos.Ext4UnlinkExitFtraceEvent
	(*Ext4WriteBeginFtraceEvent)(nil),                                           // 265: perfetto.protos.Ext4WriteBeginFtraceEvent
	(*Ext4WriteEndFtraceEvent)(nil),                                             // 266: perfetto.protos.Ext4WriteEndFtraceEvent
	(*Ext4WritepageFtraceEvent)(nil),                                            // 267: perfetto.protos.Ext4WritepageFtraceEvent
	(*Ext4WritepagesFtraceEvent)(nil),                                           // 268: perfetto.protos.Ext4WritepagesFtraceEvent
	(*Ext4WritepagesResultFtraceEvent)(nil),                                     // 269: perfetto.protos.Ext4WritepagesResultFtraceEvent
	(*Ext4ZeroRangeFtraceEvent)(nil),                                            // 270: perfetto.protos.Ext4ZeroRangeFtraceEvent
	(*F2FsDoSubmitBioFtraceEvent)(nil),                                          // 271: perfetto.protos.F2fsDoSubmitBioFtraceEvent
	(*F2FsEvictInodeFtraceEvent)(nil),                                           // 272: perfetto.protos.F2fsEvictInodeFtraceEvent
	(*F2FsFallocateFtraceEvent)(nil),                                            // 273: perfetto.protos.F2fsFallocateFtraceEvent
	(*F2FsGetDataBlockFtraceEvent)(nil),                                         // 274: perfetto.protos.F2fsGetDataBlockFtraceEvent
	(*F2FsGetVictimFtraceEvent)(nil),                                            // 275: perfetto.protos.F2fsGetVictimFtraceEvent
	(*F2FsIgetFtraceEvent)(nil),                                                 // 276: perfetto.protos.F2fsIgetFtraceEvent
	(*F2FsIgetExitFtraceEvent)(nil),                                             // 277: perfetto.protos.F2fsIgetExitFtraceEvent
	(*F2FsNewInodeFtraceEvent)(nil),                                             // 278: perfetto.protos.F2fsNewInodeFtraceEvent
	(*F2FsReadpageFtraceEvent)(nil),                                             // 279: perfetto.protos.F2fsReadpageFtraceEvent
	(*F2FsReserveNewBlockFtraceEvent)(nil),                                      // 280: perfetto.protos.F2fsReserveNewBlockFtraceEvent
	(*F2FsSetPageDirtyFtraceEvent)(nil),                                         // 281: perfetto.protos.F2fsSetPageDirtyFtraceEvent
	(*F2FsSubmitWritePageFtraceEvent)(nil),                                      // 282: perfetto.protos.F2fsSubmitWritePageFtraceEvent
	(*F2FsSyncFileEnterFtraceEvent)(nil),                                        // 283: perfetto.protos.F2fsSyncFileEnterFtraceEvent
	(*F2FsSyncFileExitFtraceEvent)(nil),                                         // 284: perfetto.protos.F2fsSyncFileExitFtraceEvent
	(*F2FsSyncFsFtraceEvent)(nil),                                               // 285: perfetto.protos.F2fsSyncFsFtraceEvent
	(*F2FsTruncateFtraceEvent)(nil),                                             // 286: perfetto.protos.F2fsTruncateFtraceEvent
	(*F2FsTruncateBlocksEnterFtraceEvent)(nil),                                  // 287: perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent
	(*F2FsTruncateBlocksExitFtraceEvent)(nil),                                   // 288: perfetto.protos.F2fsTruncateBlocksExitFtraceEvent
	(*F2FsTruncateDataBlocksRangeFtraceEvent)(nil),                              // 289: perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent
	(*F2FsTruncateInodeBlocksEnterFtraceEvent)(nil),                             // 290: perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent
	(*F2FsTruncateInodeBlocksExitFtraceEvent)(nil),                              // 291: perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent
	(*F2FsTruncateNodeFtraceEvent)(nil),                                         // 292: perfetto.protos.F2fsTruncateNodeFtraceEvent
	(*F2FsTruncateNodesEnterFtraceEvent)(nil),                                   // 293: perfetto.protos.F2fsTruncateNodesEnterFtraceEvent
	(*F2FsTruncateNodesExitFtraceEvent)(nil),                                    // 294: perfetto.protos.F2fsTruncateNodesExitFtraceEvent
	(*F2FsTruncatePartialNodesFtraceEvent)(nil),                                 // 295: perfetto.protos.F2fsTruncatePartialNodesFtraceEvent
	(*F2FsUnlinkEnterFtraceEvent)(nil),                                          // 296: perfetto.protos.F2fsUnlinkEnterFtraceEvent
	(*F2FsUnlinkExitFtraceEvent)(nil),                                           // 297: perfetto.protos.F2fsUnlinkExitFtraceEvent
	(*F2FsVmPageMkwriteFtraceEvent)(nil),                                        // 298: perfetto.protos.F2fsVmPageMkwriteFtraceEvent
	(*F2FsWriteBeginFtraceEvent)(nil),                                           // 299: perfetto.protos.F2fsWriteBeginFtraceEvent
	(*F2FsWriteCheckpointFtraceEvent)(nil),                                      // 300: perfetto.protos.F2fsWriteCheckpointFtraceEvent
	(*F2FsWriteEndFtraceEvent)(nil),                                             // 301: perfetto.protos.F2fsWriteEndFtraceEvent
	(*FastrpcDmaStatFtraceEvent)(nil),                                           // 302: perfetto.protos.FastrpcDmaStatFtraceEvent
	(*FenceInitFtraceEvent)(nil),                                                // 303: perfetto.protos.FenceInitFtraceEvent
	(*FenceDestroyFtraceEvent)(nil),                                             // 304: perfetto.protos.FenceDestroyFtraceEvent
	(*FenceEnableSignalFtraceEvent)(nil),                                        // 305: perfetto.protos.FenceEnableSignalFtraceEvent
	(*FenceSignaledFtraceEvent)(nil),                                            // 306: perfetto.protos.FenceSignaledFtraceEvent
	(*MmFilemapAddToPageCacheFtraceEvent)(nil),                                  // 307: perfetto.protos.MmFilemapAddToPageCacheFtraceEvent
	(*MmFilemapDeleteFromPageCacheFtraceEvent)(nil),                             // 308: perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent
	(*PrintFtraceEvent)(nil),                                                    // 309: perfetto.protos.PrintFtraceEvent
	(*G2DTracingMarkWriteFtraceEvent)(nil),                                      // 310: perfetto.protos.G2dTracingMarkWriteFtraceEvent
	(*GenericFtraceEvent)(nil),                                                  // 311: perfetto.protos.GenericFtraceEvent
	(*GpuMemTotalFtraceEvent)(nil),                                              // 312: perfetto.protos.GpuMemTotalFtraceEvent
	(*I2CReadFtraceEvent)(nil),                                                  // 313: perfetto.protos.I2cReadFtraceEvent
	(*I2CWriteFtraceEvent)(nil),                                                 // 314: perfetto.protos.I2cWriteFtraceEvent
	(*I2CResultFtraceEvent)(nil),                                                // 315: perfetto.protos.I2cResultFtraceEvent
	(*I2CReplyFtraceEvent)(nil),                                                 // 316: perfetto.protos.I2cReplyFtraceEvent
	(*SmbusReadFtraceEvent)(nil),                                                // 317: perfetto.protos.SmbusReadFtraceEvent
	(*SmbusWriteFtraceEvent)(nil),                                               // 318: perfetto.protos.SmbusWriteFtraceEvent
	(*SmbusResultFtraceEvent)(nil),                                              // 319: perfetto.protos.SmbusResultFtraceEvent
	(*SmbusReplyFtraceEvent)(nil),                                               // 320: perfetto.protos.SmbusReplyFtraceEvent
	(*IonStatFtraceEvent)(nil),                                                  // 321: perfetto.protos.IonStatFtraceEvent
	(*IpiEntryFtraceEvent)(nil),                                                 // 322: perfetto.protos.IpiEntryFtraceEvent
	(*IpiExitFtraceEvent)(nil),                                                  // 323: perfetto.protos.IpiExitFtraceEvent
	(*IpiRaiseFtraceEvent)(nil),                                                 // 324: perfetto.protos.IpiRaiseFtraceEvent
	(*SoftirqEntryFtraceEvent)(nil),                                             // 325: perfetto.protos.SoftirqEntryFtraceEvent
	(*SoftirqExitFtraceEvent)(nil),                                              // 326: perfetto.protos.SoftirqExitFtraceEvent
	(*SoftirqRaiseFtraceEvent)(nil),                                             // 327: perfetto.protos.SoftirqRaiseFtraceEvent
	(*IrqHandlerEntryFtraceEvent)(nil),                                          // 328: perfetto.protos.IrqHandlerEntryFtraceEvent
	(*IrqHandlerExitFtraceEvent)(nil),                                           // 329: perfetto.protos.IrqHandlerExitFtraceEvent
	(*AllocPagesIommuEndFtraceEvent)(nil),                                       // 330: perfetto.protos.AllocPagesIommuEndFtraceEvent
	(*AllocPagesIommuFailFtraceEvent)(nil),                                      // 331: perfetto.protos.AllocPagesIommuFailFtraceEvent
	(*AllocPagesIommuStartFtraceEvent)(nil),                                     // 332: perfetto.protos.AllocPagesIommuStartFtraceEvent
	(*AllocPagesSysEndFtraceEvent)(nil),                                         // 333: perfetto.protos.AllocPagesSysEndFtraceEvent
	(*AllocPagesSysFailFtraceEvent)(nil),                                        // 334: perfetto.protos.AllocPagesSysFailFtraceEvent
	(*AllocPagesSysStartFtraceEvent)(nil),                                       // 335: perfetto.protos.AllocPagesSysStartFtraceEvent
	(*DmaAllocContiguousRetryFtraceEvent)(nil),                                  // 336: perfetto.protos.DmaAllocContiguousRetryFtraceEvent
	(*IommuMapRangeFtraceEvent)(nil),                                            // 337: perfetto.protos.IommuMapRangeFtraceEvent
	(*IommuSecPtblMapRangeEndFtraceEvent)(nil),                                  // 338: perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent
	(*IommuSecPtblMapRangeStartFtraceEvent)(nil),                                // 339: perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent
	(*IonAllocBufferEndFtraceEvent)(nil),                                        // 340: perfetto.protos.IonAllocBufferEndFtraceEvent
	(*IonAllocBufferFailFtraceEvent)(nil),                                       // 341: perfetto.protos.IonAllocBufferFailFtraceEvent
	(*IonAllocBufferFallbackFtraceEvent)(nil),                                   // 342: perfetto.protos.IonAllocBufferFallbackFtraceEvent
	(*IonAllocBufferStartFtraceEvent)(nil),                                      // 343: perfetto.protos.IonAllocBufferStartFtraceEvent
	(*IonCpAllocRetryFtraceEvent)(nil),                                          // 344: perfetto.protos.IonCpAllocRetryFtraceEvent
	(*IonCpSecureBufferEndFtraceEvent)(nil),                                     // 345: perfetto.protos.IonCpSecureBufferEndFtraceEvent
	(*IonCpSecureBufferStartFtraceEvent)(nil),                                   // 346: perfetto.protos.IonCpSecureBufferStartFtraceEvent
	(*IonPrefetchingFtraceEvent)(nil),                                           // 347: perfetto.protos.IonPrefetchingFtraceEvent
	(*IonSecureCmaAddToPoolEndFtraceEvent)(nil),                                 // 348: perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent
	(*IonSecureCmaAddToPoolStartFtraceEvent)(nil),                               // 349: perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent
	(*IonSecureCmaAllocateEndFtraceEvent)(nil),                                  // 350: perfetto.protos.IonSecureCmaAllocateEndFtraceEvent
	(*IonSecureCmaAllocateStartFtraceEvent)(nil),                                // 351: perfetto.protos.IonSecureCmaAllocateStartFtraceEvent
	(*IonSecureCmaShrinkPoolEndFtraceEvent)(nil),                                // 352: perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent
	(*IonSecureCmaShrinkPoolStartFtraceEvent)(nil),                              // 353: perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent
	(*KfreeFtraceEvent)(nil),                                                    // 354: perfetto.protos.KfreeFtraceEvent
	(*KmallocFtraceEvent)(nil),                                                  // 355: perfetto.protos.KmallocFtraceEvent
	(*KmallocNodeFtraceEvent)(nil),                                              // 356: perfetto.protos.KmallocNodeFtraceEvent
	(*KmemCacheAllocFtraceEvent)(nil),                                           // 357: perfetto.protos.KmemCacheAllocFtraceEvent
	(*KmemCacheAllocNodeFtraceEvent)(nil),                                       // 358: perfetto.protos.KmemCacheAllocNodeFtraceEvent
	(*KmemCacheFreeFtraceEvent)(nil),                                            // 359: perfetto.protos.KmemCacheFreeFtraceEvent
	(*MigratePagesEndFtraceEvent)(nil),                                          // 360: perfetto.protos.MigratePagesEndFtraceEvent
	(*MigratePagesStartFtraceEvent)(nil),                                        // 361: perfetto.protos.MigratePagesStartFtraceEvent
	(*MigrateRetryFtraceEvent)(nil),                                             // 362: perfetto.protos.MigrateRetryFtraceEvent
	(*MmPageAllocFtraceEvent)(nil),                                              // 363: perfetto.protos.MmPageAllocFtraceEvent
	(*MmPageAllocExtfragFtraceEvent)(nil),                                       // 364: perfetto.protos.MmPageAllocExtfragFtraceEvent
	(*MmPageAllocZoneLockedFtraceEvent)(nil),                                    // 365: perfetto.protos.MmPageAllocZoneLockedFtraceEvent
	(*MmPageFreeFtraceEvent)(nil),                                               // 366: perfetto.protos.MmPageFreeFtraceEvent
	(*MmPageFreeBatchedFtraceEvent)(nil),                                        // 367: perfetto.protos.MmPageFreeBatchedFtraceEvent
	(*MmPagePcpuDrainFtraceEvent)(nil),                                          // 368: perfetto.protos.MmPagePcpuDrainFtraceEvent
	(*RssStatFtraceEvent)(nil),                                                  // 369: perfetto.protos.RssStatFtraceEvent
	(*IonHeapShrinkFtraceEvent)(nil),                                            // 370: perfetto.protos.IonHeapShrinkFtraceEvent
	(*IonHeapGrowFtraceEvent)(nil),                                              // 371: perfetto.protos.IonHeapGrowFtraceEvent
	(*IonBufferCreateFtraceEvent)(nil),                                          // 372: perfetto.protos.IonBufferCreateFtraceEvent
	(*IonBufferDestroyFtraceEvent)(nil),                                         // 373: perfetto.protos.IonBufferDestroyFtraceEvent
	(*LowmemoryKillFtraceEvent)(nil),                                            // 374: perfetto.protos.LowmemoryKillFtraceEvent
	(*MdpCmdKickoffFtraceEvent)(nil),                                            // 375: perfetto.protos.MdpCmdKickoffFtraceEvent
	(*MdpCommitFtraceEvent)(nil),                                                // 376: perfetto.protos.MdpCommitFtraceEvent
	(*MdpPerfSetOtFtraceEvent)(nil),                                             // 377: perfetto.protos.MdpPerfSetOtFtraceEvent
	(*MdpSsppChangeFtraceEvent)(nil),                                            // 378: perfetto.protos.MdpSsppChangeFtraceEvent
	(*TracingMarkWriteFtraceEvent)(nil),                                         // 379: perfetto.protos.TracingMarkWriteFtraceEvent
	(*MdpCmdPingpongDoneFtraceEvent)(nil),                                       // 380: perfetto.protos.MdpCmdPingpongDoneFtraceEvent
	(*MdpCompareBwFtraceEvent)(nil),                                             // 381: perfetto.protos.MdpCompareBwFtraceEvent
	(*MdpPerfSetPanicLutsFtraceEvent)(nil),                                      // 382: perfetto.protos.MdpPerfSetPanicLutsFtraceEvent
	(*MdpSsppSetFtraceEvent)(nil),                                               // 383: perfetto.protos.MdpSsppSetFtraceEvent
	(*MdpCmdReadptrDoneFtraceEvent)(nil),                                        // 384: perfetto.protos.MdpCmdReadptrDoneFtraceEvent
	(*MdpMisrCrcFtraceEvent)(nil),                                               // 385: perfetto.protos.MdpMisrCrcFtraceEvent
	(*MdpPerfSetQosLutsFtraceEvent)(nil),                                        // 386: perfetto.protos.MdpPerfSetQosLutsFtraceEvent
	(*MdpTraceCounterFtraceEvent)(nil),                                          // 387: perfetto.protos.MdpTraceCounterFtraceEvent
	(*MdpCmdReleaseBwFtraceEvent)(nil),                                          // 388: perfetto.protos.MdpCmdReleaseBwFtraceEvent
	(*MdpMixerUpdateFtraceEvent)(nil),                                           // 389: perfetto.protos.MdpMixerUpdateFtraceEvent
	(*MdpPerfSetWmLevelsFtraceEvent)(nil),                                       // 390: perfetto.protos.MdpPerfSetWmLevelsFtraceEvent
	(*MdpVideoUnderrunDoneFtraceEvent)(nil),                                     // 391: perfetto.protos.MdpVideoUnderrunDoneFtraceEvent
	(*MdpCmdWaitPingpongFtraceEvent)(nil),                                       // 392: perfetto.protos.MdpCmdWaitPingpongFtraceEvent
	(*MdpPerfPrefillCalcFtraceEvent)(nil),                                       // 393: perfetto.protos.MdpPerfPrefillCalcFtraceEvent
	(*MdpPerfUpdateBusFtraceEvent)(nil),                                         // 394: perfetto.protos.MdpPerfUpdateBusFtraceEvent
	(*RotatorBwAoAsContextFtraceEvent)(nil),                                     // 395: perfetto.protos.RotatorBwAoAsContextFtraceEvent
	(*MmEventRecordFtraceEvent)(nil),                                            // 396: perfetto.protos.MmEventRecordFtraceEvent
	(*OomScoreAdjUpdateFtraceEvent)(nil),                                        // 397: perfetto.protos.OomScoreAdjUpdateFtraceEvent
	(*MarkVictimFtraceEvent)(nil),                                               // 398: perfetto.protos.MarkVictimFtraceEvent
	(*CpuFrequencyFtraceEvent)(nil),                                             // 399: perfetto.protos.CpuFrequencyFtraceEvent
	(*CpuFrequencyLimitsFtraceEvent)(nil),                                       // 400: perfetto.protos.CpuFrequencyLimitsFtraceEvent
	(*CpuIdleFtraceEvent)(nil),                                                  // 401: perfetto.protos.CpuIdleFtraceEvent
	(*ClockEnableFtraceEvent)(nil),                                              // 402: perfetto.protos.ClockEnableFtraceEvent
	(*ClockDisableFtraceEvent)(nil),                                             // 403: perfetto.protos.ClockDisableFtraceEvent
	(*ClockSetRateFtraceEvent)(nil),                                             // 404: perfetto.protos.ClockSetRateFtraceEvent
	(*SuspendResumeFtraceEvent)(nil),                                            // 405: perfetto.protos.SuspendResumeFtraceEvent
	(*GpuFrequencyFtraceEvent)(nil),                                             // 406: perfetto.protos.GpuFrequencyFtraceEvent
	(*SysEnterFtraceEvent)(nil),                                                 // 407: perfetto.protos.SysEnterFtraceEvent
	(*SysExitFtraceEvent)(nil),                                                  // 408: perfetto.protos.SysExitFtraceEvent
	(*RegulatorDisableFtraceEvent)(nil),                                         // 409: perfetto.protos.RegulatorDisableFtraceEvent
	(*RegulatorDisableCompleteFtraceEvent)(nil),                                 // 410: perfetto.protos.RegulatorDisableCompleteFtraceEvent
	(*RegulatorEnableFtraceEvent)(nil),                                          // 411: perfetto.protos.RegulatorEnableFtraceEvent
	(*RegulatorEnableCompleteFtraceEvent)(nil),                                  // 412: perfetto.protos.RegulatorEnableCompleteFtraceEvent
	(*RegulatorEnableDelayFtraceEvent)(nil),                                     // 413: perfetto.protos.RegulatorEnableDelayFtraceEvent
	(*RegulatorSetVoltageFtraceEvent)(nil),                                      // 414: perfetto.protos.RegulatorSetVoltageFtraceEvent
	(*RegulatorSetVoltageCompleteFtraceEvent)(nil),                              // 415: perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent
	(*SchedSwitchFtraceEvent)(nil),                                              // 416: perfetto.protos.SchedSwitchFtraceEvent
	(*SchedWakeupFtraceEvent)(nil),                                              // 417: perfetto.protos.SchedWakeupFtraceEvent
	(*SchedBlockedReasonFtraceEvent)(nil),                                       // 418: perfetto.protos.SchedBlockedReasonFtraceEvent
	(*SchedCpuHotplugFtraceEvent)(nil),                                          // 419: perfetto.protos.SchedCpuHotplugFtraceEvent
	(*SchedWakingFtraceEvent)(nil),                                              // 420: perfetto.protos.SchedWakingFtraceEvent
	(*SchedWakeupNewFtraceEvent)(nil),                                           // 421: perfetto.protos.SchedWakeupNewFtraceEvent
	(*SchedProcessExecFtraceEvent)(nil),                                         // 422: perfetto.protos.SchedProcessExecFtraceEvent
	(*SchedProcessExitFtraceEvent)(nil),                                         // 423: perfetto.protos.SchedProcessExitFtraceEvent
	(*SchedProcessForkFtraceEvent)(nil),                                         // 424: perfetto.protos.SchedProcessForkFtraceEvent
	(*SchedProcessFreeFtraceEvent)(nil),                                         // 425: perfetto.protos.SchedProcessFreeFtraceEvent
	(*SchedProcessHangFtraceEvent)(nil),                                         // 426: perfetto.protos.SchedProcessHangFtraceEvent
	(*SchedProcessWaitFtraceEvent)(nil),                                         // 427: perfetto.protos.SchedProcessWaitFtraceEvent
	(*ScmCallStartFtraceEvent)(nil),                                             // 428: perfetto.protos.ScmCallStartFtraceEvent
	(*ScmCallEndFtraceEvent)(nil),                                               // 429: perfetto.protos.ScmCallEndFtraceEvent
	(*SdeTracingMarkWriteFtraceEvent)(nil),                                      // 430: perfetto.protos.SdeTracingMarkWriteFtraceEvent
	(*SignalDeliverFtraceEvent)(nil),                                            // 431: perfetto.protos.SignalDeliverFtraceEvent
	(*SignalGenerateFtraceEvent)(nil),                                           // 432: perfetto.protos.SignalGenerateFtraceEvent
	(*SyncPtFtraceEvent)(nil),                                                   // 433: perfetto.protos.SyncPtFtraceEvent
	(*SyncTimelineFtraceEvent)(nil),                                             // 434: perfetto.protos.SyncTimelineFtraceEvent
	(*SyncWaitFtraceEvent)(nil),                                                 // 435: perfetto.protos.SyncWaitFtraceEvent
	(*ZeroFtraceEvent)(nil),                                                     // 436: perfetto.protos.ZeroFtraceEvent
	(*TaskNewtaskFtraceEvent)(nil),                                              // 437: perfetto.protos.TaskNewtaskFtraceEvent
	(*TaskRenameFtraceEvent)(nil),                                               // 438: perfetto.protos.TaskRenameFtraceEvent
	(*ThermalTemperatureFtraceEvent)(nil),                                       // 439: perfetto.protos.ThermalTemperatureFtraceEvent
	(*CdevUpdateFtraceEvent)(nil),                                               // 440: perfetto.protos.CdevUpdateFtraceEvent
	(*MmVmscanDirectReclaimBeginFtraceEvent)(nil),                               // 441: perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent
	(*MmVmscanDirectReclaimEndFtraceEvent)(nil),                                 // 442: perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent
	(*MmVmscanKswapdWakeFtraceEvent)(nil),                                       // 443: perfetto.protos.MmVmscanKswapdWakeFtraceEvent
	(*MmVmscanKswapdSleepFtraceEvent)(nil),                                      // 444: perfetto.protos.MmVmscanKswapdSleepFtraceEvent
	(*WorkqueueActivateWorkFtraceEvent)(nil),                                    // 445: perfetto.protos.WorkqueueActivateWorkFtraceEvent
	(*WorkqueueExecuteEndFtraceEvent)(nil),                                      // 446: perfetto.protos.WorkqueueExecuteEndFtraceEvent
	(*WorkqueueExecuteStartFtraceEvent)(nil),                                    // 447: perfetto.protos.WorkqueueExecuteStartFtraceEvent
	(*WorkqueueQueueWorkFtraceEvent)(nil),                                       // 448: perfetto.protos.WorkqueueQueueWorkFtraceEvent
	(*FtraceEvent)(nil),                                                         // 449: perfetto.protos.FtraceEvent
	(*FtraceEventBundle)(nil),                                                   // 450: perfetto.protos.FtraceEventBundle
	(*FtraceCpuStats)(nil),                                                      // 451: perfetto.protos.FtraceCpuStats
	(*FtraceStats)(nil),                                                         // 452: perfetto.protos.FtraceStats
	(*GpuCounterEvent)(nil),                                                     // 453: perfetto.protos.GpuCounterEvent
	(*GpuLog)(nil),                                                              // 454: perfetto.protos.GpuLog
	(*GpuRenderStageEvent)(nil),                                                 // 455: perfetto.protos.GpuRenderStageEvent
	(*InternedGraphicsContext)(nil),                                             // 456: perfetto.protos.InternedGraphicsContext
	(*InternedGpuRenderStageSpecification)(nil),                                 // 457: perfetto.protos.InternedGpuRenderStageSpecification
	(*VulkanApiEvent)(nil),                                                      // 458: perfetto.protos.VulkanApiEvent
	(*VulkanMemoryEventAnnotation)(nil),                                         // 459: perfetto.protos.VulkanMemoryEventAnnotation
	(*VulkanMemoryEvent)(nil),                                                   // 460: perfetto.protos.VulkanMemoryEvent
	(*InternedString)(nil),                                                      // 461: perfetto.protos.InternedString
	(*ProfiledFrameSymbols)(nil),                                                // 462: perfetto.protos.ProfiledFrameSymbols
	(*Line)(nil),                                                                // 463: perfetto.protos.Line
	(*AddressSymbols)(nil),                                                      // 464: perfetto.protos.AddressSymbols
	(*ModuleSymbols)(nil),                                                       // 465: perfetto.protos.ModuleSymbols
	(*Mapping)(nil),                                                             // 466: perfetto.protos.Mapping
	(*Frame)(nil),                                                               // 467: perfetto.protos.Frame
	(*Callstack)(nil),                                                           // 468: perfetto.protos.Callstack
	(*HistogramName)(nil),                                                       // 469: perfetto.protos.HistogramName
	(*ChromeHistogramSample)(nil),                                               // 470: perfetto.protos.ChromeHistogramSample
	(*DebugAnnotation)(nil),                                                     // 471: perfetto.protos.DebugAnnotation
	(*DebugAnnotationName)(nil),                                                 // 472: perfetto.protos.DebugAnnotationName
	(*LogMessage)(nil),                                                          // 473: perfetto.protos.LogMessage
	(*LogMessageBody)(nil),                                                      // 474: perfetto.protos.LogMessageBody
	(*SourceLocation)(nil),                                                      // 475: perfetto.protos.SourceLocation
	(*ChromeApplicationStateInfo)(nil),                                          // 476: perfetto.protos.ChromeApplicationStateInfo
	(*ChromeCompositorSchedulerState)(nil),                                      // 477: perfetto.protos.ChromeCompositorSchedulerState
	(*ChromeCompositorStateMachine)(nil),                                        // 478: perfetto.protos.ChromeCompositorStateMachine
	(*BeginFrameArgs)(nil),                                                      // 479: perfetto.protos.BeginFrameArgs
	(*BeginImplFrameArgs)(nil),                                                  // 480: perfetto.protos.BeginImplFrameArgs
	(*BeginFrameObserverState)(nil),                                             // 481: perfetto.protos.BeginFrameObserverState
	(*BeginFrameSourceState)(nil),                                               // 482: perfetto.protos.BeginFrameSourceState
	(*CompositorTimingHistory)(nil),                                             // 483: perfetto.protos.CompositorTimingHistory
	(*ChromeFrameReporter)(nil),                                                 // 484: perfetto.protos.ChromeFrameReporter
	(*ChromeKeyedService)(nil),                                                  // 485: perfetto.protos.ChromeKeyedService
	(*ChromeLatencyInfo)(nil),                                                   // 486: perfetto.protos.ChromeLatencyInfo
	(*ChromeLegacyIpc)(nil),                                                     // 487: perfetto.protos.ChromeLegacyIpc
	(*ChromeMessagePump)(nil),                                                   // 488: perfetto.protos.ChromeMessagePump
	(*ChromeMojoEventInfo)(nil),                                                 // 489: perfetto.protos.ChromeMojoEventInfo
	(*ChromeRendererSchedulerState)(nil),                                        // 490: perfetto.protos.ChromeRendererSchedulerState
	(*ChromeUserEvent)(nil),                                                     // 491: perfetto.protos.ChromeUserEvent
	(*ChromeWindowHandleEventInfo)(nil),                                         // 492: perfetto.protos.ChromeWindowHandleEventInfo
	(*TaskExecution)(nil),                                                       // 493: perfetto.protos.TaskExecution
	(*TrackEvent)(nil),                                                          // 494: perfetto.protos.TrackEvent
	(*TrackEventDefaults)(nil),                                                  // 495: perfetto.protos.TrackEventDefaults
	(*EventCategory)(nil),                                                       // 496: perfetto.protos.EventCategory
	(*EventName)(nil),                                                           // 497: perfetto.protos.EventName
	(*InternedData)(nil),                                                        // 498: perfetto.protos.InternedData
	(*MemoryTrackerSnapshot)(nil),                                               // 499: perfetto.protos.MemoryTrackerSnapshot
	(*PerfettoMetatrace)(nil),                                                   // 500: perfetto.protos.PerfettoMetatrace
	(*TracingServiceEvent)(nil),                                                 // 501: perfetto.protos.TracingServiceEvent
	(*BatteryCounters)(nil),                                                     // 502: perfetto.protos.BatteryCounters
	(*PowerRails)(nil),                                                          // 503: perfetto.protos.PowerRails
	(*ObfuscatedMember)(nil),                                                    // 504: perfetto.protos.ObfuscatedMember
	(*ObfuscatedClass)(nil),                                                     // 505: perfetto.protos.ObfuscatedClass
	(*DeobfuscationMapping)(nil),                                                // 506: perfetto.protos.DeobfuscationMapping
	(*HeapGraphRoot)(nil),                                                       // 507: perfetto.protos.HeapGraphRoot
	(*HeapGraphType)(nil),                                                       // 508: perfetto.protos.HeapGraphType
	(*HeapGraphObject)(nil),                                                     // 509: perfetto.protos.HeapGraphObject
	(*HeapGraph)(nil),                                                           // 510: perfetto.protos.HeapGraph
	(*ProfilePacket)(nil),                                                       // 511: perfetto.protos.ProfilePacket
	(*StreamingAllocation)(nil),                                                 // 512: perfetto.protos.StreamingAllocation
	(*StreamingFree)(nil),                                                       // 513: perfetto.protos.StreamingFree
	(*StreamingProfilePacket)(nil),                                              // 514: perfetto.protos.StreamingProfilePacket
	(*Profiling)(nil),                                                           // 515: perfetto.protos.Profiling
	(*PerfSample)(nil),                                                          // 516: perfetto.protos.PerfSample
	(*SmapsEntry)(nil),                                                          // 517: perfetto.protos.SmapsEntry
	(*SmapsPacket)(nil),                                                         // 518: perfetto.protos.SmapsPacket
	(*ProcessStats)(nil),                                                        // 519: perfetto.protos.ProcessStats
	(*ProcessTree)(nil),                                                         // 520: perfetto.protos.ProcessTree
	(*SysStats)(nil),                                                            // 521: perfetto.protos.SysStats
	(*Utsname)(nil),                                                             // 522: perfetto.protos.Utsname
	(*SystemInfo)(nil),                                                          // 523: perfetto.protos.SystemInfo
	(*CpuInfo)(nil),                                                             // 524: perfetto.protos.CpuInfo
	(*TestEvent)(nil),                                                           // 525: perfetto.protos.TestEvent
	(*TracePacketDefaults)(nil),                                                 // 526: perfetto.protos.TracePacketDefaults
	(*ProcessDescriptor)(nil),                                                   // 527: perfetto.protos.ProcessDescriptor
	(*ThreadDescriptor)(nil),                                                    // 528: perfetto.protos.ThreadDescriptor
	(*ChromeProcessDescriptor)(nil),                                             // 529: perfetto.protos.ChromeProcessDescriptor
	(*ChromeThreadDescriptor)(nil),                                              // 530: perfetto.protos.ChromeThreadDescriptor
	(*CounterDescriptor)(nil),                                                   // 531: perfetto.protos.CounterDescriptor
	(*TrackDescriptor)(nil),                                                     // 532: perfetto.protos.TrackDescriptor
	(*Trigger)(nil),                                                             // 533: perfetto.protos.Trigger
	(*TracePacket)(nil),                                                         // 534: perfetto.protos.TracePacket
	(*Trace)(nil),                                                               // 535: perfetto.protos.Trace
	(*TestExtension)(nil),                                                       // 536: perfetto.protos.TestExtension
	(*TestExtensionChild)(nil),                                                  // 537: perfetto.protos.TestExtensionChild
	(*GpuCounterDescriptor_GpuCounterSpec)(nil),                                 // 538: perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	(*GpuCounterDescriptor_GpuCounterBlock)(nil),                                // 539: perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	(*TracingServiceState_Producer)(nil),                                        // 540: perfetto.protos.TracingServiceState.Producer
	(*TracingServiceState_DataSource)(nil),                                      // 541: perfetto.protos.TracingServiceState.DataSource
	(*FtraceConfig_CompactSchedConfig)(nil),                                     // 542: perfetto.protos.FtraceConfig.CompactSchedConfig
	(*InodeFileConfig_MountPointMappingEntry)(nil),                              // 543: perfetto.protos.InodeFileConfig.MountPointMappingEntry
	(*HeapprofdConfig_ContinuousDumpConfig)(nil),                                // 544: perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	(*JavaHprofConfig_ContinuousDumpConfig)(nil),                                // 545: perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	(*TestConfig_DummyFields)(nil),                                              // 546: perfetto.protos.TestConfig.DummyFields
	(*TraceConfig_BufferConfig)(nil),                                            // 547: perfetto.protos.TraceConfig.BufferConfig
	(*TraceConfig_DataSource)(nil),                                              // 548: perfetto.protos.TraceConfig.DataSource
	(*TraceConfig_BuiltinDataSource)(nil),                                       // 549: perfetto.protos.TraceConfig.BuiltinDataSource
	(*TraceConfig_ProducerConfig)(nil),                                          // 550: perfetto.protos.TraceConfig.ProducerConfig
	(*TraceConfig_StatsdMetadata)(nil),                                          // 551: perfetto.protos.TraceConfig.StatsdMetadata
	(*TraceConfig_GuardrailOverrides)(nil),                                      // 552: perfetto.protos.TraceConfig.GuardrailOverrides
	(*TraceConfig_TriggerConfig)(nil),                                           // 553: perfetto.protos.TraceConfig.TriggerConfig
	(*TraceConfig_IncrementalStateConfig)(nil),                                  // 554: perfetto.protos.TraceConfig.IncrementalStateConfig
	(*TraceConfig_IncidentReportConfig)(nil),                                    // 555: perfetto.protos.TraceConfig.IncidentReportConfig
	(*TraceConfig_TriggerConfig_Trigger)(nil),                                   // 556: perfetto.protos.TraceConfig.TriggerConfig.Trigger
	(*TraceStats_BufferStats)(nil),                                              // 557: perfetto.protos.TraceStats.BufferStats
	(*AndroidLogPacket_LogEvent)(nil),                                           // 558: perfetto.protos.AndroidLogPacket.LogEvent
	(*AndroidLogPacket_Stats)(nil),                                              // 559: perfetto.protos.AndroidLogPacket.Stats
	(*AndroidLogPacket_LogEvent_Arg)(nil),                                       // 560: perfetto.protos.AndroidLogPacket.LogEvent.Arg
	(*FrameTimelineEvent_SurfaceFrame)(nil),                                     // 561: perfetto.protos.FrameTimelineEvent.SurfaceFrame
	(*FrameTimelineEvent_DisplayFrame)(nil),                                     // 562: perfetto.protos.FrameTimelineEvent.DisplayFrame
	(*GraphicsFrameEvent_BufferEvent)(nil),                                      // 563: perfetto.protos.GraphicsFrameEvent.BufferEvent
	(*PackagesList_PackageInfo)(nil),                                            // 564: perfetto.protos.PackagesList.PackageInfo
	(*BackgroundTracingMetadata_TriggerRule)(nil),                               // 565: perfetto.protos.BackgroundTracingMetadata.TriggerRule
	(*BackgroundTracingMetadata_TriggerRule_HistogramRule)(nil),                 // 566: perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule
	(*BackgroundTracingMetadata_TriggerRule_NamedRule)(nil),                     // 567: perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule
	(*ChromeTraceEvent_Arg)(nil),                                                // 568: perfetto.protos.ChromeTraceEvent.Arg
	(*ClockSnapshot_Clock)(nil),                                                 // 569: perfetto.protos.ClockSnapshot.Clock
	(*DescriptorProto_ReservedRange)(nil),                                       // 570: perfetto.protos.DescriptorProto.ReservedRange
	(*InodeFileMap_Entry)(nil),                                                  // 571: perfetto.protos.InodeFileMap.Entry
	(*GenericFtraceEvent_Field)(nil),                                            // 572: perfetto.protos.GenericFtraceEvent.Field
	(*FtraceEventBundle_CompactSched)(nil),                                      // 573: perfetto.protos.FtraceEventBundle.CompactSched
	(*GpuCounterEvent_GpuCounter)(nil),                                          // 574: perfetto.protos.GpuCounterEvent.GpuCounter
	(*GpuRenderStageEvent_ExtraData)(nil),                                       // 575: perfetto.protos.GpuRenderStageEvent.ExtraData
	(*GpuRenderStageEvent_Specifications)(nil),                                  // 576: perfetto.protos.GpuRenderStageEvent.Specifications
	(*GpuRenderStageEvent_Specifications_ContextSpec)(nil),                      // 577: perfetto.protos.GpuRenderStageEvent.Specifications.ContextSpec
	(*GpuRenderStageEvent_Specifications_Description)(nil),                      // 578: perfetto.protos.GpuRenderStageEvent.Specifications.Description
	(*VulkanApiEvent_VkDebugUtilsObjectName)(nil),                               // 579: perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName
	(*VulkanApiEvent_VkQueueSubmit)(nil),                                        // 580: perfetto.protos.VulkanApiEvent.VkQueueSubmit
	(*DebugAnnotation_NestedValue)(nil),                                         // 581: perfetto.protos.DebugAnnotation.NestedValue
	(*ChromeCompositorStateMachine_MajorState)(nil),                             // 582: perfetto.protos.ChromeCompositorStateMachine.MajorState
	(*ChromeCompositorStateMachine_MinorState)(nil),                             // 583: perfetto.protos.ChromeCompositorStateMachine.MinorState
	(*BeginImplFrameArgs_TimestampsInUs)(nil),                                   // 584: perfetto.protos.BeginImplFrameArgs.TimestampsInUs
	(*ChromeLatencyInfo_ComponentInfo)(nil),                                     // 585: perfetto.protos.ChromeLatencyInfo.ComponentInfo
	(*TrackEvent_LegacyEvent)(nil),                                              // 586: perfetto.protos.TrackEvent.LegacyEvent
	(*MemoryTrackerSnapshot_ProcessSnapshot)(nil),                               // 587: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot
	(*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode)(nil),                    // 588: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode
	(*MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge)(nil),                    // 589: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge
	(*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry)(nil),    // 590: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry
	(*PerfettoMetatrace_Arg)(nil),                                               // 591: perfetto.protos.PerfettoMetatrace.Arg
	(*PowerRails_RailDescriptor)(nil),                                           // 592: perfetto.protos.PowerRails.RailDescriptor
	(*PowerRails_EnergyData)(nil),                                               // 593: perfetto.protos.PowerRails.EnergyData
	(*ProfilePacket_HeapSample)(nil),                                            // 594: perfetto.protos.ProfilePacket.HeapSample
	(*ProfilePacket_Histogram)(nil),                                             // 595: perfetto.protos.ProfilePacket.Histogram
	(*ProfilePacket_ProcessStats)(nil),                                          // 596: perfetto.protos.ProfilePacket.ProcessStats
	(*ProfilePacket_ProcessHeapSamples)(nil),                                    // 597: perfetto.protos.ProfilePacket.ProcessHeapSamples
	(*ProfilePacket_Histogram_Bucket)(nil),                                      // 598: perfetto.protos.ProfilePacket.Histogram.Bucket
	(*ProcessStats_Thread)(nil),                                                 // 599: perfetto.protos.ProcessStats.Thread
	(*ProcessStats_Process)(nil),                                                // 600: perfetto.protos.ProcessStats.Process
	(*ProcessTree_Thread)(nil),                                                  // 601: perfetto.protos.ProcessTree.Thread
	(*ProcessTree_Process)(nil),                                                 // 602: perfetto.protos.ProcessTree.Process
	(*SysStats_MeminfoValue)(nil),                                               // 603: perfetto.protos.SysStats.MeminfoValue
	(*SysStats_VmstatValue)(nil),                                                // 604: perfetto.protos.SysStats.VmstatValue
	(*SysStats_CpuTimes)(nil),                                                   // 605: perfetto.protos.SysStats.CpuTimes
	(*SysStats_InterruptCount)(nil),                                             // 606: perfetto.protos.SysStats.InterruptCount
	(*CpuInfo_Cpu)(nil),                                                         // 607: perfetto.protos.CpuInfo.Cpu
	(*TestEvent_TestPayload)(nil),                                               // 608: perfetto.protos.TestEvent.TestPayload
}
var file_protos_perfetto_trace_perfetto_trace_proto_depIdxs = []int32{
	538, // 0: perfetto.protos.GpuCounterDescriptor.specs:type_name -> perfetto.protos.GpuCounterDescriptor.GpuCounterSpec
	539, // 1: perfetto.protos.GpuCounterDescriptor.blocks:type_name -> perfetto.protos.GpuCounterDescriptor.GpuCounterBlock
	69,  // 2: perfetto.protos.TrackEventDescriptor.available_categories:type_name -> perfetto.protos.TrackEventCategory
	68,  // 3: perfetto.protos.DataSourceDescriptor.gpu_counter_descriptor:type_name -> perfetto.protos.GpuCounterDescriptor
	70,  // 4: perfetto.protos.DataSourceDescriptor.track_event_descriptor:type_name -> perfetto.protos.TrackEventDescriptor
	540, // 5: perfetto.protos.TracingServiceState.producers:type_name -> perfetto.protos.TracingServiceState.Producer
	541, // 6: perfetto.protos.TracingServiceState.data_sources:type_name -> perfetto.protos.TracingServiceState.DataSource
	1,   // 7: perfetto.protos.AndroidLogConfig.log_ids:type_name -> perfetto.protos.AndroidLogId
	2,   // 8: perfetto.protos.AndroidLogConfig.min_prio:type_name -> perfetto.protos.AndroidLogPriority
	9,   // 9: perfetto.protos.ChromeConfig.client_priority:type_name -> perfetto.protos.ChromeConfig.ClientPriority
	542, // 10: perfetto.protos.FtraceConfig.compact_sched:type_name -> perfetto.protos.FtraceConfig.CompactSchedConfig
	543, // 11: perfetto.protos.InodeFileConfig.mount_point_mapping:type_name -> perfetto.protos.InodeFileConfig.MountPointMappingEntry
	10,  // 12: perfetto.protos.AndroidPowerConfig.battery_counters:type_name -> perfetto.protos.AndroidPowerConfig.BatteryCounters
	11,  // 13: perfetto.protos.ProcessStatsConfig.quirks:type_name -> perfetto.protos.ProcessStatsConfig.Quirks
	544, // 14: perfetto.protos.HeapprofdConfig.continuous_dump_config:type_name -> perfetto.protos.HeapprofdConfig.ContinuousDumpConfig
	545, // 15: perfetto.protos.JavaHprofConfig.continuous_dump_config:type_name -> perfetto.protos.JavaHprofConfig.ContinuousDumpConfig
	3,   // 16: perfetto.protos.SysStatsConfig.meminfo_counters:type_name -> perfetto.protos.MeminfoCounters
	4,   // 17: perfetto.protos.SysStatsConfig.vmstat_counters:type_name -> perfetto.protos.VmstatCounters
	12,  // 18: perfetto.protos.SysStatsConfig.stat_counters:type_name -> perfetto.protos.SysStatsConfig.StatCounters
	546, // 19: perfetto.protos.TestConfig.dummy_fields:type_name -> perfetto.protos.TestConfig.DummyFields
	77,  // 20: perfetto.protos.DataSourceConfig.ftrace_config:type_name -> perfetto.protos.FtraceConfig
	80,  // 21: perfetto.protos.DataSourceConfig.inode_file_config:type_name -> perfetto.protos.InodeFileConfig
	83,  // 22: perfetto.protos.DataSourceConfig.process_stats_config:type_name -> perfetto.protos.ProcessStatsConfig
	87,  // 23: perfetto.protos.DataSourceConfig.sys_stats_config:type_name -> perfetto.protos.SysStatsConfig
	84,  // 24: perfetto.protos.DataSourceConfig.heapprofd_config:type_name -> perfetto.protos.HeapprofdConfig
	85,  // 25: perfetto.protos.DataSourceConfig.java_hprof_config:type_name -> perfetto.protos.JavaHprofConfig
	82,  // 26: perfetto.protos.DataSourceConfig.android_power_config:type_name -> perfetto.protos.AndroidPowerConfig
	73,  // 27: perfetto.protos.DataSourceConfig.android_log_config:type_name -> perfetto.protos.AndroidLogConfig
	78,  // 28: perfetto.protos.DataSourceConfig.gpu_counter_config:type_name -> perfetto.protos.GpuCounterConfig
	75,  // 29: perfetto.protos.DataSourceConfig.packages_list_config:type_name -> perfetto.protos.PackagesListConfig
	86,  // 30: perfetto.protos.DataSourceConfig.perf_event_config:type_name -> perfetto.protos.PerfEventConfig
	79,  // 31: perfetto.protos.DataSourceConfig.vulkan_memory_config:type_name -> perfetto.protos.VulkanMemoryConfig
	89,  // 32: perfetto.protos.DataSourceConfig.track_event_config:type_name -> perfetto.protos.TrackEventConfig
	74,  // 33: perfetto.protos.DataSourceConfig.android_polled_state_config:type_name -> perfetto.protos.AndroidPolledStateConfig
	76,  // 34: perfetto.protos.DataSourceConfig.chrome_config:type_name -> perfetto.protos.ChromeConfig
	81,  // 35: perfetto.protos.DataSourceConfig.interceptor_config:type_name -> perfetto.protos.InterceptorConfig
	88,  // 36: perfetto.protos.DataSourceConfig.for_testing:type_name -> perfetto.protos.TestConfig
	547, // 37: perfetto.protos.TraceConfig.buffers:type_name -> perfetto.protos.TraceConfig.BufferConfig
	548, // 38: perfetto.protos.TraceConfig.data_sources:type_name -> perfetto.protos.TraceConfig.DataSource
	549, // 39: perfetto.protos.TraceConfig.builtin_data_sources:type_name -> perfetto.protos.TraceConfig.BuiltinDataSource
	13,  // 40: perfetto.protos.TraceConfig.lockdown_mode:type_name -> perfetto.protos.TraceConfig.LockdownModeOperation
	550, // 41: perfetto.protos.TraceConfig.producers:type_name -> perfetto.protos.TraceConfig.ProducerConfig
	551, // 42: perfetto.protos.TraceConfig.statsd_metadata:type_name -> perfetto.protos.TraceConfig.StatsdMetadata
	552, // 43: perfetto.protos.TraceConfig.guardrail_overrides:type_name -> perfetto.protos.TraceConfig.GuardrailOverrides
	553, // 44: perfetto.protos.TraceConfig.trigger_config:type_name -> perfetto.protos.TraceConfig.TriggerConfig
	554, // 45: perfetto.protos.TraceConfig.incremental_state_config:type_name -> perfetto.protos.TraceConfig.IncrementalStateConfig
	14,  // 46: perfetto.protos.TraceConfig.compression_type:type_name -> perfetto.protos.TraceConfig.CompressionType
	555, // 47: perfetto.protos.TraceConfig.incident_report_config:type_name -> perfetto.protos.TraceConfig.IncidentReportConfig
	557, // 48: perfetto.protos.TraceStats.buffer_stats:type_name -> perfetto.protos.TraceStats.BufferStats
	558, // 49: perfetto.protos.AndroidLogPacket.events:type_name -> perfetto.protos.AndroidLogPacket.LogEvent
	559, // 50: perfetto.protos.AndroidLogPacket.stats:type_name -> perfetto.protos.AndroidLogPacket.Stats
	562, // 51: perfetto.protos.FrameTimelineEvent.display_frame:type_name -> perfetto.protos.FrameTimelineEvent.DisplayFrame
	561, // 52: perfetto.protos.FrameTimelineEvent.surface_frame:type_name -> perfetto.protos.FrameTimelineEvent.SurfaceFrame
	563, // 53: perfetto.protos.GraphicsFrameEvent.buffer_event:type_name -> perfetto.protos.GraphicsFrameEvent.BufferEvent
	564, // 54: perfetto.protos.PackagesList.packages:type_name -> perfetto.protos.PackagesList.PackageInfo
	101, // 55: perfetto.protos.ChromeMetadataPacket.background_tracing_metadata:type_name -> perfetto.protos.BackgroundTracingMetadata
	565, // 56: perfetto.protos.BackgroundTracingMetadata.triggered_rule:type_name -> perfetto.protos.BackgroundTracingMetadata.TriggerRule
	565, // 57: perfetto.protos.BackgroundTracingMetadata.active_rules:type_name -> perfetto.protos.BackgroundTracingMetadata.TriggerRule
	22,  // 58: perfetto.protos.ChromeTracedValue.nested_type:type_name -> perfetto.protos.ChromeTracedValue.NestedType
	102, // 59: perfetto.protos.ChromeTracedValue.dict_values:type_name -> perfetto.protos.ChromeTracedValue
	102, // 60: perfetto.protos.ChromeTracedValue.array_values:type_name -> perfetto.protos.ChromeTracedValue
	568, // 61: perfetto.protos.ChromeTraceEvent.args:type_name -> perfetto.protos.ChromeTraceEvent.Arg
	23,  // 62: perfetto.protos.ChromeLegacyJsonTrace.type:type_name -> perfetto.protos.ChromeLegacyJsonTrace.TraceType
	104, // 63: perfetto.protos.ChromeEventBundle.trace_events:type_name -> perfetto.protos.ChromeTraceEvent
	105, // 64: perfetto.protos.ChromeEventBundle.metadata:type_name -> perfetto.protos.ChromeMetadata
	106, // 65: perfetto.protos.ChromeEventBundle.legacy_json_trace:type_name -> perfetto.protos.ChromeLegacyJsonTrace
	103, // 66: perfetto.protos.ChromeEventBundle.string_table:type_name -> perfetto.protos.ChromeStringTableEntry
	569, // 67: perfetto.protos.ClockSnapshot.clocks:type_name -> perfetto.protos.ClockSnapshot.Clock
	0,   // 68: perfetto.protos.ClockSnapshot.primary_trace_clock:type_name -> perfetto.protos.BuiltinClock
	110, // 69: perfetto.protos.FileDescriptorSet.file:type_name -> perfetto.protos.FileDescriptorProto
	111, // 70: perfetto.protos.FileDescriptorProto.message_type:type_name -> perfetto.protos.DescriptorProto
	114, // 71: perfetto.protos.FileDescriptorProto.enum_type:type_name -> perfetto.protos.EnumDescriptorProto
	112, // 72: perfetto.protos.FileDescriptorProto.extension:type_name -> perfetto.protos.FieldDescriptorProto
	112, // 73: perfetto.protos.DescriptorProto.field:type_name -> perfetto.protos.FieldDescriptorProto
	112, // 74: perfetto.protos.DescriptorProto.extension:type_name -> perfetto.protos.FieldDescriptorProto
	111, // 75: perfetto.protos.DescriptorProto.nested_type:type_name -> perfetto.protos.DescriptorProto
	114, // 76: perfetto.protos.DescriptorProto.enum_type:type_name -> perfetto.protos.EnumDescriptorProto
	113, // 77: perfetto.protos.DescriptorProto.oneof_decl:type_name -> perfetto.protos.OneofDescriptorProto
	570, // 78: perfetto.protos.DescriptorProto.reserved_range:type_name -> perfetto.protos.DescriptorProto.ReservedRange
	26,  // 79: perfetto.protos.FieldDescriptorProto.label:type_name -> perfetto.protos.FieldDescriptorProto.Label
	25,  // 80: perfetto.protos.FieldDescriptorProto.type:type_name -> perfetto.protos.FieldDescriptorProto.Type
	116, // 81: perfetto.protos.OneofDescriptorProto.options:type_name -> perfetto.protos.OneofOptions
	115, // 82: perfetto.protos.EnumDescriptorProto.value:type_name -> perfetto.protos.EnumValueDescriptorProto
	109, // 83: perfetto.protos.ExtensionDescriptor.extension_set:type_name -> perfetto.protos.FileDescriptorSet
	571, // 84: perfetto.protos.InodeFileMap.entries:type_name -> perfetto.protos.InodeFileMap.Entry
	572, // 85: perfetto.protos.GenericFtraceEvent.field:type_name -> perfetto.protos.GenericFtraceEvent.Field
	309, // 86: perfetto.protos.FtraceEvent.print:type_name -> perfetto.protos.PrintFtraceEvent
	416, // 87: perfetto.protos.FtraceEvent.sched_switch:type_name -> perfetto.protos.SchedSwitchFtraceEvent
	399, // 88: perfetto.protos.FtraceEvent.cpu_frequency:type_name -> perfetto.protos.CpuFrequencyFtraceEvent
	400, // 89: perfetto.protos.FtraceEvent.cpu_frequency_limits:type_name -> perfetto.protos.CpuFrequencyLimitsFtraceEvent
	401, // 90: perfetto.protos.FtraceEvent.cpu_idle:type_name -> perfetto.protos.CpuIdleFtraceEvent
	402, // 91: perfetto.protos.FtraceEvent.clock_enable:type_name -> perfetto.protos.ClockEnableFtraceEvent
	403, // 92: perfetto.protos.FtraceEvent.clock_disable:type_name -> perfetto.protos.ClockDisableFtraceEvent
	404, // 93: perfetto.protos.FtraceEvent.clock_set_rate:type_name -> perfetto.protos.ClockSetRateFtraceEvent
	417, // 94: perfetto.protos.FtraceEvent.sched_wakeup:type_name -> perfetto.protos.SchedWakeupFtraceEvent
	418, // 95: perfetto.protos.FtraceEvent.sched_blocked_reason:type_name -> perfetto.protos.SchedBlockedReasonFtraceEvent
	419, // 96: perfetto.protos.FtraceEvent.sched_cpu_hotplug:type_name -> perfetto.protos.SchedCpuHotplugFtraceEvent
	420, // 97: perfetto.protos.FtraceEvent.sched_waking:type_name -> perfetto.protos.SchedWakingFtraceEvent
	322, // 98: perfetto.protos.FtraceEvent.ipi_entry:type_name -> perfetto.protos.IpiEntryFtraceEvent
	323, // 99: perfetto.protos.FtraceEvent.ipi_exit:type_name -> perfetto.protos.IpiExitFtraceEvent
	324, // 100: perfetto.protos.FtraceEvent.ipi_raise:type_name -> perfetto.protos.IpiRaiseFtraceEvent
	325, // 101: perfetto.protos.FtraceEvent.softirq_entry:type_name -> perfetto.protos.SoftirqEntryFtraceEvent
	326, // 102: perfetto.protos.FtraceEvent.softirq_exit:type_name -> perfetto.protos.SoftirqExitFtraceEvent
	327, // 103: perfetto.protos.FtraceEvent.softirq_raise:type_name -> perfetto.protos.SoftirqRaiseFtraceEvent
	313, // 104: perfetto.protos.FtraceEvent.i2c_read:type_name -> perfetto.protos.I2cReadFtraceEvent
	314, // 105: perfetto.protos.FtraceEvent.i2c_write:type_name -> perfetto.protos.I2cWriteFtraceEvent
	315, // 106: perfetto.protos.FtraceEvent.i2c_result:type_name -> perfetto.protos.I2cResultFtraceEvent
	316, // 107: perfetto.protos.FtraceEvent.i2c_reply:type_name -> perfetto.protos.I2cReplyFtraceEvent
	317, // 108: perfetto.protos.FtraceEvent.smbus_read:type_name -> perfetto.protos.SmbusReadFtraceEvent
	318, // 109: perfetto.protos.FtraceEvent.smbus_write:type_name -> perfetto.protos.SmbusWriteFtraceEvent
	319, // 110: perfetto.protos.FtraceEvent.smbus_result:type_name -> perfetto.protos.SmbusResultFtraceEvent
	320, // 111: perfetto.protos.FtraceEvent.smbus_reply:type_name -> perfetto.protos.SmbusReplyFtraceEvent
	374, // 112: perfetto.protos.FtraceEvent.lowmemory_kill:type_name -> perfetto.protos.LowmemoryKillFtraceEvent
	328, // 113: perfetto.protos.FtraceEvent.irq_handler_entry:type_name -> perfetto.protos.IrqHandlerEntryFtraceEvent
	329, // 114: perfetto.protos.FtraceEvent.irq_handler_exit:type_name -> perfetto.protos.IrqHandlerExitFtraceEvent
	433, // 115: perfetto.protos.FtraceEvent.sync_pt:type_name -> perfetto.protos.SyncPtFtraceEvent
	434, // 116: perfetto.protos.FtraceEvent.sync_timeline:type_name -> perfetto.protos.SyncTimelineFtraceEvent
	435, // 117: perfetto.protos.FtraceEvent.sync_wait:type_name -> perfetto.protos.SyncWaitFtraceEvent
	176, // 118: perfetto.protos.FtraceEvent.ext4_da_write_begin:type_name -> perfetto.protos.Ext4DaWriteBeginFtraceEvent
	177, // 119: perfetto.protos.FtraceEvent.ext4_da_write_end:type_name -> perfetto.protos.Ext4DaWriteEndFtraceEvent
	178, // 120: perfetto.protos.FtraceEvent.ext4_sync_file_enter:type_name -> perfetto.protos.Ext4SyncFileEnterFtraceEvent
	179, // 121: perfetto.protos.FtraceEvent.ext4_sync_file_exit:type_name -> perfetto.protos.Ext4SyncFileExitFtraceEvent
	126, // 122: perfetto.protos.FtraceEvent.block_rq_issue:type_name -> perfetto.protos.BlockRqIssueFtraceEvent
	441, // 123: perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_begin:type_name -> perfetto.protos.MmVmscanDirectReclaimBeginFtraceEvent
	442, // 124: perfetto.protos.FtraceEvent.mm_vmscan_direct_reclaim_end:type_name -> perfetto.protos.MmVmscanDirectReclaimEndFtraceEvent
	443, // 125: perfetto.protos.FtraceEvent.mm_vmscan_kswapd_wake:type_name -> perfetto.protos.MmVmscanKswapdWakeFtraceEvent
	444, // 126: perfetto.protos.FtraceEvent.mm_vmscan_kswapd_sleep:type_name -> perfetto.protos.MmVmscanKswapdSleepFtraceEvent
	119, // 127: perfetto.protos.FtraceEvent.binder_transaction:type_name -> perfetto.protos.BinderTransactionFtraceEvent
	120, // 128: perfetto.protos.FtraceEvent.binder_transaction_received:type_name -> perfetto.protos.BinderTransactionReceivedFtraceEvent
	121, // 129: perfetto.protos.FtraceEvent.binder_set_priority:type_name -> perfetto.protos.BinderSetPriorityFtraceEvent
	122, // 130: perfetto.protos.FtraceEvent.binder_lock:type_name -> perfetto.protos.BinderLockFtraceEvent
	123, // 131: perfetto.protos.FtraceEvent.binder_locked:type_name -> perfetto.protos.BinderLockedFtraceEvent
	124, // 132: perfetto.protos.FtraceEvent.binder_unlock:type_name -> perfetto.protos.BinderUnlockFtraceEvent
	445, // 133: perfetto.protos.FtraceEvent.workqueue_activate_work:type_name -> perfetto.protos.WorkqueueActivateWorkFtraceEvent
	446, // 134: perfetto.protos.FtraceEvent.workqueue_execute_end:type_name -> perfetto.protos.WorkqueueExecuteEndFtraceEvent
	447, // 135: perfetto.protos.FtraceEvent.workqueue_execute_start:type_name -> perfetto.protos.WorkqueueExecuteStartFtraceEvent
	448, // 136: perfetto.protos.FtraceEvent.workqueue_queue_work:type_name -> perfetto.protos.WorkqueueQueueWorkFtraceEvent
	409, // 137: perfetto.protos.FtraceEvent.regulator_disable:type_name -> perfetto.protos.RegulatorDisableFtraceEvent
	410, // 138: perfetto.protos.FtraceEvent.regulator_disable_complete:type_name -> perfetto.protos.RegulatorDisableCompleteFtraceEvent
	411, // 139: perfetto.protos.FtraceEvent.regulator_enable:type_name -> perfetto.protos.RegulatorEnableFtraceEvent
	412, // 140: perfetto.protos.FtraceEvent.regulator_enable_complete:type_name -> perfetto.protos.RegulatorEnableCompleteFtraceEvent
	413, // 141: perfetto.protos.FtraceEvent.regulator_enable_delay:type_name -> perfetto.protos.RegulatorEnableDelayFtraceEvent
	414, // 142: perfetto.protos.FtraceEvent.regulator_set_voltage:type_name -> perfetto.protos.RegulatorSetVoltageFtraceEvent
	415, // 143: perfetto.protos.FtraceEvent.regulator_set_voltage_complete:type_name -> perfetto.protos.RegulatorSetVoltageCompleteFtraceEvent
	145, // 144: perfetto.protos.FtraceEvent.cgroup_attach_task:type_name -> perfetto.protos.CgroupAttachTaskFtraceEvent
	146, // 145: perfetto.protos.FtraceEvent.cgroup_mkdir:type_name -> perfetto.protos.CgroupMkdirFtraceEvent
	147, // 146: perfetto.protos.FtraceEvent.cgroup_remount:type_name -> perfetto.protos.CgroupRemountFtraceEvent
	148, // 147: perfetto.protos.FtraceEvent.cgroup_rmdir:type_name -> perfetto.protos.CgroupRmdirFtraceEvent
	149, // 148: perfetto.protos.FtraceEvent.cgroup_transfer_tasks:type_name -> perfetto.protos.CgroupTransferTasksFtraceEvent
	150, // 149: perfetto.protos.FtraceEvent.cgroup_destroy_root:type_name -> perfetto.protos.CgroupDestroyRootFtraceEvent
	151, // 150: perfetto.protos.FtraceEvent.cgroup_release:type_name -> perfetto.protos.CgroupReleaseFtraceEvent
	152, // 151: perfetto.protos.FtraceEvent.cgroup_rename:type_name -> perfetto.protos.CgroupRenameFtraceEvent
	153, // 152: perfetto.protos.FtraceEvent.cgroup_setup_root:type_name -> perfetto.protos.CgroupSetupRootFtraceEvent
	375, // 153: perfetto.protos.FtraceEvent.mdp_cmd_kickoff:type_name -> perfetto.protos.MdpCmdKickoffFtraceEvent
	376, // 154: perfetto.protos.FtraceEvent.mdp_commit:type_name -> perfetto.protos.MdpCommitFtraceEvent
	377, // 155: perfetto.protos.FtraceEvent.mdp_perf_set_ot:type_name -> perfetto.protos.MdpPerfSetOtFtraceEvent
	378, // 156: perfetto.protos.FtraceEvent.mdp_sspp_change:type_name -> perfetto.protos.MdpSsppChangeFtraceEvent
	379, // 157: perfetto.protos.FtraceEvent.tracing_mark_write:type_name -> perfetto.protos.TracingMarkWriteFtraceEvent
	380, // 158: perfetto.protos.FtraceEvent.mdp_cmd_pingpong_done:type_name -> perfetto.protos.MdpCmdPingpongDoneFtraceEvent
	381, // 159: perfetto.protos.FtraceEvent.mdp_compare_bw:type_name -> perfetto.protos.MdpCompareBwFtraceEvent
	382, // 160: perfetto.protos.FtraceEvent.mdp_perf_set_panic_luts:type_name -> perfetto.protos.MdpPerfSetPanicLutsFtraceEvent
	383, // 161: perfetto.protos.FtraceEvent.mdp_sspp_set:type_name -> perfetto.protos.MdpSsppSetFtraceEvent
	384, // 162: perfetto.protos.FtraceEvent.mdp_cmd_readptr_done:type_name -> perfetto.protos.MdpCmdReadptrDoneFtraceEvent
	385, // 163: perfetto.protos.FtraceEvent.mdp_misr_crc:type_name -> perfetto.protos.MdpMisrCrcFtraceEvent
	386, // 164: perfetto.protos.FtraceEvent.mdp_perf_set_qos_luts:type_name -> perfetto.protos.MdpPerfSetQosLutsFtraceEvent
	387, // 165: perfetto.protos.FtraceEvent.mdp_trace_counter:type_name -> perfetto.protos.MdpTraceCounterFtraceEvent
	388, // 166: perfetto.protos.FtraceEvent.mdp_cmd_release_bw:type_name -> perfetto.protos.MdpCmdReleaseBwFtraceEvent
	389, // 167: perfetto.protos.FtraceEvent.mdp_mixer_update:type_name -> perfetto.protos.MdpMixerUpdateFtraceEvent
	390, // 168: perfetto.protos.FtraceEvent.mdp_perf_set_wm_levels:type_name -> perfetto.protos.MdpPerfSetWmLevelsFtraceEvent
	391, // 169: perfetto.protos.FtraceEvent.mdp_video_underrun_done:type_name -> perfetto.protos.MdpVideoUnderrunDoneFtraceEvent
	392, // 170: perfetto.protos.FtraceEvent.mdp_cmd_wait_pingpong:type_name -> perfetto.protos.MdpCmdWaitPingpongFtraceEvent
	393, // 171: perfetto.protos.FtraceEvent.mdp_perf_prefill_calc:type_name -> perfetto.protos.MdpPerfPrefillCalcFtraceEvent
	394, // 172: perfetto.protos.FtraceEvent.mdp_perf_update_bus:type_name -> perfetto.protos.MdpPerfUpdateBusFtraceEvent
	395, // 173: perfetto.protos.FtraceEvent.rotator_bw_ao_as_context:type_name -> perfetto.protos.RotatorBwAoAsContextFtraceEvent
	307, // 174: perfetto.protos.FtraceEvent.mm_filemap_add_to_page_cache:type_name -> perfetto.protos.MmFilemapAddToPageCacheFtraceEvent
	308, // 175: perfetto.protos.FtraceEvent.mm_filemap_delete_from_page_cache:type_name -> perfetto.protos.MmFilemapDeleteFromPageCacheFtraceEvent
	157, // 176: perfetto.protos.FtraceEvent.mm_compaction_begin:type_name -> perfetto.protos.MmCompactionBeginFtraceEvent
	158, // 177: perfetto.protos.FtraceEvent.mm_compaction_defer_compaction:type_name -> perfetto.protos.MmCompactionDeferCompactionFtraceEvent
	159, // 178: perfetto.protos.FtraceEvent.mm_compaction_deferred:type_name -> perfetto.protos.MmCompactionDeferredFtraceEvent
	160, // 179: perfetto.protos.FtraceEvent.mm_compaction_defer_reset:type_name -> perfetto.protos.MmCompactionDeferResetFtraceEvent
	161, // 180: perfetto.protos.FtraceEvent.mm_compaction_end:type_name -> perfetto.protos.MmCompactionEndFtraceEvent
	162, // 181: perfetto.protos.FtraceEvent.mm_compaction_finished:type_name -> perfetto.protos.MmCompactionFinishedFtraceEvent
	163, // 182: perfetto.protos.FtraceEvent.mm_compaction_isolate_freepages:type_name -> perfetto.protos.MmCompactionIsolateFreepagesFtraceEvent
	164, // 183: perfetto.protos.FtraceEvent.mm_compaction_isolate_migratepages:type_name -> perfetto.protos.MmCompactionIsolateMigratepagesFtraceEvent
	165, // 184: perfetto.protos.FtraceEvent.mm_compaction_kcompactd_sleep:type_name -> perfetto.protos.MmCompactionKcompactdSleepFtraceEvent
	166, // 185: perfetto.protos.FtraceEvent.mm_compaction_kcompactd_wake:type_name -> perfetto.protos.MmCompactionKcompactdWakeFtraceEvent
	167, // 186: perfetto.protos.FtraceEvent.mm_compaction_migratepages:type_name -> perfetto.protos.MmCompactionMigratepagesFtraceEvent
	168, // 187: perfetto.protos.FtraceEvent.mm_compaction_suitable:type_name -> perfetto.protos.MmCompactionSuitableFtraceEvent
	169, // 188: perfetto.protos.FtraceEvent.mm_compaction_try_to_compact_pages:type_name -> perfetto.protos.MmCompactionTryToCompactPagesFtraceEvent
	170, // 189: perfetto.protos.FtraceEvent.mm_compaction_wakeup_kcompactd:type_name -> perfetto.protos.MmCompactionWakeupKcompactdFtraceEvent
	405, // 190: perfetto.protos.FtraceEvent.suspend_resume:type_name -> perfetto.protos.SuspendResumeFtraceEvent
	421, // 191: perfetto.protos.FtraceEvent.sched_wakeup_new:type_name -> perfetto.protos.SchedWakeupNewFtraceEvent
	127, // 192: perfetto.protos.FtraceEvent.block_bio_backmerge:type_name -> perfetto.protos.BlockBioBackmergeFtraceEvent
	128, // 193: perfetto.protos.FtraceEvent.block_bio_bounce:type_name -> perfetto.protos.BlockBioBounceFtraceEvent
	129, // 194: perfetto.protos.FtraceEvent.block_bio_complete:type_name -> perfetto.protos.BlockBioCompleteFtraceEvent
	130, // 195: perfetto.protos.FtraceEvent.block_bio_frontmerge:type_name -> perfetto.protos.BlockBioFrontmergeFtraceEvent
	131, // 196: perfetto.protos.FtraceEvent.block_bio_queue:type_name -> perfetto.protos.BlockBioQueueFtraceEvent
	132, // 197: perfetto.protos.FtraceEvent.block_bio_remap:type_name -> perfetto.protos.BlockBioRemapFtraceEvent
	133, // 198: perfetto.protos.FtraceEvent.block_dirty_buffer:type_name -> perfetto.protos.BlockDirtyBufferFtraceEvent
	134, // 199: perfetto.protos.FtraceEvent.block_getrq:type_name -> perfetto.protos.BlockGetrqFtraceEvent
	135, // 200: perfetto.protos.FtraceEvent.block_plug:type_name -> perfetto.protos.BlockPlugFtraceEvent
	136, // 201: perfetto.protos.FtraceEvent.block_rq_abort:type_name -> perfetto.protos.BlockRqAbortFtraceEvent
	137, // 202: perfetto.protos.FtraceEvent.block_rq_complete:type_name -> perfetto.protos.BlockRqCompleteFtraceEvent
	138, // 203: perfetto.protos.FtraceEvent.block_rq_insert:type_name -> perfetto.protos.BlockRqInsertFtraceEvent
	139, // 204: perfetto.protos.FtraceEvent.block_rq_remap:type_name -> perfetto.protos.BlockRqRemapFtraceEvent
	140, // 205: perfetto.protos.FtraceEvent.block_rq_requeue:type_name -> perfetto.protos.BlockRqRequeueFtraceEvent
	141, // 206: perfetto.protos.FtraceEvent.block_sleeprq:type_name -> perfetto.protos.BlockSleeprqFtraceEvent
	142, // 207: perfetto.protos.FtraceEvent.block_split:type_name -> perfetto.protos.BlockSplitFtraceEvent
	143, // 208: perfetto.protos.FtraceEvent.block_touch_buffer:type_name -> perfetto.protos.BlockTouchBufferFtraceEvent
	144, // 209: perfetto.protos.FtraceEvent.block_unplug:type_name -> perfetto.protos.BlockUnplugFtraceEvent
	180, // 210: perfetto.protos.FtraceEvent.ext4_alloc_da_blocks:type_name -> perfetto.protos.Ext4AllocDaBlocksFtraceEvent
	181, // 211: perfetto.protos.FtraceEvent.ext4_allocate_blocks:type_name -> perfetto.protos.Ext4AllocateBlocksFtraceEvent
	182, // 212: perfetto.protos.FtraceEvent.ext4_allocate_inode:type_name -> perfetto.protos.Ext4AllocateInodeFtraceEvent
	183, // 213: perfetto.protos.FtraceEvent.ext4_begin_ordered_truncate:type_name -> perfetto.protos.Ext4BeginOrderedTruncateFtraceEvent
	184, // 214: perfetto.protos.FtraceEvent.ext4_collapse_range:type_name -> perfetto.protos.Ext4CollapseRangeFtraceEvent
	185, // 215: perfetto.protos.FtraceEvent.ext4_da_release_space:type_name -> perfetto.protos.Ext4DaReleaseSpaceFtraceEvent
	186, // 216: perfetto.protos.FtraceEvent.ext4_da_reserve_space:type_name -> perfetto.protos.Ext4DaReserveSpaceFtraceEvent
	187, // 217: perfetto.protos.FtraceEvent.ext4_da_update_reserve_space:type_name -> perfetto.protos.Ext4DaUpdateReserveSpaceFtraceEvent
	188, // 218: perfetto.protos.FtraceEvent.ext4_da_write_pages:type_name -> perfetto.protos.Ext4DaWritePagesFtraceEvent
	189, // 219: perfetto.protos.FtraceEvent.ext4_da_write_pages_extent:type_name -> perfetto.protos.Ext4DaWritePagesExtentFtraceEvent
	190, // 220: perfetto.protos.FtraceEvent.ext4_direct_IO_enter:type_name -> perfetto.protos.Ext4DirectIOEnterFtraceEvent
	191, // 221: perfetto.protos.FtraceEvent.ext4_direct_IO_exit:type_name -> perfetto.protos.Ext4DirectIOExitFtraceEvent
	192, // 222: perfetto.protos.FtraceEvent.ext4_discard_blocks:type_name -> perfetto.protos.Ext4DiscardBlocksFtraceEvent
	193, // 223: perfetto.protos.FtraceEvent.ext4_discard_preallocations:type_name -> perfetto.protos.Ext4DiscardPreallocationsFtraceEvent
	194, // 224: perfetto.protos.FtraceEvent.ext4_drop_inode:type_name -> perfetto.protos.Ext4DropInodeFtraceEvent
	195, // 225: perfetto.protos.FtraceEvent.ext4_es_cache_extent:type_name -> perfetto.protos.Ext4EsCacheExtentFtraceEvent
	196, // 226: perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_enter:type_name -> perfetto.protos.Ext4EsFindDelayedExtentRangeEnterFtraceEvent
	197, // 227: perfetto.protos.FtraceEvent.ext4_es_find_delayed_extent_range_exit:type_name -> perfetto.protos.Ext4EsFindDelayedExtentRangeExitFtraceEvent
	198, // 228: perfetto.protos.FtraceEvent.ext4_es_insert_extent:type_name -> perfetto.protos.Ext4EsInsertExtentFtraceEvent
	199, // 229: perfetto.protos.FtraceEvent.ext4_es_lookup_extent_enter:type_name -> perfetto.protos.Ext4EsLookupExtentEnterFtraceEvent
	200, // 230: perfetto.protos.FtraceEvent.ext4_es_lookup_extent_exit:type_name -> perfetto.protos.Ext4EsLookupExtentExitFtraceEvent
	201, // 231: perfetto.protos.FtraceEvent.ext4_es_remove_extent:type_name -> perfetto.protos.Ext4EsRemoveExtentFtraceEvent
	202, // 232: perfetto.protos.FtraceEvent.ext4_es_shrink:type_name -> perfetto.protos.Ext4EsShrinkFtraceEvent
	203, // 233: perfetto.protos.FtraceEvent.ext4_es_shrink_count:type_name -> perfetto.protos.Ext4EsShrinkCountFtraceEvent
	204, // 234: perfetto.protos.FtraceEvent.ext4_es_shrink_scan_enter:type_name -> perfetto.protos.Ext4EsShrinkScanEnterFtraceEvent
	205, // 235: perfetto.protos.FtraceEvent.ext4_es_shrink_scan_exit:type_name -> perfetto.protos.Ext4EsShrinkScanExitFtraceEvent
	206, // 236: perfetto.protos.FtraceEvent.ext4_evict_inode:type_name -> perfetto.protos.Ext4EvictInodeFtraceEvent
	207, // 237: perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_enter:type_name -> perfetto.protos.Ext4ExtConvertToInitializedEnterFtraceEvent
	208, // 238: perfetto.protos.FtraceEvent.ext4_ext_convert_to_initialized_fastpath:type_name -> perfetto.protos.Ext4ExtConvertToInitializedFastpathFtraceEvent
	209, // 239: perfetto.protos.FtraceEvent.ext4_ext_handle_unwritten_extents:type_name -> perfetto.protos.Ext4ExtHandleUnwrittenExtentsFtraceEvent
	210, // 240: perfetto.protos.FtraceEvent.ext4_ext_in_cache:type_name -> perfetto.protos.Ext4ExtInCacheFtraceEvent
	211, // 241: perfetto.protos.FtraceEvent.ext4_ext_load_extent:type_name -> perfetto.protos.Ext4ExtLoadExtentFtraceEvent
	212, // 242: perfetto.protos.FtraceEvent.ext4_ext_map_blocks_enter:type_name -> perfetto.protos.Ext4ExtMapBlocksEnterFtraceEvent
	213, // 243: perfetto.protos.FtraceEvent.ext4_ext_map_blocks_exit:type_name -> perfetto.protos.Ext4ExtMapBlocksExitFtraceEvent
	214, // 244: perfetto.protos.FtraceEvent.ext4_ext_put_in_cache:type_name -> perfetto.protos.Ext4ExtPutInCacheFtraceEvent
	215, // 245: perfetto.protos.FtraceEvent.ext4_ext_remove_space:type_name -> perfetto.protos.Ext4ExtRemoveSpaceFtraceEvent
	216, // 246: perfetto.protos.FtraceEvent.ext4_ext_remove_space_done:type_name -> perfetto.protos.Ext4ExtRemoveSpaceDoneFtraceEvent
	217, // 247: perfetto.protos.FtraceEvent.ext4_ext_rm_idx:type_name -> perfetto.protos.Ext4ExtRmIdxFtraceEvent
	218, // 248: perfetto.protos.FtraceEvent.ext4_ext_rm_leaf:type_name -> perfetto.protos.Ext4ExtRmLeafFtraceEvent
	219, // 249: perfetto.protos.FtraceEvent.ext4_ext_show_extent:type_name -> perfetto.protos.Ext4ExtShowExtentFtraceEvent
	220, // 250: perfetto.protos.FtraceEvent.ext4_fallocate_enter:type_name -> perfetto.protos.Ext4FallocateEnterFtraceEvent
	221, // 251: perfetto.protos.FtraceEvent.ext4_fallocate_exit:type_name -> perfetto.protos.Ext4FallocateExitFtraceEvent
	222, // 252: perfetto.protos.FtraceEvent.ext4_find_delalloc_range:type_name -> perfetto.protos.Ext4FindDelallocRangeFtraceEvent
	223, // 253: perfetto.protos.FtraceEvent.ext4_forget:type_name -> perfetto.protos.Ext4ForgetFtraceEvent
	224, // 254: perfetto.protos.FtraceEvent.ext4_free_blocks:type_name -> perfetto.protos.Ext4FreeBlocksFtraceEvent
	225, // 255: perfetto.protos.FtraceEvent.ext4_free_inode:type_name -> perfetto.protos.Ext4FreeInodeFtraceEvent
	226, // 256: perfetto.protos.FtraceEvent.ext4_get_implied_cluster_alloc_exit:type_name -> perfetto.protos.Ext4GetImpliedClusterAllocExitFtraceEvent
	227, // 257: perfetto.protos.FtraceEvent.ext4_get_reserved_cluster_alloc:type_name -> perfetto.protos.Ext4GetReservedClusterAllocFtraceEvent
	228, // 258: perfetto.protos.FtraceEvent.ext4_ind_map_blocks_enter:type_name -> perfetto.protos.Ext4IndMapBlocksEnterFtraceEvent
	229, // 259: perfetto.protos.FtraceEvent.ext4_ind_map_blocks_exit:type_name -> perfetto.protos.Ext4IndMapBlocksExitFtraceEvent
	230, // 260: perfetto.protos.FtraceEvent.ext4_insert_range:type_name -> perfetto.protos.Ext4InsertRangeFtraceEvent
	231, // 261: perfetto.protos.FtraceEvent.ext4_invalidatepage:type_name -> perfetto.protos.Ext4InvalidatepageFtraceEvent
	232, // 262: perfetto.protos.FtraceEvent.ext4_journal_start:type_name -> perfetto.protos.Ext4JournalStartFtraceEvent
	233, // 263: perfetto.protos.FtraceEvent.ext4_journal_start_reserved:type_name -> perfetto.protos.Ext4JournalStartReservedFtraceEvent
	234, // 264: perfetto.protos.FtraceEvent.ext4_journalled_invalidatepage:type_name -> perfetto.protos.Ext4JournalledInvalidatepageFtraceEvent
	235, // 265: perfetto.protos.FtraceEvent.ext4_journalled_write_end:type_name -> perfetto.protos.Ext4JournalledWriteEndFtraceEvent
	236, // 266: perfetto.protos.FtraceEvent.ext4_load_inode:type_name -> perfetto.protos.Ext4LoadInodeFtraceEvent
	237, // 267: perfetto.protos.FtraceEvent.ext4_load_inode_bitmap:type_name -> perfetto.protos.Ext4LoadInodeBitmapFtraceEvent
	238, // 268: perfetto.protos.FtraceEvent.ext4_mark_inode_dirty:type_name -> perfetto.protos.Ext4MarkInodeDirtyFtraceEvent
	239, // 269: perfetto.protos.FtraceEvent.ext4_mb_bitmap_load:type_name -> perfetto.protos.Ext4MbBitmapLoadFtraceEvent
	240, // 270: perfetto.protos.FtraceEvent.ext4_mb_buddy_bitmap_load:type_name -> perfetto.protos.Ext4MbBuddyBitmapLoadFtraceEvent
	241, // 271: perfetto.protos.FtraceEvent.ext4_mb_discard_preallocations:type_name -> perfetto.protos.Ext4MbDiscardPreallocationsFtraceEvent
	242, // 272: perfetto.protos.FtraceEvent.ext4_mb_new_group_pa:type_name -> perfetto.protos.Ext4MbNewGroupPaFtraceEvent
	243, // 273: perfetto.protos.FtraceEvent.ext4_mb_new_inode_pa:type_name -> perfetto.protos.Ext4MbNewInodePaFtraceEvent
	244, // 274: perfetto.protos.FtraceEvent.ext4_mb_release_group_pa:type_name -> perfetto.protos.Ext4MbReleaseGroupPaFtraceEvent
	245, // 275: perfetto.protos.FtraceEvent.ext4_mb_release_inode_pa:type_name -> perfetto.protos.Ext4MbReleaseInodePaFtraceEvent
	246, // 276: perfetto.protos.FtraceEvent.ext4_mballoc_alloc:type_name -> perfetto.protos.Ext4MballocAllocFtraceEvent
	247, // 277: perfetto.protos.FtraceEvent.ext4_mballoc_discard:type_name -> perfetto.protos.Ext4MballocDiscardFtraceEvent
	248, // 278: perfetto.protos.FtraceEvent.ext4_mballoc_free:type_name -> perfetto.protos.Ext4MballocFreeFtraceEvent
	249, // 279: perfetto.protos.FtraceEvent.ext4_mballoc_prealloc:type_name -> perfetto.protos.Ext4MballocPreallocFtraceEvent
	250, // 280: perfetto.protos.FtraceEvent.ext4_other_inode_update_time:type_name -> perfetto.protos.Ext4OtherInodeUpdateTimeFtraceEvent
	251, // 281: perfetto.protos.FtraceEvent.ext4_punch_hole:type_name -> perfetto.protos.Ext4PunchHoleFtraceEvent
	252, // 282: perfetto.protos.FtraceEvent.ext4_read_block_bitmap_load:type_name -> perfetto.protos.Ext4ReadBlockBitmapLoadFtraceEvent
	253, // 283: perfetto.protos.FtraceEvent.ext4_readpage:type_name -> perfetto.protos.Ext4ReadpageFtraceEvent
	254, // 284: perfetto.protos.FtraceEvent.ext4_releasepage:type_name -> perfetto.protos.Ext4ReleasepageFtraceEvent
	255, // 285: perfetto.protos.FtraceEvent.ext4_remove_blocks:type_name -> perfetto.protos.Ext4RemoveBlocksFtraceEvent
	256, // 286: perfetto.protos.FtraceEvent.ext4_request_blocks:type_name -> perfetto.protos.Ext4RequestBlocksFtraceEvent
	257, // 287: perfetto.protos.FtraceEvent.ext4_request_inode:type_name -> perfetto.protos.Ext4RequestInodeFtraceEvent
	258, // 288: perfetto.protos.FtraceEvent.ext4_sync_fs:type_name -> perfetto.protos.Ext4SyncFsFtraceEvent
	259, // 289: perfetto.protos.FtraceEvent.ext4_trim_all_free:type_name -> perfetto.protos.Ext4TrimAllFreeFtraceEvent
	260, // 290: perfetto.protos.FtraceEvent.ext4_trim_extent:type_name -> perfetto.protos.Ext4TrimExtentFtraceEvent
	261, // 291: perfetto.protos.FtraceEvent.ext4_truncate_enter:type_name -> perfetto.protos.Ext4TruncateEnterFtraceEvent
	262, // 292: perfetto.protos.FtraceEvent.ext4_truncate_exit:type_name -> perfetto.protos.Ext4TruncateExitFtraceEvent
	263, // 293: perfetto.protos.FtraceEvent.ext4_unlink_enter:type_name -> perfetto.protos.Ext4UnlinkEnterFtraceEvent
	264, // 294: perfetto.protos.FtraceEvent.ext4_unlink_exit:type_name -> perfetto.protos.Ext4UnlinkExitFtraceEvent
	265, // 295: perfetto.protos.FtraceEvent.ext4_write_begin:type_name -> perfetto.protos.Ext4WriteBeginFtraceEvent
	266, // 296: perfetto.protos.FtraceEvent.ext4_write_end:type_name -> perfetto.protos.Ext4WriteEndFtraceEvent
	267, // 297: perfetto.protos.FtraceEvent.ext4_writepage:type_name -> perfetto.protos.Ext4WritepageFtraceEvent
	268, // 298: perfetto.protos.FtraceEvent.ext4_writepages:type_name -> perfetto.protos.Ext4WritepagesFtraceEvent
	269, // 299: perfetto.protos.FtraceEvent.ext4_writepages_result:type_name -> perfetto.protos.Ext4WritepagesResultFtraceEvent
	270, // 300: perfetto.protos.FtraceEvent.ext4_zero_range:type_name -> perfetto.protos.Ext4ZeroRangeFtraceEvent
	437, // 301: perfetto.protos.FtraceEvent.task_newtask:type_name -> perfetto.protos.TaskNewtaskFtraceEvent
	438, // 302: perfetto.protos.FtraceEvent.task_rename:type_name -> perfetto.protos.TaskRenameFtraceEvent
	422, // 303: perfetto.protos.FtraceEvent.sched_process_exec:type_name -> perfetto.protos.SchedProcessExecFtraceEvent
	423, // 304: perfetto.protos.FtraceEvent.sched_process_exit:type_name -> perfetto.protos.SchedProcessExitFtraceEvent
	424, // 305: perfetto.protos.FtraceEvent.sched_process_fork:type_name -> perfetto.protos.SchedProcessForkFtraceEvent
	425, // 306: perfetto.protos.FtraceEvent.sched_process_free:type_name -> perfetto.protos.SchedProcessFreeFtraceEvent
	426, // 307: perfetto.protos.FtraceEvent.sched_process_hang:type_name -> perfetto.protos.SchedProcessHangFtraceEvent
	427, // 308: perfetto.protos.FtraceEvent.sched_process_wait:type_name -> perfetto.protos.SchedProcessWaitFtraceEvent
	271, // 309: perfetto.protos.FtraceEvent.f2fs_do_submit_bio:type_name -> perfetto.protos.F2fsDoSubmitBioFtraceEvent
	272, // 310: perfetto.protos.FtraceEvent.f2fs_evict_inode:type_name -> perfetto.protos.F2fsEvictInodeFtraceEvent
	273, // 311: perfetto.protos.FtraceEvent.f2fs_fallocate:type_name -> perfetto.protos.F2fsFallocateFtraceEvent
	274, // 312: perfetto.protos.FtraceEvent.f2fs_get_data_block:type_name -> perfetto.protos.F2fsGetDataBlockFtraceEvent
	275, // 313: perfetto.protos.FtraceEvent.f2fs_get_victim:type_name -> perfetto.protos.F2fsGetVictimFtraceEvent
	276, // 314: perfetto.protos.FtraceEvent.f2fs_iget:type_name -> perfetto.protos.F2fsIgetFtraceEvent
	277, // 315: perfetto.protos.FtraceEvent.f2fs_iget_exit:type_name -> perfetto.protos.F2fsIgetExitFtraceEvent
	278, // 316: perfetto.protos.FtraceEvent.f2fs_new_inode:type_name -> perfetto.protos.F2fsNewInodeFtraceEvent
	279, // 317: perfetto.protos.FtraceEvent.f2fs_readpage:type_name -> perfetto.protos.F2fsReadpageFtraceEvent
	280, // 318: perfetto.protos.FtraceEvent.f2fs_reserve_new_block:type_name -> perfetto.protos.F2fsReserveNewBlockFtraceEvent
	281, // 319: perfetto.protos.FtraceEvent.f2fs_set_page_dirty:type_name -> perfetto.protos.F2fsSetPageDirtyFtraceEvent
	282, // 320: perfetto.protos.FtraceEvent.f2fs_submit_write_page:type_name -> perfetto.protos.F2fsSubmitWritePageFtraceEvent
	283, // 321: perfetto.protos.FtraceEvent.f2fs_sync_file_enter:type_name -> perfetto.protos.F2fsSyncFileEnterFtraceEvent
	284, // 322: perfetto.protos.FtraceEvent.f2fs_sync_file_exit:type_name -> perfetto.protos.F2fsSyncFileExitFtraceEvent
	285, // 323: perfetto.protos.FtraceEvent.f2fs_sync_fs:type_name -> perfetto.protos.F2fsSyncFsFtraceEvent
	286, // 324: perfetto.protos.FtraceEvent.f2fs_truncate:type_name -> perfetto.protos.F2fsTruncateFtraceEvent
	287, // 325: perfetto.protos.FtraceEvent.f2fs_truncate_blocks_enter:type_name -> perfetto.protos.F2fsTruncateBlocksEnterFtraceEvent
	288, // 326: perfetto.protos.FtraceEvent.f2fs_truncate_blocks_exit:type_name -> perfetto.protos.F2fsTruncateBlocksExitFtraceEvent
	289, // 327: perfetto.protos.FtraceEvent.f2fs_truncate_data_blocks_range:type_name -> perfetto.protos.F2fsTruncateDataBlocksRangeFtraceEvent
	290, // 328: perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_enter:type_name -> perfetto.protos.F2fsTruncateInodeBlocksEnterFtraceEvent
	291, // 329: perfetto.protos.FtraceEvent.f2fs_truncate_inode_blocks_exit:type_name -> perfetto.protos.F2fsTruncateInodeBlocksExitFtraceEvent
	292, // 330: perfetto.protos.FtraceEvent.f2fs_truncate_node:type_name -> perfetto.protos.F2fsTruncateNodeFtraceEvent
	293, // 331: perfetto.protos.FtraceEvent.f2fs_truncate_nodes_enter:type_name -> perfetto.protos.F2fsTruncateNodesEnterFtraceEvent
	294, // 332: perfetto.protos.FtraceEvent.f2fs_truncate_nodes_exit:type_name -> perfetto.protos.F2fsTruncateNodesExitFtraceEvent
	295, // 333: perfetto.protos.FtraceEvent.f2fs_truncate_partial_nodes:type_name -> perfetto.protos.F2fsTruncatePartialNodesFtraceEvent
	296, // 334: perfetto.protos.FtraceEvent.f2fs_unlink_enter:type_name -> perfetto.protos.F2fsUnlinkEnterFtraceEvent
	297, // 335: perfetto.protos.FtraceEvent.f2fs_unlink_exit:type_name -> perfetto.protos.F2fsUnlinkExitFtraceEvent
	298, // 336: perfetto.protos.FtraceEvent.f2fs_vm_page_mkwrite:type_name -> perfetto.protos.F2fsVmPageMkwriteFtraceEvent
	299, // 337: perfetto.protos.FtraceEvent.f2fs_write_begin:type_name -> perfetto.protos.F2fsWriteBeginFtraceEvent
	300, // 338: perfetto.protos.FtraceEvent.f2fs_write_checkpoint:type_name -> perfetto.protos.F2fsWriteCheckpointFtraceEvent
	301, // 339: perfetto.protos.FtraceEvent.f2fs_write_end:type_name -> perfetto.protos.F2fsWriteEndFtraceEvent
	330, // 340: perfetto.protos.FtraceEvent.alloc_pages_iommu_end:type_name -> perfetto.protos.AllocPagesIommuEndFtraceEvent
	331, // 341: perfetto.protos.FtraceEvent.alloc_pages_iommu_fail:type_name -> perfetto.protos.AllocPagesIommuFailFtraceEvent
	332, // 342: perfetto.protos.FtraceEvent.alloc_pages_iommu_start:type_name -> perfetto.protos.AllocPagesIommuStartFtraceEvent
	333, // 343: perfetto.protos.FtraceEvent.alloc_pages_sys_end:type_name -> perfetto.protos.AllocPagesSysEndFtraceEvent
	334, // 344: perfetto.protos.FtraceEvent.alloc_pages_sys_fail:type_name -> perfetto.protos.AllocPagesSysFailFtraceEvent
	335, // 345: perfetto.protos.FtraceEvent.alloc_pages_sys_start:type_name -> perfetto.protos.AllocPagesSysStartFtraceEvent
	336, // 346: perfetto.protos.FtraceEvent.dma_alloc_contiguous_retry:type_name -> perfetto.protos.DmaAllocContiguousRetryFtraceEvent
	337, // 347: perfetto.protos.FtraceEvent.iommu_map_range:type_name -> perfetto.protos.IommuMapRangeFtraceEvent
	338, // 348: perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_end:type_name -> perfetto.protos.IommuSecPtblMapRangeEndFtraceEvent
	339, // 349: perfetto.protos.FtraceEvent.iommu_sec_ptbl_map_range_start:type_name -> perfetto.protos.IommuSecPtblMapRangeStartFtraceEvent
	340, // 350: perfetto.protos.FtraceEvent.ion_alloc_buffer_end:type_name -> perfetto.protos.IonAllocBufferEndFtraceEvent
	341, // 351: perfetto.protos.FtraceEvent.ion_alloc_buffer_fail:type_name -> perfetto.protos.IonAllocBufferFailFtraceEvent
	342, // 352: perfetto.protos.FtraceEvent.ion_alloc_buffer_fallback:type_name -> perfetto.protos.IonAllocBufferFallbackFtraceEvent
	343, // 353: perfetto.protos.FtraceEvent.ion_alloc_buffer_start:type_name -> perfetto.protos.IonAllocBufferStartFtraceEvent
	344, // 354: perfetto.protos.FtraceEvent.ion_cp_alloc_retry:type_name -> perfetto.protos.IonCpAllocRetryFtraceEvent
	345, // 355: perfetto.protos.FtraceEvent.ion_cp_secure_buffer_end:type_name -> perfetto.protos.IonCpSecureBufferEndFtraceEvent
	346, // 356: perfetto.protos.FtraceEvent.ion_cp_secure_buffer_start:type_name -> perfetto.protos.IonCpSecureBufferStartFtraceEvent
	347, // 357: perfetto.protos.FtraceEvent.ion_prefetching:type_name -> perfetto.protos.IonPrefetchingFtraceEvent
	348, // 358: perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_end:type_name -> perfetto.protos.IonSecureCmaAddToPoolEndFtraceEvent
	349, // 359: perfetto.protos.FtraceEvent.ion_secure_cma_add_to_pool_start:type_name -> perfetto.protos.IonSecureCmaAddToPoolStartFtraceEvent
	350, // 360: perfetto.protos.FtraceEvent.ion_secure_cma_allocate_end:type_name -> perfetto.protos.IonSecureCmaAllocateEndFtraceEvent
	351, // 361: perfetto.protos.FtraceEvent.ion_secure_cma_allocate_start:type_name -> perfetto.protos.IonSecureCmaAllocateStartFtraceEvent
	352, // 362: perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_end:type_name -> perfetto.protos.IonSecureCmaShrinkPoolEndFtraceEvent
	353, // 363: perfetto.protos.FtraceEvent.ion_secure_cma_shrink_pool_start:type_name -> perfetto.protos.IonSecureCmaShrinkPoolStartFtraceEvent
	354, // 364: perfetto.protos.FtraceEvent.kfree:type_name -> perfetto.protos.KfreeFtraceEvent
	355, // 365: perfetto.protos.FtraceEvent.kmalloc:type_name -> perfetto.protos.KmallocFtraceEvent
	356, // 366: perfetto.protos.FtraceEvent.kmalloc_node:type_name -> perfetto.protos.KmallocNodeFtraceEvent
	357, // 367: perfetto.protos.FtraceEvent.kmem_cache_alloc:type_name -> perfetto.protos.KmemCacheAllocFtraceEvent
	358, // 368: perfetto.protos.FtraceEvent.kmem_cache_alloc_node:type_name -> perfetto.protos.KmemCacheAllocNodeFtraceEvent
	359, // 369: perfetto.protos.FtraceEvent.kmem_cache_free:type_name -> perfetto.protos.KmemCacheFreeFtraceEvent
	360, // 370: perfetto.protos.FtraceEvent.migrate_pages_end:type_name -> perfetto.protos.MigratePagesEndFtraceEvent
	361, // 371: perfetto.protos.FtraceEvent.migrate_pages_start:type_name -> perfetto.protos.MigratePagesStartFtraceEvent
	362, // 372: perfetto.protos.FtraceEvent.migrate_retry:type_name -> perfetto.protos.MigrateRetryFtraceEvent
	363, // 373: perfetto.protos.FtraceEvent.mm_page_alloc:type_name -> perfetto.protos.MmPageAllocFtraceEvent
	364, // 374: perfetto.protos.FtraceEvent.mm_page_alloc_extfrag:type_name -> perfetto.protos.MmPageAllocExtfragFtraceEvent
	365, // 375: perfetto.protos.FtraceEvent.mm_page_alloc_zone_locked:type_name -> perfetto.protos.MmPageAllocZoneLockedFtraceEvent
	366, // 376: perfetto.protos.FtraceEvent.mm_page_free:type_name -> perfetto.protos.MmPageFreeFtraceEvent
	367, // 377: perfetto.protos.FtraceEvent.mm_page_free_batched:type_name -> perfetto.protos.MmPageFreeBatchedFtraceEvent
	368, // 378: perfetto.protos.FtraceEvent.mm_page_pcpu_drain:type_name -> perfetto.protos.MmPagePcpuDrainFtraceEvent
	369, // 379: perfetto.protos.FtraceEvent.rss_stat:type_name -> perfetto.protos.RssStatFtraceEvent
	370, // 380: perfetto.protos.FtraceEvent.ion_heap_shrink:type_name -> perfetto.protos.IonHeapShrinkFtraceEvent
	371, // 381: perfetto.protos.FtraceEvent.ion_heap_grow:type_name -> perfetto.protos.IonHeapGrowFtraceEvent
	303, // 382: perfetto.protos.FtraceEvent.fence_init:type_name -> perfetto.protos.FenceInitFtraceEvent
	304, // 383: perfetto.protos.FtraceEvent.fence_destroy:type_name -> perfetto.protos.FenceDestroyFtraceEvent
	305, // 384: perfetto.protos.FtraceEvent.fence_enable_signal:type_name -> perfetto.protos.FenceEnableSignalFtraceEvent
	306, // 385: perfetto.protos.FtraceEvent.fence_signaled:type_name -> perfetto.protos.FenceSignaledFtraceEvent
	154, // 386: perfetto.protos.FtraceEvent.clk_enable:type_name -> perfetto.protos.ClkEnableFtraceEvent
	155, // 387: perfetto.protos.FtraceEvent.clk_disable:type_name -> perfetto.protos.ClkDisableFtraceEvent
	156, // 388: perfetto.protos.FtraceEvent.clk_set_rate:type_name -> perfetto.protos.ClkSetRateFtraceEvent
	125, // 389: perfetto.protos.FtraceEvent.binder_transaction_alloc_buf:type_name -> perfetto.protos.BinderTransactionAllocBufFtraceEvent
	431, // 390: perfetto.protos.FtraceEvent.signal_deliver:type_name -> perfetto.protos.SignalDeliverFtraceEvent
	432, // 391: perfetto.protos.FtraceEvent.signal_generate:type_name -> perfetto.protos.SignalGenerateFtraceEvent
	397, // 392: perfetto.protos.FtraceEvent.oom_score_adj_update:type_name -> perfetto.protos.OomScoreAdjUpdateFtraceEvent
	311, // 393: perfetto.protos.FtraceEvent.generic:type_name -> perfetto.protos.GenericFtraceEvent
	396, // 394: perfetto.protos.FtraceEvent.mm_event_record:type_name -> perfetto.protos.MmEventRecordFtraceEvent
	407, // 395: perfetto.protos.FtraceEvent.sys_enter:type_name -> perfetto.protos.SysEnterFtraceEvent
	408, // 396: perfetto.protos.FtraceEvent.sys_exit:type_name -> perfetto.protos.SysExitFtraceEvent
	436, // 397: perfetto.protos.FtraceEvent.zero:type_name -> perfetto.protos.ZeroFtraceEvent
	406, // 398: perfetto.protos.FtraceEvent.gpu_frequency:type_name -> perfetto.protos.GpuFrequencyFtraceEvent
	430, // 399: perfetto.protos.FtraceEvent.sde_tracing_mark_write:type_name -> perfetto.protos.SdeTracingMarkWriteFtraceEvent
	398, // 400: perfetto.protos.FtraceEvent.mark_victim:type_name -> perfetto.protos.MarkVictimFtraceEvent
	321, // 401: perfetto.protos.FtraceEvent.ion_stat:type_name -> perfetto.protos.IonStatFtraceEvent
	372, // 402: perfetto.protos.FtraceEvent.ion_buffer_create:type_name -> perfetto.protos.IonBufferCreateFtraceEvent
	373, // 403: perfetto.protos.FtraceEvent.ion_buffer_destroy:type_name -> perfetto.protos.IonBufferDestroyFtraceEvent
	428, // 404: perfetto.protos.FtraceEvent.scm_call_start:type_name -> perfetto.protos.ScmCallStartFtraceEvent
	429, // 405: perfetto.protos.FtraceEvent.scm_call_end:type_name -> perfetto.protos.ScmCallEndFtraceEvent
	312, // 406: perfetto.protos.FtraceEvent.gpu_mem_total:type_name -> perfetto.protos.GpuMemTotalFtraceEvent
	439, // 407: perfetto.protos.FtraceEvent.thermal_temperature:type_name -> perfetto.protos.ThermalTemperatureFtraceEvent
	440, // 408: perfetto.protos.FtraceEvent.cdev_update:type_name -> perfetto.protos.CdevUpdateFtraceEvent
	171, // 409: perfetto.protos.FtraceEvent.cpuhp_exit:type_name -> perfetto.protos.CpuhpExitFtraceEvent
	172, // 410: perfetto.protos.FtraceEvent.cpuhp_multi_enter:type_name -> perfetto.protos.CpuhpMultiEnterFtraceEvent
	173, // 411: perfetto.protos.FtraceEvent.cpuhp_enter:type_name -> perfetto.protos.CpuhpEnterFtraceEvent
	174, // 412: perfetto.protos.FtraceEvent.cpuhp_latency:type_name -> perfetto.protos.CpuhpLatencyFtraceEvent
	302, // 413: perfetto.protos.FtraceEvent.fastrpc_dma_stat:type_name -> perfetto.protos.FastrpcDmaStatFtraceEvent
	175, // 414: perfetto.protos.FtraceEvent.dpu_tracing_mark_write:type_name -> perfetto.protos.DpuTracingMarkWriteFtraceEvent
	310, // 415: perfetto.protos.FtraceEvent.g2d_tracing_mark_write:type_name -> perfetto.protos.G2dTracingMarkWriteFtraceEvent
	449, // 416: perfetto.protos.FtraceEventBundle.event:type_name -> perfetto.protos.FtraceEvent
	573, // 417: perfetto.protos.FtraceEventBundle.compact_sched:type_name -> perfetto.protos.FtraceEventBundle.CompactSched
	28,  // 418: perfetto.protos.FtraceStats.phase:type_name -> perfetto.protos.FtraceStats.Phase
	451, // 419: perfetto.protos.FtraceStats.cpu_stats:type_name -> perfetto.protos.FtraceCpuStats
	68,  // 420: perfetto.protos.GpuCounterEvent.counter_descriptor:type_name -> perfetto.protos.GpuCounterDescriptor
	574, // 421: perfetto.protos.GpuCounterEvent.counters:type_name -> perfetto.protos.GpuCounterEvent.GpuCounter
	29,  // 422: perfetto.protos.GpuLog.severity:type_name -> perfetto.protos.GpuLog.Severity
	575, // 423: perfetto.protos.GpuRenderStageEvent.extra_data:type_name -> perfetto.protos.GpuRenderStageEvent.ExtraData
	576, // 424: perfetto.protos.GpuRenderStageEvent.specifications:type_name -> perfetto.protos.GpuRenderStageEvent.Specifications
	30,  // 425: perfetto.protos.InternedGraphicsContext.api:type_name -> perfetto.protos.InternedGraphicsContext.Api
	31,  // 426: perfetto.protos.InternedGpuRenderStageSpecification.category:type_name -> perfetto.protos.InternedGpuRenderStageSpecification.RenderStageCategory
	579, // 427: perfetto.protos.VulkanApiEvent.vk_debug_utils_object_name:type_name -> perfetto.protos.VulkanApiEvent.VkDebugUtilsObjectName
	580, // 428: perfetto.protos.VulkanApiEvent.vk_queue_submit:type_name -> perfetto.protos.VulkanApiEvent.VkQueueSubmit
	32,  // 429: perfetto.protos.VulkanMemoryEvent.source:type_name -> perfetto.protos.VulkanMemoryEvent.Source
	33,  // 430: perfetto.protos.VulkanMemoryEvent.operation:type_name -> perfetto.protos.VulkanMemoryEvent.Operation
	34,  // 431: perfetto.protos.VulkanMemoryEvent.allocation_scope:type_name -> perfetto.protos.VulkanMemoryEvent.AllocationScope
	459, // 432: perfetto.protos.VulkanMemoryEvent.annotations:type_name -> perfetto.protos.VulkanMemoryEventAnnotation
	463, // 433: perfetto.protos.AddressSymbols.lines:type_name -> perfetto.protos.Line
	464, // 434: perfetto.protos.ModuleSymbols.address_symbols:type_name -> perfetto.protos.AddressSymbols
	581, // 435: perfetto.protos.DebugAnnotation.nested_value:type_name -> perfetto.protos.DebugAnnotation.NestedValue
	36,  // 436: perfetto.protos.ChromeApplicationStateInfo.application_state:type_name -> perfetto.protos.ChromeApplicationStateInfo.ChromeApplicationState
	478, // 437: perfetto.protos.ChromeCompositorSchedulerState.state_machine:type_name -> perfetto.protos.ChromeCompositorStateMachine
	5,   // 438: perfetto.protos.ChromeCompositorSchedulerState.inside_action:type_name -> perfetto.protos.ChromeCompositorSchedulerAction
	37,  // 439: perfetto.protos.ChromeCompositorSchedulerState.deadline_mode:type_name -> perfetto.protos.ChromeCompositorSchedulerState.BeginImplFrameDeadlineMode
	480, // 440: perfetto.protos.ChromeCompositorSchedulerState.begin_impl_frame_args:type_name -> perfetto.protos.BeginImplFrameArgs
	481, // 441: perfetto.protos.ChromeCompositorSchedulerState.begin_frame_observer_state:type_name -> perfetto.protos.BeginFrameObserverState
	482, // 442: perfetto.protos.ChromeCompositorSchedulerState.begin_frame_source_state:type_name -> perfetto.protos.BeginFrameSourceState
	483, // 443: perfetto.protos.ChromeCompositorSchedulerState.compositor_timing_history:type_name -> perfetto.protos.CompositorTimingHistory
	582, // 444: perfetto.protos.ChromeCompositorStateMachine.major_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MajorState
	583, // 445: perfetto.protos.ChromeCompositorStateMachine.minor_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MinorState
	44,  // 446: perfetto.protos.BeginFrameArgs.type:type_name -> perfetto.protos.BeginFrameArgs.BeginFrameArgsType
	475, // 447: perfetto.protos.BeginFrameArgs.source_location:type_name -> perfetto.protos.SourceLocation
	45,  // 448: perfetto.protos.BeginImplFrameArgs.state:type_name -> perfetto.protos.BeginImplFrameArgs.State
	479, // 449: perfetto.protos.BeginImplFrameArgs.current_args:type_name -> perfetto.protos.BeginFrameArgs
	479, // 450: perfetto.protos.BeginImplFrameArgs.last_args:type_name -> perfetto.protos.BeginFrameArgs
	584, // 451: perfetto.protos.BeginImplFrameArgs.timestamps_in_us:type_name -> perfetto.protos.BeginImplFrameArgs.TimestampsInUs
	479, // 452: perfetto.protos.BeginFrameObserverState.last_begin_frame_args:type_name -> perfetto.protos.BeginFrameArgs
	479, // 453: perfetto.protos.BeginFrameSourceState.last_begin_frame_args:type_name -> perfetto.protos.BeginFrameArgs
	46,  // 454: perfetto.protos.ChromeFrameReporter.state:type_name -> perfetto.protos.ChromeFrameReporter.State
	47,  // 455: perfetto.protos.ChromeFrameReporter.reason:type_name -> perfetto.protos.ChromeFrameReporter.FrameDropReason
	48,  // 456: perfetto.protos.ChromeLatencyInfo.step:type_name -> perfetto.protos.ChromeLatencyInfo.Step
	585, // 457: perfetto.protos.ChromeLatencyInfo.component_info:type_name -> perfetto.protos.ChromeLatencyInfo.ComponentInfo
	50,  // 458: perfetto.protos.ChromeLegacyIpc.message_class:type_name -> perfetto.protos.ChromeLegacyIpc.MessageClass
	6,   // 459: perfetto.protos.ChromeRendererSchedulerState.rail_mode:type_name -> perfetto.protos.ChromeRAILMode
	51,  // 460: perfetto.protos.TrackEvent.type:type_name -> perfetto.protos.TrackEvent.Type
	471, // 461: perfetto.protos.TrackEvent.debug_annotations:type_name -> perfetto.protos.DebugAnnotation
	493, // 462: perfetto.protos.TrackEvent.task_execution:type_name -> perfetto.protos.TaskExecution
	473, // 463: perfetto.protos.TrackEvent.log_message:type_name -> perfetto.protos.LogMessage
	477, // 464: perfetto.protos.TrackEvent.cc_scheduler_state:type_name -> perfetto.protos.ChromeCompositorSchedulerState
	491, // 465: perfetto.protos.TrackEvent.chrome_user_event:type_name -> perfetto.protos.ChromeUserEvent
	485, // 466: perfetto.protos.TrackEvent.chrome_keyed_service:type_name -> perfetto.protos.ChromeKeyedService
	487, // 467: perfetto.protos.TrackEvent.chrome_legacy_ipc:type_name -> perfetto.protos.ChromeLegacyIpc
	470, // 468: perfetto.protos.TrackEvent.chrome_histogram_sample:type_name -> perfetto.protos.ChromeHistogramSample
	486, // 469: perfetto.protos.TrackEvent.chrome_latency_info:type_name -> perfetto.protos.ChromeLatencyInfo
	484, // 470: perfetto.protos.TrackEvent.chrome_frame_reporter:type_name -> perfetto.protos.ChromeFrameReporter
	476, // 471: perfetto.protos.TrackEvent.chrome_application_state_info:type_name -> perfetto.protos.ChromeApplicationStateInfo
	490, // 472: perfetto.protos.TrackEvent.chrome_renderer_scheduler_state:type_name -> perfetto.protos.ChromeRendererSchedulerState
	492, // 473: perfetto.protos.TrackEvent.chrome_window_handle_event_info:type_name -> perfetto.protos.ChromeWindowHandleEventInfo
	475, // 474: perfetto.protos.TrackEvent.source_location:type_name -> perfetto.protos.SourceLocation
	488, // 475: perfetto.protos.TrackEvent.chrome_message_pump:type_name -> perfetto.protos.ChromeMessagePump
	489, // 476: perfetto.protos.TrackEvent.chrome_mojo_event_info:type_name -> perfetto.protos.ChromeMojoEventInfo
	586, // 477: perfetto.protos.TrackEvent.legacy_event:type_name -> perfetto.protos.TrackEvent.LegacyEvent
	496, // 478: perfetto.protos.InternedData.event_categories:type_name -> perfetto.protos.EventCategory
	497, // 479: perfetto.protos.InternedData.event_names:type_name -> perfetto.protos.EventName
	472, // 480: perfetto.protos.InternedData.debug_annotation_names:type_name -> perfetto.protos.DebugAnnotationName
	475, // 481: perfetto.protos.InternedData.source_locations:type_name -> perfetto.protos.SourceLocation
	474, // 482: perfetto.protos.InternedData.log_message_body:type_name -> perfetto.protos.LogMessageBody
	469, // 483: perfetto.protos.InternedData.histogram_names:type_name -> perfetto.protos.HistogramName
	461, // 484: perfetto.protos.InternedData.build_ids:type_name -> perfetto.protos.InternedString
	461, // 485: perfetto.protos.InternedData.mapping_paths:type_name -> perfetto.protos.InternedString
	461, // 486: perfetto.protos.InternedData.source_paths:type_name -> perfetto.protos.InternedString
	461, // 487: perfetto.protos.InternedData.function_names:type_name -> perfetto.protos.InternedString
	462, // 488: perfetto.protos.InternedData.profiled_frame_symbols:type_name -> perfetto.protos.ProfiledFrameSymbols
	466, // 489: perfetto.protos.InternedData.mappings:type_name -> perfetto.protos.Mapping
	467, // 490: perfetto.protos.InternedData.frames:type_name -> perfetto.protos.Frame
	468, // 491: perfetto.protos.InternedData.callstacks:type_name -> perfetto.protos.Callstack
	461, // 492: perfetto.protos.InternedData.vulkan_memory_keys:type_name -> perfetto.protos.InternedString
	456, // 493: perfetto.protos.InternedData.graphics_contexts:type_name -> perfetto.protos.InternedGraphicsContext
	457, // 494: perfetto.protos.InternedData.gpu_specifications:type_name -> perfetto.protos.InternedGpuRenderStageSpecification
	461, // 495: perfetto.protos.InternedData.kernel_symbols:type_name -> perfetto.protos.InternedString
	54,  // 496: perfetto.protos.MemoryTrackerSnapshot.level_of_detail:type_name -> perfetto.protos.MemoryTrackerSnapshot.LevelOfDetail
	587, // 497: perfetto.protos.MemoryTrackerSnapshot.process_memory_dumps:type_name -> perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot
	591, // 498: perfetto.protos.PerfettoMetatrace.args:type_name -> perfetto.protos.PerfettoMetatrace.Arg
	592, // 499: perfetto.protos.PowerRails.rail_descriptor:type_name -> perfetto.protos.PowerRails.RailDescriptor
	593, // 500: perfetto.protos.PowerRails.energy_data:type_name -> perfetto.protos.PowerRails.EnergyData
	504, // 501: perfetto.protos.ObfuscatedClass.obfuscated_members:type_name -> perfetto.protos.ObfuscatedMember
	504, // 502: perfetto.protos.ObfuscatedClass.obfuscated_methods:type_name -> perfetto.protos.ObfuscatedMember
	505, // 503: perfetto.protos.DeobfuscationMapping.obfuscated_classes:type_name -> perfetto.protos.ObfuscatedClass
	56,  // 504: perfetto.protos.HeapGraphRoot.root_type:type_name -> perfetto.protos.HeapGraphRoot.Type
	57,  // 505: perfetto.protos.HeapGraphType.kind:type_name -> perfetto.protos.HeapGraphType.Kind
	509, // 506: perfetto.protos.HeapGraph.objects:type_name -> perfetto.protos.HeapGraphObject
	507, // 507: perfetto.protos.HeapGraph.roots:type_name -> perfetto.protos.HeapGraphRoot
	508, // 508: perfetto.protos.HeapGraph.types:type_name -> perfetto.protos.HeapGraphType
	461, // 509: perfetto.protos.HeapGraph.field_names:type_name -> perfetto.protos.InternedString
	461, // 510: perfetto.protos.HeapGraph.location_names:type_name -> perfetto.protos.InternedString
	461, // 511: perfetto.protos.ProfilePacket.strings:type_name -> perfetto.protos.InternedString
	466, // 512: perfetto.protos.ProfilePacket.mappings:type_name -> perfetto.protos.Mapping
	467, // 513: perfetto.protos.ProfilePacket.frames:type_name -> perfetto.protos.Frame
	468, // 514: perfetto.protos.ProfilePacket.callstacks:type_name -> perfetto.protos.Callstack
	597, // 515: perfetto.protos.ProfilePacket.process_dumps:type_name -> perfetto.protos.ProfilePacket.ProcessHeapSamples
	58,  // 516: perfetto.protos.PerfSample.cpu_mode:type_name -> perfetto.protos.Profiling.CpuMode
	59,  // 517: perfetto.protos.PerfSample.unwind_error:type_name -> perfetto.protos.Profiling.StackUnwindError
	60,  // 518: perfetto.protos.PerfSample.sample_skipped_reason:type_name -> perfetto.protos.PerfSample.SampleSkipReason
	517, // 519: perfetto.protos.SmapsPacket.entries:type_name -> perfetto.protos.SmapsEntry
	600, // 520: perfetto.protos.ProcessStats.processes:type_name -> perfetto.protos.ProcessStats.Process
	602, // 521: perfetto.protos.ProcessTree.processes:type_name -> perfetto.protos.ProcessTree.Process
	601, // 522: perfetto.protos.ProcessTree.threads:type_name -> perfetto.protos.ProcessTree.Thread
	603, // 523: perfetto.protos.SysStats.meminfo:type_name -> perfetto.protos.SysStats.MeminfoValue
	604, // 524: perfetto.protos.SysStats.vmstat:type_name -> perfetto.protos.SysStats.VmstatValue
	605, // 525: perfetto.protos.SysStats.cpu_stat:type_name -> perfetto.protos.SysStats.CpuTimes
	606, // 526: perfetto.protos.SysStats.num_irq:type_name -> perfetto.protos.SysStats.InterruptCount
	606, // 527: perfetto.protos.SysStats.num_softirq:type_name -> perfetto.protos.SysStats.InterruptCount
	522, // 528: perfetto.protos.SystemInfo.utsname:type_name -> perfetto.protos.Utsname
	607, // 529: perfetto.protos.CpuInfo.cpus:type_name -> perfetto.protos.CpuInfo.Cpu
	608, // 530: perfetto.protos.TestEvent.payload:type_name -> perfetto.protos.TestEvent.TestPayload
	495, // 531: perfetto.protos.TracePacketDefaults.track_event_defaults:type_name -> perfetto.protos.TrackEventDefaults
	61,  // 532: perfetto.protos.ProcessDescriptor.chrome_process_type:type_name -> perfetto.protos.ProcessDescriptor.ChromeProcessType
	62,  // 533: perfetto.protos.ThreadDescriptor.chrome_thread_type:type_name -> perfetto.protos.ThreadDescriptor.ChromeThreadType
	63,  // 534: perfetto.protos.ChromeProcessDescriptor.process_type:type_name -> perfetto.protos.ChromeProcessDescriptor.ProcessType
	64,  // 535: perfetto.protos.ChromeThreadDescriptor.thread_type:type_name -> perfetto.protos.ChromeThreadDescriptor.ThreadType
	65,  // 536: perfetto.protos.CounterDescriptor.type:type_name -> perfetto.protos.CounterDescriptor.BuiltinCounterType
	66,  // 537: perfetto.protos.CounterDescriptor.unit:type_name -> perfetto.protos.CounterDescriptor.Unit
	527, // 538: perfetto.protos.TrackDescriptor.process:type_name -> perfetto.protos.ProcessDescriptor
	529, // 539: perfetto.protos.TrackDescriptor.chrome_process:type_name -> perfetto.protos.ChromeProcessDescriptor
	528, // 540: perfetto.protos.TrackDescriptor.thread:type_name -> perfetto.protos.ThreadDescriptor
	530, // 541: perfetto.protos.TrackDescriptor.chrome_thread:type_name -> perfetto.protos.ChromeThreadDescriptor
	531, // 542: perfetto.protos.TrackDescriptor.counter:type_name -> perfetto.protos.CounterDescriptor
	520, // 543: perfetto.protos.TracePacket.process_tree:type_name -> perfetto.protos.ProcessTree
	519, // 544: perfetto.protos.TracePacket.process_stats:type_name -> perfetto.protos.ProcessStats
	118, // 545: perfetto.protos.TracePacket.inode_file_map:type_name -> perfetto.protos.InodeFileMap
	107, // 546: perfetto.protos.TracePacket.chrome_events:type_name -> perfetto.protos.ChromeEventBundle
	108, // 547: perfetto.protos.TracePacket.clock_snapshot:type_name -> perfetto.protos.ClockSnapshot
	521, // 548: perfetto.protos.TracePacket.sys_stats:type_name -> perfetto.protos.SysStats
	494, // 549: perfetto.protos.TracePacket.track_event:type_name -> perfetto.protos.TrackEvent
	91,  // 550: perfetto.protos.TracePacket.trace_config:type_name -> perfetto.protos.TraceConfig
	452, // 551: perfetto.protos.TracePacket.ftrace_stats:type_name -> perfetto.protos.FtraceStats
	92,  // 552: perfetto.protos.TracePacket.trace_stats:type_name -> perfetto.protos.TraceStats
	511, // 553: perfetto.protos.TracePacket.profile_packet:type_name -> perfetto.protos.ProfilePacket
	512, // 554: perfetto.protos.TracePacket.streaming_allocation:type_name -> perfetto.protos.StreamingAllocation
	513, // 555: perfetto.protos.TracePacket.streaming_free:type_name -> perfetto.protos.StreamingFree
	502, // 556: perfetto.protos.TracePacket.battery:type_name -> perfetto.protos.BatteryCounters
	503, // 557: perfetto.protos.TracePacket.power_rails:type_name -> perfetto.protos.PowerRails
	93,  // 558: perfetto.protos.TracePacket.android_log:type_name -> perfetto.protos.AndroidLogPacket
	523, // 559: perfetto.protos.TracePacket.system_info:type_name -> perfetto.protos.SystemInfo
	533, // 560: perfetto.protos.TracePacket.trigger:type_name -> perfetto.protos.Trigger
	98,  // 561: perfetto.protos.TracePacket.packages_list:type_name -> perfetto.protos.PackagesList
	99,  // 562: perfetto.protos.TracePacket.chrome_benchmark_metadata:type_name -> perfetto.protos.ChromeBenchmarkMetadata
	500, // 563: perfetto.protos.TracePacket.perfetto_metatrace:type_name -> perfetto.protos.PerfettoMetatrace
	100, // 564: perfetto.protos.TracePacket.chrome_metadata:type_name -> perfetto.protos.ChromeMetadataPacket
	453, // 565: perfetto.protos.TracePacket.gpu_counter_event:type_name -> perfetto.protos.GpuCounterEvent
	455, // 566: perfetto.protos.TracePacket.gpu_render_stage_event:type_name -> perfetto.protos.GpuRenderStageEvent
	514, // 567: perfetto.protos.TracePacket.streaming_profile_packet:type_name -> perfetto.protos.StreamingProfilePacket
	510, // 568: perfetto.protos.TracePacket.heap_graph:type_name -> perfetto.protos.HeapGraph
	96,  // 569: perfetto.protos.TracePacket.graphics_frame_event:type_name -> perfetto.protos.GraphicsFrameEvent
	460, // 570: perfetto.protos.TracePacket.vulkan_memory_event:type_name -> perfetto.protos.VulkanMemoryEvent
	454, // 571: perfetto.protos.TracePacket.gpu_log:type_name -> perfetto.protos.GpuLog
	458, // 572: perfetto.protos.TracePacket.vulkan_api_event:type_name -> perfetto.protos.VulkanApiEvent
	516, // 573: perfetto.protos.TracePacket.perf_sample:type_name -> perfetto.protos.PerfSample
	524, // 574: perfetto.protos.TracePacket.cpu_info:type_name -> perfetto.protos.CpuInfo
	518, // 575: perfetto.protos.TracePacket.smaps_packet:type_name -> perfetto.protos.SmapsPacket
	501, // 576: perfetto.protos.TracePacket.service_event:type_name -> perfetto.protos.TracingServiceEvent
	97,  // 577: perfetto.protos.TracePacket.initial_display_state:type_name -> perfetto.protos.InitialDisplayState
	95,  // 578: perfetto.protos.TracePacket.gpu_mem_total_event:type_name -> perfetto.protos.GpuMemTotalEvent
	499, // 579: perfetto.protos.TracePacket.memory_tracker_snapshot:type_name -> perfetto.protos.MemoryTrackerSnapshot
	94,  // 580: perfetto.protos.TracePacket.frame_timeline_event:type_name -> perfetto.protos.FrameTimelineEvent
	462, // 581: perfetto.protos.TracePacket.profiled_frame_symbols:type_name -> perfetto.protos.ProfiledFrameSymbols
	465, // 582: perfetto.protos.TracePacket.module_symbols:type_name -> perfetto.protos.ModuleSymbols
	506, // 583: perfetto.protos.TracePacket.deobfuscation_mapping:type_name -> perfetto.protos.DeobfuscationMapping
	532, // 584: perfetto.protos.TracePacket.track_descriptor:type_name -> perfetto.protos.TrackDescriptor
	527, // 585: perfetto.protos.TracePacket.process_descriptor:type_name -> perfetto.protos.ProcessDescriptor
	528, // 586: perfetto.protos.TracePacket.thread_descriptor:type_name -> perfetto.protos.ThreadDescriptor
	450, // 587: perfetto.protos.TracePacket.ftrace_events:type_name -> perfetto.protos.FtraceEventBundle
	117, // 588: perfetto.protos.TracePacket.extension_descriptor:type_name -> perfetto.protos.ExtensionDescriptor
	525, // 589: perfetto.protos.TracePacket.for_testing:type_name -> perfetto.protos.TestEvent
	498, // 590: perfetto.protos.TracePacket.interned_data:type_name -> perfetto.protos.InternedData
	526, // 591: perfetto.protos.TracePacket.trace_packet_defaults:type_name -> perfetto.protos.TracePacketDefaults
	534, // 592: perfetto.protos.Trace.packet:type_name -> perfetto.protos.TracePacket
	8,   // 593: perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.numerator_units:type_name -> perfetto.protos.GpuCounterDescriptor.MeasureUnit
	8,   // 594: perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.denominator_units:type_name -> perfetto.protos.GpuCounterDescriptor.MeasureUnit
	7,   // 595: perfetto.protos.GpuCounterDescriptor.GpuCounterSpec.groups:type_name -> perfetto.protos.GpuCounterDescriptor.GpuCounterGroup
	71,  // 596: perfetto.protos.TracingServiceState.DataSource.ds_descriptor:type_name -> perfetto.protos.DataSourceDescriptor
	15,  // 597: perfetto.protos.TraceConfig.BufferConfig.fill_policy:type_name -> perfetto.protos.TraceConfig.BufferConfig.FillPolicy
	90,  // 598: perfetto.protos.TraceConfig.DataSource.config:type_name -> perfetto.protos.DataSourceConfig
	0,   // 599: perfetto.protos.TraceConfig.BuiltinDataSource.primary_trace_clock:type_name -> perfetto.protos.BuiltinClock
	16,  // 600: perfetto.protos.TraceConfig.TriggerConfig.trigger_mode:type_name -> perfetto.protos.TraceConfig.TriggerConfig.TriggerMode
	556, // 601: perfetto.protos.TraceConfig.TriggerConfig.triggers:type_name -> perfetto.protos.TraceConfig.TriggerConfig.Trigger
	1,   // 602: perfetto.protos.AndroidLogPacket.LogEvent.log_id:type_name -> perfetto.protos.AndroidLogId
	2,   // 603: perfetto.protos.AndroidLogPacket.LogEvent.prio:type_name -> perfetto.protos.AndroidLogPriority
	560, // 604: perfetto.protos.AndroidLogPacket.LogEvent.args:type_name -> perfetto.protos.AndroidLogPacket.LogEvent.Arg
	18,  // 605: perfetto.protos.FrameTimelineEvent.SurfaceFrame.present_type:type_name -> perfetto.protos.FrameTimelineEvent.PresentType
	17,  // 606: perfetto.protos.FrameTimelineEvent.SurfaceFrame.jank_type:type_name -> perfetto.protos.FrameTimelineEvent.JankType
	18,  // 607: perfetto.protos.FrameTimelineEvent.DisplayFrame.present_type:type_name -> perfetto.protos.FrameTimelineEvent.PresentType
	17,  // 608: perfetto.protos.FrameTimelineEvent.DisplayFrame.jank_type:type_name -> perfetto.protos.FrameTimelineEvent.JankType
	19,  // 609: perfetto.protos.GraphicsFrameEvent.BufferEvent.type:type_name -> perfetto.protos.GraphicsFrameEvent.BufferEventType
	20,  // 610: perfetto.protos.BackgroundTracingMetadata.TriggerRule.trigger_type:type_name -> perfetto.protos.BackgroundTracingMetadata.TriggerRule.TriggerType
	566, // 611: perfetto.protos.BackgroundTracingMetadata.TriggerRule.histogram_rule:type_name -> perfetto.protos.BackgroundTracingMetadata.TriggerRule.HistogramRule
	567, // 612: perfetto.protos.BackgroundTracingMetadata.TriggerRule.named_rule:type_name -> perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule
	21,  // 613: perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.event_type:type_name -> perfetto.protos.BackgroundTracingMetadata.TriggerRule.NamedRule.EventType
	102, // 614: perfetto.protos.ChromeTraceEvent.Arg.traced_value:type_name -> perfetto.protos.ChromeTracedValue
	27,  // 615: perfetto.protos.InodeFileMap.Entry.type:type_name -> perfetto.protos.InodeFileMap.Entry.Type
	577, // 616: perfetto.protos.GpuRenderStageEvent.Specifications.context_spec:type_name -> perfetto.protos.GpuRenderStageEvent.Specifications.ContextSpec
	578, // 617: perfetto.protos.GpuRenderStageEvent.Specifications.hw_queue:type_name -> perfetto.protos.GpuRenderStageEvent.Specifications.Description
	578, // 618: perfetto.protos.GpuRenderStageEvent.Specifications.stage:type_name -> perfetto.protos.GpuRenderStageEvent.Specifications.Description
	35,  // 619: perfetto.protos.DebugAnnotation.NestedValue.nested_type:type_name -> perfetto.protos.DebugAnnotation.NestedValue.NestedType
	581, // 620: perfetto.protos.DebugAnnotation.NestedValue.dict_values:type_name -> perfetto.protos.DebugAnnotation.NestedValue
	581, // 621: perfetto.protos.DebugAnnotation.NestedValue.array_values:type_name -> perfetto.protos.DebugAnnotation.NestedValue
	5,   // 622: perfetto.protos.ChromeCompositorStateMachine.MajorState.next_action:type_name -> perfetto.protos.ChromeCompositorSchedulerAction
	38,  // 623: perfetto.protos.ChromeCompositorStateMachine.MajorState.begin_impl_frame_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginImplFrameState
	39,  // 624: perfetto.protos.ChromeCompositorStateMachine.MajorState.begin_main_frame_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MajorState.BeginMainFrameState
	40,  // 625: perfetto.protos.ChromeCompositorStateMachine.MajorState.layer_tree_frame_sink_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MajorState.LayerTreeFrameSinkState
	41,  // 626: perfetto.protos.ChromeCompositorStateMachine.MajorState.forced_redraw_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MajorState.ForcedRedrawOnTimeoutState
	42,  // 627: perfetto.protos.ChromeCompositorStateMachine.MinorState.tree_priority:type_name -> perfetto.protos.ChromeCompositorStateMachine.MinorState.TreePriority
	43,  // 628: perfetto.protos.ChromeCompositorStateMachine.MinorState.scroll_handler_state:type_name -> perfetto.protos.ChromeCompositorStateMachine.MinorState.ScrollHandlerState
	49,  // 629: perfetto.protos.ChromeLatencyInfo.ComponentInfo.component_type:type_name -> perfetto.protos.ChromeLatencyInfo.LatencyComponentType
	52,  // 630: perfetto.protos.TrackEvent.LegacyEvent.flow_direction:type_name -> perfetto.protos.TrackEvent.LegacyEvent.FlowDirection
	53,  // 631: perfetto.protos.TrackEvent.LegacyEvent.instant_event_scope:type_name -> perfetto.protos.TrackEvent.LegacyEvent.InstantEventScope
	588, // 632: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.allocator_dumps:type_name -> perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode
	589, // 633: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.memory_edges:type_name -> perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryEdge
	590, // 634: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.entries:type_name -> perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry
	55,  // 635: perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.units:type_name -> perfetto.protos.MemoryTrackerSnapshot.ProcessSnapshot.MemoryNode.MemoryNodeEntry.Units
	598, // 636: perfetto.protos.ProfilePacket.Histogram.buckets:type_name -> perfetto.protos.ProfilePacket.Histogram.Bucket
	595, // 637: perfetto.protos.ProfilePacket.ProcessStats.unwinding_time_us:type_name -> perfetto.protos.ProfilePacket.Histogram
	596, // 638: perfetto.protos.ProfilePacket.ProcessHeapSamples.stats:type_name -> perfetto.protos.ProfilePacket.ProcessStats
	594, // 639: perfetto.protos.ProfilePacket.ProcessHeapSamples.samples:type_name -> perfetto.protos.ProfilePacket.HeapSample
	599, // 640: perfetto.protos.ProcessStats.Process.threads:type_name -> perfetto.protos.ProcessStats.Thread
	601, // 641: perfetto.protos.ProcessTree.Process.threads_deprecated:type_name -> perfetto.protos.ProcessTree.Thread
	3,   // 642: perfetto.protos.SysStats.MeminfoValue.key:type_name -> perfetto.protos.MeminfoCounters
	4,   // 643: perfetto.protos.SysStats.VmstatValue.key:type_name -> perfetto.protos.VmstatCounters
	608, // 644: perfetto.protos.TestEvent.TestPayload.nested:type_name -> perfetto.protos.TestEvent.TestPayload
	494, // 645: perfetto.protos.TestExtension.string_extension_for_testing:extendee -> perfetto.protos.TrackEvent
	494, // 646: perfetto.protos.TestExtension.int_extension_for_testing:extendee -> perfetto.protos.TrackEvent
	494, // 647: perfetto.protos.TestExtension.omitted_extension_for_testing:extendee -> perfetto.protos.TrackEvent
	494, // 648: perfetto.protos.TestExtension.nested_message_extension_for_testing:extendee -> perfetto.protos.TrackEvent
	537, // 649: perfetto.protos.TestExtension.nested_message_extension_for_testing:type_name -> perfetto.protos.TestExtensionChild
	650, // [650:650] is the sub-list for method output_type
	650, // [650:650] is the sub-list for method input_type
	649, // [649:650] is the sub-list for extension type_name
	645, // [645:649] is the sub-list for extension extendee
	0,   // [0:645] is the sub-list for field type_name
}

func init() { file_protos_perfetto_trace_perfetto_trace_proto_init() }
func file_protos_perfetto_trace_perfetto_trace_proto_init() {
	if File_protos_perfetto_trace_perfetto_trace_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuCounterDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEventCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEventDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPolledStateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagesListConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuCounterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulkanMemoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InodeFileConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterceptorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPowerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStatsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapprofdConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHprofConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfEventConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStatsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEventConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLogPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuMemTotalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphicsFrameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialDisplayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeBenchmarkMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeMetadataPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundTracingMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeTracedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeStringTableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeTraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeLegacyJsonTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeEventBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescriptorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDescriptorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescriptorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDescriptorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofDescriptorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumDescriptorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueDescriptorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InodeFileMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderTransactionFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderTransactionReceivedFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderSetPriorityFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderLockFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderLockedFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderUnlockFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderTransactionAllocBufFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRqIssueFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBioBackmergeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBioBounceFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBioCompleteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBioFrontmergeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBioQueueFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockBioRemapFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockDirtyBufferFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockGetrqFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockPlugFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRqAbortFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRqCompleteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRqInsertFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRqRemapFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRqRequeueFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSleeprqFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockSplitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockTouchBufferFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUnplugFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupAttachTaskFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupMkdirFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupRemountFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupRmdirFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupTransferTasksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupDestroyRootFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupReleaseFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupRenameFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupSetupRootFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClkEnableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClkDisableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClkSetRateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionBeginFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionDeferCompactionFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionDeferredFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionDeferResetFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionFinishedFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionIsolateFreepagesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionIsolateMigratepagesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionKcompactdSleepFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionKcompactdWakeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionMigratepagesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionSuitableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionTryToCompactPagesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmCompactionWakeupKcompactdFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuhpExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuhpMultiEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuhpEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuhpLatencyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DpuTracingMarkWriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaWriteBeginFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaWriteEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4SyncFileEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4SyncFileExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4AllocDaBlocksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4AllocateBlocksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4AllocateInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4BeginOrderedTruncateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4CollapseRangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaReleaseSpaceFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaReserveSpaceFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaUpdateReserveSpaceFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaWritePagesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DaWritePagesExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DirectIOEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DirectIOExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DiscardBlocksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DiscardPreallocationsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4DropInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsCacheExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsFindDelayedExtentRangeEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsFindDelayedExtentRangeExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsInsertExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsLookupExtentEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsLookupExtentExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsRemoveExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsShrinkFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsShrinkCountFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsShrinkScanEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EsShrinkScanExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4EvictInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtConvertToInitializedEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtConvertToInitializedFastpathFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtHandleUnwrittenExtentsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtInCacheFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtLoadExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtMapBlocksEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtMapBlocksExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtPutInCacheFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtRemoveSpaceFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtRemoveSpaceDoneFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtRmIdxFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtRmLeafFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ExtShowExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4FallocateEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4FallocateExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4FindDelallocRangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ForgetFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4FreeBlocksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4FreeInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4GetImpliedClusterAllocExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4GetReservedClusterAllocFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4IndMapBlocksEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4IndMapBlocksExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4InsertRangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4InvalidatepageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4JournalStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4JournalStartReservedFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4JournalledInvalidatepageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4JournalledWriteEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4LoadInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4LoadInodeBitmapFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MarkInodeDirtyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbBitmapLoadFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbBuddyBitmapLoadFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbDiscardPreallocationsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbNewGroupPaFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbNewInodePaFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbReleaseGroupPaFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MbReleaseInodePaFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MballocAllocFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MballocDiscardFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MballocFreeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4MballocPreallocFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4OtherInodeUpdateTimeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4PunchHoleFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ReadBlockBitmapLoadFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ReadpageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ReleasepageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4RemoveBlocksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4RequestBlocksFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4RequestInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4SyncFsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4TrimAllFreeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4TrimExtentFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4TruncateEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4TruncateExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4UnlinkEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4UnlinkExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4WriteBeginFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4WriteEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4WritepageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4WritepagesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4WritepagesResultFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ext4ZeroRangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsDoSubmitBioFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsEvictInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsFallocateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsGetDataBlockFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsGetVictimFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsIgetFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsIgetExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsNewInodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsReadpageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsReserveNewBlockFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsSetPageDirtyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsSubmitWritePageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsSyncFileEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsSyncFileExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsSyncFsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateBlocksEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateBlocksExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateDataBlocksRangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateInodeBlocksEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateInodeBlocksExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateNodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateNodesEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncateNodesExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsTruncatePartialNodesFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsUnlinkEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsUnlinkExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsVmPageMkwriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsWriteBeginFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsWriteCheckpointFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*F2FsWriteEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FastrpcDmaStatFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenceInitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenceDestroyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenceEnableSignalFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenceSignaledFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmFilemapAddToPageCacheFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmFilemapDeleteFromPageCacheFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrintFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*G2DTracingMarkWriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuMemTotalFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I2CReadFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I2CWriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I2CResultFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I2CReplyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmbusReadFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmbusWriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmbusResultFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmbusReplyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonStatFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpiEntryFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpiExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpiRaiseFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftirqEntryFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftirqExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftirqRaiseFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrqHandlerEntryFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrqHandlerExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocPagesIommuEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocPagesIommuFailFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocPagesIommuStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocPagesSysEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocPagesSysFailFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocPagesSysStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DmaAllocContiguousRetryFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IommuMapRangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IommuSecPtblMapRangeEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IommuSecPtblMapRangeStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonAllocBufferEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonAllocBufferFailFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonAllocBufferFallbackFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonAllocBufferStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonCpAllocRetryFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonCpSecureBufferEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonCpSecureBufferStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonPrefetchingFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonSecureCmaAddToPoolEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonSecureCmaAddToPoolStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonSecureCmaAllocateEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonSecureCmaAllocateStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonSecureCmaShrinkPoolEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonSecureCmaShrinkPoolStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KfreeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KmallocFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KmallocNodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KmemCacheAllocFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KmemCacheAllocNodeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KmemCacheFreeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigratePagesEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigratePagesStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MigrateRetryFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmPageAllocFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmPageAllocExtfragFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmPageAllocZoneLockedFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmPageFreeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmPageFreeBatchedFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmPagePcpuDrainFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RssStatFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonHeapShrinkFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonHeapGrowFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonBufferCreateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IonBufferDestroyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LowmemoryKillFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCmdKickoffFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCommitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpPerfSetOtFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpSsppChangeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingMarkWriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCmdPingpongDoneFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCompareBwFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpPerfSetPanicLutsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpSsppSetFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCmdReadptrDoneFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpMisrCrcFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpPerfSetQosLutsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpTraceCounterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCmdReleaseBwFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpMixerUpdateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpPerfSetWmLevelsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpVideoUnderrunDoneFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpCmdWaitPingpongFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpPerfPrefillCalcFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MdpPerfUpdateBusFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotatorBwAoAsContextFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmEventRecordFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OomScoreAdjUpdateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkVictimFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuFrequencyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[332].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuFrequencyLimitsFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[333].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuIdleFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockEnableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[335].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockDisableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[336].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockSetRateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[337].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendResumeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[338].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuFrequencyFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[339].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysEnterFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[340].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[341].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorDisableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorDisableCompleteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[343].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEnableFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEnableCompleteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorEnableDelayFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[346].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorSetVoltageFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[347].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegulatorSetVoltageCompleteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedSwitchFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[349].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedWakeupFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedBlockedReasonFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[351].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedCpuHotplugFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[352].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedWakingFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedWakeupNewFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[354].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedProcessExecFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedProcessExitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[356].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedProcessForkFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[357].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedProcessFreeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[358].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedProcessHangFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedProcessWaitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[360].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScmCallStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScmCallEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdeTracingMarkWriteFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalDeliverFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGenerateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncPtFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncTimelineFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncWaitFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZeroFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskNewtaskFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRenameFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermalTemperatureFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CdevUpdateFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmVmscanDirectReclaimBeginFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmVmscanDirectReclaimEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmVmscanKswapdWakeFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MmVmscanKswapdSleepFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkqueueActivateWorkFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkqueueExecuteEndFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkqueueExecuteStartFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkqueueQueueWorkFtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[381].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[382].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceEventBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[383].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceCpuStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[384].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[385].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuCounterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[386].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[387].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuRenderStageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[388].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternedGraphicsContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[389].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternedGpuRenderStageSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[390].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulkanApiEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[391].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulkanMemoryEventAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[392].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulkanMemoryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[393].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[394].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfiledFrameSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[395].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[396].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[397].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleSymbols); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[398].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[399].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[400].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Callstack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[401].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistogramName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[402].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeHistogramSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[403].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[404].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugAnnotationName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[405].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[406].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[407].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[408].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeApplicationStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[409].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeCompositorSchedulerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[410].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeCompositorStateMachine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[411].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginFrameArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[412].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginImplFrameArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[413].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginFrameObserverState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[414].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginFrameSourceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[415].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositorTimingHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[416].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeFrameReporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[417].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeKeyedService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[418].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeLatencyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[419].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeLegacyIpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[420].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeMessagePump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[421].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeMojoEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[422].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeRendererSchedulerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[423].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[424].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeWindowHandleEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[425].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskExecution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[426].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[427].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEventDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[428].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[429].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[430].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[431].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTrackerSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[432].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfettoMetatrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[433].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingServiceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[434].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[435].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[436].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObfuscatedMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[437].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObfuscatedClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[438].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeobfuscationMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[439].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapGraphRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[440].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapGraphType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[441].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapGraphObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[442].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[443].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[444].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[445].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingFree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[446].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingProfilePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[447].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[448].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[449].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmapsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[450].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmapsPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[451].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[452].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[453].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[454].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Utsname); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[455].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[456].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[457].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[458].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracePacketDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[459].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[460].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[461].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeProcessDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[462].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeThreadDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[463].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[464].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[465].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[466].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracePacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[467].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[468].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[469].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestExtensionChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[470].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuCounterDescriptor_GpuCounterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[471].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuCounterDescriptor_GpuCounterBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[472].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingServiceState_Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[473].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingServiceState_DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[474].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceConfig_CompactSchedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[475].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InodeFileConfig_MountPointMappingEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[476].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeapprofdConfig_ContinuousDumpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[477].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaHprofConfig_ContinuousDumpConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[478].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestConfig_DummyFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[479].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_BufferConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[480].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[481].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_BuiltinDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[482].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_ProducerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[483].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_StatsdMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[484].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_GuardrailOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[485].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_TriggerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[486].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_IncrementalStateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[487].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_IncidentReportConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[488].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceConfig_TriggerConfig_Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[489].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStats_BufferStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[490].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLogPacket_LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[491].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLogPacket_Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[492].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidLogPacket_LogEvent_Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[493].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTimelineEvent_SurfaceFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[494].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTimelineEvent_DisplayFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[495].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphicsFrameEvent_BufferEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[496].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagesList_PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[497].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundTracingMetadata_TriggerRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[498].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundTracingMetadata_TriggerRule_HistogramRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[499].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackgroundTracingMetadata_TriggerRule_NamedRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[500].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeTraceEvent_Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[501].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockSnapshot_Clock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[502].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescriptorProto_ReservedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[503].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InodeFileMap_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[504].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericFtraceEvent_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[505].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FtraceEventBundle_CompactSched); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[506].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuCounterEvent_GpuCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[507].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuRenderStageEvent_ExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[508].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuRenderStageEvent_Specifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[509].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuRenderStageEvent_Specifications_ContextSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[510].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuRenderStageEvent_Specifications_Description); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[511].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulkanApiEvent_VkDebugUtilsObjectName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[512].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulkanApiEvent_VkQueueSubmit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[513].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugAnnotation_NestedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[514].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeCompositorStateMachine_MajorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[515].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeCompositorStateMachine_MinorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[516].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginImplFrameArgs_TimestampsInUs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[517].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromeLatencyInfo_ComponentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[518].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackEvent_LegacyEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[519].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTrackerSnapshot_ProcessSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[520].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[521].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTrackerSnapshot_ProcessSnapshot_MemoryEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[522].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryTrackerSnapshot_ProcessSnapshot_MemoryNode_MemoryNodeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[523].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfettoMetatrace_Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[524].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRails_RailDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[525].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRails_EnergyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[526].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePacket_HeapSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[527].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePacket_Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[528].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePacket_ProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[529].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePacket_ProcessHeapSamples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[530].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfilePacket_Histogram_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[531].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStats_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[532].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStats_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[533].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTree_Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[534].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTree_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[535].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStats_MeminfoValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[536].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStats_VmstatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[537].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStats_CpuTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[538].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysStats_InterruptCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[539].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuInfo_Cpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[540].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestEvent_TestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*FrameTimelineEvent_DisplayFrame_)(nil),
		(*FrameTimelineEvent_SurfaceFrame_)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*ChromeMetadata_StringValue)(nil),
		(*ChromeMetadata_BoolValue)(nil),
		(*ChromeMetadata_IntValue)(nil),
		(*ChromeMetadata_JsonValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[381].OneofWrappers = []interface{}{
		(*FtraceEvent_Print)(nil),
		(*FtraceEvent_SchedSwitch)(nil),
		(*FtraceEvent_CpuFrequency)(nil),
		(*FtraceEvent_CpuFrequencyLimits)(nil),
		(*FtraceEvent_CpuIdle)(nil),
		(*FtraceEvent_ClockEnable)(nil),
		(*FtraceEvent_ClockDisable)(nil),
		(*FtraceEvent_ClockSetRate)(nil),
		(*FtraceEvent_SchedWakeup)(nil),
		(*FtraceEvent_SchedBlockedReason)(nil),
		(*FtraceEvent_SchedCpuHotplug)(nil),
		(*FtraceEvent_SchedWaking)(nil),
		(*FtraceEvent_IpiEntry)(nil),
		(*FtraceEvent_IpiExit)(nil),
		(*FtraceEvent_IpiRaise)(nil),
		(*FtraceEvent_SoftirqEntry)(nil),
		(*FtraceEvent_SoftirqExit)(nil),
		(*FtraceEvent_SoftirqRaise)(nil),
		(*FtraceEvent_I2CRead)(nil),
		(*FtraceEvent_I2CWrite)(nil),
		(*FtraceEvent_I2CResult)(nil),
		(*FtraceEvent_I2CReply)(nil),
		(*FtraceEvent_SmbusRead)(nil),
		(*FtraceEvent_SmbusWrite)(nil),
		(*FtraceEvent_SmbusResult)(nil),
		(*FtraceEvent_SmbusReply)(nil),
		(*FtraceEvent_LowmemoryKill)(nil),
		(*FtraceEvent_IrqHandlerEntry)(nil),
		(*FtraceEvent_IrqHandlerExit)(nil),
		(*FtraceEvent_SyncPt)(nil),
		(*FtraceEvent_SyncTimeline)(nil),
		(*FtraceEvent_SyncWait)(nil),
		(*FtraceEvent_Ext4DaWriteBegin)(nil),
		(*FtraceEvent_Ext4DaWriteEnd)(nil),
		(*FtraceEvent_Ext4SyncFileEnter)(nil),
		(*FtraceEvent_Ext4SyncFileExit)(nil),
		(*FtraceEvent_BlockRqIssue)(nil),
		(*FtraceEvent_MmVmscanDirectReclaimBegin)(nil),
		(*FtraceEvent_MmVmscanDirectReclaimEnd)(nil),
		(*FtraceEvent_MmVmscanKswapdWake)(nil),
		(*FtraceEvent_MmVmscanKswapdSleep)(nil),
		(*FtraceEvent_BinderTransaction)(nil),
		(*FtraceEvent_BinderTransactionReceived)(nil),
		(*FtraceEvent_BinderSetPriority)(nil),
		(*FtraceEvent_BinderLock)(nil),
		(*FtraceEvent_BinderLocked)(nil),
		(*FtraceEvent_BinderUnlock)(nil),
		(*FtraceEvent_WorkqueueActivateWork)(nil),
		(*FtraceEvent_WorkqueueExecuteEnd)(nil),
		(*FtraceEvent_WorkqueueExecuteStart)(nil),
		(*FtraceEvent_WorkqueueQueueWork)(nil),
		(*FtraceEvent_RegulatorDisable)(nil),
		(*FtraceEvent_RegulatorDisableComplete)(nil),
		(*FtraceEvent_RegulatorEnable)(nil),
		(*FtraceEvent_RegulatorEnableComplete)(nil),
		(*FtraceEvent_RegulatorEnableDelay)(nil),
		(*FtraceEvent_RegulatorSetVoltage)(nil),
		(*FtraceEvent_RegulatorSetVoltageComplete)(nil),
		(*FtraceEvent_CgroupAttachTask)(nil),
		(*FtraceEvent_CgroupMkdir)(nil),
		(*FtraceEvent_CgroupRemount)(nil),
		(*FtraceEvent_CgroupRmdir)(nil),
		(*FtraceEvent_CgroupTransferTasks)(nil),
		(*FtraceEvent_CgroupDestroyRoot)(nil),
		(*FtraceEvent_CgroupRelease)(nil),
		(*FtraceEvent_CgroupRename)(nil),
		(*FtraceEvent_CgroupSetupRoot)(nil),
		(*FtraceEvent_MdpCmdKickoff)(nil),
		(*FtraceEvent_MdpCommit)(nil),
		(*FtraceEvent_MdpPerfSetOt)(nil),
		(*FtraceEvent_MdpSsppChange)(nil),
		(*FtraceEvent_TracingMarkWrite)(nil),
		(*FtraceEvent_MdpCmdPingpongDone)(nil),
		(*FtraceEvent_MdpCompareBw)(nil),
		(*FtraceEvent_MdpPerfSetPanicLuts)(nil),
		(*FtraceEvent_MdpSsppSet)(nil),
		(*FtraceEvent_MdpCmdReadptrDone)(nil),
		(*FtraceEvent_MdpMisrCrc)(nil),
		(*FtraceEvent_MdpPerfSetQosLuts)(nil),
		(*FtraceEvent_MdpTraceCounter)(nil),
		(*FtraceEvent_MdpCmdReleaseBw)(nil),
		(*FtraceEvent_MdpMixerUpdate)(nil),
		(*FtraceEvent_MdpPerfSetWmLevels)(nil),
		(*FtraceEvent_MdpVideoUnderrunDone)(nil),
		(*FtraceEvent_MdpCmdWaitPingpong)(nil),
		(*FtraceEvent_MdpPerfPrefillCalc)(nil),
		(*FtraceEvent_MdpPerfUpdateBus)(nil),
		(*FtraceEvent_RotatorBwAoAsContext)(nil),
		(*FtraceEvent_MmFilemapAddToPageCache)(nil),
		(*FtraceEvent_MmFilemapDeleteFromPageCache)(nil),
		(*FtraceEvent_MmCompactionBegin)(nil),
		(*FtraceEvent_MmCompactionDeferCompaction)(nil),
		(*FtraceEvent_MmCompactionDeferred)(nil),
		(*FtraceEvent_MmCompactionDeferReset)(nil),
		(*FtraceEvent_MmCompactionEnd)(nil),
		(*FtraceEvent_MmCompactionFinished)(nil),
		(*FtraceEvent_MmCompactionIsolateFreepages)(nil),
		(*FtraceEvent_MmCompactionIsolateMigratepages)(nil),
		(*FtraceEvent_MmCompactionKcompactdSleep)(nil),
		(*FtraceEvent_MmCompactionKcompactdWake)(nil),
		(*FtraceEvent_MmCompactionMigratepages)(nil),
		(*FtraceEvent_MmCompactionSuitable)(nil),
		(*FtraceEvent_MmCompactionTryToCompactPages)(nil),
		(*FtraceEvent_MmCompactionWakeupKcompactd)(nil),
		(*FtraceEvent_SuspendResume)(nil),
		(*FtraceEvent_SchedWakeupNew)(nil),
		(*FtraceEvent_BlockBioBackmerge)(nil),
		(*FtraceEvent_BlockBioBounce)(nil),
		(*FtraceEvent_BlockBioComplete)(nil),
		(*FtraceEvent_BlockBioFrontmerge)(nil),
		(*FtraceEvent_BlockBioQueue)(nil),
		(*FtraceEvent_BlockBioRemap)(nil),
		(*FtraceEvent_BlockDirtyBuffer)(nil),
		(*FtraceEvent_BlockGetrq)(nil),
		(*FtraceEvent_BlockPlug)(nil),
		(*FtraceEvent_BlockRqAbort)(nil),
		(*FtraceEvent_BlockRqComplete)(nil),
		(*FtraceEvent_BlockRqInsert)(nil),
		(*FtraceEvent_BlockRqRemap)(nil),
		(*FtraceEvent_BlockRqRequeue)(nil),
		(*FtraceEvent_BlockSleeprq)(nil),
		(*FtraceEvent_BlockSplit)(nil),
		(*FtraceEvent_BlockTouchBuffer)(nil),
		(*FtraceEvent_BlockUnplug)(nil),
		(*FtraceEvent_Ext4AllocDaBlocks)(nil),
		(*FtraceEvent_Ext4AllocateBlocks)(nil),
		(*FtraceEvent_Ext4AllocateInode)(nil),
		(*FtraceEvent_Ext4BeginOrderedTruncate)(nil),
		(*FtraceEvent_Ext4CollapseRange)(nil),
		(*FtraceEvent_Ext4DaReleaseSpace)(nil),
		(*FtraceEvent_Ext4DaReserveSpace)(nil),
		(*FtraceEvent_Ext4DaUpdateReserveSpace)(nil),
		(*FtraceEvent_Ext4DaWritePages)(nil),
		(*FtraceEvent_Ext4DaWritePagesExtent)(nil),
		(*FtraceEvent_Ext4Direct_IOEnter)(nil),
		(*FtraceEvent_Ext4Direct_IOExit)(nil),
		(*FtraceEvent_Ext4DiscardBlocks)(nil),
		(*FtraceEvent_Ext4DiscardPreallocations)(nil),
		(*FtraceEvent_Ext4DropInode)(nil),
		(*FtraceEvent_Ext4EsCacheExtent)(nil),
		(*FtraceEvent_Ext4EsFindDelayedExtentRangeEnter)(nil),
		(*FtraceEvent_Ext4EsFindDelayedExtentRangeExit)(nil),
		(*FtraceEvent_Ext4EsInsertExtent)(nil),
		(*FtraceEvent_Ext4EsLookupExtentEnter)(nil),
		(*FtraceEvent_Ext4EsLookupExtentExit)(nil),
		(*FtraceEvent_Ext4EsRemoveExtent)(nil),
		(*FtraceEvent_Ext4EsShrink)(nil),
		(*FtraceEvent_Ext4EsShrinkCount)(nil),
		(*FtraceEvent_Ext4EsShrinkScanEnter)(nil),
		(*FtraceEvent_Ext4EsShrinkScanExit)(nil),
		(*FtraceEvent_Ext4EvictInode)(nil),
		(*FtraceEvent_Ext4ExtConvertToInitializedEnter)(nil),
		(*FtraceEvent_Ext4ExtConvertToInitializedFastpath)(nil),
		(*FtraceEvent_Ext4ExtHandleUnwrittenExtents)(nil),
		(*FtraceEvent_Ext4ExtInCache)(nil),
		(*FtraceEvent_Ext4ExtLoadExtent)(nil),
		(*FtraceEvent_Ext4ExtMapBlocksEnter)(nil),
		(*FtraceEvent_Ext4ExtMapBlocksExit)(nil),
		(*FtraceEvent_Ext4ExtPutInCache)(nil),
		(*FtraceEvent_Ext4ExtRemoveSpace)(nil),
		(*FtraceEvent_Ext4ExtRemoveSpaceDone)(nil),
		(*FtraceEvent_Ext4ExtRmIdx)(nil),
		(*FtraceEvent_Ext4ExtRmLeaf)(nil),
		(*FtraceEvent_Ext4ExtShowExtent)(nil),
		(*FtraceEvent_Ext4FallocateEnter)(nil),
		(*FtraceEvent_Ext4FallocateExit)(nil),
		(*FtraceEvent_Ext4FindDelallocRange)(nil),
		(*FtraceEvent_Ext4Forget)(nil),
		(*FtraceEvent_Ext4FreeBlocks)(nil),
		(*FtraceEvent_Ext4FreeInode)(nil),
		(*FtraceEvent_Ext4GetImpliedClusterAllocExit)(nil),
		(*FtraceEvent_Ext4GetReservedClusterAlloc)(nil),
		(*FtraceEvent_Ext4IndMapBlocksEnter)(nil),
		(*FtraceEvent_Ext4IndMapBlocksExit)(nil),
		(*FtraceEvent_Ext4InsertRange)(nil),
		(*FtraceEvent_Ext4Invalidatepage)(nil),
		(*FtraceEvent_Ext4JournalStart)(nil),
		(*FtraceEvent_Ext4JournalStartReserved)(nil),
		(*FtraceEvent_Ext4JournalledInvalidatepage)(nil),
		(*FtraceEvent_Ext4JournalledWriteEnd)(nil),
		(*FtraceEvent_Ext4LoadInode)(nil),
		(*FtraceEvent_Ext4LoadInodeBitmap)(nil),
		(*FtraceEvent_Ext4MarkInodeDirty)(nil),
		(*FtraceEvent_Ext4MbBitmapLoad)(nil),
		(*FtraceEvent_Ext4MbBuddyBitmapLoad)(nil),
		(*FtraceEvent_Ext4MbDiscardPreallocations)(nil),
		(*FtraceEvent_Ext4MbNewGroupPa)(nil),
		(*FtraceEvent_Ext4MbNewInodePa)(nil),
		(*FtraceEvent_Ext4MbReleaseGroupPa)(nil),
		(*FtraceEvent_Ext4MbReleaseInodePa)(nil),
		(*FtraceEvent_Ext4MballocAlloc)(nil),
		(*FtraceEvent_Ext4MballocDiscard)(nil),
		(*FtraceEvent_Ext4MballocFree)(nil),
		(*FtraceEvent_Ext4MballocPrealloc)(nil),
		(*FtraceEvent_Ext4OtherInodeUpdateTime)(nil),
		(*FtraceEvent_Ext4PunchHole)(nil),
		(*FtraceEvent_Ext4ReadBlockBitmapLoad)(nil),
		(*FtraceEvent_Ext4Readpage)(nil),
		(*FtraceEvent_Ext4Releasepage)(nil),
		(*FtraceEvent_Ext4RemoveBlocks)(nil),
		(*FtraceEvent_Ext4RequestBlocks)(nil),
		(*FtraceEvent_Ext4RequestInode)(nil),
		(*FtraceEvent_Ext4SyncFs)(nil),
		(*FtraceEvent_Ext4TrimAllFree)(nil),
		(*FtraceEvent_Ext4TrimExtent)(nil),
		(*FtraceEvent_Ext4TruncateEnter)(nil),
		(*FtraceEvent_Ext4TruncateExit)(nil),
		(*FtraceEvent_Ext4UnlinkEnter)(nil),
		(*FtraceEvent_Ext4UnlinkExit)(nil),
		(*FtraceEvent_Ext4WriteBegin)(nil),
		(*FtraceEvent_Ext4WriteEnd)(nil),
		(*FtraceEvent_Ext4Writepage)(nil),
		(*FtraceEvent_Ext4Writepages)(nil),
		(*FtraceEvent_Ext4WritepagesResult)(nil),
		(*FtraceEvent_Ext4ZeroRange)(nil),
		(*FtraceEvent_TaskNewtask)(nil),
		(*FtraceEvent_TaskRename)(nil),
		(*FtraceEvent_SchedProcessExec)(nil),
		(*FtraceEvent_SchedProcessExit)(nil),
		(*FtraceEvent_SchedProcessFork)(nil),
		(*FtraceEvent_SchedProcessFree)(nil),
		(*FtraceEvent_SchedProcessHang)(nil),
		(*FtraceEvent_SchedProcessWait)(nil),
		(*FtraceEvent_F2FsDoSubmitBio)(nil),
		(*FtraceEvent_F2FsEvictInode)(nil),
		(*FtraceEvent_F2FsFallocate)(nil),
		(*FtraceEvent_F2FsGetDataBlock)(nil),
		(*FtraceEvent_F2FsGetVictim)(nil),
		(*FtraceEvent_F2FsIget)(nil),
		(*FtraceEvent_F2FsIgetExit)(nil),
		(*FtraceEvent_F2FsNewInode)(nil),
		(*FtraceEvent_F2FsReadpage)(nil),
		(*FtraceEvent_F2FsReserveNewBlock)(nil),
		(*FtraceEvent_F2FsSetPageDirty)(nil),
		(*FtraceEvent_F2FsSubmitWritePage)(nil),
		(*FtraceEvent_F2FsSyncFileEnter)(nil),
		(*FtraceEvent_F2FsSyncFileExit)(nil),
		(*FtraceEvent_F2FsSyncFs)(nil),
		(*FtraceEvent_F2FsTruncate)(nil),
		(*FtraceEvent_F2FsTruncateBlocksEnter)(nil),
		(*FtraceEvent_F2FsTruncateBlocksExit)(nil),
		(*FtraceEvent_F2FsTruncateDataBlocksRange)(nil),
		(*FtraceEvent_F2FsTruncateInodeBlocksEnter)(nil),
		(*FtraceEvent_F2FsTruncateInodeBlocksExit)(nil),
		(*FtraceEvent_F2FsTruncateNode)(nil),
		(*FtraceEvent_F2FsTruncateNodesEnter)(nil),
		(*FtraceEvent_F2FsTruncateNodesExit)(nil),
		(*FtraceEvent_F2FsTruncatePartialNodes)(nil),
		(*FtraceEvent_F2FsUnlinkEnter)(nil),
		(*FtraceEvent_F2FsUnlinkExit)(nil),
		(*FtraceEvent_F2FsVmPageMkwrite)(nil),
		(*FtraceEvent_F2FsWriteBegin)(nil),
		(*FtraceEvent_F2FsWriteCheckpoint)(nil),
		(*FtraceEvent_F2FsWriteEnd)(nil),
		(*FtraceEvent_AllocPagesIommuEnd)(nil),
		(*FtraceEvent_AllocPagesIommuFail)(nil),
		(*FtraceEvent_AllocPagesIommuStart)(nil),
		(*FtraceEvent_AllocPagesSysEnd)(nil),
		(*FtraceEvent_AllocPagesSysFail)(nil),
		(*FtraceEvent_AllocPagesSysStart)(nil),
		(*FtraceEvent_DmaAllocContiguousRetry)(nil),
		(*FtraceEvent_IommuMapRange)(nil),
		(*FtraceEvent_IommuSecPtblMapRangeEnd)(nil),
		(*FtraceEvent_IommuSecPtblMapRangeStart)(nil),
		(*FtraceEvent_IonAllocBufferEnd)(nil),
		(*FtraceEvent_IonAllocBufferFail)(nil),
		(*FtraceEvent_IonAllocBufferFallback)(nil),
		(*FtraceEvent_IonAllocBufferStart)(nil),
		(*FtraceEvent_IonCpAllocRetry)(nil),
		(*FtraceEvent_IonCpSecureBufferEnd)(nil),
		(*FtraceEvent_IonCpSecureBufferStart)(nil),
		(*FtraceEvent_IonPrefetching)(nil),
		(*FtraceEvent_IonSecureCmaAddToPoolEnd)(nil),
		(*FtraceEvent_IonSecureCmaAddToPoolStart)(nil),
		(*FtraceEvent_IonSecureCmaAllocateEnd)(nil),
		(*FtraceEvent_IonSecureCmaAllocateStart)(nil),
		(*FtraceEvent_IonSecureCmaShrinkPoolEnd)(nil),
		(*FtraceEvent_IonSecureCmaShrinkPoolStart)(nil),
		(*FtraceEvent_Kfree)(nil),
		(*FtraceEvent_Kmalloc)(nil),
		(*FtraceEvent_KmallocNode)(nil),
		(*FtraceEvent_KmemCacheAlloc)(nil),
		(*FtraceEvent_KmemCacheAllocNode)(nil),
		(*FtraceEvent_KmemCacheFree)(nil),
		(*FtraceEvent_MigratePagesEnd)(nil),
		(*FtraceEvent_MigratePagesStart)(nil),
		(*FtraceEvent_MigrateRetry)(nil),
		(*FtraceEvent_MmPageAlloc)(nil),
		(*FtraceEvent_MmPageAllocExtfrag)(nil),
		(*FtraceEvent_MmPageAllocZoneLocked)(nil),
		(*FtraceEvent_MmPageFree)(nil),
		(*FtraceEvent_MmPageFreeBatched)(nil),
		(*FtraceEvent_MmPagePcpuDrain)(nil),
		(*FtraceEvent_RssStat)(nil),
		(*FtraceEvent_IonHeapShrink)(nil),
		(*FtraceEvent_IonHeapGrow)(nil),
		(*FtraceEvent_FenceInit)(nil),
		(*FtraceEvent_FenceDestroy)(nil),
		(*FtraceEvent_FenceEnableSignal)(nil),
		(*FtraceEvent_FenceSignaled)(nil),
		(*FtraceEvent_ClkEnable)(nil),
		(*FtraceEvent_ClkDisable)(nil),
		(*FtraceEvent_ClkSetRate)(nil),
		(*FtraceEvent_BinderTransactionAllocBuf)(nil),
		(*FtraceEvent_SignalDeliver)(nil),
		(*FtraceEvent_SignalGenerate)(nil),
		(*FtraceEvent_OomScoreAdjUpdate)(nil),
		(*FtraceEvent_Generic)(nil),
		(*FtraceEvent_MmEventRecord)(nil),
		(*FtraceEvent_SysEnter)(nil),
		(*FtraceEvent_SysExit)(nil),
		(*FtraceEvent_Zero)(nil),
		(*FtraceEvent_GpuFrequency)(nil),
		(*FtraceEvent_SdeTracingMarkWrite)(nil),
		(*FtraceEvent_MarkVictim)(nil),
		(*FtraceEvent_IonStat)(nil),
		(*FtraceEvent_IonBufferCreate)(nil),
		(*FtraceEvent_IonBufferDestroy)(nil),
		(*FtraceEvent_ScmCallStart)(nil),
		(*FtraceEvent_ScmCallEnd)(nil),
		(*FtraceEvent_GpuMemTotal)(nil),
		(*FtraceEvent_ThermalTemperature)(nil),
		(*FtraceEvent_CdevUpdate)(nil),
		(*FtraceEvent_CpuhpExit)(nil),
		(*FtraceEvent_CpuhpMultiEnter)(nil),
		(*FtraceEvent_CpuhpEnter)(nil),
		(*FtraceEvent_CpuhpLatency)(nil),
		(*FtraceEvent_FastrpcDmaStat)(nil),
		(*FtraceEvent_DpuTracingMarkWrite)(nil),
		(*FtraceEvent_G2DTracingMarkWrite)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[390].OneofWrappers = []interface{}{
		(*VulkanApiEvent_VkDebugUtilsObjectName_)(nil),
		(*VulkanApiEvent_VkQueueSubmit_)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[391].OneofWrappers = []interface{}{
		(*VulkanMemoryEventAnnotation_IntValue)(nil),
		(*VulkanMemoryEventAnnotation_DoubleValue)(nil),
		(*VulkanMemoryEventAnnotation_StringIid)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[403].OneofWrappers = []interface{}{
		(*DebugAnnotation_NameIid)(nil),
		(*DebugAnnotation_Name)(nil),
		(*DebugAnnotation_BoolValue)(nil),
		(*DebugAnnotation_UintValue)(nil),
		(*DebugAnnotation_IntValue)(nil),
		(*DebugAnnotation_DoubleValue)(nil),
		(*DebugAnnotation_StringValue)(nil),
		(*DebugAnnotation_PointerValue)(nil),
		(*DebugAnnotation_NestedValue_)(nil),
		(*DebugAnnotation_LegacyJsonValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[411].OneofWrappers = []interface{}{
		(*BeginFrameArgs_SourceLocationIid)(nil),
		(*BeginFrameArgs_SourceLocation)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[412].OneofWrappers = []interface{}{
		(*BeginImplFrameArgs_CurrentArgs)(nil),
		(*BeginImplFrameArgs_LastArgs)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[426].OneofWrappers = []interface{}{
		(*TrackEvent_NameIid)(nil),
		(*TrackEvent_Name)(nil),
		(*TrackEvent_SourceLocation)(nil),
		(*TrackEvent_SourceLocationIid)(nil),
		(*TrackEvent_TimestampDeltaUs)(nil),
		(*TrackEvent_TimestampAbsoluteUs)(nil),
		(*TrackEvent_ThreadTimeDeltaUs)(nil),
		(*TrackEvent_ThreadTimeAbsoluteUs)(nil),
		(*TrackEvent_ThreadInstructionCountDelta)(nil),
		(*TrackEvent_ThreadInstructionCountAbsolute)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[432].OneofWrappers = []interface{}{
		(*PerfettoMetatrace_EventId)(nil),
		(*PerfettoMetatrace_CounterId)(nil),
		(*PerfettoMetatrace_EventName)(nil),
		(*PerfettoMetatrace_CounterName)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[433].OneofWrappers = []interface{}{
		(*TracingServiceEvent_TracingStarted)(nil),
		(*TracingServiceEvent_AllDataSourcesStarted)(nil),
		(*TracingServiceEvent_AllDataSourcesFlushed)(nil),
		(*TracingServiceEvent_ReadTracingBuffersCompleted)(nil),
		(*TracingServiceEvent_TracingDisabled)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[448].OneofWrappers = []interface{}{
		(*PerfSample_UnwindError)(nil),
		(*PerfSample_SampleSkippedReason)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[466].OneofWrappers = []interface{}{
		(*TracePacket_ProcessTree)(nil),
		(*TracePacket_ProcessStats)(nil),
		(*TracePacket_InodeFileMap)(nil),
		(*TracePacket_ChromeEvents)(nil),
		(*TracePacket_ClockSnapshot)(nil),
		(*TracePacket_SysStats)(nil),
		(*TracePacket_TrackEvent)(nil),
		(*TracePacket_TraceConfig)(nil),
		(*TracePacket_FtraceStats)(nil),
		(*TracePacket_TraceStats)(nil),
		(*TracePacket_ProfilePacket)(nil),
		(*TracePacket_StreamingAllocation)(nil),
		(*TracePacket_StreamingFree)(nil),
		(*TracePacket_Battery)(nil),
		(*TracePacket_PowerRails)(nil),
		(*TracePacket_AndroidLog)(nil),
		(*TracePacket_SystemInfo)(nil),
		(*TracePacket_Trigger)(nil),
		(*TracePacket_PackagesList)(nil),
		(*TracePacket_ChromeBenchmarkMetadata)(nil),
		(*TracePacket_PerfettoMetatrace)(nil),
		(*TracePacket_ChromeMetadata)(nil),
		(*TracePacket_GpuCounterEvent)(nil),
		(*TracePacket_GpuRenderStageEvent)(nil),
		(*TracePacket_StreamingProfilePacket)(nil),
		(*TracePacket_HeapGraph)(nil),
		(*TracePacket_GraphicsFrameEvent)(nil),
		(*TracePacket_VulkanMemoryEvent)(nil),
		(*TracePacket_GpuLog)(nil),
		(*TracePacket_VulkanApiEvent)(nil),
		(*TracePacket_PerfSample)(nil),
		(*TracePacket_CpuInfo)(nil),
		(*TracePacket_SmapsPacket)(nil),
		(*TracePacket_ServiceEvent)(nil),
		(*TracePacket_InitialDisplayState)(nil),
		(*TracePacket_GpuMemTotalEvent)(nil),
		(*TracePacket_MemoryTrackerSnapshot)(nil),
		(*TracePacket_FrameTimelineEvent)(nil),
		(*TracePacket_ProfiledFrameSymbols)(nil),
		(*TracePacket_ModuleSymbols)(nil),
		(*TracePacket_DeobfuscationMapping)(nil),
		(*TracePacket_TrackDescriptor)(nil),
		(*TracePacket_ProcessDescriptor)(nil),
		(*TracePacket_ThreadDescriptor)(nil),
		(*TracePacket_FtraceEvents)(nil),
		(*TracePacket_SynchronizationMarker)(nil),
		(*TracePacket_CompressedPackets)(nil),
		(*TracePacket_ExtensionDescriptor)(nil),
		(*TracePacket_ForTesting)(nil),
		(*TracePacket_TrustedUid)(nil),
		(*TracePacket_TrustedPacketSequenceId)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[470].OneofWrappers = []interface{}{
		(*GpuCounterDescriptor_GpuCounterSpec_IntPeakValue)(nil),
		(*GpuCounterDescriptor_GpuCounterSpec_DoublePeakValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[492].OneofWrappers = []interface{}{
		(*AndroidLogPacket_LogEvent_Arg_IntValue)(nil),
		(*AndroidLogPacket_LogEvent_Arg_FloatValue)(nil),
		(*AndroidLogPacket_LogEvent_Arg_StringValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[500].OneofWrappers = []interface{}{
		(*ChromeTraceEvent_Arg_BoolValue)(nil),
		(*ChromeTraceEvent_Arg_UintValue)(nil),
		(*ChromeTraceEvent_Arg_IntValue)(nil),
		(*ChromeTraceEvent_Arg_DoubleValue)(nil),
		(*ChromeTraceEvent_Arg_StringValue)(nil),
		(*ChromeTraceEvent_Arg_PointerValue)(nil),
		(*ChromeTraceEvent_Arg_JsonValue)(nil),
		(*ChromeTraceEvent_Arg_TracedValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[504].OneofWrappers = []interface{}{
		(*GenericFtraceEvent_Field_StrValue)(nil),
		(*GenericFtraceEvent_Field_IntValue)(nil),
		(*GenericFtraceEvent_Field_UintValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[506].OneofWrappers = []interface{}{
		(*GpuCounterEvent_GpuCounter_IntValue)(nil),
		(*GpuCounterEvent_GpuCounter_DoubleValue)(nil),
	}
	file_protos_perfetto_trace_perfetto_trace_proto_msgTypes[518].OneofWrappers = []interface{}{
		(*TrackEvent_LegacyEvent_UnscopedId)(nil),
		(*TrackEvent_LegacyEvent_LocalId)(nil),
		(*TrackEvent_LegacyEvent_GlobalId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_perfetto_trace_perfetto_trace_proto_rawDesc,
			NumEnums:      68,
			NumMessages:   541,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_protos_perfetto_trace_perfetto_trace_proto_goTypes,
		DependencyIndexes: file_protos_perfetto_trace_perfetto_trace_proto_depIdxs,
		EnumInfos:         file_protos_perfetto_trace_perfetto_trace_proto_enumTypes,
		MessageInfos:      file_protos_perfetto_trace_perfetto_trace_proto_msgTypes,
		ExtensionInfos:    file_protos_perfetto_trace_perfetto_trace_proto_extTypes,
	}.Build()
	File_protos_perfetto_trace_perfetto_trace_proto = out.File
	file_protos_perfetto_trace_perfetto_trace_proto_rawDesc = nil
	file_protos_perfetto_trace_perfetto_trace_proto_goTypes = nil
	file_protos_perfetto_trace_perfetto_trace_proto_depIdxs = nil
}
