//
// Copyright (C) 2018 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.9.0
// source: protos/perfetto/trace_processor/trace_processor.proto

package trace_processor

import (
	common "github.com/barnett-yuxiang/perfetto_protos/gen/protos/perfetto/common"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RawQueryResult_ColumnDesc_Type int32

const (
	RawQueryResult_ColumnDesc_UNKNOWN RawQueryResult_ColumnDesc_Type = 0
	RawQueryResult_ColumnDesc_LONG    RawQueryResult_ColumnDesc_Type = 1
	RawQueryResult_ColumnDesc_DOUBLE  RawQueryResult_ColumnDesc_Type = 2
	RawQueryResult_ColumnDesc_STRING  RawQueryResult_ColumnDesc_Type = 3
)

// Enum value maps for RawQueryResult_ColumnDesc_Type.
var (
	RawQueryResult_ColumnDesc_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "LONG",
		2: "DOUBLE",
		3: "STRING",
	}
	RawQueryResult_ColumnDesc_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"LONG":    1,
		"DOUBLE":  2,
		"STRING":  3,
	}
)

func (x RawQueryResult_ColumnDesc_Type) Enum() *RawQueryResult_ColumnDesc_Type {
	p := new(RawQueryResult_ColumnDesc_Type)
	*p = x
	return p
}

func (x RawQueryResult_ColumnDesc_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RawQueryResult_ColumnDesc_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes[0].Descriptor()
}

func (RawQueryResult_ColumnDesc_Type) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes[0]
}

func (x RawQueryResult_ColumnDesc_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RawQueryResult_ColumnDesc_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RawQueryResult_ColumnDesc_Type(num)
	return nil
}

// Deprecated: Use RawQueryResult_ColumnDesc_Type.Descriptor instead.
func (RawQueryResult_ColumnDesc_Type) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{1, 0, 0}
}

type QueryResult_CellsBatch_CellType int32

const (
	QueryResult_CellsBatch_CELL_INVALID QueryResult_CellsBatch_CellType = 0
	QueryResult_CellsBatch_CELL_NULL    QueryResult_CellsBatch_CellType = 1
	QueryResult_CellsBatch_CELL_VARINT  QueryResult_CellsBatch_CellType = 2
	QueryResult_CellsBatch_CELL_FLOAT64 QueryResult_CellsBatch_CellType = 3
	QueryResult_CellsBatch_CELL_STRING  QueryResult_CellsBatch_CellType = 4
	QueryResult_CellsBatch_CELL_BLOB    QueryResult_CellsBatch_CellType = 5
)

// Enum value maps for QueryResult_CellsBatch_CellType.
var (
	QueryResult_CellsBatch_CellType_name = map[int32]string{
		0: "CELL_INVALID",
		1: "CELL_NULL",
		2: "CELL_VARINT",
		3: "CELL_FLOAT64",
		4: "CELL_STRING",
		5: "CELL_BLOB",
	}
	QueryResult_CellsBatch_CellType_value = map[string]int32{
		"CELL_INVALID": 0,
		"CELL_NULL":    1,
		"CELL_VARINT":  2,
		"CELL_FLOAT64": 3,
		"CELL_STRING":  4,
		"CELL_BLOB":    5,
	}
)

func (x QueryResult_CellsBatch_CellType) Enum() *QueryResult_CellsBatch_CellType {
	p := new(QueryResult_CellsBatch_CellType)
	*p = x
	return p
}

func (x QueryResult_CellsBatch_CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryResult_CellsBatch_CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes[1].Descriptor()
}

func (QueryResult_CellsBatch_CellType) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes[1]
}

func (x QueryResult_CellsBatch_CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QueryResult_CellsBatch_CellType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QueryResult_CellsBatch_CellType(num)
	return nil
}

// Deprecated: Use QueryResult_CellsBatch_CellType.Descriptor instead.
func (QueryResult_CellsBatch_CellType) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{2, 0, 0}
}

type ComputeMetricArgs_ResultFormat int32

const (
	ComputeMetricArgs_BINARY_PROTOBUF ComputeMetricArgs_ResultFormat = 0
	ComputeMetricArgs_TEXTPROTO       ComputeMetricArgs_ResultFormat = 1
)

// Enum value maps for ComputeMetricArgs_ResultFormat.
var (
	ComputeMetricArgs_ResultFormat_name = map[int32]string{
		0: "BINARY_PROTOBUF",
		1: "TEXTPROTO",
	}
	ComputeMetricArgs_ResultFormat_value = map[string]int32{
		"BINARY_PROTOBUF": 0,
		"TEXTPROTO":       1,
	}
)

func (x ComputeMetricArgs_ResultFormat) Enum() *ComputeMetricArgs_ResultFormat {
	p := new(ComputeMetricArgs_ResultFormat)
	*p = x
	return p
}

func (x ComputeMetricArgs_ResultFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeMetricArgs_ResultFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes[2].Descriptor()
}

func (ComputeMetricArgs_ResultFormat) Type() protoreflect.EnumType {
	return &file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes[2]
}

func (x ComputeMetricArgs_ResultFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ComputeMetricArgs_ResultFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ComputeMetricArgs_ResultFormat(num)
	return nil
}

// Deprecated: Use ComputeMetricArgs_ResultFormat.Descriptor instead.
func (ComputeMetricArgs_ResultFormat) EnumDescriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{5, 0}
}

// Input for the /raw_query endpoint.
type RawQueryArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlQuery *string `protobuf:"bytes,1,opt,name=sql_query,json=sqlQuery" json:"sql_query,omitempty"`
	// Wall time when the query was queued. Used only for query stats.
	TimeQueuedNs *uint64 `protobuf:"varint,2,opt,name=time_queued_ns,json=timeQueuedNs" json:"time_queued_ns,omitempty"`
}

func (x *RawQueryArgs) Reset() {
	*x = RawQueryArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQueryArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQueryArgs) ProtoMessage() {}

func (x *RawQueryArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQueryArgs.ProtoReflect.Descriptor instead.
func (*RawQueryArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{0}
}

func (x *RawQueryArgs) GetSqlQuery() string {
	if x != nil && x.SqlQuery != nil {
		return *x.SqlQuery
	}
	return ""
}

func (x *RawQueryArgs) GetTimeQueuedNs() uint64 {
	if x != nil && x.TimeQueuedNs != nil {
		return *x.TimeQueuedNs
	}
	return 0
}

// Output for the /raw_query endpoint.
// DEPRECATED, use /query. See QueryResult below.
type RawQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnDescriptors []*RawQueryResult_ColumnDesc   `protobuf:"bytes,1,rep,name=column_descriptors,json=columnDescriptors" json:"column_descriptors,omitempty"`
	NumRecords        *uint64                        `protobuf:"varint,2,opt,name=num_records,json=numRecords" json:"num_records,omitempty"`
	Columns           []*RawQueryResult_ColumnValues `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Error             *string                        `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	ExecutionTimeNs   *uint64                        `protobuf:"varint,5,opt,name=execution_time_ns,json=executionTimeNs" json:"execution_time_ns,omitempty"`
}

func (x *RawQueryResult) Reset() {
	*x = RawQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQueryResult) ProtoMessage() {}

func (x *RawQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQueryResult.ProtoReflect.Descriptor instead.
func (*RawQueryResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{1}
}

func (x *RawQueryResult) GetColumnDescriptors() []*RawQueryResult_ColumnDesc {
	if x != nil {
		return x.ColumnDescriptors
	}
	return nil
}

func (x *RawQueryResult) GetNumRecords() uint64 {
	if x != nil && x.NumRecords != nil {
		return *x.NumRecords
	}
	return 0
}

func (x *RawQueryResult) GetColumns() []*RawQueryResult_ColumnValues {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *RawQueryResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *RawQueryResult) GetExecutionTimeNs() uint64 {
	if x != nil && x.ExecutionTimeNs != nil {
		return *x.ExecutionTimeNs
	}
	return 0
}

// Output for the /query endpoint.
// Returns a query result set, grouping cells into batches. Batching allows a
// more efficient encoding of results, at the same time allowing to return
// O(M) results in a pipelined fashion, without full-memory buffering.
// Batches are split when either a large number of cells (~thousands) is reached
// or the string/blob payload becomes too large (~hundreds of KB).
// Data is batched in cells, scanning results by row -> column. e.g. if a query
// returns 3 columns and 2 rows, the cells will be emitted in this order:
// R0C0, R0C1, R0C2, R1C0, R1C1, R1C2.
type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This determines the number and names of columns.
	ColumnNames []string `protobuf:"bytes,1,rep,name=column_names,json=columnNames" json:"column_names,omitempty"`
	// If non-emty the query returned an error. Note that some cells might still
	// be present, if the error happened while iterating.
	Error *string                   `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Batch []*QueryResult_CellsBatch `protobuf:"bytes,3,rep,name=batch" json:"batch,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{2}
}

func (x *QueryResult) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

func (x *QueryResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *QueryResult) GetBatch() []*QueryResult_CellsBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// Input for the /status endpoint.
type StatusArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusArgs) Reset() {
	*x = StatusArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusArgs) ProtoMessage() {}

func (x *StatusArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusArgs.ProtoReflect.Descriptor instead.
func (*StatusArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{3}
}

// Output for the /status endpoint.
type StatusResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If present and not empty, a trace is already loaded already. This happens
	// when using the HTTP+RPC mode nad passing a trace file to the shell, via
	// trace_processor_shell -D trace_file.pftrace .
	LoadedTraceName *string `protobuf:"bytes,1,opt,name=loaded_trace_name,json=loadedTraceName" json:"loaded_trace_name,omitempty"`
}

func (x *StatusResult) Reset() {
	*x = StatusResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResult) ProtoMessage() {}

func (x *StatusResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResult.ProtoReflect.Descriptor instead.
func (*StatusResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResult) GetLoadedTraceName() string {
	if x != nil && x.LoadedTraceName != nil {
		return *x.LoadedTraceName
	}
	return ""
}

// Input for the /compute_metric endpoint.
type ComputeMetricArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricNames []string                        `protobuf:"bytes,1,rep,name=metric_names,json=metricNames" json:"metric_names,omitempty"`
	Format      *ComputeMetricArgs_ResultFormat `protobuf:"varint,2,opt,name=format,enum=perfetto.protos.ComputeMetricArgs_ResultFormat" json:"format,omitempty"`
}

func (x *ComputeMetricArgs) Reset() {
	*x = ComputeMetricArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeMetricArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeMetricArgs) ProtoMessage() {}

func (x *ComputeMetricArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeMetricArgs.ProtoReflect.Descriptor instead.
func (*ComputeMetricArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{5}
}

func (x *ComputeMetricArgs) GetMetricNames() []string {
	if x != nil {
		return x.MetricNames
	}
	return nil
}

func (x *ComputeMetricArgs) GetFormat() ComputeMetricArgs_ResultFormat {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return ComputeMetricArgs_BINARY_PROTOBUF
}

// Output for the /compute_metric endpoint.
type ComputeMetricResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*ComputeMetricResult_Metrics
	//	*ComputeMetricResult_MetricsAsPrototext
	Result isComputeMetricResult_Result `protobuf_oneof:"result"`
	Error  *string                      `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *ComputeMetricResult) Reset() {
	*x = ComputeMetricResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeMetricResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeMetricResult) ProtoMessage() {}

func (x *ComputeMetricResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeMetricResult.ProtoReflect.Descriptor instead.
func (*ComputeMetricResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{6}
}

func (m *ComputeMetricResult) GetResult() isComputeMetricResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ComputeMetricResult) GetMetrics() []byte {
	if x, ok := x.GetResult().(*ComputeMetricResult_Metrics); ok {
		return x.Metrics
	}
	return nil
}

func (x *ComputeMetricResult) GetMetricsAsPrototext() string {
	if x, ok := x.GetResult().(*ComputeMetricResult_MetricsAsPrototext); ok {
		return x.MetricsAsPrototext
	}
	return ""
}

func (x *ComputeMetricResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type isComputeMetricResult_Result interface {
	isComputeMetricResult_Result()
}

type ComputeMetricResult_Metrics struct {
	// This is meant to contain a perfetto.protos.TraceMetrics. We're using
	// bytes instead of the actual type because we do not want to generate
	// protozero code for the metrics protos. We always encode/decode metrics
	// using a reflection based mechanism that does not require the compiled C++
	// code. This allows us to read in new protos at runtime.
	Metrics []byte `protobuf:"bytes,1,opt,name=metrics,oneof"`
}

type ComputeMetricResult_MetricsAsPrototext struct {
	// A perfetto.protos.TraceMetrics formatted as prototext.
	MetricsAsPrototext string `protobuf:"bytes,3,opt,name=metrics_as_prototext,json=metricsAsPrototext,oneof"`
}

func (*ComputeMetricResult_Metrics) isComputeMetricResult_Result() {}

func (*ComputeMetricResult_MetricsAsPrototext) isComputeMetricResult_Result() {}

// Input for the /enable_metatrace endpoint.
type EnableMetatraceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableMetatraceArgs) Reset() {
	*x = EnableMetatraceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMetatraceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMetatraceArgs) ProtoMessage() {}

func (x *EnableMetatraceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMetatraceArgs.ProtoReflect.Descriptor instead.
func (*EnableMetatraceArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{7}
}

// Output for the /enable_metatrace endpoint.
type EnableMetatraceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableMetatraceResult) Reset() {
	*x = EnableMetatraceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableMetatraceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableMetatraceResult) ProtoMessage() {}

func (x *EnableMetatraceResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableMetatraceResult.ProtoReflect.Descriptor instead.
func (*EnableMetatraceResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{8}
}

// Input for the /disable_and_read_metatrace endpoint.
type DisableAndReadMetatraceArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableAndReadMetatraceArgs) Reset() {
	*x = DisableAndReadMetatraceArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAndReadMetatraceArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAndReadMetatraceArgs) ProtoMessage() {}

func (x *DisableAndReadMetatraceArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAndReadMetatraceArgs.ProtoReflect.Descriptor instead.
func (*DisableAndReadMetatraceArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{9}
}

// Output for the /disable_and_read_metatrace endpoint.
type DisableAndReadMetatraceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bytes of perfetto.protos.Trace message. Stored as bytes
	// to avoid adding a dependency on trace.proto.
	Metatrace []byte  `protobuf:"bytes,1,opt,name=metatrace" json:"metatrace,omitempty"`
	Error     *string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *DisableAndReadMetatraceResult) Reset() {
	*x = DisableAndReadMetatraceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableAndReadMetatraceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableAndReadMetatraceResult) ProtoMessage() {}

func (x *DisableAndReadMetatraceResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableAndReadMetatraceResult.ProtoReflect.Descriptor instead.
func (*DisableAndReadMetatraceResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{10}
}

func (x *DisableAndReadMetatraceResult) GetMetatrace() []byte {
	if x != nil {
		return x.Metatrace
	}
	return nil
}

func (x *DisableAndReadMetatraceResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// Convenience wrapper for multiple descriptors, similar to FileDescriptorSet
// in descriptor.proto.
type DescriptorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Descriptors []*common.DescriptorProto `protobuf:"bytes,1,rep,name=descriptors" json:"descriptors,omitempty"`
}

func (x *DescriptorSet) Reset() {
	*x = DescriptorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescriptorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptorSet) ProtoMessage() {}

func (x *DescriptorSet) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptorSet.ProtoReflect.Descriptor instead.
func (*DescriptorSet) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{11}
}

func (x *DescriptorSet) GetDescriptors() []*common.DescriptorProto {
	if x != nil {
		return x.Descriptors
	}
	return nil
}

// Input for the /get_metric_descriptors endpoint.
type GetMetricDescriptorsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMetricDescriptorsArgs) Reset() {
	*x = GetMetricDescriptorsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricDescriptorsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricDescriptorsArgs) ProtoMessage() {}

func (x *GetMetricDescriptorsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricDescriptorsArgs.ProtoReflect.Descriptor instead.
func (*GetMetricDescriptorsArgs) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{12}
}

// Output for the /get_metric_descriptors endpoint.
type GetMetricDescriptorsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptorSet *DescriptorSet `protobuf:"bytes,1,opt,name=descriptor_set,json=descriptorSet" json:"descriptor_set,omitempty"`
}

func (x *GetMetricDescriptorsResult) Reset() {
	*x = GetMetricDescriptorsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMetricDescriptorsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetricDescriptorsResult) ProtoMessage() {}

func (x *GetMetricDescriptorsResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetricDescriptorsResult.ProtoReflect.Descriptor instead.
func (*GetMetricDescriptorsResult) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{13}
}

func (x *GetMetricDescriptorsResult) GetDescriptorSet() *DescriptorSet {
	if x != nil {
		return x.DescriptorSet
	}
	return nil
}

type RawQueryResult_ColumnDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string                         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *RawQueryResult_ColumnDesc_Type `protobuf:"varint,2,opt,name=type,enum=perfetto.protos.RawQueryResult_ColumnDesc_Type" json:"type,omitempty"`
}

func (x *RawQueryResult_ColumnDesc) Reset() {
	*x = RawQueryResult_ColumnDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQueryResult_ColumnDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQueryResult_ColumnDesc) ProtoMessage() {}

func (x *RawQueryResult_ColumnDesc) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQueryResult_ColumnDesc.ProtoReflect.Descriptor instead.
func (*RawQueryResult_ColumnDesc) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RawQueryResult_ColumnDesc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RawQueryResult_ColumnDesc) GetType() RawQueryResult_ColumnDesc_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RawQueryResult_ColumnDesc_UNKNOWN
}

type RawQueryResult_ColumnValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only one of this field will be filled for each column (according to the
	// corresponding descriptor) and that one will have precisely |num_records|
	// elements.
	LongValues   []int64   `protobuf:"varint,1,rep,name=long_values,json=longValues" json:"long_values,omitempty"`
	DoubleValues []float64 `protobuf:"fixed64,2,rep,name=double_values,json=doubleValues" json:"double_values,omitempty"`
	StringValues []string  `protobuf:"bytes,3,rep,name=string_values,json=stringValues" json:"string_values,omitempty"`
	// This will be set to true or false depending on whether the data at the
	// given index is NULL.
	IsNulls []bool `protobuf:"varint,4,rep,name=is_nulls,json=isNulls" json:"is_nulls,omitempty"`
}

func (x *RawQueryResult_ColumnValues) Reset() {
	*x = RawQueryResult_ColumnValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawQueryResult_ColumnValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawQueryResult_ColumnValues) ProtoMessage() {}

func (x *RawQueryResult_ColumnValues) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawQueryResult_ColumnValues.ProtoReflect.Descriptor instead.
func (*RawQueryResult_ColumnValues) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RawQueryResult_ColumnValues) GetLongValues() []int64 {
	if x != nil {
		return x.LongValues
	}
	return nil
}

func (x *RawQueryResult_ColumnValues) GetDoubleValues() []float64 {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

func (x *RawQueryResult_ColumnValues) GetStringValues() []string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *RawQueryResult_ColumnValues) GetIsNulls() []bool {
	if x != nil {
		return x.IsNulls
	}
	return nil
}

// A batch contains an array of cell headers, stating the type of each cell.
// The payload of each cell is stored in the corresponding xxx_cells field
// below (unless the cell is NULL).
// So if |cells| contains: [VARINT, FLOAT64, VARINT, STRING], the results will
// be available as:
// [varint_cells[0], float64_cells[0], varint_cells[1], string_cells[0]].
type QueryResult_CellsBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells        []QueryResult_CellsBatch_CellType `protobuf:"varint,1,rep,packed,name=cells,enum=perfetto.protos.QueryResult_CellsBatch_CellType" json:"cells,omitempty"`
	VarintCells  []int64                           `protobuf:"varint,2,rep,packed,name=varint_cells,json=varintCells" json:"varint_cells,omitempty"`
	Float64Cells []float64                         `protobuf:"fixed64,3,rep,packed,name=float64_cells,json=float64Cells" json:"float64_cells,omitempty"`
	BlobCells    [][]byte                          `protobuf:"bytes,4,rep,name=blob_cells,json=blobCells" json:"blob_cells,omitempty"`
	// The string cells are concatenated in a single field. Each cell is
	// NUL-terminated. This is because JS incurs into a non-negligible overhead
	// when decoding strings and one decode + split('\0') is measurably faster
	// than decoding N strings. See goto.google.com/postmessage-benchmark .
	// \0-concatenated.
	StringCells *string `protobuf:"bytes,5,opt,name=string_cells,json=stringCells" json:"string_cells,omitempty"`
	// If true this is the last batch for the query result.
	IsLastBatch *bool `protobuf:"varint,6,opt,name=is_last_batch,json=isLastBatch" json:"is_last_batch,omitempty"`
}

func (x *QueryResult_CellsBatch) Reset() {
	*x = QueryResult_CellsBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult_CellsBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult_CellsBatch) ProtoMessage() {}

func (x *QueryResult_CellsBatch) ProtoReflect() protoreflect.Message {
	mi := &file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult_CellsBatch.ProtoReflect.Descriptor instead.
func (*QueryResult_CellsBatch) Descriptor() ([]byte, []int) {
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP(), []int{2, 0}
}

func (x *QueryResult_CellsBatch) GetCells() []QueryResult_CellsBatch_CellType {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *QueryResult_CellsBatch) GetVarintCells() []int64 {
	if x != nil {
		return x.VarintCells
	}
	return nil
}

func (x *QueryResult_CellsBatch) GetFloat64Cells() []float64 {
	if x != nil {
		return x.Float64Cells
	}
	return nil
}

func (x *QueryResult_CellsBatch) GetBlobCells() [][]byte {
	if x != nil {
		return x.BlobCells
	}
	return nil
}

func (x *QueryResult_CellsBatch) GetStringCells() string {
	if x != nil && x.StringCells != nil {
		return *x.StringCells
	}
	return ""
}

func (x *QueryResult_CellsBatch) GetIsLastBatch() bool {
	if x != nil && x.IsLastBatch != nil {
		return *x.IsLastBatch
	}
	return false
}

var File_protos_perfetto_trace_processor_trace_processor_proto protoreflect.FileDescriptor

var file_protos_perfetto_trace_processor_trace_processor_proto_rawDesc = []byte{
	0x0a, 0x35, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x51, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x71, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x4e, 0x73, 0x22, 0xcc, 0x04, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52,
	0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x1a, 0x9c, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x52, 0x61, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x94, 0x01, 0x0a,
	0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x73, 0x22, 0x8c, 0x04, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x84, 0x03, 0x0a, 0x0a,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x05, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x65, 0x74, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x27, 0x0a,
	0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36,
	0x34, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x62,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x22, 0x6e, 0x0a, 0x08,
	0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x4c, 0x4c,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x4c,
	0x4c, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x42, 0x4c, 0x4f, 0x42, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x07,
	0x10, 0x08, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x72, 0x67, 0x73,
	0x22, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x32,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55,
	0x46, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x58, 0x54, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x10, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x72, 0x67, 0x73, 0x22, 0x53, 0x0a, 0x1d, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d,
	0x65, 0x74, 0x61, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x53,
	0x0a, 0x0d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12,
	0x42, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x72, 0x67, 0x73, 0x22,
	0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x53, 0x65, 0x74, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x72, 0x6e, 0x65, 0x74, 0x74, 0x2d, 0x79, 0x75, 0x78, 0x69, 0x61,
	0x6e, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x65,
	0x72, 0x66, 0x65, 0x74, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
}

var (
	file_protos_perfetto_trace_processor_trace_processor_proto_rawDescOnce sync.Once
	file_protos_perfetto_trace_processor_trace_processor_proto_rawDescData = file_protos_perfetto_trace_processor_trace_processor_proto_rawDesc
)

func file_protos_perfetto_trace_processor_trace_processor_proto_rawDescGZIP() []byte {
	file_protos_perfetto_trace_processor_trace_processor_proto_rawDescOnce.Do(func() {
		file_protos_perfetto_trace_processor_trace_processor_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_perfetto_trace_processor_trace_processor_proto_rawDescData)
	})
	return file_protos_perfetto_trace_processor_trace_processor_proto_rawDescData
}

var file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_protos_perfetto_trace_processor_trace_processor_proto_goTypes = []interface{}{
	(RawQueryResult_ColumnDesc_Type)(0),   // 0: perfetto.protos.RawQueryResult.ColumnDesc.Type
	(QueryResult_CellsBatch_CellType)(0),  // 1: perfetto.protos.QueryResult.CellsBatch.CellType
	(ComputeMetricArgs_ResultFormat)(0),   // 2: perfetto.protos.ComputeMetricArgs.ResultFormat
	(*RawQueryArgs)(nil),                  // 3: perfetto.protos.RawQueryArgs
	(*RawQueryResult)(nil),                // 4: perfetto.protos.RawQueryResult
	(*QueryResult)(nil),                   // 5: perfetto.protos.QueryResult
	(*StatusArgs)(nil),                    // 6: perfetto.protos.StatusArgs
	(*StatusResult)(nil),                  // 7: perfetto.protos.StatusResult
	(*ComputeMetricArgs)(nil),             // 8: perfetto.protos.ComputeMetricArgs
	(*ComputeMetricResult)(nil),           // 9: perfetto.protos.ComputeMetricResult
	(*EnableMetatraceArgs)(nil),           // 10: perfetto.protos.EnableMetatraceArgs
	(*EnableMetatraceResult)(nil),         // 11: perfetto.protos.EnableMetatraceResult
	(*DisableAndReadMetatraceArgs)(nil),   // 12: perfetto.protos.DisableAndReadMetatraceArgs
	(*DisableAndReadMetatraceResult)(nil), // 13: perfetto.protos.DisableAndReadMetatraceResult
	(*DescriptorSet)(nil),                 // 14: perfetto.protos.DescriptorSet
	(*GetMetricDescriptorsArgs)(nil),      // 15: perfetto.protos.GetMetricDescriptorsArgs
	(*GetMetricDescriptorsResult)(nil),    // 16: perfetto.protos.GetMetricDescriptorsResult
	(*RawQueryResult_ColumnDesc)(nil),     // 17: perfetto.protos.RawQueryResult.ColumnDesc
	(*RawQueryResult_ColumnValues)(nil),   // 18: perfetto.protos.RawQueryResult.ColumnValues
	(*QueryResult_CellsBatch)(nil),        // 19: perfetto.protos.QueryResult.CellsBatch
	(*common.DescriptorProto)(nil),        // 20: perfetto.protos.DescriptorProto
}
var file_protos_perfetto_trace_processor_trace_processor_proto_depIdxs = []int32{
	17, // 0: perfetto.protos.RawQueryResult.column_descriptors:type_name -> perfetto.protos.RawQueryResult.ColumnDesc
	18, // 1: perfetto.protos.RawQueryResult.columns:type_name -> perfetto.protos.RawQueryResult.ColumnValues
	19, // 2: perfetto.protos.QueryResult.batch:type_name -> perfetto.protos.QueryResult.CellsBatch
	2,  // 3: perfetto.protos.ComputeMetricArgs.format:type_name -> perfetto.protos.ComputeMetricArgs.ResultFormat
	20, // 4: perfetto.protos.DescriptorSet.descriptors:type_name -> perfetto.protos.DescriptorProto
	14, // 5: perfetto.protos.GetMetricDescriptorsResult.descriptor_set:type_name -> perfetto.protos.DescriptorSet
	0,  // 6: perfetto.protos.RawQueryResult.ColumnDesc.type:type_name -> perfetto.protos.RawQueryResult.ColumnDesc.Type
	1,  // 7: perfetto.protos.QueryResult.CellsBatch.cells:type_name -> perfetto.protos.QueryResult.CellsBatch.CellType
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_protos_perfetto_trace_processor_trace_processor_proto_init() }
func file_protos_perfetto_trace_processor_trace_processor_proto_init() {
	if File_protos_perfetto_trace_processor_trace_processor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawQueryArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeMetricArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeMetricResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMetatraceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableMetatraceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAndReadMetatraceArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableAndReadMetatraceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescriptorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricDescriptorsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMetricDescriptorsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawQueryResult_ColumnDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawQueryResult_ColumnValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult_CellsBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ComputeMetricResult_Metrics)(nil),
		(*ComputeMetricResult_MetricsAsPrototext)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_perfetto_trace_processor_trace_processor_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_perfetto_trace_processor_trace_processor_proto_goTypes,
		DependencyIndexes: file_protos_perfetto_trace_processor_trace_processor_proto_depIdxs,
		EnumInfos:         file_protos_perfetto_trace_processor_trace_processor_proto_enumTypes,
		MessageInfos:      file_protos_perfetto_trace_processor_trace_processor_proto_msgTypes,
	}.Build()
	File_protos_perfetto_trace_processor_trace_processor_proto = out.File
	file_protos_perfetto_trace_processor_trace_processor_proto_rawDesc = nil
	file_protos_perfetto_trace_processor_trace_processor_proto_goTypes = nil
	file_protos_perfetto_trace_processor_trace_processor_proto_depIdxs = nil
}
